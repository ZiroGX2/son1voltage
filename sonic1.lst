00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            ; Vladikcomper:	Remember, that this ASM code and some files were heavy
00000000                            ;		modificated, so replacing them may cause compilation errors.
00000000                            
00000000                            	
00000000                            		include	"config.asm"	; S1HS hack configuration
00000000                            ; ===========================================================================
00000000                            ; *                      ???? ???????????? ?? S1HS3                         *
00000000                            ; ===========================================================================
00000000                            ; ???? ???? ??? ???????????? ????????????? ?????????? S1HS3.
00000000                            ; ??????????: ???? ???? ???????????????? ?????? ??? ??? ??????? ?? ?????? 
00000000                            ; ??????????. ??? ?????????? ????????, ???? ???? ?????????? ????????????????.
00000000                            ; ===========================================================================
00000000                            
00000000 =00000000                  
00000000                            		include	"macro.asm"	; S1HS macros
00000000                            
00000000                            ; =============================================================
00000000                            ; Joypad button indexes & values
00000000                            ; For theld and tpress macros
00000000                            ; -------------------------------------------------------------
00000000 =00000007                  iStart		equ 	7
00000000 =00000006                  iA		equ 	6
00000000 =00000005                  iB		equ 	5
00000000 =00000004                  iC		equ 	4
00000000 =00000003                  iRight		equ 	3
00000000 =00000002                  iLeft		equ 	2
00000000 =00000001                  iDown		equ 	1
00000000 =00000000                  iUp		equ 	0
00000000                            
00000000 =00000080                  Start		equ 	1<<7
00000000 =00000040                  A		equ 	1<<6
00000000 =00000020                  C		equ 	1<<5
00000000 =00000010                  B		equ 	1<<4
00000000 =00000008                  Right		equ 	1<<3
00000000 =00000004                  Left		equ 	1<<2
00000000 =00000002                  Down		equ 	1<<1
00000000 =00000001                  Up		equ 	1
00000000                            
00000000 =FFFFF602                  SonicControl	equ	$FFFFF602
00000000 =FFFFF604                  Joypad		equ	$FFFFF604
00000000                            
00000000 =00000000                  Held		equ	0
00000000 =00000001                  Press		equ	1
00000000                            
00000000                            *$FFFFF602	SonicControl|Held
00000000                            *$FFFFF603	SonicControl|Press
00000000                            *$FFFFF604	Joypad|Held
00000000                            *$FFFFF605	Joypad|Press
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check button presses
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            tpress	macro
00000000                            	move.b	(\2+1),d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check if buttons are held
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            theld	macro
00000000                            	move.b	\2,d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to align data
00000000                            ; Arguments:	1 - align value
00000000                            ; -------------------------------------------------------------
00000000                            align	macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to set VRAM write access
00000000                            ; Arguments:	1 - raw VRAM offset
00000000                            ;		2 - register to write access bitfield in (Optional)
00000000                            ; -------------------------------------------------------------
00000000                            vram	macro
00000000                            	if (narg=1)
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),($C00004).l
00000000                            	else
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l HBlank, ErrorTrap, VBlank, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200 5331 4853 2D32 3020 2020+  Generator:	dc.b 'S1HS-20         ' ; Generator
00000210                            
00000210                            ; ===========================================================================
00000210                            
00000210                            ErrorTrap:
00000210 4E71                       		nop	
00000212 4E71                       		nop	
00000214 60FA                       		bra.s	ErrorTrap
00000216                            ; ===========================================================================
00000216                            
00000216                            EntryPoint:
00000216 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000021C 6600                       		bne.s	PortA_Ok
0000021E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000224                            
00000224                            PortA_Ok:
00000224 6600                       		bne.s	PortC_Ok
00000226 4BFA 0000                  		lea	SetupValues(pc),a5
0000022A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000022E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000232 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000236 0200 000F                  		andi.b	#$F,d0
0000023A 6700                       		beq.s	SkipSecurity
0000023C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000244                            
00000244                            SkipSecurity:
00000244 3014                       		move.w	(a4),d0		; check	if VDP works
00000246 7000                       		moveq	#0,d0
00000248 2C40                       		movea.l	d0,a6
0000024A 4E66                       		move.l	a6,usp		; set usp to $0
0000024C 7217                       		moveq	#$17,d1
0000024E                            
0000024E                            VDPInitLoop:
0000024E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000250 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000252 DA47                       		add.w	d7,d5		; next register
00000254 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000258 289D                       		move.l	(a5)+,(a4)
0000025A 3680                       		move.w	d0,(a3)		; clear	the screen
0000025C 3287                       		move.w	d7,(a1)		; stop the Z80
0000025E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000260                            
00000260                            WaitForZ80:
00000260 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000262 66FC                       		bne.s	WaitForZ80	; if not, branch
00000264 7425                       		moveq	#$25,d2
00000266                            
00000266                            Z80InitLoop:
00000266 10DD                       		move.b	(a5)+,(a0)+
00000268 51CA FFFC                  		dbf	d2,Z80InitLoop
0000026C 3480                       		move.w	d0,(a2)
0000026E 3280                       		move.w	d0,(a1)		; start	the Z80
00000270 3487                       		move.w	d7,(a2)		; reset	the Z80
00000272                            
00000272                            ClrRAMLoop:
00000272 2D00                       		move.l	d0,-(a6)
00000274 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000278 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000027A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000027C 761F                       		moveq	#$1F,d3
0000027E                            
0000027E                            ClrCRAMLoop:
0000027E 2680                       		move.l	d0,(a3)
00000280 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000284 289D                       		move.l	(a5)+,(a4)
00000286 7813                       		moveq	#$13,d4
00000288                            
00000288                            ClrVDPStuff:
00000288 2680                       		move.l	d0,(a3)
0000028A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000028E 7A03                       		moveq	#3,d5
00000290                            
00000290                            PSGInitLoop:
00000290 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000294 51CD FFFA                  		dbf	d5,PSGInitLoop
00000298 3480                       		move.w	d0,(a2)
0000029A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000029E 46FC 2700                  		move	#$2700,sr	; set the sr
000002A2                            
000002A2                            PortC_Ok:
000002A2 6000                       		bra.s	GameProgram
000002A4                            ; ===========================================================================
000002A4 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
000002A6 3FFF                       		dc.w $3FFF
000002A8 0100                       		dc.w $100
000002AA                            
000002AA 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
000002AE 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002B2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002B6 00C0 0000                  		dc.l $C00000
000002BA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002BE                            
000002BE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002C2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002C6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002CA 8137 0001                  		dc.b $81, $37, 0, 1
000002CE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002D2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002D6                            
000002D6 4000 0080                  		dc.l $40000080
000002DA                            
000002DA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002E6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002F0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002FB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
00000300                            
00000300 8104                       		dc.w $8104		; value	for VDP	display	mode
00000302 8F02                       		dc.w $8F02		; value	for VDP	increment
00000304 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
00000308 4000 0010                  		dc.l $40000010
0000030C                            
0000030C 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000310                            ; ===========================================================================
00000310                            
00000310                            GameProgram:
00000310 4A79 00C0 0004             		tst.w	($C00004).l
00000316 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000031E 6700                       		beq.s	CheckSumCheck
00000320 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w   ; has checksum routine already run?
00000328 6700 0000                  		beq.w	GameInit		; if yes, branch
0000032C                              
0000032C                            CheckSumCheck:
0000032C                            
0000032C                            ; Vladikcomper: The code that checks cheksum is now commented out
0000032C                            
0000032C                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
0000032C                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C                            ;		move.l	(a1),d0
0000032C                            ;		moveq	#0,d1
0000032C                            ;
0000032C                            ;loc_32C:
0000032C                            ;		add.w	(a0)+,d1
0000032C                            ;		cmp.l	a0,d0
0000032C                            ;		bcc.s	loc_32C
0000032C                            ;		movea.l	#Checksum,a1	; read the checksum
0000032C                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000032C                            ;		bne.w	CheckSumError	; if they don't match, branch
0000032C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 007F                  		move.w	#$7F,d6
00000336                            
00000336 2CC7                       @ClearLoop:	move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,@ClearLoop	; repeat $7F more times
0000033C 1039 00A1 0001             		move.b	($A10001).l,d0
00000342 0200 00C0                  		andi.b	#$C0,d0
00000346 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000034A 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000352                            
00000352                            GameInit:
00000352 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000358 7E00                       		moveq	#0,d7
0000035A 3C3C 3F7F                  		move.w	#$3F7F,d6
0000035E                            
0000035E                            GameClrRAM:
0000035E 2CC7                       		move.l	d7,(a6)+
00000360 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000364 6100 0000                  		bsr.w	VDPSetupGame
00000368 6100 0000                  		bsr.w	SoundDriverLoad
0000036C 6100 0000                  		bsr.w	JoypadInit
00000370 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000376                            
00000376                            MainGameLoop:
00000376 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000037A 0240 001C                  		andi.w	#%11100,d0	; apply bit mask, so d0 will be <= $1C and multiple of 4
0000037E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000382 60F2                       		bra.s	MainGameLoop
00000384                            
00000384                            ; ===========================================================================
00000384                            ; ---------------------------------------------------------------------------
00000384                            ; Main game mode array
00000384                            ; ---------------------------------------------------------------------------
00000384                            
00000384                            GameModeArray:
00000384 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000388 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)    
0000038C 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000390 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000394 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000398 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
0000039C 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A0 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003A4 6000 0000                  		bra.w	SegaScreen2
000003A8 4E75                       		rts
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            ; Vladikcomper:	Red Screen is now commented out
000003AA                            
000003AA                            ;CheckSumError:
000003AA                            ;		bsr.w	VDPSetupGame
000003AA                            ;		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003AA                            ;		moveq	#$3F,d7
000003AA                            ;
000003AA                            ;CheckSum_Red:
000003AA                            ;		move.w	#$E,($C00000).l	; fill screen with colour red
000003AA                            ;		dbf	d7,CheckSum_Red	; repeat $3F more times
000003AA                            ;
000003AA                            ;CheckSum_Loop:
000003AA                            ;		bra.s	CheckSum_Loop
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            ; Error vectors are now powered by macro, that helped to save lots of space
000003AA                            
0000040E                            
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            loc_43A:
0000040E 46FC 2700                  		move	#$2700,sr	; disable interrupts
00000412 544F                       		addq.w	#2,sp
00000414 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000418 544F                       		addq.w	#2,sp
0000041A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w ; save all registers to RAM
00000420 6100 0000                  		bsr.w	ShowErrorMsg
00000424 202F 0002                  		move.l	2(sp),d0	; load offset where the error happened to d0
00000428 6100 0000                  		bsr.w	ShowErrorOffset	; display the offset
0000042C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000430 6100 0000                  		bsr.w	ShowErrorOffset
00000434 6000                       		bra.s	QuitError
00000436                            ; ===========================================================================
00000436                            
00000436                            loc_462:
00000436 46FC 2700                  		move	#$2700,sr	; disable interrupts
0000043A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w ; save all registers to RAM
00000440 6100 0000                  		bsr.w	ShowErrorMsg
00000444 202F 0002                  		move.l	2(sp),d0	; load offset where the error happened to d0
00000448 6100 0000                  		bsr.w	ShowErrorOffset	; display the offset
0000044C                            
0000044C                            QuitError:
0000044C 6100 0000                  		bsr.w	ErrorWaitForC
00000450 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7 ; load saved registers from RAM
00000456 46FC 2300                  		move	#$2300,sr
0000045A 4E73                       		rte	
0000045C                            
0000045C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000045C                            
0000045C                            
0000045C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000045C 4DF9 00C0 0000             		lea	($C00000).l,a6
0000046C 41F9 0000 0000             		lea	(Art_Text).l,a0
00000472 323C 027F                  		move.w	#$27F,d1
00000476                            
00000476                            Error_LoadGfx:
00000476 3C98                       		move.w	(a0)+,(a6)
00000478 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000047C                            
0000047C 7000                       		moveq	#0,d0			; clear	d0
0000047E 1038 FC44                  		move.b	($FFFFFC44).w,d0	; load error code
00000482 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000486 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000494 7212                       		moveq	#$12,d1			; number of characters
00000496                            
00000496                            Error_LoopChars:
00000496 7000                       		moveq	#0,d0
00000498 1018                       		move.b	(a0)+,d0
0000049A 0640 0790                  		addi.w	#$790,d0
0000049E 3C80                       		move.w	d0,(a6)			; display char
000004A0 51C9 FFF4                  		dbf	d1,Error_LoopChars	; repeat for number of characters
000004A4 4E75                       		rts	
000004A6                            ; End of function ShowErrorMsg
000004A6                            
000004A6                            ; ===========================================================================
000004A6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004AA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004AE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004B2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004B6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004BA 0000                       		dc.w asc_5A6-ErrorText
000004BC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004CF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004E2 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004F5 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000508 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000051B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000052E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000541 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000554 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000567 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
0000057A 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000058E 00                         		even
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ;sub_5BA:				; XREF: loc_43A; loc_462
0000058E                            ShowErrorOffset:
0000058E 3CBC 07CA                  		move.w	#$7CA,(a6)	; display '$' char
00000592 7407                       		moveq	#7,d2
00000594                            
00000594 E998                       @loop:		rol.l	#4,d0
00000596 6100                       		bsr.s	ErrOffsetDigit
00000598 51CA FFFA                  		dbf	d2,@loop	; repeat 7 more times
0000059C 4E75                       		rts
0000059E                            
0000059E                            ; ---------------------------------------------------------------------------
0000059E                            
0000059E                            ErrOffsetDigit:
0000059E 3200                       		move.w	d0,d1
000005A0 0241 000F                  		andi.w	#$F,d1
000005A4 0C41 000A                  		cmpi.w	#$A,d1		; is digit more or equals to $A?
000005A8 6500                       		bcs.s	@display	; if not, branch
000005AA 5E41                       		addq.w	#7,d1
000005AC                            
000005AC 0641 07C0                  @display:	addi.w	#$7C0,d1
000005B0 3C81                       		move.w	d1,(a6)		; display digit
000005B2 4E75                       		rts
000005B4                            ; End of function ShowErrorOffset
000005B4                            
000005B4                            
000005B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005B4                            
000005B4                            
000005B4                            ErrorWaitForC:				; XREF: loc_478
000005B4 6100 0000                  		bsr.w	ReadJoypads
000005B8 0C38 0020 F605             		cmpi.b	#C,(Joypad|Press)	; is button C pressed?
000005BE 6600 FFF4                  		bne.w	ErrorWaitForC		; if not, branch
000005C2 4E75                       		rts	
000005C4                            ; End of function ErrorWaitForC
000005C4                            
000005C4                            ; ===========================================================================
000005C4                            
000005C4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AE4                            		even
00000AE4                            
00000AE4                            
00000AE4                            ; ===========================================================================
00000AE4                            ; Subroutine that runs during Vertical Interruption
00000AE4                            ; ===========================================================================
00000AE4                            
00000AE4                            ;loc_B10:
00000AE4                            VBlank:					; XREF: Vectors
00000AE4 48E7 FFFE                  		movem.l	d0-a6,-(sp)	; save all the registers to the stack
00000AE8 4A38 F62A                  		tst.b	($FFFFF62A).w	; is VBlank routine set to #0?
00000AEC 6700                       		beq.s	VBlank_Sub00	; if yes, branch
00000AEE 3039 00C0 0004             		move.w	($C00004).l,d0
00000AF4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AFE 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B06 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w ; is Sega PAL (European)?
00000B0C 6700                       		beq.s	loc_B42		; if not, branch
00000B0E 303C 0700                  		move.w	#$700,d0
00000B12 51C8 FFFE                  		dbf	d0,*		; delay processor
00000B16                            
00000B16                            loc_B42:
00000B16 1038 F62A                  		move.b	($FFFFF62A).w,d0 ; load VBlank routine number
00000B1A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w ; clear it
00000B20 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B26 0240 003E                  		andi.w	#$3E,d0
00000B2A 303B 0000                  		move.w	VBlank_Routines(pc,d0.w),d0
00000B2E 4EBB 0000                  		jsr	VBlank_Routines(pc,d0.w)
00000B32                            
00000B32                            loc_B5E:				; XREF: VBlank_Sub00
00000B32 4EB9 0000 0000             		jsr	UpdateMusic
00000B38                            
00000B38                            loc_B64:				; XREF: loc_D50
00000B38 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B3C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6	; load saved registers from the stack
00000B40 4E73                       		rte
00000B42                            
00000B42                            ; ===========================================================================
00000B42                            ;off_B6E:
00000B42                            VBlank_Routines:
00000B42 0000                       		dc.w VBlank_Sub00-VBlank_Routines ; $00
00000B44 0000                       		dc.w VBlank_Sub02-VBlank_Routines ; $02
00000B46 0000                       		dc.w VBlank_Sub04-VBlank_Routines ; $04
00000B48 0000                       		dc.w VBlank_Sub06-VBlank_Routines ; $06
00000B4A 0000                       		dc.w VBlank_Sub08-VBlank_Routines ; $08
00000B4C 0000                       		dc.w VBlank_Sub0A-VBlank_Routines ; $0A
00000B4E 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $0C
00000B50 0000                       		dc.w VBlank_Sub0E-VBlank_Routines ; $0E
00000B52 0000                       		dc.w VBlank_Sub10-VBlank_Routines ; $10
00000B54 0000                       		dc.w VBlank_Sub12-VBlank_Routines ; $12
00000B56 0000                       		dc.w VBlank_Sub14-VBlank_Routines ; $14
00000B58 0000                       		dc.w VBlank_Sub16-VBlank_Routines ; $16
00000B5A 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $18
00000B5C                            ; ===========================================================================
00000B5C                            
00000B5C                            ;loc_B88:				; XREF: VBlank; VBlank_Routines
00000B5C                            VBlank_Sub00:
00000B5C 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w	; is mode pre-Level?
00000B62 6700                       		beq.s	loc_B9A			; if yes, branch
00000B64 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w	; is mode Level?
00000B6A 6600 FFC6                  		bne.w	loc_B5E			; if yes, branch
00000B6E                            
00000B6E                            loc_B9A:
00000B6E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	; is level LZ ?
00000B74 6600 FFBC                  		bne.w	loc_B5E			; if not, branch
00000B78 3039 00C0 0004             		move.w	($C00004).l,d0
00000B7E 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00000B84 6700                       		beq.s	loc_BBA			; if not, branch
00000B86 303C 0700                  		move.w	#$700,d0
00000B8A 51C8 FFFE                  		dbf	d0,*			; delay processor
00000B8E                            
00000B8E                            loc_BBA:
00000B8E 31FC 0001 F644             		move.w	#1,($FFFFF644).w	; enable HBlank
00000B94 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B9C                            
00000B9C                            loc_BC8:
00000B9C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BA4 66F6                       		bne.s	loc_BC8
00000BA6 4A38 F64E                  		tst.b	($FFFFF64E).w		; is water above top of screen?
00000BAA 6600                       		bne.s	loc_BFE			; if yes, branch
00000BAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BB2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BB8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BBE 3ABC 977F                  		move.w	#$977F,(a5)
00000BC2 3ABC C000                  		move.w	#$C000,(a5)
00000BC6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BD0 6000                       		bra.s	loc_C22
00000BD2                            ; ===========================================================================
00000BD2                            
00000BD2                            loc_BFE:				; XREF: loc_BC8
00000BD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BDE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BE4 3ABC 977F                  		move.w	#$977F,(a5)
00000BE8 3ABC C000                  		move.w	#$C000,(a5)
00000BEC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF6                            
00000BF6                            loc_C22:				; XREF: loc_BC8
00000BF6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BFA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C02 6000 FF2E                  		bra.w	loc_B5E
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            ;loc_C32:
00000C06                            VBlank_Sub02:				; XREF: VBlank_Routines
00000C06 6100 0000                  		bsr.w	sub_106E
00000C0A                            
00000C0A                            ;loc_F9A:
00000C0A                            VBlank_Sub14:				; XREF: VBlank_Routines
00000C0A 4A78 F614                  		tst.w	($FFFFF614).w
00000C0E 6700 0000                  		beq.w	locret_C42
00000C12 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C16                            
00000C16                            locret_C42:
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            ;loc_C44:
00000C18                            VBlank_Sub04:				; XREF: VBlank_Routines
00000C18 6100 0000                  		bsr.w	sub_106E
00000C1C 6100 0000                  		bsr.w	sub_6886
00000C20 6100 0000                  		bsr.w	sub_1642
00000C24 4A78 F614                  		tst.w	($FFFFF614).w		; is there time	left on	the demo?
00000C28 6700 0000                  		beq.w	locret_C5C		; if time is over, branch
00000C2C 5378 F614                  		subq.w	#1,($FFFFF614).w	; subtract 1 from time left
00000C30                            
00000C30                            locret_C5C:
00000C30 4E75                       		rts	
00000C32                            ; ===========================================================================
00000C32                            
00000C32                            ;loc_C5E:
00000C32                            VBlank_Sub06:				; XREF: VBlank_Routines
00000C32 6100 0000                  		bsr.w	sub_106E
00000C36 4E75                       		rts	
00000C38                            ; ===========================================================================
00000C38                            
00000C38                            ;loc_C64:
00000C38                            VBlank_Sub10:				; XREF: VBlank_Routines
00000C38 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C3E 6700 0000                  		beq.w	VBlank_Sub0A		; if yes, branch
00000C42                            
00000C42                            ;loc_C5E:
00000C42                            VBlank_Sub08:				; XREF: VBlank_Routines
00000C42 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C4A                            
00000C4A                            loc_C76:
00000C4A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C52 66F6                       		bne.s	loc_C76		; if not, branch
00000C54 6100 0000                  		bsr.w	ReadJoypads
00000C58 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C5C 6600                       		bne.s	loc_CB0
00000C5E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C64 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C6A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C70 3ABC 977F                  		move.w	#$977F,(a5)
00000C74 3ABC C000                  		move.w	#$C000,(a5)
00000C78 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C7E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C82 6000                       		bra.s	loc_CD4
00000C84                            ; ===========================================================================
00000C84                            
00000C84                            loc_CB0:				; XREF: loc_C76
00000C84 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C8A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C90 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C96 3ABC 977F                  		move.w	#$977F,(a5)
00000C9A 3ABC C000                  		move.w	#$C000,(a5)
00000C9E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CA4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA8                            
00000CA8                            loc_CD4:				; XREF: loc_C76
00000CA8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CB8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CBE 3ABC 977F                  		move.w	#$977F,(a5)
00000CC2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CC6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CDC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CE2 3ABC 977F                  		move.w	#$977F,(a5)
00000CE6 3ABC 7800                  		move.w	#$7800,(a5)
00000CEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CFA                            
00000CFA                            loc_D50:
00000CFA 33FC 0000 00A1 1100                        move.w	#0,($A11100).l
00000D02 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D08 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D0E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D14 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D1A 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D20 6400                       		bcc.s	Demo_Time
00000D22 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D28 588F                       		addq.l	#4,sp
00000D2A 6000 FE0C                  		bra.w	loc_B64
00000D2E                            
00000D2E                            ; ---------------------------------------------------------------------------
00000D2E                            ; Subroutine to	run a demo for an amount of time
00000D2E                            ; ---------------------------------------------------------------------------
00000D2E                            
00000D2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D2E                            
00000D2E                            
00000D2E                            Demo_Time:				; XREF: loc_D50; HBlank
00000D2E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D32 4EB9 0000 0000             		jsr	AniArt_Load
00000D38 4EB9 0000 0000             		jsr	HudUpdate
00000D3E 6100 0000                  		bsr.w	sub_165E
00000D42 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D46 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D4A 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D4E                            
00000D4E                            Demo_TimeEnd:
00000D4E 4E75                       		rts	
00000D50                            ; End of function Demo_Time
00000D50                            
00000D50                            ; ===========================================================================
00000D50                            
00000D50                            ;loc_DA6:
00000D50                            VBlank_Sub0A:				; XREF: VBlank_Routines
00000D50 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D58                            
00000D58                            loc_DAE:
00000D58 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D60 66F6                       		bne.s	loc_DAE		; if not, branch
00000D62 6100 0000                  		bsr.w	ReadJoypads
00000D66 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D6C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D72 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D78 3ABC 977F                  		move.w	#$977F,(a5)
00000D7C 3ABC C000                  		move.w	#$C000,(a5)
00000D80 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D90 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D96 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D9C 3ABC 977F                  		move.w	#$977F,(a5)
00000DA0 3ABC 7800                  		move.w	#$7800,(a5)
00000DA4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DB4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DBA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DC0 3ABC 977F                  		move.w	#$977F,(a5)
00000DC4 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DC8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DD2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000DDA 6100 0000                  		bsr.w	PalCycle_SS
00000DDE 4EB9 0000 0000             		jsr	ProcessDMAQueue
00000DE4                            
00000DE4                            loc_E64:
00000DE4 4A78 F614                  		tst.w	($FFFFF614).w
00000DE8 6700 0000                  		beq.w	locret_E70
00000DEC 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DF0                            
00000DF0                            locret_E70:
00000DF0 4E75                       		rts	
00000DF2                            ; ===========================================================================
00000DF2                            
00000DF2                            ;loc_E72:
00000DF2                            VBlank_Sub0C:				; XREF: VBlank_Routines
00000DF2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DFA                            
00000DFA                            loc_E7A:
00000DFA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E02 66F6                       		bne.s	loc_E7A		; if not, branch
00000E04 6100 0000                  		bsr.w	ReadJoypads
00000E08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0C 6600                       		bne.s	loc_EB4
00000E0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E20 3ABC 977F                  		move.w	#$977F,(a5)
00000E24 3ABC C000                  		move.w	#$C000,(a5)
00000E28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E32 6000                       		bra.s	loc_ED8
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_EB4:				; XREF: loc_E7A
00000E34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E46 3ABC 977F                  		move.w	#$977F,(a5)
00000E4A 3ABC C000                  		move.w	#$C000,(a5)
00000E4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E58                            
00000E58                            loc_ED8:				; XREF: loc_E7A
00000E58 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E62 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E68 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E6E                            
00000E6E                            loc_EEE:
00000E6E 3ABC 977F                  		move.w	#$977F,(a5)
00000E72 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E80 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E86 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E8C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E92 3ABC 977F                  		move.w	#$977F,(a5)
00000E96 3ABC 7800                  		move.w	#$7800,(a5)
00000E9A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EA0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA4 4EB9 0000 0000             		jsr	ProcessDMAQueue
00000EAA                            
00000EAA                            loc_F54:
00000EAA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000EB2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000EB8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000EBE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000EC4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000ECA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000ECE 4EB9 0000 0000             		jsr	AniArt_Load
00000ED4 4EB9 0000 0000             		jsr	HudUpdate
00000EDA 6100 0000                  		bsr.w	sub_1642
00000EDE 4E75                       		rts	
00000EE0                            ; ===========================================================================
00000EE0                            
00000EE0                            ;loc_F8A:
00000EE0                            VBlank_Sub0E:				; XREF: VBlank_Routines
00000EE0 6100 0000                  		bsr.w	sub_106E
00000EE4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EE8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000EEE 4E75                       		rts	
00000EF0                            ; ===========================================================================
00000EF0                            
00000EF0                            ;loc_F9A:
00000EF0                            VBlank_Sub12:				; XREF: VBlank_Routines
00000EF0 6100 0000                  		bsr.w	sub_106E
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 6000 0000                  		bra.w	sub_1642
00000EFC                            ; ===========================================================================
00000EFC                            
00000EFC                            ;loc_F9A:
00000EFC                            VBlank_Sub16:				; XREF: VBlank_Routines
00000EFC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F04                            
00000F04                            loc_FAE:
00000F04 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F0C 66F6                       		bne.s	loc_FAE		; if not, branch
00000F0E 6100 0000                  		bsr.w	ReadJoypads
00000F12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F18 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F1E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F24 3ABC 977F                  		move.w	#$977F,(a5)
00000F28 3ABC C000                  		move.w	#$C000,(a5)
00000F2C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F36 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F42 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC 7800                  		move.w	#$7800,(a5)
00000F50 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F60 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F66 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F6C 3ABC 977F                  		move.w	#$977F,(a5)
00000F70 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F74 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F7E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F86 4EB9 0000 0000             		jsr	ProcessDMAQueue
00000F8C                            
00000F8C                            loc_1060:
00000F8C 4A78 F614                  		tst.w	($FFFFF614).w
00000F90 6700 0000                  		beq.w	locret_106C
00000F94 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F98                            
00000F98                            locret_106C:
00000F98 4E75                       		rts	
00000F9A                            
00000F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F9A                            
00000F9A                            
00000F9A                            sub_106E:				; XREF: VBlank_Sub02; et al
00000F9A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA2                            
00000FA2                            loc_1076:
00000FA2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FAA 66F6                       		bne.s	loc_1076	; if not, branch
00000FAC 6100 0000                  		bsr.w	ReadJoypads
00000FB0 4A38 F64E                  		tst.b	($FFFFF64E).w
00000FB4 6600                       		bne.s	loc_10B0
00000FB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FBC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FC8 3ABC 977F                  		move.w	#$977F,(a5)
00000FCC 3ABC C000                  		move.w	#$C000,(a5)
00000FD0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FD6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FDA 6000                       		bra.s	loc_10D4
00000FDC                            ; ===========================================================================
00000FDC                            
00000FDC                            loc_10B0:				; XREF: sub_106E
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000                            
00001000                            loc_10D4:				; XREF: sub_106E
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001050 4E75                       		rts
00001052                            ; End of function sub_106E
00001052                            
00001052                            ; ---------------------------------------------------------------------------
00001052                            ; Subroutine which runs during Horizontal Interruption
00001052                            ; Moves pallets from the RAM to CRAM
00001052                            ; ---------------------------------------------------------------------------
00001052                            
00001052                            ;PalToCRAM:
00001052                            HBlank:
00001052 46FC 2700                  		move	#$2700,sr	; disable interrupts
00001056 4A78 F644                  		tst.w	($FFFFF644).w	; was the pallete set to change?
0000105A 6700                       		beq.s	HBlank_Rts	; if not, branch
0000105C 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001062 48E7 00C0                  		movem.l	a0-a1,-(sp)	; move registers to the stack
00001066 43F9 00C0 0000             		lea	($C00000).l,a1
0000106C 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001070 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001078 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 2298                       		move.l	(a0)+,(a1)
0000109A 2298                       		move.l	(a0)+,(a1)
0000109C 2298                       		move.l	(a0)+,(a1)
0000109E 2298                       		move.l	(a0)+,(a1)
000010A0 2298                       		move.l	(a0)+,(a1)
000010A2 2298                       		move.l	(a0)+,(a1)
000010A4 2298                       		move.l	(a0)+,(a1)
000010A6 2298                       		move.l	(a0)+,(a1)
000010A8 2298                       		move.l	(a0)+,(a1)
000010AA 2298                       		move.l	(a0)+,(a1)
000010AC 2298                       		move.l	(a0)+,(a1)
000010AE 2298                       		move.l	(a0)+,(a1)
000010B0 2298                       		move.l	(a0)+,(a1)
000010B2 2298                       		move.l	(a0)+,(a1)
000010B4 2298                       		move.l	(a0)+,(a1)
000010B6 2298                       		move.l	(a0)+,(a1)
000010B8 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000010BE 4CDF 0300                  		movem.l	(sp)+,a0-a1	; load saved registers from the stack
000010C2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010C6 6600                       		bne.s	loc_119E
000010C8                            
000010C8                            HBlank_Rts:
000010C8 4E73                       		rte
000010CA                            ; ===========================================================================
000010CA                            
000010CA                            loc_119E:				; XREF: PalToCRAM
000010CA 4238 F64F                  		clr.b	($FFFFF64F).w
000010CE 48E7 FFFE                  		movem.l	d0-a6,-(sp)	; move all the registers to the stack
000010D2 6100 FC5A                  		bsr.w	Demo_Time
000010D6 4EB9 0000 0000             		jsr	UpdateMusic
000010DC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6	; load saved registers from the stack
000010E0 4E73                       		rte	
000010E2                            ; End of function PalToCRAM
000010E2                            
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            ; Subroutine to	initialise joypads
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            JoypadInit:				; XREF: GameClrRAM
000010E2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010EA                            
000010EA                            Joypad_WaitZ80:
000010EA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000010F2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000010F4 7040                       		moveq	#$40,d0
000010F6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010FC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001102 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001108 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001110 4E75                       		rts	
00001112                            ; End of function JoypadInit
00001112                            
00001112                            ; ---------------------------------------------------------------------------
00001112                            ; Subroutine to	read joypad input, and send it to the RAM
00001112                            ; ---------------------------------------------------------------------------
00001112                            
00001112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001112                            
00001112                            
00001112                            ReadJoypads:
00001112 41F8 F604                  		lea	(Joypad),a0	; address where joypad states are written
00001116 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
0000111C 6100                       		bsr.s	Joypad_Read	; do the first joypad
0000111E 5449                       		addq.w	#2,a1		; do the second	joypad
00001120                            
00001120                            Joypad_Read:
00001120 12BC 0000                  		move.b	#0,(a1)
00001124 4E71                       		nop	
00001126 4E71                       		nop	
00001128 1011                       		move.b	(a1),d0
0000112A E508                       		lsl.b	#2,d0
0000112C 0200 00C0                  		andi.b	#$C0,d0
00001130 12BC 0040                  		move.b	#$40,(a1)
00001134 4E71                       		nop	
00001136 4E71                       		nop	
00001138 1211                       		move.b	(a1),d1
0000113A 0201 003F                  		andi.b	#$3F,d1
0000113E 8001                       		or.b	d1,d0
00001140 4600                       		not.b	d0
00001142 1210                       		move.b	(a0),d1
00001144 B101                       		eor.b	d0,d1
00001146 10C0                       		move.b	d0,(a0)+
00001148 C200                       		and.b	d0,d1
0000114A 10C1                       		move.b	d1,(a0)+
0000114C 4E75                       		rts	
0000114E                            ; End of function ReadJoypads
0000114E                            
0000114E                            
0000114E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000114E                            
0000114E                            
0000114E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000114E 41F9 00C0 0004             		lea	($C00004).l,a0
00001154 43F9 00C0 0000             		lea	($C00000).l,a1
0000115A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001160 7E12                       		moveq	#$12,d7
00001162                            
00001162                            VDP_Loop:
00001162 309A                       		move.w	(a2)+,(a0)
00001164 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001168                            
00001168 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000116E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001172 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001178 7000                       		moveq	#0,d0
0000117A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001184 3E3C 003F                  		move.w	#$3F,d7
00001188                            
00001188                            VDP_ClrCRAM:
00001188 3280                       		move.w	d0,(a1)
0000118A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000118E                            
0000118E 42B8 F616                  		clr.l	($FFFFF616).w
00001192 42B8 F61A                  		clr.l	($FFFFF61A).w
00001196 2F01                       		move.l	d1,-(sp)
00001198 4BF9 00C0 0004             		lea	($C00004).l,a5
0000119E 3ABC 8F01                  		move.w	#$8F01,(a5)
000011A2 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000011A8 3ABC 9780                  		move.w	#$9780,(a5)
000011AC 2ABC 4000 0080             		move.l	#$40000080,(a5)
000011B2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000011BA                            
000011BA                            loc_128E:
000011BA 3215                       		move.w	(a5),d1
000011BC 0801 0001                  		btst	#1,d1
000011C0 66F8                       		bne.s	loc_128E
000011C2                            
000011C2 3ABC 8F02                  		move.w	#$8F02,(a5)
000011C6 221F                       		move.l	(sp)+,d1
000011C8 4E75                       		rts	
000011CA                            ; End of function VDPSetupGame
000011CA                            
000011CA                            ; ===========================================================================
000011CA 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000011D2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000011DA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000011E2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000011EA 9001 9100 9200             		dc.w $9001, $9100, $9200
000011F0                            
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            ; Subroutine to	clear the screen
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            
000011F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F0                            
000011F0                            
000011F0                            ClearScreen:
000011F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F6 3ABC 8F01                  		move.w	#$8F01,(a5)
000011FA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001200 3ABC 9780                  		move.w	#$9780,(a5)
00001204 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000120A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001212                            
00001212                            loc_12E6:
00001212 3215                       		move.w	(a5),d1
00001214 0801 0001                  		btst	#1,d1
00001218 66F8                       		bne.s	loc_12E6
0000121A                            
0000121A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000121E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001224 3ABC 8F01                  		move.w	#$8F01,(a5)
00001228 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000122E 3ABC 9780                  		move.w	#$9780,(a5)
00001232 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001238 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001240                            
00001240                            loc_1314:
00001240 3215                       		move.w	(a5),d1
00001242 0801 0001                  		btst	#1,d1
00001246 66F8                       		bne.s	loc_1314
00001248                            
00001248 3ABC 8F02                  		move.w	#$8F02,(a5)
0000124C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001254 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000125C 43F8 F800                  		lea	($FFFFF800).w,a1
00001260 7000                       		moveq	#0,d0
00001262 323C 00A0                  		move.w	#$A0,d1
00001266                            
00001266                            loc_133A:
00001266 22C0                       		move.l	d0,(a1)+
00001268 51C9 FFFC                  		dbf	d1,loc_133A
0000126C                            
0000126C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001270 7000                       		moveq	#0,d0
00001272 323C 0100                  		move.w	#$100,d1
00001276                            
00001276                            loc_134A:
00001276 22C0                       		move.l	d0,(a1)+
00001278 51C9 FFFC                  		dbf	d1,loc_134A
0000127C 4E75                       		rts	
0000127E                            ; End of function ClearScreen
0000127E                            
0000127E                            ; ---------------------------------------------------------------------------
0000127E                            ; Subroutine to	load the sound driver
0000127E                            ; ---------------------------------------------------------------------------
0000127E                            
0000127E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000127E                            
0000127E                            
0000127E                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
0000127E 4E71                       		nop	
00001280 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l	; stop the Z80
00001288 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l	; reset the Z80
00001290 41F9 0000 0000             		lea	(Kos_Z80).l,a0		; load sound driver
00001296 43F9 00A0 0000             		lea	($A00000).l,a1
0000129C 6100 0000                  		bsr.w	KosDec			; decompress sound driver
000012A0 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000012A8 4E71                       		nop
000012AA 4E71                       		nop
000012AC 4E71                       		nop
000012AE 4E71                       		nop
000012B0 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l	; reset the Z80
000012B8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l		; start	the Z80
000012C0 4E75                       		rts	
000012C2                            ; End of function SoundDriverLoad
000012C2                            
000012C2                            ; ---------------------------------------------------------------------------
000012C2                            ; Subroutine to	play a sound or	music track
000012C2                            ; ---------------------------------------------------------------------------
000012C2                            
000012C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C2                            
000012C2                            
000012C2                            PlaySound:
000012C2 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000012C6 4E75                       		rts	
000012C8                            ; End of function PlaySound
000012C8                            
000012C8                            ; ---------------------------------------------------------------------------
000012C8                            ; Subroutine to	play a special sound/music (E0-E4)
000012C8                            ;
000012C8                            ; E0 - Fade out
000012C8                            ; E1 - Sega
000012C8                            ; E2 - Speed up
000012C8                            ; E3 - Normal speed
000012C8                            ; E4 - Stop
000012C8                            ; ---------------------------------------------------------------------------
000012C8                            
000012C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C8                            
000012C8                            
000012C8                            PlaySound_Special:
000012C8 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000012CC 4E75                       		rts	
000012CE                            ; End of function PlaySound_Special
000012CE                            
000012CE                            ; ===========================================================================
000012CE                            
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            ; Subroutine to	pause the game
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            
000012CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012CE                            
000012CE                            
000012CE                            PauseGame:				; XREF: Level_MainLoop; et al
000012CE 4E71                       		nop	
000012D0 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000012D4 6700                       		beq.s	Unpause		; if not, branch
000012D6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000012DA 6600                       		bne.s	loc_13BE	; if yes, branch
000012DC                            
000012DC 0838 0007 F605             		btst	#iStart,(Joypad|Press)	; is Start button pressed?
000012E2 6700                       		beq.s	Pause_DoNothing		; if not, branch
000012E4                            
000012E4                            loc_13BE:
000012E4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000012EA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000012F0                            
000012F0                            loc_13CA:
000012F0 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000012F6 6100 0000                  		bsr.w	DelayProgram
000012FA 4A38 FFE1                  		tst.b	($FFFFFFE1).w		; is slow-motion cheat on?
000012FE 6700                       		beq.s	Pause_ChkStart		; if not, branch
00001300 0838 0006 F605             		btst	#iA,(Joypad|Press)	; is button A pressed?
00001306 6700                       		beq.s	Pause_ChkBC		; if not, branch
00001308 11FC 0004 F600             		move.b	#4,($FFFFF600).w	; set game mode to 4 (title screen)
0000130E 4E71                       		nop	
00001310 6000                       		bra.s	loc_1404
00001312                            ; ===========================================================================
00001312                            
00001312                            Pause_ChkBC:				; XREF: PauseGame
00001312 0838 0005 F604             		btst	#iB,(Joypad|Held)	; is button B held?
00001318 6600                       		bne.s	Pause_SlowMo		; if yes, branch
0000131A 0838 0004 F605             		btst	#iC,(Joypad|Press) 	; is button C pressed?
00001320 6600                       		bne.s	Pause_SlowMo		; if yes, branch
00001322                            
00001322                            Pause_ChkStart:
00001322 0838 0007 F605             		btst	#iStart,(Joypad|Press)	; is Start button pressed?
00001328 67C6                       		beq.s	loc_13CA		; if not, branch
0000132A                            
0000132A                            loc_1404:
0000132A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001330                            
00001330                            Unpause:
00001330 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001336                            
00001336                            Pause_DoNothing:
00001336 4E75                       		rts	
00001338                            ; ===========================================================================
00001338                            
00001338                            Pause_SlowMo:				; XREF: PauseGame
00001338 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000133E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001344 4E75                       		rts	
00001346                            ; End of function PauseGame
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	display	patterns via the VDP
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001346 4DF9 00C0 0000             		lea	($C00000).l,a6
0000134C 283C 0080 0000             		move.l	#$800000,d4
00001352                            ;loc_142C:
00001352                            VDPGfx_Loop:
00001352 2D40 0004                  		move.l	d0,4(a6)	; set VDP access
00001356 3601                       		move.w	d1,d3		; load cols counter to d3
00001358                            ;loc_1432:
00001358                            VDPGfx_Char:
00001358 3C99                       		move.w	(a1)+,(a6)	; move plane mappings to VRAM
0000135A 51CB FFFC                  		dbf	d3,VDPGfx_Char	; repeat for the amount of cols
0000135E                            
0000135E D084                       		add.l	d4,d0		; switch to the next screen row
00001360 51CA FFF0                                  dbf	d2,VDPGfx_Loop	; repeat for the amount of rows
00001364 4E75                       		rts
00001366                            ; End of function ShowVDPGraphics
00001366                            
00001366                            ; ---------------------------------------------------------------------------
00001366                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00001366                            ; to be issued the next time ProcessDMAQueue is called.
00001366                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00001366                            ; by issuing the commands (this subroutine DOES check for overflow)
00001366                            ; ---------------------------------------------------------------------------
00001366                             
00001366                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001366                            
00001366                            QueueDMATransfer:
00001366 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
0000136A B2FC C8FC                  		cmpa.w	#$C8FC,a1
0000136E 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001370                             
00001370 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00001374 1003                       		move.b	d3,d0
00001376 32C0                       		move.w	d0,(a1)+ ; store command
00001378                             
00001378 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
0000137C E04B                       		lsr.w	#8,d3
0000137E 1003                       		move.b	d3,d0
00001380 32C0                       		move.w	d0,(a1)+ ; store command
00001382                             
00001382 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
00001386 E289                       		lsr.l	#1,d1
00001388 1001                       		move.b	d1,d0
0000138A 32C0                       		move.w	d0,(a1)+ ; store command
0000138C                             
0000138C 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001390 E089                       		lsr.l	#8,d1
00001392 1001                       		move.b	d1,d0
00001394 32C0                       		move.w	d0,(a1)+ ; store command
00001396                             
00001396 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
0000139A E089                       		lsr.l	#8,d1
0000139C 1001                       		move.b	d1,d0
0000139E 32C0                       		move.w	d0,(a1)+ ; store command
000013A0                             
000013A0 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000013A6 E58A                       		lsl.l	#2,d2
000013A8 E44A                       		lsr.w	#2,d2
000013AA 4842                       		swap	d2
000013AC 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
000013B2 22C2                       		move.l	d2,(a1)+ ; store command
000013B4                             
000013B4 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
000013B8 B2FC C8FC                  		cmpa.w	#$C8FC,a1
000013BC 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000013BE 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
000013C2                            
000013C2                            QueueDMATransfer_Done:
000013C2 4E75                       		rts
000013C4                            ; End of function QueueDMATransfer
000013C4                             
000013C4                             
000013C4                            ; ---------------------------------------------------------------------------
000013C4                            ; Subroutine for issuing all VDP commands that were queued
000013C4                            ; ---------------------------------------------------------------------------
000013C4                             
000013C4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000013C4                            
000013C4                            ProcessDMAQueue:
000013C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000013CA 43F8 C800                  		lea	($FFFFC800).w,a1
000013CE                            
000013CE                            ProcessDMAQueue_Loop:
000013CE 3019                       		move.w	(a1)+,d0
000013D0 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
000013D2 3A80                       		move.w	d0,(a5)		; transfer length
000013D4 3A99                       		move.w	(a1)+,(a5)	; transfer length
000013D6 3A99                       		move.w	(a1)+,(a5)	; source address
000013D8 3A99                       		move.w	(a1)+,(a5)	; source address
000013DA 3A99                       		move.w	(a1)+,(a5)	; source address
000013DC 3A99                       		move.w	(a1)+,(a5)	; destination
000013DE 3A99                       		move.w	(a1)+,(a5)	; destination
000013E0 B2FC C8FC                  		cmpa.w	#$C8FC,a1
000013E4 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000013E6                            
000013E6                            ProcessDMAQueue_Done:
000013E6 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000013EC 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000013F4 4E75                       		rts
000013F6                            ; End of function ProcessDMAQueue
000013F6                            
000013F6                            
000013F6                            ; ---------------------------------------------------------------------------
000013F6                            ; Nemesis decompression	algorithm
000013F6                            ; ---------------------------------------------------------------------------
000013F6                            
000013F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013F6                            
000013F6                            
000013F6                            NemDec:
000013F6 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)	; save registers to the stack
000013FA 47F9 0000 0000             		lea	(loc_1502).l,a3
00001400 49F9 00C0 0000             		lea	($C00000).l,a4
00001406 6000                       		bra.s	loc_145C
00001408                            ; ===========================================================================
00001408 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)	; save registers to the stack
0000140C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001412                            
00001412                            loc_145C:				; XREF: NemDec
00001412 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001416 3418                       		move.w	(a0)+,d2
00001418 E34A                       		lsl.w	#1,d2
0000141A 6400                       		bcc.s	loc_146A
0000141C D6FC 000A                  		adda.w	#$A,a3
00001420                            
00001420                            loc_146A:
00001420 E54A                       		lsl.w	#2,d2
00001422 3A42                       		movea.w	d2,a5
00001424 7608                       		moveq	#8,d3
00001426 7400                       		moveq	#0,d2
00001428 7800                       		moveq	#0,d4
0000142A 6100 0000                  		bsr.w	NemDec4
0000142E 1A18                       		move.b	(a0)+,d5
00001430 E145                       		asl.w	#8,d5
00001432 1A18                       		move.b	(a0)+,d5
00001434 3C3C 0010                  		move.w	#$10,d6
00001438 6100                       		bsr.s	NemDec2
0000143A 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5	; load saved registers
0000143E 4E75                       		rts	
00001440                            ; End of function NemDec
00001440                            
00001440                            
00001440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001440                            
00001440                            
00001440                            NemDec2:				; XREF: NemDec
00001440 3E06                       		move.w	d6,d7
00001442 5147                       		subq.w	#8,d7
00001444 3205                       		move.w	d5,d1
00001446 EE69                       		lsr.w	d7,d1
00001448 0C01 00FC                  		cmpi.b	#-4,d1
0000144C 6400                       		bcc.s	loc_14D6
0000144E 0241 00FF                  		andi.w	#$FF,d1
00001452 D241                       		add.w	d1,d1
00001454 1031 1000                  		move.b	(a1,d1.w),d0
00001458 4880                       		ext.w	d0
0000145A 9C40                       		sub.w	d0,d6
0000145C 0C46 0009                  		cmpi.w	#9,d6
00001460 6400                       		bcc.s	loc_14B2
00001462 5046                       		addq.w	#8,d6
00001464 E145                       		asl.w	#8,d5
00001466 1A18                       		move.b	(a0)+,d5
00001468                            
00001468                            loc_14B2:
00001468 1231 1001                  		move.b	1(a1,d1.w),d1
0000146C 3001                       		move.w	d1,d0
0000146E 0241 000F                  		andi.w	#$F,d1
00001472 0240 00F0                  		andi.w	#$F0,d0
00001476                            
00001476                            loc_14C0:				; XREF: NemDec3
00001476 E848                       		lsr.w	#4,d0
00001478                            
00001478                            loc_14C2:				; XREF: NemDec3
00001478 E98C                       		lsl.l	#4,d4
0000147A 8801                       		or.b	d1,d4
0000147C 5343                       		subq.w	#1,d3
0000147E 6600                       		bne.s	loc_14D0
00001480 4ED3                       		jmp	(a3)
00001482                            ; End of function NemDec2
00001482                            
00001482                            
00001482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001482                            
00001482                            
00001482                            NemDec3:				; XREF: loc_1502
00001482 7800                       		moveq	#0,d4
00001484 7608                       		moveq	#8,d3
00001486                            
00001486                            loc_14D0:				; XREF: NemDec2
00001486 51C8 FFF0                  		dbf	d0,loc_14C2
0000148A 60B4                       		bra.s	NemDec2
0000148C                            ; ===========================================================================
0000148C                            
0000148C                            loc_14D6:				; XREF: NemDec2
0000148C 5D46                       		subq.w	#6,d6
0000148E 0C46 0009                  		cmpi.w	#9,d6
00001492 6400                       		bcc.s	loc_14E4
00001494 5046                       		addq.w	#8,d6
00001496 E145                       		asl.w	#8,d5
00001498 1A18                       		move.b	(a0)+,d5
0000149A                            
0000149A                            loc_14E4:				; XREF: NemDec3
0000149A 5F46                       		subq.w	#7,d6
0000149C 3205                       		move.w	d5,d1
0000149E EC69                       		lsr.w	d6,d1
000014A0 3001                       		move.w	d1,d0
000014A2 0241 000F                  		andi.w	#$F,d1
000014A6 0240 0070                  		andi.w	#$70,d0
000014AA 0C46 0009                  		cmpi.w	#9,d6
000014AE 64C6                       		bcc.s	loc_14C0
000014B0 5046                       		addq.w	#8,d6
000014B2 E145                       		asl.w	#8,d5
000014B4 1A18                       		move.b	(a0)+,d5
000014B6 60BE                       		bra.s	loc_14C0
000014B8                            ; End of function NemDec3
000014B8                            
000014B8                            ; ===========================================================================
000014B8                            
000014B8                            loc_1502:				; XREF: NemDec
000014B8 2884                       		move.l	d4,(a4)
000014BA 534D                       		subq.w	#1,a5
000014BC 380D                       		move.w	a5,d4
000014BE 66C2                       		bne.s	NemDec3
000014C0 4E75                       		rts	
000014C2                            ; ===========================================================================
000014C2 B982                       		eor.l	d4,d2
000014C4 2882                       		move.l	d2,(a4)
000014C6 534D                       		subq.w	#1,a5
000014C8 380D                       		move.w	a5,d4
000014CA 66B6                       		bne.s	NemDec3
000014CC 4E75                       		rts	
000014CE                            ; ===========================================================================
000014CE                            
000014CE                            loc_1518:				; XREF: NemDec
000014CE 28C4                       		move.l	d4,(a4)+
000014D0 534D                       		subq.w	#1,a5
000014D2 380D                       		move.w	a5,d4
000014D4 66AC                       		bne.s	NemDec3
000014D6 4E75                       		rts	
000014D8                            ; ===========================================================================
000014D8 B982                       		eor.l	d4,d2
000014DA 28C2                       		move.l	d2,(a4)+
000014DC 534D                       		subq.w	#1,a5
000014DE 380D                       		move.w	a5,d4
000014E0 66A0                       		bne.s	NemDec3
000014E2 4E75                       		rts	
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            NemDec4:				; XREF: NemDec
000014E4 1018                       		move.b	(a0)+,d0
000014E6                            
000014E6                            loc_1530:
000014E6 0C00 00FF                  		cmpi.b	#-1,d0
000014EA 6600                       		bne.s	loc_1538
000014EC 4E75                       		rts	
000014EE                            ; ===========================================================================
000014EE                            
000014EE                            loc_1538:				; XREF: NemDec4
000014EE 3E00                       		move.w	d0,d7
000014F0                            
000014F0                            loc_153A:
000014F0 1018                       		move.b	(a0)+,d0
000014F2 0C00 0080                  		cmpi.b	#$80,d0
000014F6 64EE                       		bcc.s	loc_1530
000014F8 1200                       		move.b	d0,d1
000014FA 0247 000F                  		andi.w	#$F,d7
000014FE 0241 0070                  		andi.w	#$70,d1
00001502 8E41                       		or.w	d1,d7
00001504 0240 000F                  		andi.w	#$F,d0
00001508 1200                       		move.b	d0,d1
0000150A E149                       		lsl.w	#8,d1
0000150C 8E41                       		or.w	d1,d7
0000150E 7208                       		moveq	#8,d1
00001510 9240                       		sub.w	d0,d1
00001512 6600                       		bne.s	loc_1568
00001514 1018                       		move.b	(a0)+,d0
00001516 D040                       		add.w	d0,d0
00001518 3387 0000                  		move.w	d7,(a1,d0.w)
0000151C 60D2                       		bra.s	loc_153A
0000151E                            ; ===========================================================================
0000151E                            
0000151E                            loc_1568:				; XREF: NemDec4
0000151E 1018                       		move.b	(a0)+,d0
00001520 E368                       		lsl.w	d1,d0
00001522 D040                       		add.w	d0,d0
00001524 7A01                       		moveq	#1,d5
00001526 E36D                       		lsl.w	d1,d5
00001528 5345                       		subq.w	#1,d5
0000152A                            
0000152A                            loc_1574:
0000152A 3387 0000                  		move.w	d7,(a1,d0.w)
0000152E 5440                       		addq.w	#2,d0
00001530 51CD FFF8                  		dbf	d5,loc_1574
00001534 60BA                       		bra.s	loc_153A
00001536                            ; End of function NemDec4
00001536                            
00001536                            ; ===========================================================================
00001536                            ; Subroutines to put PLC block into the queue
00001536                            ; ===========================================================================
00001536                            ; Note:		Queue can hold no more than 21 items
00001536                            ; Input:	d0 - PLC block index
00001536                            ; ---------------------------------------------------------------------------
00001536                            
00001536                            LoadPLC:
00001536 48E7 0060                  		movem.l	a1-a2,-(sp)	; move registers to the stack
0000153A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001540 D040                       		add.w	d0,d0		; double block index
00001542 3031 0000                  		move.w	(a1,d0.w),d0
00001546 43F1 0000                  		lea	(a1,d0.w),a1	 ; load PLC block to a1
0000154A 45F8 F680                  		lea	($FFFFF680).w,a2 ; load PLC queue to a2
0000154E                            
0000154E                            @FindSlot:
0000154E 4A92                       		tst.l	(a2)		; is the slot in queue empty?
00001550 6700                       		beq.s	@AddToQueue	; if yes, branch
00001552 5C4A                       		addq.w	#6,a2		; next slot
00001554 60F8                       		bra.s	@FindSlot
00001556                            ; ===========================================================================
00001556                            
00001556                            @AddToQueue:
00001556 3019                       		move.w	(a1)+,d0	; move number of items in block to d0
00001558 6B00                       		bmi.s	LoadPLC_Rts	; if it's negative (>=$80), then something is wrong, exit
0000155A                            
0000155A                            @WriteCues:
0000155A 24D9                       		move.l	(a1)+,(a2)+
0000155C 34D9                       		move.w	(a1)+,(a2)+
0000155E 51C8 FFFA                  		dbf	d0,@WriteCues	; repeat for the number of items
00001562                            
00001562                            LoadPLC_Rts:
00001562 4CDF 0600                  		movem.l	(sp)+,a1-a2	; load saved registers from the stack
00001566 4E75                       		rts	
00001568                            ; End of function LoadPLC
00001568                            
00001568                            
00001568                            ; ---------------------------------------------------------------------------
00001568                            ; This subroutine does the same as LoadPLC, but it clears PLC queue first
00001568                            ; ---------------------------------------------------------------------------
00001568                            
00001568                            LoadPLC2:
00001568 48E7 0060                  		movem.l	a1-a2,-(sp)	; move registers to the stack
0000156C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001572 D040                       		add.w	d0,d0		; double block index
00001574 3031 0000                  		move.w	(a1,d0.w),d0
00001578 43F1 0000                  		lea	(a1,d0.w),a1	; load PLC block to a1
0000157C 6100                       		bsr.s	ClearPLC
0000157E 45F8 F680                  		lea	($FFFFF680).w,a2 ; load PLC queue to a2
00001582 3019                       		move.w	(a1)+,d0	; move number of items in block to d0
00001584 6B00                       		bmi.s	LoadPLC2_Rts	; if it's negative (>=$80), then something is wrong, exit
00001586                            
00001586                            @WriteCues:
00001586 24D9                       		move.l	(a1)+,(a2)+
00001588 34D9                       		move.w	(a1)+,(a2)+
0000158A 51C8 FFFA                  		dbf	d0,@WriteCues	; repeat for the number of items
0000158E                            
0000158E                            LoadPLC2_Rts:
0000158E 4CDF 0600                  		movem.l	(sp)+,a1-a2	; load saved registers from the stack
00001592 4E75                       		rts	
00001594                            ; End of function LoadPLC2
00001594                            
00001594                            ; ---------------------------------------------------------------------------
00001594                            ; Subroutine to	clear the pattern load cues
00001594                            ; ---------------------------------------------------------------------------
00001594                            
00001594                            ClearPLC:				; XREF: LoadPLC2
00001594 45F8 F680                  		lea	($FFFFF680).w,a2 ; load PLC queue
00001598 701F                       		moveq	#$1F,d0
0000159A 429A                       @ClearLoop:	clr.l	(a2)+
0000159C 51C8 FFFC                  		dbf	d0,@ClearLoop	; repeat $1F more times
000015A0 4E75                       		rts
000015A2                            ; End of function ClearPLC
000015A2                            
000015A2                            
000015A2                            ; ---------------------------------------------------------------------------
000015A2                            ; Subroutine to decompress graphics in PLC queue
000015A2                            ; Decompress 3 tiles every frame
000015A2                            ; ---------------------------------------------------------------------------
000015A2                            
000015A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A2                            
000015A2                            
000015A2                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015A2 4AB8 F680                  		tst.l	($FFFFF680).w	; is PLC queue empty?
000015A6 6700                       		beq.s	RunPLC_Rts	; if yes, branch
000015A8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015AC 6600                       		bne.s	RunPLC_Rts
000015AE 2078 F680                  		movea.l	($FFFFF680).w,a0 ; load PLC queue
000015B2 47F9 0000 14B8             		lea	(loc_1502).l,a3
000015B8 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015BC 3418                       		move.w	(a0)+,d2
000015BE 6A00                       		bpl.s	loc_160E
000015C0 D6FC 000A                  		adda.w	#$A,a3
000015C4                            
000015C4                            loc_160E:
000015C4 0242 7FFF                  		andi.w	#$7FFF,d2
000015C8 6100 FF1A                  		bsr.w	NemDec4
000015CC 1A18                       		move.b	(a0)+,d5
000015CE E145                       		asl.w	#8,d5
000015D0 1A18                       		move.b	(a0)+,d5
000015D2 7C10                       		moveq	#$10,d6
000015D4 7000                       		moveq	#0,d0
000015D6 21C8 F680                  		move.l	a0,($FFFFF680).w
000015DA 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015DE 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015E2 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000015E6 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000015EA 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015EE 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015F2 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000015F6                            
000015F6                            
000015F6                            RunPLC_Rts:
000015F6 4E75                       		rts	
000015F8                            ; End of function RunPLC_RAM
000015F8                            
000015F8                            
000015F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F8                            
000015F8                            
000015F8                            sub_1642:				; XREF: VBlank_Sub04; loc_F54; VBlank_Sub12
000015F8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015FC 6700 0000                  		beq.w	locret_16DA
00001600 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001606 7000                       		moveq	#0,d0
00001608 3038 F684                  		move.w	($FFFFF684).w,d0
0000160C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001612 6000                       		bra.s	loc_1676
00001614                            ; End of function sub_1642
00001614                            
00001614                            
00001614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001614                            
00001614                            
00001614                            sub_165E:				; XREF: Demo_Time
00001614 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001618 6700                       		beq.s	locret_16DA
0000161A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001620 7000                       		moveq	#0,d0
00001622 3038 F684                  		move.w	($FFFFF684).w,d0
00001626 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000162C                            
0000162C                            loc_1676:				; XREF: sub_1642
0000162C 49F9 00C0 0004             		lea	($C00004).l,a4
00001632 E588                       		lsl.l	#2,d0
00001634 E448                       		lsr.w	#2,d0
00001636 0040 4000                  		ori.w	#$4000,d0
0000163A 4840                       		swap	d0
0000163C 2880                       		move.l	d0,(a4)
0000163E 594C                       		subq.w	#4,a4
00001640 2078 F680                  		movea.l	($FFFFF680).w,a0
00001644 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001648 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000164C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001650 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001654 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001658 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000165C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001660                            
00001660                            loc_16AA:				; XREF: sub_165E
00001660 3A7C 0008                  		movea.w	#8,a5
00001664 6100 FE1C                  		bsr.w	NemDec3
00001668 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
0000166C 6700                       		beq.s	loc_16DC
0000166E 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001672 66EC                       		bne.s	loc_16AA
00001674 21C8 F680                  		move.l	a0,($FFFFF680).w
00001678 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000167C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001680 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001684 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001688 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000168C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001690                            
00001690                            locret_16DA:				; XREF: sub_1642
00001690 4E75                       		rts	
00001692                            ; ===========================================================================
00001692                            
00001692                            loc_16DC:			; XREF: sub_165E
00001692 41F8 F680                  		lea	($FFFFF680).w,a0
00001696 43E8 0006                  		lea	6(a0),a1
0000169A 700E                       		moveq	#$E,d0		; do $F cues
0000169C                            
0000169C                            loc_16E2:				; XREF: sub_165E
0000169C 20D9                       		move.l	(a1)+,(a0)+
0000169E 30D9                       		move.w	(a1)+,(a0)+
000016A0 51C8 FFFA                  		dbf	d0,loc_16E2
000016A4                            		
000016A4 7000                       		moveq	#0,d0
000016A6 20C0                       		move.l	d0,(a0)+	; clear the last cue to avoid overcopying it
000016A8 30C0                       		move.w	d0,(a0)+	;
000016AA 4E75                       		rts
000016AC                            ; End of function sub_165E
000016AC                            
000016AC                            ; ---------------------------------------------------------------------------
000016AC                            ; Subroutine to	execute	the pattern load cue
000016AC                            ; ---------------------------------------------------------------------------
000016AC                            
000016AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AC                            
000016AC                            
000016AC                            RunPLC_ROM:
000016AC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016B2 D040                       		add.w	d0,d0
000016B4 3031 0000                  		move.w	(a1,d0.w),d0
000016B8 43F1 0000                  		lea	(a1,d0.w),a1
000016BC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016BE                            
000016BE                            RunPLC_Loop:
000016BE 2059                       		movea.l	(a1)+,a0	; get art pointer
000016C0 7000                       		moveq	#0,d0
000016C2 3019                       		move.w	(a1)+,d0	; get VRAM address
000016C4 E588                       		lsl.l	#2,d0		; divide address by $20
000016C6 E448                       		lsr.w	#2,d0
000016C8 0040 4000                  		ori.w	#$4000,d0
000016CC 4840                       		swap	d0
000016CE 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000016D4 6100 FD20                  		bsr.w	NemDec		; decompress
000016D8 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000016DC 4E75                       		rts	
000016DE                            ; End of function RunPLC_ROM
000016DE                            
000016DE                            ; ---------------------------------------------------------------------------
000016DE                            ; Enigma decompression algorithm
000016DE                            ; ---------------------------------------------------------------------------
000016DE                            
000016DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016DE                            
000016DE                            
000016DE                            EniDec:
000016DE 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)	; save registers to the stack
000016E2 3640                       		movea.w	d0,a3
000016E4 1018                       		move.b	(a0)+,d0
000016E6 4880                       		ext.w	d0
000016E8 3A40                       		movea.w	d0,a5
000016EA 1818                       		move.b	(a0)+,d4
000016EC E70C                       		lsl.b	#3,d4
000016EE 3458                       		movea.w	(a0)+,a2
000016F0 D4CB                       		adda.w	a3,a2
000016F2 3858                       		movea.w	(a0)+,a4
000016F4 D8CB                       		adda.w	a3,a4
000016F6 1A18                       		move.b	(a0)+,d5
000016F8 E145                       		asl.w	#8,d5
000016FA 1A18                       		move.b	(a0)+,d5
000016FC 7C10                       		moveq	#$10,d6
000016FE                            
000016FE                            loc_173E:				; XREF: loc_1768
000016FE 7007                       		moveq	#7,d0
00001700 3E06                       		move.w	d6,d7
00001702 9E40                       		sub.w	d0,d7
00001704 3205                       		move.w	d5,d1
00001706 EE69                       		lsr.w	d7,d1
00001708 0241 007F                  		andi.w	#$7F,d1
0000170C 3401                       		move.w	d1,d2
0000170E 0C41 0040                  		cmpi.w	#$40,d1
00001712 6400                       		bcc.s	loc_1758
00001714 7006                       		moveq	#6,d0
00001716 E24A                       		lsr.w	#1,d2
00001718                            
00001718                            loc_1758:
00001718 6100 0000                  		bsr.w	sub_188C
0000171C 0242 000F                  		andi.w	#$F,d2
00001720 E849                       		lsr.w	#4,d1
00001722 D241                       		add.w	d1,d1
00001724 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001728                            ; End of function EniDec
00001728                            
00001728                            ; ===========================================================================
00001728                            
00001728                            loc_1768:				; XREF: loc_17B4
00001728 32CA                       		move.w	a2,(a1)+
0000172A 524A                       		addq.w	#1,a2
0000172C 51CA FFFA                  		dbf	d2,loc_1768
00001730 60CC                       		bra.s	loc_173E
00001732                            ; ===========================================================================
00001732                            
00001732                            loc_1772:				; XREF: loc_17B4
00001732 32CC                       		move.w	a4,(a1)+
00001734 51CA FFFC                  		dbf	d2,loc_1772
00001738 60C4                       		bra.s	loc_173E
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            loc_177A:				; XREF: loc_17B4
0000173A 6100 0000                  		bsr.w	loc_17DC
0000173E                            
0000173E                            loc_177E:
0000173E 32C1                       		move.w	d1,(a1)+
00001740 51CA FFFC                  		dbf	d2,loc_177E
00001744 60B8                       		bra.s	loc_173E
00001746                            ; ===========================================================================
00001746                            
00001746                            loc_1786:				; XREF: loc_17B4
00001746 6100 0000                  		bsr.w	loc_17DC
0000174A                            
0000174A                            loc_178A:
0000174A 32C1                       		move.w	d1,(a1)+
0000174C 5241                       		addq.w	#1,d1
0000174E 51CA FFFA                  		dbf	d2,loc_178A
00001752 60AA                       		bra.s	loc_173E
00001754                            ; ===========================================================================
00001754                            
00001754                            loc_1794:				; XREF: loc_17B4
00001754 6100 0000                  		bsr.w	loc_17DC
00001758                            
00001758                            loc_1798:
00001758 32C1                       		move.w	d1,(a1)+
0000175A 5341                       		subq.w	#1,d1
0000175C 51CA FFFA                  		dbf	d2,loc_1798
00001760 609C                       		bra.s	loc_173E
00001762                            ; ===========================================================================
00001762                            
00001762                            loc_17A2:				; XREF: loc_17B4
00001762 0C42 000F                  		cmpi.w	#$F,d2
00001766 6700                       		beq.s	loc_17C4
00001768                            
00001768                            loc_17A8:
00001768 6100 0000                  		bsr.w	loc_17DC
0000176C 32C1                       		move.w	d1,(a1)+
0000176E 51CA FFF8                  		dbf	d2,loc_17A8
00001772 608A                       		bra.s	loc_173E
00001774                            ; ===========================================================================
00001774                            
00001774                            loc_17B4:				; XREF: EniDec
00001774 60B2                       		bra.s	loc_1768
00001776                            ; ===========================================================================
00001776 60B0                       		bra.s	loc_1768
00001778                            ; ===========================================================================
00001778 60B8                       		bra.s	loc_1772
0000177A                            ; ===========================================================================
0000177A 60B6                       		bra.s	loc_1772
0000177C                            ; ===========================================================================
0000177C 60BC                       		bra.s	loc_177A
0000177E                            ; ===========================================================================
0000177E 60C6                       		bra.s	loc_1786
00001780                            ; ===========================================================================
00001780 60D2                       		bra.s	loc_1794
00001782                            ; ===========================================================================
00001782 60DE                       		bra.s	loc_17A2
00001784                            ; ===========================================================================
00001784                            
00001784                            loc_17C4:				; XREF: loc_17A2
00001784 5348                       		subq.w	#1,a0
00001786 0C46 0010                  		cmpi.w	#$10,d6
0000178A 6600                       		bne.s	loc_17CE
0000178C 5348                       		subq.w	#1,a0
0000178E                            
0000178E                            loc_17CE:
0000178E 3008                       		move.w	a0,d0
00001790 E248                       		lsr.w	#1,d0
00001792 6400                       		bcc.s	loc_17D6
00001794 5248                       		addq.w	#1,a0
00001796                            
00001796                            loc_17D6:
00001796 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000179A 4E75                       		rts	
0000179C                            ; ===========================================================================
0000179C                            
0000179C                            loc_17DC:				; XREF: loc_17A2
0000179C 360B                       		move.w	a3,d3
0000179E 1204                       		move.b	d4,d1
000017A0 D201                       		add.b	d1,d1
000017A2 6400                       		bcc.s	loc_17EE
000017A4 5346                       		subq.w	#1,d6
000017A6 0D05                       		btst	d6,d5
000017A8 6700                       		beq.s	loc_17EE
000017AA 0043 8000                  		ori.w	#-$8000,d3
000017AE                            
000017AE                            loc_17EE:
000017AE D201                       		add.b	d1,d1
000017B0 6400                       		bcc.s	loc_17FC
000017B2 5346                       		subq.w	#1,d6
000017B4 0D05                       		btst	d6,d5
000017B6 6700                       		beq.s	loc_17FC
000017B8 0643 4000                  		addi.w	#$4000,d3
000017BC                            
000017BC                            loc_17FC:
000017BC D201                       		add.b	d1,d1
000017BE 6400                       		bcc.s	loc_180A
000017C0 5346                       		subq.w	#1,d6
000017C2 0D05                       		btst	d6,d5
000017C4 6700                       		beq.s	loc_180A
000017C6 0643 2000                  		addi.w	#$2000,d3
000017CA                            
000017CA                            loc_180A:
000017CA D201                       		add.b	d1,d1
000017CC 6400                       		bcc.s	loc_1818
000017CE 5346                       		subq.w	#1,d6
000017D0 0D05                       		btst	d6,d5
000017D2 6700                       		beq.s	loc_1818
000017D4 0043 1000                  		ori.w	#$1000,d3
000017D8                            
000017D8                            loc_1818:
000017D8 D201                       		add.b	d1,d1
000017DA 6400                       		bcc.s	loc_1826
000017DC 5346                       		subq.w	#1,d6
000017DE 0D05                       		btst	d6,d5
000017E0 6700                       		beq.s	loc_1826
000017E2 0043 0800                  		ori.w	#$800,d3
000017E6                            
000017E6                            loc_1826:
000017E6 3205                       		move.w	d5,d1
000017E8 3E06                       		move.w	d6,d7
000017EA 9E4D                       		sub.w	a5,d7
000017EC 6400                       		bcc.s	loc_1856
000017EE 3C07                       		move.w	d7,d6
000017F0 0646 0010                  		addi.w	#$10,d6
000017F4 4447                       		neg.w	d7
000017F6 EF69                       		lsl.w	d7,d1
000017F8 1A10                       		move.b	(a0),d5
000017FA EF3D                       		rol.b	d7,d5
000017FC DE47                       		add.w	d7,d7
000017FE CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001802 D245                       		add.w	d5,d1
00001804                            
00001804                            loc_1844:				; XREF: loc_1868
00001804 300D                       		move.w	a5,d0
00001806 D040                       		add.w	d0,d0
00001808 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000180C D243                       		add.w	d3,d1
0000180E 1A18                       		move.b	(a0)+,d5
00001810 E14D                       		lsl.w	#8,d5
00001812 1A18                       		move.b	(a0)+,d5
00001814 4E75                       		rts	
00001816                            ; ===========================================================================
00001816                            
00001816                            loc_1856:				; XREF: loc_1826
00001816 6700                       		beq.s	loc_1868
00001818 EE69                       		lsr.w	d7,d1
0000181A 300D                       		move.w	a5,d0
0000181C D040                       		add.w	d0,d0
0000181E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001822 D243                       		add.w	d3,d1
00001824 300D                       		move.w	a5,d0
00001826 6000                       		bra.s	sub_188C
00001828                            ; ===========================================================================
00001828                            
00001828                            loc_1868:				; XREF: loc_1856
00001828 7C10                       		moveq	#$10,d6
0000182A                            
0000182A                            loc_186A:
0000182A 60D8                       		bra.s	loc_1844
0000182C                            ; ===========================================================================
0000182C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001842 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000184C                            
0000184C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000184C                            
0000184C                            
0000184C                            sub_188C:				; XREF: EniDec
0000184C 9C40                       		sub.w	d0,d6
0000184E 0C46 0009                  		cmpi.w	#9,d6
00001852 6400                       		bcc.s	locret_189A
00001854 5046                       		addq.w	#8,d6
00001856 E145                       		asl.w	#8,d5
00001858 1A18                       		move.b	(a0)+,d5
0000185A                            
0000185A                            locret_189A:
0000185A 4E75                       		rts	
0000185C                            ; End of function sub_188C
0000185C                            
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            ; Kosinski decompression algorithm
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            
0000185C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185C                            
0000185C                            
0000185C                            KosDec:
0000185C                            
0000185C =FFFFFFFE                  var_2		= -2
0000185C =FFFFFFFF                  var_1		= -1
0000185C                            
0000185C 558F                       		subq.l	#2,sp
0000185E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001862 1E98                       		move.b	(a0)+,(sp)
00001864 3A17                       		move.w	(sp),d5
00001866 780F                       		moveq	#$F,d4
00001868                            
00001868                            loc_18A8:
00001868 E24D                       		lsr.w	#1,d5
0000186A 40C6                       		move	sr,d6
0000186C 51CC 0000                  		dbf	d4,loc_18BA
00001870 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001874 1E98                       		move.b	(a0)+,(sp)
00001876 3A17                       		move.w	(sp),d5
00001878 780F                       		moveq	#$F,d4
0000187A                            
0000187A                            loc_18BA:
0000187A 44C6                       		move	d6,ccr
0000187C 6400                       		bcc.s	loc_18C2
0000187E 12D8                       		move.b	(a0)+,(a1)+
00001880 60E6                       		bra.s	loc_18A8
00001882                            ; ===========================================================================
00001882                            
00001882                            loc_18C2:				; XREF: KosDec
00001882 7600                       		moveq	#0,d3
00001884 E24D                       		lsr.w	#1,d5
00001886 40C6                       		move	sr,d6
00001888 51CC 0000                  		dbf	d4,loc_18D6
0000188C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001890 1E98                       		move.b	(a0)+,(sp)
00001892 3A17                       		move.w	(sp),d5
00001894 780F                       		moveq	#$F,d4
00001896                            
00001896                            loc_18D6:
00001896 44C6                       		move	d6,ccr
00001898 6500                       		bcs.s	loc_1906
0000189A E24D                       		lsr.w	#1,d5
0000189C 51CC 0000                  		dbf	d4,loc_18EA
000018A0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A4 1E98                       		move.b	(a0)+,(sp)
000018A6 3A17                       		move.w	(sp),d5
000018A8 780F                       		moveq	#$F,d4
000018AA                            
000018AA                            loc_18EA:
000018AA E353                       		roxl.w	#1,d3
000018AC E24D                       		lsr.w	#1,d5
000018AE 51CC 0000                  		dbf	d4,loc_18FC
000018B2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B6 1E98                       		move.b	(a0)+,(sp)
000018B8 3A17                       		move.w	(sp),d5
000018BA 780F                       		moveq	#$F,d4
000018BC                            
000018BC                            loc_18FC:
000018BC E353                       		roxl.w	#1,d3
000018BE 5243                       		addq.w	#1,d3
000018C0 74FF                       		moveq	#-1,d2
000018C2 1418                       		move.b	(a0)+,d2
000018C4 6000                       		bra.s	loc_191C
000018C6                            ; ===========================================================================
000018C6                            
000018C6                            loc_1906:				; XREF: loc_18C2
000018C6 1018                       		move.b	(a0)+,d0
000018C8 1218                       		move.b	(a0)+,d1
000018CA 74FF                       		moveq	#-1,d2
000018CC 1401                       		move.b	d1,d2
000018CE EB4A                       		lsl.w	#5,d2
000018D0 1400                       		move.b	d0,d2
000018D2 0241 0007                  		andi.w	#7,d1
000018D6 6700                       		beq.s	loc_1928
000018D8 1601                       		move.b	d1,d3
000018DA 5243                       		addq.w	#1,d3
000018DC                            
000018DC                            loc_191C:
000018DC 1031 2000                  		move.b	(a1,d2.w),d0
000018E0 12C0                       		move.b	d0,(a1)+
000018E2 51CB FFF8                  		dbf	d3,loc_191C
000018E6 6080                       		bra.s	loc_18A8
000018E8                            ; ===========================================================================
000018E8                            
000018E8                            loc_1928:				; XREF: loc_1906
000018E8 1218                       		move.b	(a0)+,d1
000018EA 6700                       		beq.s	loc_1938
000018EC 0C01 0001                  		cmpi.b	#1,d1
000018F0 6700 FF76                  		beq.w	loc_18A8
000018F4 1601                       		move.b	d1,d3
000018F6 60E4                       		bra.s	loc_191C
000018F8                            ; ===========================================================================
000018F8                            
000018F8                            loc_1938:				; XREF: loc_1928
000018F8 548F                       		addq.l	#2,sp
000018FA 4E75                       		rts	
000018FC                            ; End of function KosDec
000018FC                            
000018FC                            ; ---------------------------------------------------------------------------
000018FC                            ; Pallet cycling routine loading subroutine
000018FC                            ; ---------------------------------------------------------------------------
000018FC                            
000018FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018FC                            
000018FC                            
000018FC                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
000018FC 7400                       		moveq	#0,d2
000018FE 7000                       		moveq	#0,d0
00001900 1038 FE10                  		move.b	($FFFFFE10).w,d0 	; get level number
00001904 D040                       		add.w	d0,d0		 	; multiply by 2
00001906 303B 0000                  		move.w	PalCycle(pc,d0.w),d0	; get animation routine realative offset
0000190A 4EFB 0000                  		jmp	PalCycle(pc,d0.w)	; jump to routine
0000190E                            ; End of function PalCycle_Load
0000190E                            
0000190E                            ; ===========================================================================
0000190E                            ; ---------------------------------------------------------------------------
0000190E                            ; Pallet cycling routines
0000190E                            ; ---------------------------------------------------------------------------
0000190E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001910 0000                       		dc.w PalCycle_LZ-PalCycle
00001912 0000                       		dc.w PalCycle_MZ-PalCycle
00001914 0000                       		dc.w PalCycle_SLZ-PalCycle
00001916 0000                       		dc.w PalCycle_SYZ-PalCycle
00001918 0000                       		dc.w PalCycle_SBZ-PalCycle
0000191A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000191C                            
0000191C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000191C                            
0000191C                            
0000191C                            PalCycle_Title:				; XREF: TitleScreen
0000191C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001922 6000                       		bra.s	loc_196A
00001924                            ; ===========================================================================
00001924                            
00001924                            PalCycle_GHZ:				; XREF: PalCycle
00001924 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000192A                            
0000192A                            loc_196A:				; XREF: PalCycle_Title
0000192A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000192E 6A00                       		bpl.s	locret_1990
00001930 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001936 3038 F632                  		move.w	($FFFFF632).w,d0
0000193A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000193E 0240 0003                  		andi.w	#3,d0
00001942 E748                       		lsl.w	#3,d0
00001944 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001948 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000194C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001950                            
00001950                            locret_1990:
00001950 4E75                       		rts	
00001952                            ; End of function PalCycle_Title
00001952                            
00001952                            
00001952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001952                            
00001952                            
00001952                            PalCycle_LZ:				; XREF: PalCycle
00001952 5378 F634                  		subq.w	#1,($FFFFF634).w
00001956 6A00                       		bpl.s	loc_19D8
00001958 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000195E 3038 F632                  		move.w	($FFFFF632).w,d0
00001962 5278 F632                  		addq.w	#1,($FFFFF632).w
00001966 0240 0003                  		andi.w	#3,d0
0000196A E748                       		lsl.w	#3,d0
0000196C 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001972 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001978 6600                       		bne.s	loc_19C0
0000197A 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001980                            
00001980                            loc_19C0:
00001980 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001984 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001988 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000198C 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001990 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001994 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001998                            
00001998                            loc_19D8:
00001998 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000199C 0240 0007                  		andi.w	#7,d0
000019A0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019A4 6700                       		beq.s	locret_1A3A
000019A6 7201                       		moveq	#1,d1
000019A8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019AC 6700                       		beq.s	loc_19F0
000019AE 4441                       		neg.w	d1
000019B0                            
000019B0                            loc_19F0:
000019B0 3038 F650                  		move.w	($FFFFF650).w,d0
000019B4 0240 0003                  		andi.w	#3,d0
000019B8 D041                       		add.w	d1,d0
000019BA 0C40 0003                  		cmpi.w	#3,d0
000019BE 6500                       		bcs.s	loc_1A0A
000019C0 3200                       		move.w	d0,d1
000019C2 7000                       		moveq	#0,d0
000019C4 4A41                       		tst.w	d1
000019C6 6A00                       		bpl.s	loc_1A0A
000019C8 7002                       		moveq	#2,d0
000019CA                            
000019CA                            loc_1A0A:
000019CA 31C0 F650                  		move.w	d0,($FFFFF650).w
000019CE D040                       		add.w	d0,d0
000019D0 3200                       		move.w	d0,d1
000019D2 D040                       		add.w	d0,d0
000019D4 D041                       		add.w	d1,d0
000019D6 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000019DC 43F8 FB76                  		lea	($FFFFFB76).w,a1
000019E0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019E4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019E8 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
000019EE 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
000019F2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019F6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019FA                            
000019FA                            locret_1A3A:
000019FA 4E75                       		rts	
000019FC                            ; End of function PalCycle_LZ
000019FC                            
000019FC                            ; ===========================================================================
000019FC 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A04                            ; ===========================================================================
00001A04                            
00001A04                            PalCycle_MZ:				; XREF: PalCycle
00001A04 4E75                       		rts	
00001A06                            
00001A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            
00001A06                            
00001A06                            PalCycle_SLZ:				; XREF: PalCycle
00001A06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A0A 6A00                       		bpl.s	locret_1A80
00001A0C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A12 3038 F632                  		move.w	($FFFFF632).w,d0
00001A16 5240                       		addq.w	#1,d0
00001A18 0C40 0006                  		cmpi.w	#6,d0
00001A1C 6500                       		bcs.s	loc_1A60
00001A1E 7000                       		moveq	#0,d0
00001A20                            
00001A20                            loc_1A60:
00001A20 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A24 3200                       		move.w	d0,d1
00001A26 D241                       		add.w	d1,d1
00001A28 D041                       		add.w	d1,d0
00001A2A D040                       		add.w	d0,d0
00001A2C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A32 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A36 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A3A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A40                            
00001A40                            locret_1A80:
00001A40 4E75                       		rts	
00001A42                            ; End of function PalCycle_SLZ
00001A42                            
00001A42                            
00001A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A42                            
00001A42                            
00001A42                            PalCycle_SYZ:				; XREF: PalCycle
00001A42 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A46 6A00                       		bpl.s	locret_1AC6
00001A48 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A4E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A52 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A56 0240 0003                  		andi.w	#3,d0
00001A5A E548                       		lsl.w	#2,d0
00001A5C 3200                       		move.w	d0,d1
00001A5E D040                       		add.w	d0,d0
00001A60 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001A66 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001A6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A72 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001A78 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A7C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001A80 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001A86                            
00001A86                            locret_1AC6:
00001A86 4E75                       		rts	
00001A88                            ; End of function PalCycle_SYZ
00001A88                            
00001A88                            
00001A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A88                            
00001A88                            
00001A88                            PalCycle_SBZ:				; XREF: PalCycle
00001A88 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001A8E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001A92 6700                       		beq.s	loc_1ADA
00001A94 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001A9A                            
00001A9A                            loc_1ADA:
00001A9A 43F8 F650                  		lea	($FFFFF650).w,a1
00001A9E 321A                       		move.w	(a2)+,d1
00001AA0                            
00001AA0                            loc_1AE0:
00001AA0 5311                       		subq.b	#1,(a1)
00001AA2 6B00                       		bmi.s	loc_1AEA
00001AA4 5489                       		addq.l	#2,a1
00001AA6 5C8A                       		addq.l	#6,a2
00001AA8 6000                       		bra.s	loc_1B06
00001AAA                            ; ===========================================================================
00001AAA                            
00001AAA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AAA 12DA                       		move.b	(a2)+,(a1)+
00001AAC 1011                       		move.b	(a1),d0
00001AAE 5200                       		addq.b	#1,d0
00001AB0 B01A                       		cmp.b	(a2)+,d0
00001AB2 6500                       		bcs.s	loc_1AF6
00001AB4 7000                       		moveq	#0,d0
00001AB6                            
00001AB6                            loc_1AF6:
00001AB6 12C0                       		move.b	d0,(a1)+
00001AB8 0240 000F                  		andi.w	#$F,d0
00001ABC D040                       		add.w	d0,d0
00001ABE 305A                       		movea.w	(a2)+,a0
00001AC0 365A                       		movea.w	(a2)+,a3
00001AC2 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001AC6                            
00001AC6                            loc_1B06:				; XREF: PalCycle_SBZ
00001AC6 51C9 FFD8                  		dbf	d1,loc_1AE0
00001ACA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001ACE 6A00                       		bpl.s	locret_1B64
00001AD0 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001AD6 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001ADC 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AE0 6700                       		beq.s	loc_1B2E
00001AE2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001AE8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001AEE                            
00001AEE                            loc_1B2E:
00001AEE 72FF                       		moveq	#-1,d1
00001AF0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001AF4 6700                       		beq.s	loc_1B38
00001AF6 4441                       		neg.w	d1
00001AF8                            
00001AF8                            loc_1B38:
00001AF8 3038 F632                  		move.w	($FFFFF632).w,d0
00001AFC 0240 0003                  		andi.w	#3,d0
00001B00 D041                       		add.w	d1,d0
00001B02 0C40 0003                  		cmpi.w	#3,d0
00001B06 6500                       		bcs.s	loc_1B52
00001B08 3200                       		move.w	d0,d1
00001B0A 7000                       		moveq	#0,d0
00001B0C 4A41                       		tst.w	d1
00001B0E 6A00                       		bpl.s	loc_1B52
00001B10 7002                       		moveq	#2,d0
00001B12                            
00001B12                            loc_1B52:
00001B12 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B16 D040                       		add.w	d0,d0
00001B18 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B1C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B20 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B24                            
00001B24                            locret_1B64:
00001B24 4E75                       		rts	
00001B26                            ; End of function PalCycle_SBZ
00001B26                            
00001B26                            ; ===========================================================================
00001B26                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B46                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001B66                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001B86                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001B98                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BAA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C12                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C36                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C56                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001C66                            
00001C66                            Pal_SBZCycList:	include "_inc\SBZ pallet script 1.asm"
00001C66                            ; ---------------------------------------------------------------------------
00001C66                            ; Scrap Brain Zone 1 pallet cycling script
00001C66                            ; ---------------------------------------------------------------------------
00001C66 0008                       	dc.w 8			; number of entries - 1
00001C68 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001C6A 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001C6C FB50                       	dc.w $FB50		; RAM address
00001C6E 0D08                       	dc.b $D, 8
00001C70 0000                       	dc.w Pal_SBZCyc2
00001C72 FB52                       	dc.w $FB52
00001C74 0E08                       	dc.b $E, 8
00001C76 0000                       	dc.w Pal_SBZCyc3
00001C78 FB6E                       	dc.w $FB6E
00001C7A 0B08                       	dc.b $B, 8
00001C7C 0000                       	dc.w Pal_SBZCyc5
00001C7E FB70                       	dc.w $FB70
00001C80 0708                       	dc.b 7,	8
00001C82 0000                       	dc.w Pal_SBZCyc6
00001C84 FB72                       	dc.w $FB72
00001C86 1C10                       	dc.b $1C, $10
00001C88 0000                       	dc.w Pal_SBZCyc7
00001C8A FB7E                       	dc.w $FB7E
00001C8C 0303                       	dc.b 3,	3
00001C8E 0000                       	dc.w Pal_SBZCyc8
00001C90 FB78                       	dc.w $FB78
00001C92 0303                       	dc.b 3,	3
00001C94 0000                       	dc.w Pal_SBZCyc8+2
00001C96 FB7A                       	dc.w $FB7A
00001C98 0303                       	dc.b 3,	3
00001C9A 0000                       	dc.w Pal_SBZCyc8+4
00001C9C FB7C                       	dc.w $FB7C
00001C9E                            	even
00001C9E                            	even
00001C9E                            Pal_SBZCycList2:include "_inc\SBZ pallet script 2.asm"
00001C9E                            ; ---------------------------------------------------------------------------
00001C9E                            ; Scrap Brain Zone 2 pallet cycling script
00001C9E                            ; ---------------------------------------------------------------------------
00001C9E 0006                       	dc.w 6
00001CA0 0708                       	dc.b 7,	8
00001CA2 0000                       	dc.w Pal_SBZCyc1
00001CA4 FB50                       	dc.w $FB50
00001CA6 0D08                       	dc.b $D, 8
00001CA8 0000                       	dc.w Pal_SBZCyc2
00001CAA FB52                       	dc.w $FB52
00001CAC 0908                       	dc.b 9,	8
00001CAE 0000                       	dc.w Pal_SBZCyc9
00001CB0 FB70                       	dc.w $FB70
00001CB2 0708                       	dc.b 7,	8
00001CB4 0000                       	dc.w Pal_SBZCyc6
00001CB6 FB72                       	dc.w $FB72
00001CB8 0303                       	dc.b 3,	3
00001CBA 0000                       	dc.w Pal_SBZCyc8
00001CBC FB78                       	dc.w $FB78
00001CBE 0303                       	dc.b 3,	3
00001CC0 0000                       	dc.w Pal_SBZCyc8+2
00001CC2 FB7A                       	dc.w $FB7A
00001CC4 0303                       	dc.b 3,	3
00001CC6 0000                       	dc.w Pal_SBZCyc8+4
00001CC8 FB7C                       	dc.w $FB7C
00001CCA                            	even
00001CCA                            	even
00001CCA                            
00001CCA                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001CDA                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001CEA                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001CFA                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D06                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D16                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D26                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D46                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D50                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001D60                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001D6C                            ; ---------------------------------------------------------------------------
00001D6C                            ; Subroutine to	fade out and fade in
00001D6C                            ; ---------------------------------------------------------------------------
00001D6C                            
00001D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D6C                            
00001D6C                            
00001D6C                            Pal_FadeTo:
00001D6C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w ; set start position to $3F
00001D72                            
00001D72                            Pal_FadeTo2:
00001D72 7000                       		moveq	#0,d0
00001D74 41F8 FB00                  		lea	($FFFFFB00).w,a0 ; load pallete to a0
00001D78 1038 F626                  		move.b	($FFFFF626).w,d0 ; load fadding start position
00001D7C D0C0                       		adda.w	d0,a0		 ; add it to pallete start offset
00001D7E 7200                       		moveq	#0,d1
00001D80 1038 F627                  		move.b	($FFFFF627).w,d0 ; load number of colours to fade
00001D84                            
00001D84                            Pal_ToBlack:
00001D84 30C1                       		move.w	d1,(a0)+	; fill colour with black
00001D86 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; repeat for the amount of colours
00001D8A                            
00001D8A 383C 0015                  		move.w	#$15,d4
00001D8E                            ;loc_1DCE:
00001D8E                            Pal_FadeTo_Loop:
00001D8E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001D94 6100 0000                  		bsr.w	DelayProgram
00001D98 6100                       		bsr.s	Pal_FadeIn
00001D9A 6100 F806                  		bsr.w	RunPLC_RAM
00001D9E 51CC FFEE                  		dbf	d4,Pal_FadeTo_Loop	; repeat $15 more times
00001DA2 4E75                       		rts
00001DA4                            ; End of function Pal_FadeTo
00001DA4                            
00001DA4                            ; ---------------------------------------------------------------------------
00001DA4                            ; Pallet fade-in subroutine
00001DA4                            ; ---------------------------------------------------------------------------
00001DA4                            
00001DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA4                            
00001DA4                            
00001DA4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DA4 7000                       		moveq	#0,d0
00001DA6 41F8 FB00                  		lea	($FFFFFB00).w,a0 ; load current pallete to a0
00001DAA 43F8 FB80                  		lea	($FFFFFB80).w,a1 ; load target pallete to a1
00001DAE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DB2 D0C0                       		adda.w	d0,a0
00001DB4 D2C0                       		adda.w	d0,a1
00001DB6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DBA                            
00001DBA                            loc_1DFA:
00001DBA 6100                       		bsr.s	Pal_AddColor
00001DBC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001DC0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001DC6 6600                       		bne.s	locret_1E24
00001DC8 7000                       		moveq	#0,d0
00001DCA 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DCE 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001DD2 1038 F626                  		move.b	($FFFFF626).w,d0
00001DD6 D0C0                       		adda.w	d0,a0
00001DD8 D2C0                       		adda.w	d0,a1
00001DDA 1038 F627                  		move.b	($FFFFF627).w,d0
00001DDE                            
00001DDE                            loc_1E1E:
00001DDE 6100                       		bsr.s	Pal_AddColor
00001DE0 51C8 FFFC                  		dbf	d0,loc_1E1E
00001DE4                            
00001DE4                            locret_1E24:
00001DE4 4E75                       		rts	
00001DE6                            ; End of function Pal_FadeIn
00001DE6                            
00001DE6                            
00001DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE6                            
00001DE6                            
00001DE6                            Pal_AddColor:				; XREF: Pal_FadeIn
00001DE6 3419                       		move.w	(a1)+,d2
00001DE8 3610                       		move.w	(a0),d3
00001DEA B642                       		cmp.w	d2,d3
00001DEC 6700                       		beq.s	loc_1E4E
00001DEE 3203                       		move.w	d3,d1
00001DF0 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001DF4 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001DF6 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001DF8 30C1                       		move.w	d1,(a0)+	; update pallet
00001DFA 4E75                       		rts	
00001DFC                            ; ===========================================================================
00001DFC                            
00001DFC                            Pal_AddGreen:				; XREF: Pal_AddColor
00001DFC 3203                       		move.w	d3,d1
00001DFE 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E02 B242                       		cmp.w	d2,d1
00001E04 6200                       		bhi.s	Pal_AddRed
00001E06 30C1                       		move.w	d1,(a0)+	; update pallet
00001E08 4E75                       		rts	
00001E0A                            ; ===========================================================================
00001E0A                            
00001E0A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E0A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E0C 4E75                       		rts	
00001E0E                            ; ===========================================================================
00001E0E                            
00001E0E                            loc_1E4E:				; XREF: Pal_AddColor
00001E0E 5448                       		addq.w	#2,a0
00001E10 4E75                       		rts	
00001E12                            ; End of function Pal_AddColor
00001E12                            
00001E12                            
00001E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E12                            
00001E12                            
00001E12                            Pal_FadeFrom:
00001E12 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E18 383C 0015                  		move.w	#$15,d4
00001E1C                            
00001E1C                            loc_1E5C:
00001E1C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E22 6100 0000                  		bsr.w	DelayProgram
00001E26 6100                       		bsr.s	Pal_FadeOut
00001E28 6100 F778                  		bsr.w	RunPLC_RAM
00001E2C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E30 4E75                       		rts	
00001E32                            ; End of function Pal_FadeFrom
00001E32                            
00001E32                            ; ---------------------------------------------------------------------------
00001E32                            ; Pallet fade-out subroutine
00001E32                            ; ---------------------------------------------------------------------------
00001E32                            
00001E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E32                            
00001E32                            
00001E32                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E32 7000                       		moveq	#0,d0
00001E34 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E38 1038 F626                  		move.b	($FFFFF626).w,d0
00001E3C D0C0                       		adda.w	d0,a0
00001E3E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E42                            
00001E42                            loc_1E82:
00001E42 6100                       		bsr.s	Pal_DecColor
00001E44 51C8 FFFC                  		dbf	d0,loc_1E82
00001E48                            
00001E48 7000                       		moveq	#0,d0
00001E4A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E4E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E52 D0C0                       		adda.w	d0,a0
00001E54 1038 F627                  		move.b	($FFFFF627).w,d0
00001E58                            
00001E58                            loc_1E98:
00001E58 6100                       		bsr.s	Pal_DecColor
00001E5A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E5E 4E75                       		rts	
00001E60                            ; End of function Pal_FadeOut
00001E60                            
00001E60                            
00001E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E60                            
00001E60                            
00001E60                            Pal_DecColor:				; XREF: Pal_FadeOut
00001E60 3410                       		move.w	(a0),d2
00001E62 6700                       		beq.s	loc_1ECC
00001E64 3202                       		move.w	d2,d1
00001E66 0241 000E                  		andi.w	#$E,d1
00001E6A 6700                       		beq.s	Pal_DecGreen
00001E6C 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E6E 4E75                       		rts	
00001E70                            ; ===========================================================================
00001E70                            
00001E70                            Pal_DecGreen:				; XREF: Pal_DecColor
00001E70 3202                       		move.w	d2,d1
00001E72 0241 00E0                  		andi.w	#$E0,d1
00001E76 6700                       		beq.s	Pal_DecBlue
00001E78 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001E7C 4E75                       		rts	
00001E7E                            ; ===========================================================================
00001E7E                            
00001E7E                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001E7E 3202                       		move.w	d2,d1
00001E80 0241 0E00                  		andi.w	#$E00,d1
00001E84 6700                       		beq.s	loc_1ECC
00001E86 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001E8A 4E75                       		rts	
00001E8C                            ; ===========================================================================
00001E8C                            
00001E8C                            loc_1ECC:				; XREF: Pal_DecColor
00001E8C 5448                       		addq.w	#2,a0
00001E8E 4E75                       		rts	
00001E90                            ; End of function Pal_DecColor
00001E90                            
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Subroutine to	fill the pallet	with white (special stage)
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            
00001E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E90                            
00001E90                            
00001E90                            Pal_MakeWhite:				; XREF: SpecialStage
00001E90 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E96 7000                       		moveq	#0,d0
00001E98 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E9C 1038 F626                  		move.b	($FFFFF626).w,d0
00001EA0 D0C0                       		adda.w	d0,a0
00001EA2 323C 0EEE                  		move.w	#$EEE,d1
00001EA6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EAA                            
00001EAA                            PalWhite_Loop:
00001EAA 30C1                       		move.w	d1,(a0)+
00001EAC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EB0 383C 0015                  		move.w	#$15,d4
00001EB4                            
00001EB4                            loc_1EF4:
00001EB4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EBA 6100 0000                  		bsr.w	DelayProgram
00001EBE 6100                       		bsr.s	Pal_WhiteToBlack
00001EC0 6100 F6E0                  		bsr.w	RunPLC_RAM
00001EC4 51CC FFEE                  		dbf	d4,loc_1EF4
00001EC8 4E75                       		rts	
00001ECA                            ; End of function Pal_MakeWhite
00001ECA                            
00001ECA                            
00001ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ECA                            
00001ECA                            
00001ECA                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001ECA 7000                       		moveq	#0,d0
00001ECC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001ED0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001ED4 1038 F626                  		move.b	($FFFFF626).w,d0
00001ED8 D0C0                       		adda.w	d0,a0
00001EDA D2C0                       		adda.w	d0,a1
00001EDC 1038 F627                  		move.b	($FFFFF627).w,d0
00001EE0                            
00001EE0                            loc_1F20:
00001EE0 6100                       		bsr.s	Pal_DecColor2
00001EE2 51C8 FFFC                  		dbf	d0,loc_1F20
00001EE6                            
00001EE6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001EEC 6600                       		bne.s	locret_1F4A
00001EEE 7000                       		moveq	#0,d0
00001EF0 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EF4 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001EF8 1038 F626                  		move.b	($FFFFF626).w,d0
00001EFC D0C0                       		adda.w	d0,a0
00001EFE D2C0                       		adda.w	d0,a1
00001F00 1038 F627                  		move.b	($FFFFF627).w,d0
00001F04                            
00001F04                            loc_1F44:
00001F04 6100                       		bsr.s	Pal_DecColor2
00001F06 51C8 FFFC                  		dbf	d0,loc_1F44
00001F0A                            
00001F0A                            locret_1F4A:
00001F0A 4E75                       		rts	
00001F0C                            ; End of function Pal_WhiteToBlack
00001F0C                            
00001F0C                            
00001F0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0C                            
00001F0C                            
00001F0C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F0C 3419                       		move.w	(a1)+,d2
00001F0E 3610                       		move.w	(a0),d3
00001F10 B642                       		cmp.w	d2,d3
00001F12 6700                       		beq.s	loc_1F78
00001F14 3203                       		move.w	d3,d1
00001F16 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F1A 6500                       		bcs.s	loc_1F64
00001F1C B242                       		cmp.w	d2,d1
00001F1E 6500                       		bcs.s	loc_1F64
00001F20 30C1                       		move.w	d1,(a0)+
00001F22 4E75                       		rts	
00001F24                            ; ===========================================================================
00001F24                            
00001F24                            loc_1F64:				; XREF: Pal_DecColor2
00001F24 3203                       		move.w	d3,d1
00001F26 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F2A 6500                       		bcs.s	loc_1F74
00001F2C B242                       		cmp.w	d2,d1
00001F2E 6500                       		bcs.s	loc_1F74
00001F30 30C1                       		move.w	d1,(a0)+
00001F32 4E75                       		rts	
00001F34                            ; ===========================================================================
00001F34                            
00001F34                            loc_1F74:				; XREF: loc_1F64
00001F34 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F36 4E75                       		rts	
00001F38                            ; ===========================================================================
00001F38                            
00001F38                            loc_1F78:				; XREF: Pal_DecColor2
00001F38 5448                       		addq.w	#2,a0
00001F3A 4E75                       		rts	
00001F3C                            ; End of function Pal_DecColor2
00001F3C                            
00001F3C                            ; ---------------------------------------------------------------------------
00001F3C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F3C                            ; ---------------------------------------------------------------------------
00001F3C                            
00001F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F3C                            
00001F3C                            
00001F3C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F3C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F42 383C 0015                  		move.w	#$15,d4
00001F46                            
00001F46                            loc_1F86:
00001F46 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F4C 6100 0000                  		bsr.w	DelayProgram
00001F50 6100                       		bsr.s	Pal_ToWhite
00001F52 6100 F64E                  		bsr.w	RunPLC_RAM
00001F56 51CC FFEE                  		dbf	d4,loc_1F86
00001F5A 4E75                       		rts	
00001F5C                            ; End of function Pal_MakeFlash
00001F5C                            
00001F5C                            
00001F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F5C                            
00001F5C                            
00001F5C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F5C 7000                       		moveq	#0,d0
00001F5E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F62 1038 F626                  		move.b	($FFFFF626).w,d0
00001F66 D0C0                       		adda.w	d0,a0
00001F68 1038 F627                  		move.b	($FFFFF627).w,d0
00001F6C                            
00001F6C                            loc_1FAC:
00001F6C 6100                       		bsr.s	Pal_AddColor2
00001F6E 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F72 7000                       		moveq	#0,d0
00001F74 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F78 1038 F626                  		move.b	($FFFFF626).w,d0
00001F7C D0C0                       		adda.w	d0,a0
00001F7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F82                            
00001F82                            loc_1FC2:
00001F82 6100                       		bsr.s	Pal_AddColor2
00001F84 51C8 FFFC                  		dbf	d0,loc_1FC2
00001F88 4E75                       		rts	
00001F8A                            ; End of function Pal_ToWhite
00001F8A                            
00001F8A                            
00001F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F8A                            
00001F8A                            
00001F8A                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001F8A 3410                       		move.w	(a0),d2
00001F8C 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001F90 6700                       		beq.s	loc_2006
00001F92 3202                       		move.w	d2,d1
00001F94 0241 000E                  		andi.w	#$E,d1
00001F98 0C41 000E                  		cmpi.w	#$E,d1
00001F9C 6700                       		beq.s	loc_1FE2
00001F9E 5458                       		addq.w	#2,(a0)+	; increase red value
00001FA0 4E75                       		rts	
00001FA2                            ; ===========================================================================
00001FA2                            
00001FA2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FA2 3202                       		move.w	d2,d1
00001FA4 0241 00E0                  		andi.w	#$E0,d1
00001FA8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FAC 6700                       		beq.s	loc_1FF4
00001FAE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FB2 4E75                       		rts	
00001FB4                            ; ===========================================================================
00001FB4                            
00001FB4                            loc_1FF4:				; XREF: loc_1FE2
00001FB4 3202                       		move.w	d2,d1
00001FB6 0241 0E00                  		andi.w	#$E00,d1
00001FBA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FBE 6700                       		beq.s	loc_2006
00001FC0 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FC4 4E75                       		rts	
00001FC6                            ; ===========================================================================
00001FC6                            
00001FC6                            loc_2006:				; XREF: Pal_AddColor2
00001FC6 5448                       		addq.w	#2,a0
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_AddColor2
00001FCA                            
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            ; Pallet cycling routine - Sega	logo
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            PalCycle_Sega:				; XREF: SegaScreen
00001FCA 4A38 F635                  		tst.b	($FFFFF635).w
00001FCE 6600                       		bne.s	loc_206A
00001FD0 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FD4 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001FDA 7205                       		moveq	#5,d1
00001FDC 3038 F632                  		move.w	($FFFFF632).w,d0
00001FE0                            
00001FE0                            loc_2020:
00001FE0 6A00                       		bpl.s	loc_202A
00001FE2 5448                       		addq.w	#2,a0
00001FE4 5341                       		subq.w	#1,d1
00001FE6 5440                       		addq.w	#2,d0
00001FE8 60F6                       		bra.s	loc_2020
00001FEA                            ; ===========================================================================
00001FEA                            
00001FEA                            loc_202A:				; XREF: PalCycle_Sega
00001FEA 3400                       		move.w	d0,d2
00001FEC 0242 001E                  		andi.w	#$1E,d2
00001FF0 6600                       		bne.s	loc_2034
00001FF2 5440                       		addq.w	#2,d0
00001FF4                            
00001FF4                            loc_2034:
00001FF4 0C40 0060                  		cmpi.w	#$60,d0
00001FF8 6400                       		bcc.s	loc_203E
00001FFA 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00001FFE                            
00001FFE                            loc_203E:
00001FFE 5440                       		addq.w	#2,d0
00002000 51C9 FFE8                  		dbf	d1,loc_202A
00002004 3038 F632                  		move.w	($FFFFF632).w,d0
00002008 5440                       		addq.w	#2,d0
0000200A 3400                       		move.w	d0,d2
0000200C 0242 001E                  		andi.w	#$1E,d2
00002010 6600                       		bne.s	loc_2054
00002012 5440                       		addq.w	#2,d0
00002014                            
00002014                            loc_2054:
00002014 0C40 0064                  		cmpi.w	#$64,d0
00002018 6D00                       		blt.s	loc_2062
0000201A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002020 70F4                       		moveq	#-$C,d0
00002022                            
00002022                            loc_2062:
00002022 31C0 F632                  		move.w	d0,($FFFFF632).w
00002026 7001                       		moveq	#1,d0
00002028 4E75                       		rts	
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_206A:				; XREF: loc_202A
0000202A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000202E 6A00                       		bpl.s	loc_20BC
00002030 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002036 3038 F632                  		move.w	($FFFFF632).w,d0
0000203A 0640 000C                  		addi.w	#$C,d0
0000203E 0C40 0030                  		cmpi.w	#$30,d0
00002042 6500                       		bcs.s	loc_2088
00002044 7000                       		moveq	#0,d0
00002046 4E75                       		rts	
00002048                            ; ===========================================================================
00002048                            
00002048                            loc_2088:				; XREF: loc_206A
00002048 31C0 F632                  		move.w	d0,($FFFFF632).w
0000204C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002052 41F0 0000                  		lea	(a0,d0.w),a0
00002056 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000205A 22D8                       		move.l	(a0)+,(a1)+
0000205C 22D8                       		move.l	(a0)+,(a1)+
0000205E 3298                       		move.w	(a0)+,(a1)
00002060 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002064 7000                       		moveq	#0,d0
00002066 722C                       		moveq	#$2C,d1
00002068                            
00002068                            loc_20A8:
00002068 3400                       		move.w	d0,d2
0000206A 0242 001E                  		andi.w	#$1E,d2
0000206E 6600                       		bne.s	loc_20B2
00002070 5440                       		addq.w	#2,d0
00002072                            
00002072                            loc_20B2:
00002072 3390 0000                  		move.w	(a0),(a1,d0.w)
00002076 5440                       		addq.w	#2,d0
00002078 51C9 FFEE                  		dbf	d1,loc_20A8
0000207C                            
0000207C                            loc_20BC:
0000207C 7001                       		moveq	#1,d0
0000207E 4E75                       		rts	
00002080                            ; End of function PalCycle_Sega
00002080                            
00002080                            ; ===========================================================================
00002080                            
00002080                            Pal_Sega1:	incbin	pallet\sega1.bin
000020A0                            Pal_Sega2:	incbin	pallet\sega2.bin
000020D0                            
000020D0                            ; ===========================================================================
000020D0                            ; Subroutines to load pallets
000020D0                            ; ===========================================================================
000020D0                            ; Input:	d0 - pallete index
000020D0                            ; ---------------------------------------------------------------------------
000020D0                            
000020D0                            PalLoad1:
000020D0 43F9 0000 0000             		lea	(PalPointers).l,a1
000020D6 E748                       		lsl.w	#3,d0		; multiple pallete index by 8
000020D8 D2C0                       		adda.w	d0,a1
000020DA 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
000020DC 3659                       		movea.w	(a1)+,a3	; load RAM destination
000020DE D6FC 0080                  		adda.w	#$80,a3
000020E2 3E19                       		move.w	(a1)+,d7	; load pallete lenght
000020E4                            
000020E4 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
000020E6 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
000020EA 4E75                       		rts	
000020EC                            ; End of function PalLoad1
000020EC                            
000020EC                            
000020EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020EC                            
000020EC                            
000020EC                            PalLoad2:
000020EC 43F9 0000 0000             		lea	(PalPointers).l,a1
000020F2 E748                       		lsl.w	#3,d0		; multiple pallete index by 8
000020F4 D2C0                       		adda.w	d0,a1
000020F6 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
000020F8 3659                       		movea.w	(a1)+,a3	; load RAM destination
000020FA 3E19                       		move.w	(a1)+,d7	; load pallete lenght
000020FC                            
000020FC 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
000020FE 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
00002102 4E75                       		rts	
00002104                            ; End of function PalLoad2
00002104                            
00002104                            ; ---------------------------------------------------------------------------
00002104                            ; Underwater pallet loading subroutine
00002104                            ; ---------------------------------------------------------------------------
00002104                            
00002104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002104                            
00002104                            
00002104                            PalLoad3_Water:
00002104 43F9 0000 0000             		lea	(PalPointers).l,a1
0000210A E748                       		lsl.w	#3,d0		; multiple pallete index by 8
0000210C D2C0                       		adda.w	d0,a1
0000210E 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
00002110 3659                       		movea.w	(a1)+,a3	; load RAM destination
00002112 96FC 0080                  		suba.w	#$80,a3
00002116 3E19                       		move.w	(a1)+,d7	; load pallete lenght
00002118                            
00002118 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
0000211A 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
0000211E 4E75                       		rts	
00002120                            ; End of function PalLoad3_Water
00002120                            
00002120                            
00002120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002120                            
00002120                            
00002120                            PalLoad4_Water:
00002120 43F9 0000 0000             		lea	(PalPointers).l,a1
00002126 E748                       		lsl.w	#3,d0		; multiple pallete index by 8
00002128 D2C0                       		adda.w	d0,a1
0000212A 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
0000212C 3659                       		movea.w	(a1)+,a3	; load RAM destination
0000212E 96FC 0100                  		suba.w	#$100,a3
00002132 3E19                       		move.w	(a1)+,d7	; load pallete lenght
00002134                            
00002134 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
00002136 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
0000213A 4E75                       		rts	
0000213C                            ; End of function PalLoad4_Water
0000213C                            
0000213C                            ; ===========================================================================
0000213C                            ; ---------------------------------------------------------------------------
0000213C                            ; Pallet pointers
0000213C                            ; ---------------------------------------------------------------------------
0000213C                            PalPointers:
0000213C                            	include "_inc\Pallet pointers.asm"
0000213C                            ; ---------------------------------------------------------------------------
0000213C                            ; Pallet pointers
0000213C                            ; ---------------------------------------------------------------------------
0000213C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002140 FB00                       	dc.w $FB00		; RAM address
00002142 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002144 0000 0000                  	dc.l Pal_Title
00002148 FB00                       	dc.w $FB00
0000214A 001F                       	dc.w $1F
0000214C 0000 0000                  	dc.l Pal_LevelSel
00002150 FB00                       	dc.w $FB00
00002152 001F                       	dc.w $1F
00002154 0000 0000                  	dc.l Pal_Sonic
00002158 FB00                       	dc.w $FB00
0000215A 0007                       	dc.w 7
0000215C 0000 0000                  	dc.l Pal_GHZ
00002160 FB20                       	dc.w $FB20
00002162 0017                       	dc.w $17
00002164 0000 0000                  	dc.l Pal_LZ
00002168 FB20                       	dc.w $FB20
0000216A 0017                       	dc.w $17
0000216C 0000 0000                  	dc.l Pal_MZ
00002170 FB20                       	dc.w $FB20
00002172 0017                       	dc.w $17
00002174 0000 0000                  	dc.l Pal_SLZ
00002178 FB20                       	dc.w $FB20
0000217A 0017                       	dc.w $17
0000217C 0000 0000                  	dc.l Pal_SYZ
00002180 FB20                       	dc.w $FB20
00002182 0017                       	dc.w $17
00002184 0000 0000                  	dc.l Pal_SBZ1
00002188 FB20                       	dc.w $FB20
0000218A 0017                       	dc.w $17
0000218C 0000 0000                  	dc.l Pal_Special
00002190 FB00                       	dc.w $FB00
00002192 001F                       	dc.w $1F
00002194 0000 0000                  	dc.l Pal_LZWater
00002198 FB00                       	dc.w $FB00
0000219A 001F                       	dc.w $1F
0000219C 0000 0000                  	dc.l Pal_SBZ3
000021A0 FB20                       	dc.w $FB20
000021A2 0017                       	dc.w $17
000021A4 0000 0000                  	dc.l Pal_SBZ3Water
000021A8 FB00                       	dc.w $FB00
000021AA 001F                       	dc.w $1F
000021AC 0000 0000                  	dc.l Pal_SBZ2
000021B0 FB20                       	dc.w $FB20
000021B2 0017                       	dc.w $17
000021B4 0000 0000                  	dc.l Pal_LZSonWater
000021B8 FB00                       	dc.w $FB00
000021BA 0007                       	dc.w 7
000021BC 0000 0000                  	dc.l Pal_SBZ3SonWat
000021C0 FB00                       	dc.w $FB00
000021C2 0007                       	dc.w 7
000021C4 0000 0000                  	dc.l Pal_SpeResult
000021C8 FB00                       	dc.w $FB00
000021CA 001F                       	dc.w $1F
000021CC 0000 0000                  	dc.l Pal_SpeContinue
000021D0 FB00                       	dc.w $FB00
000021D2 000F                       	dc.w $F
000021D4 0000 0000                  	dc.l Pal_Ending
000021D8 FB00                       	dc.w $FB00
000021DA 001F                       	dc.w $1F
000021DA 001F                       	dc.w $1F
000021DC                            
000021DC                            ; ---------------------------------------------------------------------------
000021DC                            ; Pallet data
000021DC                            ; ---------------------------------------------------------------------------
000021DC                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000225C                            Pal_Title:	incbin	pallet\title.bin
000022DC                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000235C                            Pal_Sonic:	incbin	pallet\sonic.bin
0000237C                            Pal_GHZ:	incbin	pallet\ghz.bin
000023DC                            Pal_LZ:		incbin	pallet\lz.bin
0000243C                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024BC                            Pal_MZ:		incbin	pallet\mz.bin
0000251C                            Pal_SLZ:	incbin	pallet\slz.bin
0000257C                            Pal_SYZ:	incbin	pallet\syz.bin
000025DC                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000263C                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
0000269C                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000271C                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
0000277C                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000027FC                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000281C                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000283C                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028BC                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
000028FC                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
0000297C                            
0000297C                            ; ---------------------------------------------------------------------------
0000297C                            ; Subroutine to	delay the program by ($FFFFF62A) frames
0000297C                            ; ---------------------------------------------------------------------------
0000297C                            
0000297C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000297C                            
0000297C                            
0000297C                            DelayProgram:				; XREF: PauseGame
0000297C 46FC 2300                  		move	#$2300,sr	; disable interrupts
00002980 4A38 F62A                  	@wait:	tst.b	($FFFFF62A).w	; has VBlank routine finished?
00002984 66FA                       		bne.s	@wait		; if not, branch
00002986 4E75                       		rts	
00002988                            ; End of function DelayProgram
00002988                            
00002988                            ; ---------------------------------------------------------------------------
00002988                            ; Subroutine to	generate a pseudo-random number	in d0
00002988                            ; ---------------------------------------------------------------------------
00002988                            
00002988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002988                            
00002988                            
00002988                            RandomNumber:
00002988 2238 F636                  		move.l	($FFFFF636).w,d1
0000298C 6600                       		bne.s	loc_29C0
0000298E 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002994                            
00002994                            loc_29C0:
00002994 2001                       		move.l	d1,d0
00002996 E581                       		asl.l	#2,d1
00002998 D280                       		add.l	d0,d1
0000299A E781                       		asl.l	#3,d1
0000299C D280                       		add.l	d0,d1
0000299E 3001                       		move.w	d1,d0
000029A0 4841                       		swap	d1
000029A2 D041                       		add.w	d1,d0
000029A4 3200                       		move.w	d0,d1
000029A6 4841                       		swap	d1
000029A8 21C1 F636                  		move.l	d1,($FFFFF636).w
000029AC 4E75                       		rts	
000029AE                            ; End of function RandomNumber
000029AE                            
000029AE                            
000029AE                            ; ===========================================================================
000029AE                            ; Subroutine to calculate sine and cosine
000029AE                            ; ===========================================================================
000029AE                            ; Input:	d0 - Angle (0-$FF)
000029AE                            ; Output:	d0 - Sine
000029AE                            ;		d1 - Cosine
000029AE                            ; ---------------------------------------------------------------------------
000029AE                            
000029AE                            CalcSine:
000029AE 0240 00FF                  		andi.w	#$FF,d0
000029B2 D040                       		add.w	d0,d0
000029B4 0640 0080                  		addi.w	#$80,d0
000029B8 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1	; get cosine
000029BC 0440 0080                  		subi.w	#$80,d0
000029C0 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0	; get sine
000029C4 4E75                       		rts	
000029C6                            
000029C6                            Sine_Data:	incbin	misc\sinewave.bin	; pre-calculated Sine values
00002C46                            
00002C46                            ; End of function CalcSine
00002C46                            
00002C46                            ; ---------------------------------------------------------------------------
00002C46                            
00002C46                            ; ===========================================================================
00002C46                            ; Unknown subroutine to calculate something
00002C46                            ; ===========================================================================
00002C46                            
00002C46 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C4A 3200                       		move.w	d0,d1
00002C4C 4841                       		swap	d1
00002C4E 7000                       		moveq	#0,d0
00002C50 3200                       		move.w	d0,d1
00002C52 7407                       		moveq	#7,d2
00002C54                            
00002C54                            loc_2C80:
00002C54 E599                       		rol.l	#2,d1
00002C56 D040                       		add.w	d0,d0
00002C58 5240                       		addq.w	#1,d0
00002C5A 9240                       		sub.w	d0,d1
00002C5C 6400                       		bcc.s	loc_2C9A
00002C5E D240                       		add.w	d0,d1
00002C60 5340                       		subq.w	#1,d0
00002C62 51CA FFF0                  		dbf	d2,loc_2C80
00002C66 E248                       		lsr.w	#1,d0
00002C68 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C6C 4E75                       		rts	
00002C6E                            ; ===========================================================================
00002C6E                            
00002C6E                            loc_2C9A:
00002C6E 5240                       		addq.w	#1,d0
00002C70 51CA FFE2                  		dbf	d2,loc_2C80
00002C74 E248                       		lsr.w	#1,d0
00002C76 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C7A 4E75                       		rts
00002C7C                            
00002C7C                            
00002C7C                            ; ===========================================================================
00002C7C                            ; Subroutine calculate an angle
00002C7C                            ; ===========================================================================
00002C7C                            ; Input:	d1 - X-axis distance
00002C7C                            ;		d2 - Y-axis distance
00002C7C                            ; Output:	d0 - Angle
00002C7C                            ; ---------------------------------------------------------------------------
00002C7C                            
00002C7C                            CalcAngle:
00002C7C 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C80 7600                       		moveq	#0,d3
00002C82 7800                       		moveq	#0,d4
00002C84 3601                       		move.w	d1,d3
00002C86 3802                       		move.w	d2,d4
00002C88 8843                       		or.w	d3,d4
00002C8A 6700                       		beq.s	loc_2D04
00002C8C 3802                       		move.w	d2,d4
00002C8E 4A43                       		tst.w	d3
00002C90 6A00 0000                  		bpl.w	loc_2CC2
00002C94 4443                       		neg.w	d3
00002C96                            
00002C96                            loc_2CC2:
00002C96 4A44                       		tst.w	d4
00002C98 6A00 0000                  		bpl.w	loc_2CCA
00002C9C 4444                       		neg.w	d4
00002C9E                            
00002C9E                            loc_2CCA:
00002C9E B843                       		cmp.w	d3,d4
00002CA0 6400 0000                  		bcc.w	loc_2CDC
00002CA4 E18C                       		lsl.l	#8,d4
00002CA6 88C3                       		divu.w	d3,d4
00002CA8 7000                       		moveq	#0,d0
00002CAA 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CAE 6000                       		bra.s	loc_2CE6
00002CB0                            ; ===========================================================================
00002CB0                            
00002CB0                            loc_2CDC:				; XREF: CalcAngle
00002CB0 E18B                       		lsl.l	#8,d3
00002CB2 86C4                       		divu.w	d4,d3
00002CB4 7040                       		moveq	#$40,d0
00002CB6 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CBA                            
00002CBA                            loc_2CE6:
00002CBA 4A41                       		tst.w	d1
00002CBC 6A00 0000                  		bpl.w	loc_2CF2
00002CC0 4440                       		neg.w	d0
00002CC2 0640 0080                  		addi.w	#$80,d0
00002CC6                            
00002CC6                            loc_2CF2:
00002CC6 4A42                       		tst.w	d2
00002CC8 6A00 0000                  		bpl.w	loc_2CFE
00002CCC 4440                       		neg.w	d0
00002CCE 0640 0100                  		addi.w	#$100,d0
00002CD2                            
00002CD2                            loc_2CFE:
00002CD2 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CD6 4E75                       		rts	
00002CD8                            ; ===========================================================================
00002CD8                            
00002CD8                            loc_2D04:				; XREF: CalcAngle
00002CD8 303C 0040                  		move.w	#$40,d0
00002CDC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CE0 4E75                       		rts	
00002CE2                            ; End of function CalcAngle
00002CE2                            
00002CE2                            ; ===========================================================================
00002CE2                            
00002CE2                            Angle_Data:	incbin	misc\angles.bin
00002DE4                            
00002DE4                            ; ===========================================================================
00002DE4                            
00002DE4                            ; ---------------------------------------------------------------------------
00002DE4                            ; Sega screen
00002DE4                            ; ---------------------------------------------------------------------------
00002DE4                            
00002DE4                            SegaScreen:				; XREF: GameModeArray
00002DE4 103C 00E4                  		move.b	#$E4,d0
00002DE8 6100 E4DE                  		bsr.w	PlaySound_Special ; stop music
00002DEC 6100 E7A6                  		bsr.w	ClearPLC
00002DF0 6100 F020                  		bsr.w	Pal_FadeFrom
00002DF4 4DF9 00C0 0004             		lea	($C00004).l,a6
00002DFA                            
00002DFA                            		; store VDP registers
00002DFA 3CBC 8004                  		move.w	#$8004,(a6)	; $00
00002DFE 3CBC 8230                  		move.w	#$8230,(a6)	; $02, set Plane A nametable offset in VRAM
00002E02 3CBC 8407                  		move.w	#$8407,(a6)	; $04, set Plane B nametable offset in VRAM
00002E06 3CBC 8700                  		move.w	#$8700,(a6)     ; $07, set Blackdrop Color
00002E0A 3CBC 8B00                  		move.w	#$8B00,(a6)	; $0B, set Scrolling Mode
00002E0E                            
00002E0E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear water palette state
00002E12 46FC 2700                  		move	#$2700,sr	; disable interrupts
00002E16 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E1A 0200 00BF                  		andi.b	#$BF,d0
00002E1E 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E24 6100 E3CA                  		bsr.w	ClearScreen
00002E28                            
00002E28                            		; load Sega logo patterns to VRAM
00002E32 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E38 6100 E5BC                  		bsr.w	NemDec
00002E3C                            
00002E3C                            		; decompress Sega logo mappings to RAM
00002E3C 43F9 00FF 0000             		lea	($FF0000).l,a1		; load destination, where to decompress mappings
00002E42 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0	; load Sega logo mappings
00002E48 303C 0000                  		move.w	#0,d0
00002E4C 6100 E890                  		bsr.w	EniDec
00002E50                            
00002E50                            		; move uncompressed mappings to VRAM
00002E50 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E5C 7217                       		moveq	#23,d1	; cols
00002E5E 7407                       		moveq	#7,d2	; rows
00002E60 6100 E4E4                  		bsr.w	ShowVDPGraphics
00002E64 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E70 7227                       		moveq	#39,d1	; cols
00002E72 741B                       		moveq	#27,d2	; rows
00002E74 6100 E4D0                  		bsr.w	ShowVDPGraphics
00002E78                            
00002E78 7000                       		moveq	#0,d0
00002E7A 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002E7E 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002E84 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002E8A 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002E90 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002E96 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E9A 0000 0040                  		ori.b	#$40,d0
00002E9E 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EA4                            
00002EA4                            Sega_WaitPallet:
00002EA4 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EAA 6100 FAD0                  		bsr.w	DelayProgram
00002EAE 6100 F11A                  		bsr.w	PalCycle_Sega
00002EB2 66F0                       		bne.s	Sega_WaitPallet	; if pallete cycle isn't over, branch
00002EB4                            
00002EB4 103C 00E1                  		move.b	#$E1,d0
00002EB8 6100 E40E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EBC 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EC2 6100 FAB8                  		bsr.w	DelayProgram
00002EC6 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002ECC                            
00002ECC                            Sega_WaitEnd:
00002ECC 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002ED2 6100 FAA8                  		bsr.w	DelayProgram
00002ED6 4A78 F614                  		tst.w	($FFFFF614).w
00002EDA 6700                       		beq.s	Sega_GotoTitle
00002EDC 0238 0080 F605             		andi.b	#Start,(Joypad|Press).w	; is Start button pressed?
00002EE2 67E8                       		beq.s	Sega_WaitEnd		; if not, branch
00002EE4                            
00002EE4                            Sega_GotoTitle:
00002EE4 6100 0000                  		bsr.w SegaScreen2 ; go to next screen
00002EE8 4E75                       		rts
00002EEA                            
00002EEA                            ; ============================================================================================
00002EEA                            ; Sega Screen example
00002EEA                            ; This version is for splash screens that load AFTER the SEGA screen
00002EEA                            ; For A version that replaces the SEGA screen, read the guide this code came from!
00002EEA                            ; 2014, Hitaxas
00002EEA                            ; Ported to Sonic 1 Hivebrain Thanks to ProjectFM
00002EEA                            ; ============================================================================================
00002EEA                            SegaScreen2:
00002EEA 103C 00E4                  		move.b #$E4,d0 ; set music ID to "stop music"
00002EEE 4EB8 12C8                  		jsr Playsound_Special.w ; play ID
00002EF2 4EB8 1E12                  		jsr Pal_FadeFrom.w ; fade palettes out
00002EF6 4EB8 11F0                  		jsr ClearScreen.w ; clear the plane mappings
00002EFA                            		; load art, mappings and the palette
00002EFA 43F9 00FF 0000             		lea ($FF0000).l,a1 ; load dump location
00002F00 41F9 0000 0000             		lea MAPS_SEGA.l,a0 ; load compressed mappings address
00002F06 303C 0140                  		move.w #320,d0 ; prepare pattern index value to patch to mappings
00002F0A 4EB8 16DE                  		jsr EniDec.w ; decompress and dump
00002F0E 43F9 00FF 0000             		lea ($FF0000).l,a1
00002F14 203C 6000 0003             		move.l #$60000003,d0
00002F1A 7227                       		moveq #39,d1
00002F1C 741E                       		moveq #30,d2
00002F1E 6100 E426                  		bsr.w ShowVDPGraphics ; flush mappings to VRAM
00002F22 23FC 6800 0000 FFC0 0004   		move.l #$68000000,($FFC00004).l ; set vdp loc
00002F2C 41F9 0000 0000             		lea ART_SEGA.l,a0 ; load background art
00002F32 4EB8 13F6                  		jsr NemDec ; run NemDec to decompress art for display
00002F36 41F9 0000 0000             		lea Pal_SEGANew.l,a0 ; load this palette
00002F3C 43F9 FFFF FB80             		lea ($FFFFFB80).l,a1 ; set as line 2
00002F42 303C 000F                  		move.w #$F,d0
00002F46                            
00002F46                            SegaScreen_PalLoop2:
00002F46 22D8                       		move.l (a0)+,(a1)+ ; copy colours to buffer
00002F48 22D8                       		move.l (a0)+,(a1)+ ; ''
00002F4A 51C8 FFFA                  		dbf d0,SegaScreen_PalLoop2 ; repeat until done
00002F4E 4EB8 1D6C                  		jsr Pal_FadeTo ; fade palette in
00002F52 31FC 00B4 F614             		move.w #3*60,($FFFFF614).w ; set delay time (3 seconds on a 60hz system)
00002F58                            
00002F58                            Sega_MainLoop2:
00002F58 11FC 0002 F62A             		move.b #2,($FFFFF62A).w ; set V-blank routine to run
00002F5E 4EB8 297C                  		jsr DelayProgram.w ; wait for V-blank (decreases "Demo_Time_left")
00002F62 4A38 F605                  		tst.b ($FFFFF605).w ; has player 1 pressed start button?
00002F66 6B00                       		bmi.s sega_GotoTitle2 ; if so, branch
00002F68 4A78 F614                  		tst.w ($FFFFF614).w ; has the delay time finished?
00002F6C 66EA                       		bne.s Sega_MainLoop2 ; if not, branch
00002F6E                            
00002F6E                            sega_GotoTitle2:
00002F6E 11FC 0004 F600             		move.b #$04,($FFFFF600).w ; set the screen mode to Title Screen
00002F74 6100 0000                  		bsr.w SSRGScreen ; go to next screen
00002F78 4E75                       		rts ; return
00002F7A                            ; ===========================================================================
00002F7A                            ; ===========================================================================
00002F7A                            ; ---------------------------------------------------------------------------
00002F7A                            ; SSRG Splash Screen
00002F7A                            ; ---------------------------------------------------------------------------
00002F7A                            
00002F7A                            SSRGScreen:
00002F7A 70E4                       		moveq	#$FFFFFFE4,d0				; set music ID to "stop music"
00002F7C 4EB8 12C8                  		jsr	PlaySound_Special			; play ID
00002F80 4EB8 1594                  		jsr	ClearPLC				; clear pattern load cues list
00002F84 4EB8 1E12                  		jsr	Pal_FadeFrom				; fade palettes out
00002F88 4EB8 11F0                  		jsr	ClearScreen				; clear the plane mappings
00002F8C 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram address to a1
00002F90 7000                       		moveq	#$00,d0					; clear d0
00002F92 323C 01FF                  		move.w	#$01FF,d1				; set repeat times
00002F96                            
00002F96                            SRG_ClearObjects:
00002F96 22C0                       		move.l	d0,(a1)+				; clear object ram
00002F98 22C0                       		move.l	d0,(a1)+				; ''
00002F9A 22C0                       		move.l	d0,(a1)+				; ''
00002F9C 22C0                       		move.l	d0,(a1)+				; ''
00002F9E 51C9 FFF6                  		dbf	d1,SRG_ClearObjects			; repeat til all object slots are cleared
00002FA2 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00002FA6 4DF9 00C0 0004             		lea	($C00004).l,a6				; load VDP address port address
00002FAC 3CBC 8700                  		move.w	#$8700,(a6)				; set backdrop colour to the very first colour
00002FB0 3CBC 8B03                  		move.w	#$8B03,(a6)				; set scroll mode to horizontal sliced (by line)
00002FB4 21FC FFF8 FFD4 F616        		move.l	#$FFF8FFD4,($FFFFF616).w		; set Y scroll positions
00002FBC 23FC 4020 0000 00C0 0004   		move.l	#$40200000,($C00004).l			; set VDP to V-Ram write mode with address
00002FC6 41FA 0000                  		lea	ArtMain_SSRG(pc),a0			; load compressed art address
00002FCA 4EB8 13F6                  		jsr	NemDec					; decompress and dump
00002FCE 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l			; set VDP to V-Ram write mode with address
00002FD8 41FA 0000                  		lea	ArtSquare_SSRG(pc),a0			; load compressed art address
00002FDC 4EB8 13F6                  		jsr	NemDec					; decompress and dump
00002FE0 23FC 4000 0002 00C0 0004   		move.l	#$40000002,($C00004).l			; set VDP to V-Ram write mode with address
00002FEA 41FA 0000                  		lea	ArtSonic_SSRG(pc),a0			; load compressed art address
00002FEE 4EB8 13F6                  		jsr	NemDec					; decompress and dump
00002FF2 23FC 5000 0002 00C0 0004   		move.l	#$50000002,($C00004).l			; set VDP to V-Ram write mode with address
00002FFC 41FA 0000                  		lea	ArtLink_SSRG(pc),a0			; load compressed art address
00003000 4EB8 13F6                  		jsr	NemDec					; decompress and dump
00003004 41FA 0000                  		lea	MapLink_SSRG(pc),a0			; load compressed mappings address
00003008 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
0000300E 4EB8 185C                  		jsr	KosDec					; decompress and dump
00003012 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
00003018 701F                       		moveq	#$1F,d0					; set number of columns
0000301A 7200                       		moveq	#$00,d1					; set number of rows
0000301C 243C 4C08 0003             		move.l	#$4C080003,d2				; set to write to FG plane
00003022 6100 0000                  		bsr	MapScreen				; write to the map plane
00003026 41FA 0000                  		lea	MapMain_SSRG(pc),a0			; load compressed mappings address
0000302A 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
00003030 4EB8 185C                  		jsr	KosDec					; decompress and dump
00003034 41FA 0000                  		lea	MapSquare_SSRG(pc),a0			; load compressed mappings address
00003038 43F9 FFFF 4000             		lea	($FFFF4000).l,a1			; set temporary ram space to dump to
0000303E 4EB8 185C                  		jsr	KosDec					; decompress and dump
00003042 41FA 0000                  		lea	Pal_SSRG(pc),a0				; load palette address to a0
00003046 43F8 FB80                  		lea	($FFFFFB80).w,a1			; load palette buffer address to a1
0000304A 7E07                       		moveq	#$07,d7					; set repeat times
0000304C                            
0000304C                            SRG_DumpPal:
0000304C 22D8                       		move.l	(a0)+,(a1)+				; dump palette
0000304E 22D8                       		move.l	(a0)+,(a1)+				; ''
00003050 22D8                       		move.l	(a0)+,(a1)+				; ''
00003052 22D8                       		move.l	(a0)+,(a1)+				; ''
00003054 51CF FFF6                  		dbf	d7,SRG_DumpPal				; repeat until done
00003058 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram to a1
0000305C 12BC 0001                  		move.b	#$01,(a1)				; set "S"
00003060 137C 0002 0040             		move.b	#$02,$40(a1)				; set "S"
00003066 137C 0003 0080             		move.b	#$03,$80(a1)				; set "R"
0000306C 137C 0004 00C0             		move.b	#$04,$C0(a1)				; set "G"
00003072 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
00003076 4EB8 1D6C                  		jsr	Pal_FadeTo				; fade palettes in
0000307A 7000                       		moveq	#$00,d0					; clear d0
0000307C 23C0 FFFF 7800             		move.l	d0,($FFFF7800).l			; reset SSRG timer/flags
00003082 23C0 FFFF 7804             		move.l	d0,($FFFF7804).l			; ''
00003088 23C0 FFFF 7808             		move.l	d0,($FFFF7808).l			; ''
0000308E                            
0000308E                            ; ---------------------------------------------------------------------------
0000308E                            ; SSRG Splash Screen main loop
0000308E                            ; ---------------------------------------------------------------------------
0000308E                            
0000308E                            SSRGScreen_Loop:
0000308E 11FC 0004 F62A             		move.b	#$04,($FFFFF62A).w			; set V-Blank routine to run
00003094 4EB8 297C                  		jsr	DelayProgram				; hult til V-Blank begins
00003098 5279 FFFF 7800             		addq.w	#$01,($FFFF7800).l			; increase timer
0000309E 41F8 D000                  		lea	($FFFFD000).w,a0			; load "S" object ram
000030A2 6100 0000                  		bsr	ObjectLetters				; run "S"
000030A6 41E8 0040                  		lea	$40(a0),a0				; load "S" object ram
000030AA 6100 0000                  		bsr	ObjectLetters				; run "S"
000030AE 41E8 0040                  		lea	$40(a0),a0				; load "R" object ram
000030B2 6100 0000                  		bsr	ObjectLetters				; run "R"
000030B6 41E8 0040                  		lea	$40(a0),a0				; load "G" object ram
000030BA 6100 0000                  		bsr	ObjectLetters				; run "G"
000030BE 41E8 0040                  		lea	$40(a0),a0				; load Square object ram
000030C2 6100 0000                  		bsr	ObjectSquare				; run Square
000030C6 41F8 D140                  		lea	($FFFFD140).w,a0			; load Neon Sonic object ram
000030CA 6100 0000                  		bsr	ObjectSonicNeon				; run Neon Sonic
000030CE 6100 0000                  		bsr	SRG_ScrollFG				; scroll the FG plane correctly
000030D2 6100 0000                  		bsr	SRG_DrawFG				; draw the FG plane correctly
000030D6 4EB9 0000 0000             		jsr	BuildSprites				; present all object sprites on screen
000030DC 4A38 F605                  		tst.b	($FFFFF605).w				; has player 1 pressed start button?
000030E0 6B00 0000                  		bmi	SSRGScreen_Finish			; if so, branch
000030E4 0C79 0200 FFFF 7800        		cmpi.w	#$0200,($FFFF7800).l			; has timer finished?
000030EC 6DA0                       		blt	SSRGScreen_Loop				; if not, loop
000030EE                            
000030EE                            SSRGScreen_Finish:
000030EE 11FC 0004 F600             		move.b	#$04,($FFFFF600).w			; set the screen mode to Title Screen
000030F4 4E75                       		rts						; return
000030F6                            
000030F6                            ; ===========================================================================
000030F6                            ; ---------------------------------------------------------------------------
000030F6                            ; Subroutine to control the FG scrolling
000030F6                            ; ---------------------------------------------------------------------------
000030F6                            
000030F6                            SRG_ScrollFG:
000030F6 43F8 CDCC                  		lea	($FFFFCDCC).w,a1			; load the horizontal scroll buffer address
000030FA 7000                       		moveq	#$00,d0					; clear d0
000030FC 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
00003102 0640 0030                  		addi.w	#$0030,d0				; increase to scroll in sooner
00003106 0C40 00F7                  		cmpi.w	#$00F7,d0				; has timer reached finish?
0000310A 6C00 0000                  		bge	SRG_FinFGScroll				; if not, branch
0000310E D040                       		add.w	d0,d0					; multiply by 2
00003110 4440                       		neg.w	d0					; negate to move left insted
00003112 4840                       		swap	d0					; send left for FG
00003114 7E1F                       		moveq	#$1F,d7					; set repeat times
00003116                            
00003116                            SRG_SFG_Scroll01:
00003116 22C0                       		move.l	d0,(a1)+				; dump to buffer
00003118 51CF FFFC                  		dbf	d7,SRG_SFG_Scroll01			; repeat til this section is done
0000311C                            
0000311C                            SRG_FinFGScroll:
0000311C 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load the horizontal scroll buffer address
00003120 3039 FFFF 7808             		move.w	($FFFF7808).l,d0			; set BG position
00003126 3E3C 00DF                  		move.w	#$00DF,d7				; set repeat times
0000312A                            
0000312A                            SRG_SBG_Scroll02:
0000312A 5449                       		addq.w	#$02,a1					; skip FG
0000312C 32C0                       		move.w	d0,(a1)+				; dump BG
0000312E 51CF FFFA                  		dbf	d7,SRG_SBG_Scroll02			; repeat for all scanlines
00003132 4E75                       		rts						; return
00003134                            
00003134                            ; ===========================================================================
00003134                            ; ---------------------------------------------------------------------------
00003134                            ; Subroutine to control the FG map/drawing
00003134                            ; ---------------------------------------------------------------------------
00003134                            
00003134                            SRG_DrawFG:
00003134 7000                       		moveq	#$00,d0					; clear d0
00003136 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
0000313C D040                       		add.w	d0,d0					; multiply by 2
0000313E 0440 0040                  		subi.w	#$0040,d0				; subtract starting point
00003142 0C40 0110                  		cmpi.w	#$0110,d0				; has the scrolling surpassed the starting or ending par?
00003146 6200 0000                  		bhi	SRG_DFG_FlashOn				; if so, branch
0000314A 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
0000314E 49F9 FFFF 0000             		lea	($FFFF0000).l,a4			; load map buffer space address to a4
00003154 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
0000315A 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
0000315E 2C3C 4704 0003             		move.l	#$47040003,d6				; set starting V-Ram
00003164 0240 01F8                  		andi.w	#$01F8,d0				; get within 8 pixels
00003168 E448                       		lsr.w	#$02,d0					; divide by 4
0000316A 3200                       		move.w	d0,d1					; copy to d1
0000316C 4840                       		swap	d0					; align
0000316E DC80                       		add.l	d0,d6					; add to V-Ram address
00003170 D8C1                       		adda.w	d1,a4					; add to map buffer address
00003172 3CBC 8F80                  		move.w	#$8F80,(a6)				; set increment mode to 80 (new line)
00003176 323C 2000                  		move.w	#$2000,d1				; prepare palette line add value
0000317A 2C86                       		move.l	d6,(a6)					; set VDP mode and address
0000317C 3014                       		move.w	(a4),d0					; load map tile
0000317E D041                       		add.w	d1,d0					; increase palette to next line
00003180 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003182 49EC 0046                  		lea	$46(a4),a4				; advance to next line
00003186 3014                       		move.w	(a4),d0					; load map tile
00003188 D041                       		add.w	d1,d0					; increase palette to next line
0000318A 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
0000318C 49EC 0046                  		lea	$46(a4),a4				; advance to next line
00003190 3014                       		move.w	(a4),d0					; load map tile
00003192 D041                       		add.w	d1,d0					; increase palette to next line
00003194 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003196 3CBC 8F02                  		move.w	#$8F02,(a6)				; set increment mode to 02 (standard word)
0000319A 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
0000319E 4E75                       		rts						; return
000031A0                            
000031A0                            SRG_DFG_FlashOn:
000031A0 0440 0170                  		subi.w	#$0170,d0				; minus starting point
000031A4 6B00 0000                  		bmi	SRG_DFG_NoDraw				; if not reached the starting point, branch
000031A8 7A00                       		moveq	#$00,d5					; set tile add value (Light)
000031AA 0C40 0060                  		cmpi.w	#$0060,d0				; has it reached PASSED the ending point?
000031AE 6200 0000                  		bhi	SRG_DFG_NoDraw				; if so, branch to skip the lot
000031B2 0C40 0050                  		cmpi.w	#$0050,d0				; has it reached the ending point?
000031B6 6200 0000                  		bhi	SRG_DFG_DrawFlash			; if so, branch for lights on
000031BA 0200 0008                  		andi.b	#$08,d0					; get within 8
000031BE 6700 0000                  		beq	SRG_DFG_DrawFlash			; if from 0 to 7 insted of 8 to F, branch
000031C2 3A3C 2000                  		move.w	#$2000,d5				; set tile add value (Faded)
000031C6                            
000031C6                            SRG_DFG_DrawFlash:
000031C6 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
000031CC 7022                       		moveq	#$22,d0					; set number of columns
000031CE 7202                       		moveq	#$02,d1					; set number of rows
000031D0 243C 4704 0003             		move.l	#$47040003,d2				; set to write to FG plane
000031D6 6100 0000                  		bsr	MapScreenAdd				; write to the map plane
000031DA                            
000031DA                            SRG_DFG_NoDraw:
000031DA 4E75                       		rts						; return
000031DC                            
000031DC                            ; ===========================================================================
000031DC                            ; ---------------------------------------------------------------------------
000031DC                            ; Subroutine to control a Neon Sonic object
000031DC                            ; ---------------------------------------------------------------------------
000031DC                            
000031DC                            ObjectSonicNeon:
000031DC 4A28 0024                  		tst.b	$24(a0)					; has the object alread been setup?
000031E0 6600 0000                  		bne	OSN_SetupDone				; if so, branch
000031E4 10BC 0001                  		move.b	#$01,(a0)				; engine doesn't like the ID being null
000031E8 317C 6400 0002             		move.w	#$6400,$02(a0)				; set V-Ram address read
000031EE 217C 0000 0000 0004        		move.l	#ObjSonNeonMap,$04(a0)			; set mappings to use
000031F6 217C 0000 00DE 0008        		move.l	#$000000DE,$08(a0)			; set starting X and Y positions
000031FE 317C 2020 0018             		move.w	#$2020,$18(a0)				; set out of distance display & width
00003204 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
0000320A 317C 00C0 002A             		move.w	#$00C0,$2A(a0)				; set timer
00003210 317C 0400 0010             		move.w	#$0400,$10(a0)				; set X speed
00003216 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
0000321A                            
0000321A                            OSN_SetupDone:
0000321A 4A68 002A                  		tst.w	$2A(a0)					; has timer finished?
0000321E 6700 0000                  		beq	OSN_MoveIn				; if not, branch
00003222 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
00003226 4E75                       		rts						; return
00003228                            
00003228                            OSN_MoveIn:
00003228 0C28 0002 0024             		cmpi.b	#$02,$24(a0)				; is the routine counter still at sonic moving?
0000322E 6E00 0000                  		bgt	OSN_NoStop				; if not, branch
00003232 0C68 00DE 0008             		cmpi.w	#$00DE,$08(a0)				; has sonic moved to the square yet?
00003238 6D00 0000                  		blt	OSN_NoStop				; if not, branch
0000323C 317C 00DE 0008             		move.w	#$00DE,$08(a0)				; set him directly at the square
00003242 4268 0010                  		clr.w	$10(a0)					; stop sonic moving (no X speed)
00003246 70BE                       		moveq	#$FFFFFFBE,d0				; set to play spinning SFX
00003248 4EB8 12C8                  		jsr	PlaySound_Special			; play SFX
0000324C 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003250                            
00003250                            OSN_NoStop:
00003250 0668 0040 002C             		addi.w	#$0040,$2C(a0)				; increase map speed
00003256 1028 002C                  		move.b	$2C(a0),d0				; load current map speed
0000325A 0C00 0006                  		cmpi.b	#$06,d0					; has the map ID supassed 5?
0000325E 6D00 0000                  		blt	OSN_NoResetAni				; if not, branch
00003262 7000                       		moveq	#$00,d0					; reset to 0
00003264 3140 002C                  		move.w	d0,$2C(a0)				; reset map speed
00003268                            
00003268                            OSN_NoResetAni:
00003268 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
0000326C 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer
00003272 0200 0007                  		andi.b	#$07,d0					; keep within 8 frames
00003276 6600 0000                  		bne	OSN_NoCyclePalette			; if it's not been 8 frames, branch
0000327A 43F8 FB68                  		lea	($FFFFFB68).w,a1			; load palette green buffer address to a1
0000327E 45D1                       		lea	(a1),a2					; '' to a2
00003280 3019                       		move.w	(a1)+,d0				; store first colour
00003282 34D9                       		move.w	(a1)+,(a2)+				; shift colours back
00003284 34D9                       		move.w	(a1)+,(a2)+				; ''
00003286 34D1                       		move.w	(a1),(a2)+				; ''
00003288 3280                       		move.w	d0,(a1)					; save first colour as last
0000328A                            
0000328A                            OSN_NoCyclePalette:
0000328A 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
0000328E 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00003294                            
00003294                            ; ===========================================================================
00003294                            ; ---------------------------------------------------------------------------
00003294 0000                       ObjSonNeonMap:	dc.w	ObjSon00-ObjSonNeonMap			; 00
00003296 0000                       		dc.w	ObjSon01-ObjSonNeonMap			; 01
00003298 0000                       		dc.w	ObjSon02-ObjSonNeonMap			; 02
0000329A 0000                       		dc.w	ObjSon03-ObjSonNeonMap			; 03
0000329C 0000                       		dc.w	ObjSon04-ObjSonNeonMap			; 04
0000329E 0000                       		dc.w	ObjSon05-ObjSonNeonMap			; 05
000032A0                            ; ---------------------------------------------------------------------------
000032A0 04                         ObjSon00:	dc.b	$04
000032A1 EB0D 0000 EC               		dc.b	$EB,$0D,$00,$00,$EC
000032A6 FB09 0008 EC               		dc.b	$FB,$09,$00,$08,$EC
000032AB FB06 000E 04               		dc.b	$FB,$06,$00,$0E,$04
000032B0 0B04 0014 EC               		dc.b	$0B,$04,$00,$14,$EC
000032B5 02                         ObjSon01:	dc.b	$02
000032B6 EC0D 0000 ED               		dc.b	$EC,$0D,$00,$00,$ED
000032BB FC0E 0016 F5               		dc.b	$FC,$0E,$00,$16,$F5
000032C0 02                         ObjSon02:	dc.b	$02
000032C1 ED09 0022 F3               		dc.b	$ED,$09,$00,$22,$F3
000032C6 FD0A 0028 F3               		dc.b	$FD,$0A,$00,$28,$F3
000032CB 04                         ObjSon03:	dc.b	$04
000032CC EB09 0022 F4               		dc.b	$EB,$09,$00,$22,$F4
000032D1 FB09 0031 EC               		dc.b	$FB,$09,$00,$31,$EC
000032D6 FB06 0037 04               		dc.b	$FB,$06,$00,$37,$04
000032DB 0B04 003D EC               		dc.b	$0B,$04,$00,$3D,$EC
000032E0 02                         ObjSon04:	dc.b	$02
000032E1 EC09 0022 F3               		dc.b	$EC,$09,$00,$22,$F3
000032E6 FC0E 003F EB               		dc.b	$FC,$0E,$00,$3F,$EB
000032EB 03                         ObjSon05:	dc.b	$03
000032EC ED0D 0000 EC               		dc.b	$ED,$0D,$00,$00,$EC
000032F1 FD0C 004B F4               		dc.b	$FD,$0C,$00,$4B,$F4
000032F6 0509 004F F4               		dc.b	$05,$09,$00,$4F,$F4
000032FC 00                         		even
000032FC                            ; ---------------------------------------------------------------------------
000032FC                            ; ===========================================================================
000032FC                            ; ---------------------------------------------------------------------------
000032FC                            ; Subroutine to control the Square much like objects
000032FC                            ; ---------------------------------------------------------------------------
000032FC                            
000032FC                            ObjectSquare:
000032FC 7000                       		moveq	#$00,d0					; clear d0
000032FE 1028 0024                  		move.b	$24(a0),d0				; load routine counter
00003302 303B 0000                  		move.w	OS_Index(pc,d0.w),d0			; load correct PC add address
00003306 4EFB 0000                  		jmp	OS_Index(pc,d0.w)			; add and jump
0000330A                            
0000330A                            ; ===========================================================================
0000330A                            ; ---------------------------------------------------------------------------
0000330A 0000                       OS_Index:	dc.w	OS_Startup-OS_Index			; 00
0000330C 0000                       		dc.w	OL_WaitTime-OS_Index			; 02
0000330E 0000                       		dc.w	OS_PlaySound-OS_Index			; 04
00003310 0000                       		dc.w	OS_SpinIn-OS_Index			; 06
00003312 0000                       		dc.w	OS_UpAndLand-OS_Index			; 08
00003314 0000                       		dc.w	OS_FinishSpin-OS_Index			; 0A
00003316                            ; ---------------------------------------------------------------------------
00003316                            ; ===========================================================================
00003316                            ; ---------------------------------------------------------------------------
00003316                            ; Startup
00003316                            ; ---------------------------------------------------------------------------
00003316                            
00003316                            OS_Startup:
00003316 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
0000331A 217C FF40 0020 0008        		move.l	#$FF400020,$08(a0)			; set starting X and Y positions
00003322 317C 00A0 002A             		move.w	#$00A0,$2A(a0)				; set time to wait for
00003328 217C 0800 0000 0010        		move.l	#$08000000,$10(a0)			; set X and Y starting speeds
00003330 6000 0000                  		bra	UpdateScrollPositions			; update positions
00003334                            
00003334                            ; ===========================================================================
00003334                            ; ---------------------------------------------------------------------------
00003334                            ; Playing spin sound once
00003334                            ; ---------------------------------------------------------------------------
00003334                            
00003334                            OS_PlaySound:
00003334 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003338 70BC                       		moveq	#$FFFFFFBC,d0				; set to play spin release SFX
0000333A 4EB8 12C8                  		jsr	PlaySound_Special			; play SFX
0000333E                            
0000333E                            ; ===========================================================================
0000333E                            ; ---------------------------------------------------------------------------
0000333E                            ; Spinning in and hitting the SSRG letters
0000333E                            ; ---------------------------------------------------------------------------
0000333E                            
0000333E                            OS_SpinIn:
0000333E 5468 002A                  		addq.w	#$02,$2A(a0)				; increase spin counter
00003342 3028 0008                  		move.w	$08(a0),d0				; load X position
00003346 0C40 0060                  		cmpi.w	#$0060,d0				; has the square hit the letters?
0000334A 6D00 0000                  		blt	OS_Display				; if not, branch
0000334E 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003352 70BD                       		moveq	#$FFFFFFBD,d0				; set to play spiked chandelier SFX
00003354 4EB8 12C8                  		jsr	PlaySound_Special			; play SFX
00003358 217C FF00 FC00 0010        		move.l	#$FF00FC00,$10(a0)			; set X and Y bounce off speeds
00003360 43F9 FFFF D010             		lea	($FFFFD010).l,a1			; load object ram's X and Y speeds
00003366 22BC 0300 FC00             		move.l	#$0300FC00,(a1)				; save "S" X and Y speeds
0000336C 237C 0300 FD00 0040        		move.l	#$0300FD00,$40(a1)			; save "S" X and Y speeds
00003374 237C 0300 FE00 0080        		move.l	#$0300FE00,$80(a1)			; save "R" X and Y speeds
0000337C 237C 0300 FF00 00C0        		move.l	#$0300FF00,$C0(a1)			; save "G" X and Y speeds
00003384 6000 0000                  		bra	OS_Display				; continue
00003388                            
00003388                            ; ===========================================================================
00003388                            ; ---------------------------------------------------------------------------
00003388                            ; Spinning in and hitting the SSRG letters
00003388                            ; ---------------------------------------------------------------------------
00003388                            
00003388                            OS_UpAndLand:
00003388 5168 002A                  		subq.w	#$08,$2A(a0)				; increase spin counter
0000338C 0668 0020 0012             		addi.w	#$0020,$12(a0)				; increase gravity
00003392 6B00 0000                  		bmi	OS_Display				; if not going down, branch
00003396 0C68 0020 000A             		cmpi.w	#$0020,$0A(a0)				; has the square hit the ground?
0000339C 6D00 0000                  		blt	OS_Display				; if not, branch
000033A0 317C 0020 000A             		move.w	#$0020,$0A(a0)				; set to the ground
000033A6 7000                       		moveq	#$00,d0					; clear d0
000033A8 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000033AC 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000033B0 317C 0A40 002C             		move.w	#$0A40,$2C(a0)				; set speed of spin
000033B6 6000 0000                  		bra	OS_Display				; continue
000033BA                            
000033BA                            ; ===========================================================================
000033BA                            ; ---------------------------------------------------------------------------
000033BA                            ; Finishing the spin by slowing down
000033BA                            ; ---------------------------------------------------------------------------
000033BA                            
000033BA                            OS_FinishSpin:
000033BA 3028 002C                  		move.w	$2C(a0),d0				; has spin speed finished?
000033BE 6A00 0000                  		bpl	OS_NoFinish				; if not, branch
000033C2 43F8 FB62                  		lea	($FFFFFB62).w,a1			; load palette buffer address
000033C6 0C51 0E0E                  		cmpi.w	#$0E0E,(a1)				; has the colour finished changing?
000033CA 6700 0000                  		beq	OS_NoColour01				; if so, branch
000033CE 0651 0202                  		addi.w	#$0202,(a1)				; increase the colour
000033D2                            
000033D2                            OS_NoColour01:
000033D2 5849                       		addq.w	#$04,a1					; goto next 2nd colour
000033D4 0C51 0404                  		cmpi.w	#$0404,(a1)				; has the colour finished changing?
000033D8 6700 0000                  		beq	OS_Display				; if so, branch
000033DC 0451 0202                  		subi.w	#$0202,(a1)				; decrease the colour
000033E0 6000 0000                  		bra	OS_Display				; continue
000033E4                            
000033E4                            OS_NoFinish:
000033E4 0440 0018                  		subi.w	#$18,d0					; decrease spin speed
000033E8 3200                       		move.w	d0,d1					; copy to d1
000033EA E049                       		lsr.w	#$08,d1					; get left byte only
000033EC 9368 002A                  		sub.w	d1,$2A(a0)				; subtract that from the spin position
000033F0 3140 002C                  		move.w	d0,$2C(a0)				; update spin speed
000033F4                            
000033F4                            ; ===========================================================================
000033F4                            ; ---------------------------------------------------------------------------
000033F4                            ; Displaying the square
000033F4                            ; ---------------------------------------------------------------------------
000033F4                            
000033F4                            OS_Display:
000033F4 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000033FA 6100 0000                  		bsr	UpdateScrollPositions			; update positions
000033FE                            
000033FE                            OS_DiplayEnd:
000033FE 3F28 002A                  		move.w	$2A(a0),-(sp)				; store spin counter
00003402 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00003406 7010                       		moveq	#$10,d0					; set number of columns
00003408 7210                       		moveq	#$10,d1					; set number of rows
0000340A 243C 6000 0003             		move.l	#$60000003,d2				; set to write to BG plane
00003410 7A00                       		moveq	#$00,d5					; set blank tile
00003412 6100 0000                  		bsr	MapScreenSingle				; write to the map plane
00003416 301F                       		move.w	(sp)+,d0				; load spin counter
00003418 0240 0018                  		andi.w	#$0018,d0				; keep in range
0000341C D040                       		add.w	d0,d0					; multiply by 2
0000341E 49FB 0000                  		lea	MapRamData(pc,d0.w),a4			; load map ram address data
00003422 2A5C                       		movea.l	(a4)+,a5				; load mappings to read
00003424 241C                       		move.l	(a4)+,d2				; load V-Ram address
00003426 301C                       		move.w	(a4)+,d0				; load X draw amount
00003428 321C                       		move.w	(a4)+,d1				; load Y draw amount
0000342A 6100 0000                  		bsr	MapScreen				; write to the map plane
0000342E 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
00003432 4E75                       		rts						; return
00003434                            
00003434                            ; ---------------------------------------------------------------------------
00003434                            ; Updating the scroll positions for the BG plane
00003434                            ; ---------------------------------------------------------------------------
00003434                            
00003434                            UpdateScrollPositions:
00003434 33E8 0008 FFFF 7808        		move.w	$08(a0),($FFFF7808).l			; load X position as X scroll BG
0000343C 3028 000A                  		move.w	$0A(a0),d0				; load Y position
00003440 4440                       		neg.w	d0					; negate opposite direction
00003442 31C0 F618                  		move.w	d0,($FFFFF618).w			; save as Y scroll BG
00003446 4E75                       		rts						; return
00003448                            
00003448                            ; ===========================================================================
00003448                            ; ---------------------------------------------------------------------------
00003448 FFFF 4000                  MapRamData:	dc.l	$FFFF4000				; Map address
0000344C 6104 0003                  		dc.l	$61040003				; V-Ram address
00003450 000B 000B                  		dc.l	$000B000B				; X and Y draw amount
00003454 0000 0000                  		dc.l	$00000000				; null/spare
00003458 FFFF 4120                  		dc.l	$FFFF4120				; ''
0000345C 6000 0003                  		dc.l	$60000003				; ''
00003460 000F 000F                  		dc.l	$000F000F				; ''
00003464 0000 0000                  		dc.l	$00000000				; ''
00003468 FFFF 4320                  		dc.l	$FFFF4320				; ''
0000346C 6000 0003                  		dc.l	$60000003				; ''
00003470 0010 0010                  		dc.l	$00100010				; ''
00003474 0000 0000                  		dc.l	$00000000				; ''
00003478 FFFF 4562                  		dc.l	$FFFF4562				; ''
0000347C 6000 0003                  		dc.l	$60000003				; ''
00003480 000F 000F                  		dc.l	$000F000F				; ''
00003484 0000 0000                  		dc.l	$00000000				; ''
00003488                            ; ---------------------------------------------------------------------------
00003488                            ; ===========================================================================
00003488                            ; ---------------------------------------------------------------------------
00003488                            ; Subroutine to control the "SSRG" letter sprites
00003488                            ; ---------------------------------------------------------------------------
00003488                            
00003488                            ObjectLetters:
00003488 7000                       		moveq	#$00,d0					; clear d0
0000348A 1028 0024                  		move.b	$24(a0),d0				; load routine counter
0000348E 303B 0000                  		move.w	OL_Index(pc,d0.w),d0			; load correct PC add address
00003492 4EFB 0000                  		jmp	OL_Index(pc,d0.w)			; add and jump
00003496                            
00003496                            ; ===========================================================================
00003496                            ; ---------------------------------------------------------------------------
00003496 0000                       OL_Index:	dc.w	OL_Startup-OL_Index			; 00
00003498 0000                       		dc.w	OL_WaitTime-OL_Index			; 02
0000349A 0000                       		dc.w	OL_FlyUp-OL_Index			; 04
0000349C 0000                       		dc.w	OL_Spring-OL_Index			; 06
0000349E 0000                       		dc.w	OL_SlowDown-OL_Index			; 08
000034A0 0000                       		dc.w	OL_Idle-OL_Index			; 0A
000034A2                            ; ---------------------------------------------------------------------------
000034A2                            ; ===========================================================================
000034A2                            ; ---------------------------------------------------------------------------
000034A2                            ; Object data	dc.w	$XXXX,$YYYY,$VRAM,$TIME,$XSPD,$YSPD,$MAPI,$????
000034A2                            ; ---------------------------------------------------------------------------
000034A2 0182 0180 0001 0001 FF00+  OL_Data:	dc.w	$0182,$0180,$0001,$0001,$FF00,$F400,$0000,$0000
000034B2 01A8 0180 0001 0011 FF00+  		dc.w	$01A8,$0180,$0001,$0011,$FF00,$F400,$0000,$0000
000034C2 01D0 0180 0011 0021 FF00+  		dc.w	$01D0,$0180,$0011,$0021,$FF00,$F400,$0000,$0000
000034D2 01F8 0180 0021 0031 FF00+  		dc.w	$01F8,$0180,$0021,$0031,$FF00,$F400,$0000,$0000
000034E2                            ; ---------------------------------------------------------------------------
000034E2                            ; ===========================================================================
000034E2                            ; ---------------------------------------------------------------------------
000034E2                            ; Startup
000034E2                            ; ---------------------------------------------------------------------------
000034E2                            
000034E2                            OL_Startup:
000034E2 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000034E6 1010                       		move.b	(a0),d0					; load object type
000034E8 5300                       		subq.b	#$01,d0					; decrease by 1
000034EA E948                       		lsl.w	#$04,d0					; multiply by 10
000034EC 43FB 00B4                  		lea	OL_Data(pc,d0.w),a1			; load correct data address
000034F0 2159 0008                  		move.l	(a1)+,$08(a0)				; set X & Y position
000034F4 3159 0002                  		move.w	(a1)+,$02(a0)				; set V-Ram
000034F8 3159 002A                  		move.w	(a1)+,$2A(a0)				; set Timer
000034FC 2159 0010                  		move.l	(a1)+,$10(a0)				; set X and Y speeds
00003500 3019                       		move.w	(a1)+,d0				; load map ID
00003502 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
00003506 217C 0000 0000 0004        		move.l	#ObjLet_Map,$04(a0)			; set mappings to use
0000350E 317C 2020 0018             		move.w	#$2020,$18(a0)				; set out of distance display & width
00003514 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
0000351A                            
0000351A                            ; ===========================================================================
0000351A                            ; ---------------------------------------------------------------------------
0000351A                            ; Delay/Time wait
0000351A                            ; ---------------------------------------------------------------------------
0000351A                            
0000351A                            OL_WaitTime:
0000351A 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
0000351E 6600 0000                  		bne	OL_WT_Wait				; if not finished, branch
00003522 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003526                            
00003526                            OL_WT_Wait:
00003526 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
0000352C                            
0000352C                            ; ===========================================================================
0000352C                            ; ---------------------------------------------------------------------------
0000352C                            ; Flying up and landing
0000352C                            ; ---------------------------------------------------------------------------
0000352C                            
0000352C                            OL_FlyUp:
0000352C 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
00003532 0668 0040 0012             		addi.w	#$0040,$12(a0)				; increase speed
00003538 6B00 0000                  		bmi	OL_NoStopDown				; if still moving up, branch
0000353C 303C 00F0                  		move.w	#$00F0,d0				; set Y speed to check
00003540 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter dropped to the landing line?
00003544 6C00 0000                  		bge	OL_NoStopDown				; if not, branch
00003548 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
0000354C                            
0000354C                            OL_NoStopDown:
0000354C 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00003552                            
00003552                            ; ===========================================================================
00003552                            ; ---------------------------------------------------------------------------
00003552                            ; Springing under the land and back up again
00003552                            ; ---------------------------------------------------------------------------
00003552                            
00003552                            OL_Spring:
00003552 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
00003558 0468 0080 0012             		subi.w	#$0080,$12(a0)				; decrease speed
0000355E 6A00 0000                  		bpl	OL_NoStopUp				; if still moving down, branch
00003562 303C 00E8                  		move.w	#$00E8,d0				; set Y speed to check
00003566 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter moved up to the landing line?
0000356A 6D00 0000                  		blt	OL_NoStopUp				; if not, branch
0000356E 4268 0012                  		clr.w	$12(a0)					; set no Y speed
00003572 4268 002A                  		clr.w	$2A(a0)					; clear timer
00003576 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
0000357A                            
0000357A                            OL_NoStopUp:
0000357A 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00003580                            
00003580                            ; ===========================================================================
00003580                            ; ---------------------------------------------------------------------------
00003580                            ; Slowing the letter down on X
00003580                            ; ---------------------------------------------------------------------------
00003580                            
00003580                            OL_SlowDown:
00003580 4A68 0010                  		tst.w	$10(a0)					; is there any left movement on X?
00003584 6A00 0000                  		bpl	OL_NoMove				; if not, branch
00003588 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
0000358E 0668 0020 0010             		addi.w	#$0020,$10(a0)				; increase X speed to slow down to move right
00003594 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
0000359A                            
0000359A                            OL_NoMove:
0000359A 5228 002A                  		addi.b	#$01,$2A(a0)				; increase timer
0000359E 1028 002A                  		move.b	$2A(a0),d0				; load timer
000035A2 0200 0001                  		andi.b	#$01,d0					; get only the odd bit
000035A6 6700 0000                  		beq	OL_Idle					; if null, branch to skip (Slows the flash down)
000035AA 7040                       		moveq	#$40,d0					; set colour line to check value on
000035AC B028 0002                  		cmp.b	$02(a0),d0				; has colour line reached last?
000035B0 6E00 0000                  		bgt	OL_NoFinish				; if not, branch
000035B4 0228 009F 0002             		andi.b	#$9F,$02(a0)				; reset colour line to first
000035BA 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000035BE 7000                       		moveq	#$00,d0					; clear d0
000035C0 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000035C4 0268 01FF 000A             		andi.w	#$01FF,$0A(a0)				; reset Y position range correctly
000035CA 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000035D0 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
000035D6                            
000035D6                            OL_NoFinish:
000035D6 0628 0020 0002             		addi.b	#$20,$02(a0)				; increase palette line being used
000035DC                            
000035DC                            ; ===========================================================================
000035DC                            ; ---------------------------------------------------------------------------
000035DC                            ; Idle (Finish)
000035DC                            ; ---------------------------------------------------------------------------
000035DC                            
000035DC                            OL_Idle:
000035DC 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
000035E0 0C68 00E4 000A             		cmpi.w	#$00E4,$0A(a0)				; has the letter moved up to the landing line?
000035E6 6700 0000                  		beq	OL_CheckXSpeed				; if so, branch
000035EA 6D00 0000                  		blt	OL_CheckYSpeed				; if not, branch
000035EE 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000035F2 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000035F8 6000 0000                  		bra	OL_CheckXSpeed				; continue
000035FC                            
000035FC                            OL_CheckYSpeed:
000035FC 0668 0080 0012             		addi.w	#$0080,$12(a0)				; increase gravity
00003602                            
00003602                            OL_CheckXSpeed:
00003602 303C 0040                  		move.w	#$0040,d0				; set speed decrease
00003606 4A68 0010                  		tst.w	$10(a0)					; is there any X speed?
0000360A 6700 0000                  		beq	OL_Display				; if not, branch
0000360E 6A00 0000                  		bpl	OL_DecreaseRight			; if it's moving right, branch
00003612 4440                       		neg.w	d0					; negate decreasing speed
00003614                            
00003614                            OL_DecreaseRight:
00003614 9168 0010                  		sub.w	d0,$10(a0)				; decrease speed
00003618                            
00003618                            OL_Display:
00003618 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
0000361E                            
0000361E                            ; ===========================================================================
0000361E                            ; ---------------------------------------------------------------------------
0000361E 0000                       ObjLet_Map:	dc.w	ObjLet_SSRG-ObjLet_Map			; 00
00003620                            ; ---------------------------------------------------------------------------
00003620 01                         ObjLet_SSRG:	dc.b	$01
00003621 F00F 0000 F0               		dc.b	$F0,$0F,$00,$00,$F0
00003626                            		even
00003626                            ; ---------------------------------------------------------------------------
00003626                            ; ===========================================================================
00003626                            ; ---------------------------------------------------------------------------
00003626                            ; Subroutine to convert speed to position for HUD objects
00003626                            ; ---------------------------------------------------------------------------
00003626                            
00003626                            SpeedToPosHud:
00003626 3028 0010                  		move.w	$10(a0),d0				; load X speed
0000362A 48C0                       		ext.l	d0					; extend incase it's negative
0000362C E180                       		asl.l	#$08,d0					; multiply by 100
0000362E 4840                       		swap	d0					; get X add position
00003630 D168 0008                  		add.w	d0,$08(a0)				; save new X position
00003634 3028 0012                  		move.w	$12(a0),d0				; load Y speed
00003638 48C0                       		ext.l	d0					; extend incase it's negative
0000363A E180                       		asl.l	#$08,d0					; multiply by 100
0000363C D1A8 000A                  		add.l	d0,$0A(a0)				; save new Y position
00003640 4E75                       		rts						; return
00003642                            
00003642                            ; ===========================================================================
00003642                            ; ---------------------------------------------------------------------------
00003642                            ; Subroutine to map tile to VDP screen
00003642                            ; ---------------------------------------------------------------------------
00003642                            
00003642                            MapScreen:
00003642 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
00003648 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
0000364C 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
00003652                            
00003652                            MapScreen_Row:
00003652 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
00003654 3600                       		move.w	d0,d3					; reload number of columns
00003656                            
00003656                            MapScreen_Column:
00003656 3C9D                       		move.w	(a5)+,(a6)				; dump map to VDP map slot
00003658 51CB FFFC                  		dbf	d3,MapScreen_Column			; repeat til columns have dumped
0000365C D484                       		add.l	d4,d2					; increae to next row on VRam
0000365E 51C9 FFF2                  		dbf	d1,MapScreen_Row			; repeat til all rows have dumped
00003662 4E75                       		rts						; return
00003664                            
00003664                            ; ===========================================================================
00003664                            ; ---------------------------------------------------------------------------
00003664                            ; Subroutine to map tile to VDP screen (Adding contents of d5)
00003664                            ; ---------------------------------------------------------------------------
00003664                            
00003664                            MapScreenAdd:
00003664 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
0000366A 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
0000366E 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
00003674                            
00003674                            MapScreenAdd_Row:
00003674 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
00003676 3600                       		move.w	d0,d3					; reload number of columns
00003678                            
00003678                            MapScreenAdd_Column:
00003678 3C1D                       		move.w	(a5)+,d6				; load map ID
0000367A DC45                       		add.w	d5,d6					; add d5 contents
0000367C 3C86                       		move.w	d6,(a6)					; dump map to VDP map slot
0000367E 51CB FFF8                  		dbf	d3,MapScreenAdd_Column			; repeat til columns have dumped
00003682 D484                       		add.l	d4,d2					; increae to next row on VRam
00003684 51C9 FFEE                  		dbf	d1,MapScreenAdd_Row			; repeat til all rows have dumped
00003688 4E75                       		rts						; return
0000368A                            
0000368A                            ; ===========================================================================
0000368A                            ; ---------------------------------------------------------------------------
0000368A                            ; Subroutine to map a single tile to VDP screen
0000368A                            ; ---------------------------------------------------------------------------
0000368A                            
0000368A                            MapScreenSingle:
0000368A 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
00003690 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
00003694 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
0000369A                            
0000369A                            MapScreenSingle_Row:
0000369A 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
0000369C 3600                       		move.w	d0,d3					; reload number of columns
0000369E                            
0000369E                            MapScreenSingle_Column:
0000369E 3C85                       		move.w	d5,(a6)					; dump map to VDP map slot
000036A0 51CB FFFC                  		dbf	d3,MapScreenSingle_Column		; repeat til columns have dumped
000036A4 D484                       		add.l	d4,d2					; increae to next row on VRam
000036A6 51C9 FFF2                  		dbf	d1,MapScreenSingle_Row			; repeat til all rows have dumped
000036AA 4E75                       		rts						; return
000036AC                            
000036AC                            ; ===========================================================================
000036AC                            ; ---------------------------------------------------------------------------
000036AC                            ; SSRG Data
000036AC                            ; ---------------------------------------------------------------------------
000036AC 0000 0400 0800 0C00 0E00+  Pal_SSRG:	dc.w	$0000,$0400,$0800,$0C00,$0E00,$0EEE,$0AAA,$0888
000036BC 0666 0444 0222 0000 0000+  		dc.w	$0666,$0444,$0222,$0000,$0000,$0000,$0000,$0000
000036CC 0000 0444 0888 0CCC 0EEE+  		dc.w	$0000,$0444,$0888,$0CCC,$0EEE,$0888,$0666,$0444
000036DC 0222 0000 0000 0000 0000+  		dc.w	$0222,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000036EC 0000 0422 0844 0C66 0E88+  		dc.w	$0000,$0422,$0844,$0C66,$0E88,$0000,$0000,$0000
000036FC 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000370C 0000 0404 0808 0E0E 00E0+  		dc.w	$0000,$0404,$0808,$0E0E,$00E0,$00C0,$00A0,$0080
0000371C 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000372C                            		even
0000372C                            ; ---------------------------------------------------------------------------
0000372C                            ArtMain_SSRG:	incbin	"SSRG/ArtMain.nem"
00003DA0 00                         		even
00003DA0                            ArtSquare_SSRG:	incbin	"SSRG/ArtSquare.nem"
0000420C 00                         		even
0000420C                            ArtSonic_SSRG:	incbin	"SSRG/ArtSonic.nem"
000044EA                            		even
000044EA                            ArtLink_SSRG:	incbin	"SSRG/ArtLink.nem"
000045D2                            		even
000045D2                            ; ---------------------------------------------------------------------------
000045D2                            MapMain_SSRG:	incbin	"SSRG/MapMain.kos"
00004684 00                         		even
00004684                            MapSquare_SSRG:	incbin	"SSRG/MapSquare.kos"
000048CE                            		even
000048CE                            MapLink_SSRG:	incbin	"SSRG/MapLink.kos"
00004904                            		even
00004904                            ; ---------------------------------------------------------------------------
00004904                            ; ===========================================================================
00004904                            ; ---------------------------------------------------------------------------
00004904                            ; Title	screen
00004904                            ; ---------------------------------------------------------------------------
00004904                            
00004904                            TitleScreen:				; XREF: GameModeArray
00004904 103C 00E4                  		move.b	#$E4,d0
00004908 6100 C9BE                  		bsr.w	PlaySound_Special ; stop music
0000490C 6100 CC86                  		bsr.w	ClearPLC
00004910 6100 D500                  		bsr.w	Pal_FadeFrom	; fade from black
00004914 46FC 2700                  		move	#$2700,sr
00004918 6100 C964                  		bsr.w	SoundDriverLoad
0000491C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004922                            		
00004922                            		; setup VPD registers
00004922 3CBC 8004                  		move.w	#$8004,(a6)	; $00
00004926 3CBC 8230                  		move.w	#$8230,(a6)	; $02, set Plane A nametable offset in VRAM
0000492A 3CBC 8407                  		move.w	#$8407,(a6)	; $04, set Plane B nametable offset in VRAM
0000492E 3CBC 9001                  		move.w	#$9001,(a6)	; $10
00004932 3CBC 9200                  		move.w	#$9200,(a6)	; $12
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)	; $0B, set Scrolling mode
0000493A 3CBC 8720                  		move.w	#$8720,(a6)	; $07, set Blackdrop Color
0000493E                            
0000493E 4238 F64E                  		clr.b	($FFFFF64E).w
00004942 6100 C8AC                  		bsr.w	ClearScreen
00004946                            
00004946                            		; clear Object RAM
00004946 43F8 D000                  		lea	($FFFFD000).w,a1 ; load object RAM
0000494A 7000                       		moveq	#0,d0
0000494C 323C 07FF                  		move.w	#$7FF,d1
00004950 22C0                       @ClrObjRam:	move.l	d0,(a1)+
00004952 51C9 FFFC                  		dbf	d1,@ClrObjRam	; fill object RAM ($D000-$EFFF) with $0
00004956                            
00004956                            		; load hidden credits patterns into VRAM
00004960 41F9 0000 0000             		lea	(Nem_JapNames).l,a0	; load Japanese credits patterns
00004966 6100 CA8E                  		bsr.w	NemDec
0000496A                            
0000496A                            		; load alphabet patterns into VRAM
00004974 41F9 0000 0000             		lea	(Nem_CreditText).l,a0	; load alphabet patterns
0000497A 6100 CA7A                  		bsr.w	NemDec
0000497E                            
0000497E                            		; load hidden Japanese credits mappings
0000497E 43F9 00FF 0000             		lea	($FF0000).l,a1		; load destination
00004984 41F9 0000 0000             		lea	(Eni_JapNames).l,a0	; load mappings for Japanese credits
0000498A 303C 0000                  		move.w	#0,d0
0000498E 6100 CD4E                  		bsr.w	EniDec
00004992 43F9 00FF 0000             		lea	($FF0000).l,a1
0000499E 7227                       		moveq	#$27,d1	; cols
000049A0 741B                       		moveq	#$1B,d2	; rows
000049A2 6100 C9A2                  		bsr.w	ShowVDPGraphics
000049A6                            		
000049A6                            		; fill pallete with black
000049A6 43F8 FB80                  		lea	($FFFFFB80).w,a1 ; load pallete RAM
000049AA 7000                       		moveq	#0,d0
000049AC 323C 001F                  		move.w	#$1F,d1
000049B0 22C0                       @ClrPallet	move.l	d0,(a1)+	; fill palletes with $0
000049B2 51C9 FFFC                  		dbf	d1,@ClrPallet
000049B6                            
000049B6 7003                       		moveq	#3,d0		; load Sonic's pallet
000049B8 6100 D716                  		bsr.w	PalLoad1
000049BC 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000049C2 4EB9 0000 0000             		jsr	ObjectsLoad	; run objects code
000049C8 4EB9 0000 0000             		jsr	BuildSprites	; show sprites
000049CE 6100 D39C                  		bsr.w	Pal_FadeTo
000049D2                            
000049D2 46FC 2700                  		move	#$2700,sr	; disable interrupts
000049D6                            
000049D6                            		; load title screen patterns
000049E0 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0
000049E6 6100 CA0E                  		bsr.w	NemDec
000049EA                            
000049EA                            		; load Sonic title screen patterns
000049F4 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0
000049FA 6100 C9FA                  		bsr.w	NemDec
000049FE                            
000049FE                            		; load "TM" patterns
00004A08 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0
00004A0E 6100 C9E6                  		bsr.w	NemDec
00004A12                            
00004A12                            		; load uncompressed text patterns
00004A12 4DF9 00C0 0000             		lea	($C00000).l,a6
00004A20 4BF9 0000 05C4             		lea	(Art_Text).l,a5
00004A26 323C 028F                  		move.w	#$28F,d1
00004A2A 3C9D                       @LoadText:	move.w	(a5)+,(a6)	; move patterns to VRAM
00004A2C 51C9 FFFC                  		dbf	d1,@LoadText
00004A30                            
00004A30 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00004A36 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00004A3C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00004A42 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00004A48 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to GHZ1
00004A4E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00004A54 6100 0000                  		bsr.w	LevelSizeLoad
00004A58 6100 0000                  		bsr.w	DeformBgLayer
00004A5C                            
00004A5C                            		; load GHZ 16x16 mappings
00004A5C 43F8 B000                  		lea	($FFFFB000).w,a1
00004A60 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0
00004A66 303C 0000                  		move.w	#0,d0
00004A6A 6100 CC72                  		bsr.w	EniDec
00004A6E                            
00004A6E                            	 	; load GHZ 256x256 mappings
00004A6E 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0
00004A74 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A7A 6100 CDE0                  		bsr.w	KosDec
00004A7E 6100 0000                  		bsr.w	LevelLayoutLoad
00004A82                            		
00004A82 6100 D38E                  		bsr.w	Pal_FadeFrom
00004A86 46FC 2700                  		move	#$2700,sr		; disable interrupts
00004A8A 6100 C764                  		bsr.w	ClearScreen
00004A8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004A94 4DF9 00C0 0000             		lea	($C00000).l,a6
00004A9A 47F8 F708                  		lea	($FFFFF708).w,a3
00004A9E 49F8 A440                  		lea	($FFFFA440).w,a4
00004AA2 343C 6000                  		move.w	#$6000,d2
00004AA6 6100 0000                  		bsr.w	LoadTilesFromStart2
00004AAA                            
00004AAA                            		; load title screen mappings
00004AAA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004AB0 41F9 0000 0000             		lea	(Eni_Title).l,a0
00004AB6 303C 0000                  		move.w	#0,d0
00004ABA 6100 CC22                  		bsr.w	EniDec
00004ABE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004ACA 7221                       		moveq	#$21,d1	; cols
00004ACC 7415                       		moveq	#$15,d2	; rows
00004ACE 6100 C876                  		bsr.w	ShowVDPGraphics
00004AD2                            
00004AD2                            		; load GHZ patterns
00004ADC 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0
00004AE2 6100 C912                  		bsr.w	NemDec
00004AE6                            
00004AE6 7001                       		moveq	#1,d0		; load title screen pallet
00004AE8 6100 D5E6                  		bsr.w	PalLoad1
00004AEC 103C 009B                  		move.b	#$9B,d0		; play title screen music
00004AF0 6100 C7D6                  		bsr.w	PlaySound_Special
00004AF4 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00004AFA 31FC 5000 F614             		move.w	#$5000,($FFFFF614).w ; run title	screen for $178	frames
00004B00 43F8 D080                  		lea	($FFFFD080).w,a1
00004B04 7000                       		moveq	#0,d0
00004B06 323C 0007                  		move.w	#7,d1
00004B0A                            
00004B0A                            Title_ClrObjRam2:
00004B0A 22C0                       		move.l	d0,(a1)+
00004B0C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00004B10                            		
00004B10 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004B16 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00004B1C 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00004B22 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00004B28 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00004B2E 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00004B34 4EB9 0000 0000             		jsr	ObjectsLoad
00004B3A 6100 0000                  		bsr.w	DeformBgLayer
00004B3E 4EB9 0000 0000             		jsr	BuildSprites
00004B44 7000                       		moveq	#0,d0
00004B46 6100 CA20                  		bsr.w	LoadPLC2
00004B4A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004B50 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00004B56 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B5A 0000 0040                  		ori.b	#$40,d0
00004B5E 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B64 6100 D206                  		bsr.w	Pal_FadeTo
00004B68                            
00004B68                            loc_317C:
00004B68 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004B6E 6100 DE0C                  		bsr.w	DelayProgram
00004B72 4EB9 0000 0000             		jsr	ObjectsLoad
00004B78 6100 0000                  		bsr.w	DeformBgLayer
00004B7C 4EB9 0000 0000             		jsr	BuildSprites
00004B82 6100 CD98                  		bsr.w	PalCycle_Title
00004B86 6100 CA1A                  		bsr.w	RunPLC_RAM
00004B8A 3038 D008                  		move.w	($FFFFD008).w,d0	; load Sonic's x-pos to d0
00004B8E 5440                       		addq.w	#2,d0
00004B90 31C0 D008                  		move.w	d0,($FFFFD008).w	; move Sonic to the right
00004B94 0C40 1C00                  		cmpi.w	#$1C00,d0		; has Sonic object passed x-position $1C00?
00004B98 6500                       		bcs.s	Title_ChkRegion		; if not, branch
00004B9A 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; if yes, go to Sega screen
00004BA0 4E75                       		rts	
00004BA2                            ; ===========================================================================
00004BA2                            
00004BA2                            Title_ChkRegion:
00004BA2 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00004BA6 6A00                       		bpl.s	@RegionJ	; if Japanese, branch
00004BA8 41F9 0000 0000             		lea	(LSCode_US).l,a0 ; load US code
00004BAE 6000                       		bra.s	Title_EnterCheat
00004BB0                            @RegionJ:
00004BB0 41F9 0000 0000             		lea	(LSCode_J).l,a0 ; load J code
00004BB6                            
00004BB6                            Title_EnterCheat:			; XREF: Title_ChkRegion
00004BB6 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00004BBA D0C0                       		adda.w	d0,a0
00004BBC 1038 F605                  		move.b	(Joypad|Press),d0 	; get button presses
00004BC0 0200 000F                  		andi.b	#Up+Down+Left+Right,d0	; read only up/down/left/right buttons
00004BC4 B010                       		cmp.b	(a0),d0			; does button press match the cheat code?
00004BC6 6600                       		bne.s	loc_3210		; if not, branch
00004BC8 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w	; next button press
00004BCC 4A00                       		tst.b	d0
00004BCE 6600                       		bne.s	Title_CountC
00004BD0 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00004BD4 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00004BD8 E249                       		lsr.w	#1,d1
00004BDA 0241 0003                  		andi.w	#3,d1
00004BDE 6700                       		beq.s	Title_PlayRing
00004BE0 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00004BE4 6A00                       		bpl.s	Title_PlayRing
00004BE6 7201                       		moveq	#1,d1
00004BE8 1181 1001                  		move.b	d1,1(a0,d1.w)
00004BEC                            
00004BEC                            Title_PlayRing:
00004BEC 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004BF2 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00004BF6 6100 C6D0                  		bsr.w	PlaySound_Special
00004BFA 6000                       		bra.s	Title_CountC
00004BFC                            ; ===========================================================================
00004BFC                            
00004BFC                            loc_3210:				; XREF: Title_EnterCheat
00004BFC 4A00                       		tst.b	d0
00004BFE 6700                       		beq.s	Title_CountC
00004C00 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00004C06 6700                       		beq.s	Title_CountC
00004C08 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004C0E                            
00004C0E                            Title_CountC:
00004C0E 1038 F605 0200 0020        		tpress	C,(Joypad)		; is C button pressed?
00004C16 6700                       		beq.s	loc_3230		; if not, branch
00004C18 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w	; increment C button counter
00004C1C                            
00004C1C                            loc_3230:
00004C1C 4A78 F614                  		tst.w	($FFFFF614).w
00004C20 6700 0000                  		beq.w	Demo
00004C24 0238 0080 F605             		andi.b	#Start,(Joypad|Press)	; check if Start is pressed
00004C2A 6700 FF3C                  		beq.w	loc_317C		; if not, branch
00004C2E                            
00004C2E                            Title_ChkLevSel:
00004C2E 4A38 FFE0                  		tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00004C32 6700 0000                  		beq.w	PlayLevel		; if not, play level
00004C36 0838 0006 F604             		btst	#iA,(Joypad|Held).w	; check if A is held
00004C3C 6700 0000                  		beq.w	PlayLevel		; if not, play level
00004C40 7002                       		moveq	#2,d0
00004C42 6100 D4A8                  		bsr.w	PalLoad2		; load level select pallet
00004C46 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C4A 7000                       		moveq	#0,d0
00004C4C 323C 00DF                  		move.w	#$DF,d1
00004C50                            
00004C50                            Title_ClrScroll:
00004C50 22C0                       		move.l	d0,(a1)+
00004C52 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00004C56                            
00004C56 21C0 F616                  		move.l	d0,($FFFFF616).w
00004C5A 46FC 2700                  		move	#$2700,sr		; disable interrupts
00004C5E 4DF9 00C0 0000             		lea	($C00000).l,a6
00004C6E 323C 03FF                  		move.w	#$3FF,d1
00004C72                            
00004C72                            Title_ClrVram:
00004C72 2C80                       		move.l	d0,(a6)
00004C74 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00004C78                            
00004C78 6100 0000                  		bsr.w	LevSelTextLoad
00004C7C                            
00004C7C                            ; ---------------------------------------------------------------------------
00004C7C                            ; Level	Select
00004C7C                            ; ---------------------------------------------------------------------------
00004C7C                            
00004C7C                            LevelSelect:
00004C7C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004C82 6100 DCF8                  		bsr.w	DelayProgram
00004C86 6100 0000                  		bsr.w	LevSelControls
00004C8A 6100 C916                  		bsr.w	RunPLC_RAM
00004C8E 4AB8 F680                  		tst.l	($FFFFF680).w	; is PLC queue empty?
00004C92 66E8                       		bne.s	LevelSelect	; if not, branch
00004C94 0238 00F0 F605                             andi.b	#A+B+C+Start,(Joypad|Press)	; is A, B, C or Start pressed?
00004C9A 67E0                       		beq.s	LevelSelect			; if not, branch
00004C9C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004CA0 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004CA4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004CA6 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004CAA 0640 0080                  		addi.w	#$80,d0
00004CAE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00004CB2 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00004CB4 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004CB8 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004CBA 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004CBE 6700                       		beq.s	LevSel_Credits	; if yes, branch
00004CC0                            
00004CC0                            LevSel_NoCheat:
00004CC0 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $81-$9F being played?
00004CC4 6300                       		bls.s	LevSel_PlaySnd	; if yes, branch
00004CC6 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00004CCA 65B0                       		bcs.s	LevelSelect	; if yes, branch
00004CCC                            
00004CCC                            LevSel_PlaySnd:
00004CCC 6100 C5FA                  		bsr.w	PlaySound_Special
00004CD0 60AA                       		bra.s	LevelSelect
00004CD2                            ; ===========================================================================
00004CD2                            
00004CD2                            LevSel_Ending:				; XREF: LevelSelect
00004CD2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00004CD8 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00004CDE 4E75                       		rts	
00004CE0                            ; ===========================================================================
00004CE0                            
00004CE0                            LevSel_Credits:				; XREF: LevelSelect
00004CE0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00004CE6 103C 009D                  		move.b	#$9D,d0
00004CEA 6100 C5DC                  		bsr.w	PlaySound_Special ; play credits music
00004CEE 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00004CF4 4E75                       		rts	
00004CF6                            ; ===========================================================================
00004CF6                            
00004CF6                            LevSel_Level_SS:			; XREF: LevelSelect
00004CF6 D040                       		add.w	d0,d0
00004CF8 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00004CFC 6B00 FF7E                  		bmi.w	LevelSelect
00004D00 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00004D04 6600                       		bne.s	LevSel_Level	; if not, branch
00004D06 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004D0C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00004D10 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004D16 7000                       		moveq	#0,d0
00004D18 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004D1C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004D20 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004D24 4E75                       		rts	
00004D26                            ; ===========================================================================
00004D26                            
00004D26                            LevSel_Level:				; XREF: LevSel_Level_SS
00004D26 0240 3FFF                  		andi.w	#$3FFF,d0
00004D2A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00004D2E                            
00004D2E                            PlayLevel:
00004D2E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004D34 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004D3A 7000                       		moveq	#0,d0
00004D3C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004D40 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004D44 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004D48 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00004D4C 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00004D50 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00004D54 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00004D58 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00004D5C 103C 00E0                  		move.b	#$E0,d0
00004D60 6100 C566                  		bsr.w	PlaySound_Special ; fade out music
00004D64 4E75                       		rts	
00004D66                            ; ===========================================================================
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            ; Level	select - level pointers
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            ; Vladikcomper: Pointers were converted from bin to asm format for
00004D66                            ;		more convenient editing.
00004D66                            LSelectPointers:
00004D66                            		include	"_inc\Level select pointers.asm"
00004D66                            ; ===========================================================================
00004D66                            ; *              S1HS - Levels order in Level Select Menu                   *
00004D66                            ; ===========================================================================
00004D66                            ; This file stores level order in level select menu
00004D66                            ; The format of each item is: ZZAA, where ZZ is zone and AA is act number.
00004D66                            ; ===========================================================================
00004D66                            
00004D66 0000                       		dc.w	$0000	; GHZ 1
00004D68 0001                       		dc.w	$0001	; GHZ 2
00004D6A 0002                       		dc.w	$0002	; GHZ 3
00004D6C                            
00004D6C 0100                       		dc.w	$0100	; LZ 1
00004D6E 0101                       		dc.w	$0101	; LZ 2
00004D70 0102                       		dc.w	$0102	; LZ 3
00004D72                            
00004D72 0200                       		dc.w	$0200	; MZ 1
00004D74 0201                       		dc.w	$0201	; MZ 2
00004D76 0202                       		dc.w	$0202	; MZ 3
00004D78                            
00004D78 0300                       		dc.w	$0300	; SLZ 1
00004D7A 0301                       		dc.w	$0301	; SLZ 2
00004D7C 0302                       		dc.w	$0302	; SLZ 3
00004D7E                            
00004D7E 0400                       		dc.w	$0400	; SYZ 1
00004D80 0401                       		dc.w	$0401	; SYZ 2
00004D82 0402                       		dc.w	$0402	; SYZ 3
00004D84                            
00004D84 0500                       		dc.w	$0500	; SBZ 1
00004D86 0501                       		dc.w	$0501	; SBZ 2
00004D88 0103                       		dc.w	$0103	; SBZ 3 (actually LZ 4)
00004D8A                            
00004D8A 0502                       		dc.w	$0502	; Final Zone (actually SBZ 3)
00004D8C                            
00004D8C 0700                       		dc.w	$0700	; Special Stage
00004D8E 8000                       		dc.w	$8000	; Sound select
00004D8E 8000                       		dc.w	$8000	; Sound select
00004D90                            		even
00004D90                            ; ---------------------------------------------------------------------------
00004D90                            ; Level	select codes
00004D90                            ; ---------------------------------------------------------------------------
00004D90                            
00004D90 0102 0408 00FF             LSCode_J:	dc.b	Up, Down, Left, Right, 0, $FF
00004D96 0102 0408 00FF             LSCode_US:	dc.b	Up, Down, Left, Right, 0, $FF
00004D9C                            
00004D9C                            ; ===========================================================================
00004D9C                            
00004D9C                            ; ---------------------------------------------------------------------------
00004D9C                            ; Demo mode
00004D9C                            ; ---------------------------------------------------------------------------
00004D9C                            
00004D9C                            Demo:					; XREF: TitleScreen
00004D9C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004DA2                            
00004DA2                            loc_33B6:				; XREF: loc_33E4
00004DA2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004DA8 6100 DBD2                  		bsr.w	DelayProgram
00004DAC 6100 0000                  		bsr.w	DeformBgLayer
00004DB0 6100 CB4A                  		bsr.w	PalCycle_Load
00004DB4 6100 C7EC                  		bsr.w	RunPLC_RAM
00004DB8 3038 D008                  		move.w	($FFFFD008).w,d0
00004DBC 5440                       		addq.w	#2,d0
00004DBE 31C0 D008                  		move.w	d0,($FFFFD008).w
00004DC2 0C40 1C00                  		cmpi.w	#$1C00,d0
00004DC6 6500                       		bcs.s	loc_33E4
00004DC8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00004DCE 4E75                       		rts	
00004DD0                            ; ===========================================================================
00004DD0                            
00004DD0                            loc_33E4:				; XREF: Demo
00004DD0 0238 0080 F605             		andi.b	#Start,(Joypad|Press)	; is Start button pressed?
00004DD6 6600 FE56                  		bne.w	Title_ChkLevSel		; if yes, branch
00004DDA 4A78 F614                  		tst.w	($FFFFF614).w
00004DDE 6600 FFC2                  		bne.w	loc_33B6
00004DE2 103C 00E0                  		move.b	#$E0,d0
00004DE6 6100 C4E0                  		bsr.w	PlaySound_Special	; fade out music
00004DEA 3038 FFF2                  		move.w	($FFFFFFF2).w,d0	; load demo number
00004DEE 0240 0007                  		andi.w	#7,d0
00004DF2 D040                       		add.w	d0,d0
00004DF4 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004DF8 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00004DFC 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00004E00 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00004E06 6500                       		bcs.s	loc_3422	; if yes, branch
00004E08 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00004E0E                            
00004E0E                            loc_3422:
00004E0E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00004E14 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00004E1A 0C40 0600                  		cmpi.w	#$600,d0	 ; is level number 0600 (special stage)?
00004E1E 6600                       		bne.s	Demo_Level	 ; if not, branch
00004E20 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004E26 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004E2A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004E2E                            
00004E2E                            Demo_Level:
00004E2E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E34 7000                       		moveq	#0,d0
00004E36 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E3A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E3E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E42 4E75                       		rts	
00004E44                            ; ===========================================================================
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            ; Levels used in demos
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004E4C                            		even
00004E4C                            
00004E4C                            ; ---------------------------------------------------------------------------
00004E4C                            ; Subroutine to	change what you're selecting in the level select
00004E4C                            ; ---------------------------------------------------------------------------
00004E4C                            
00004E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E4C                            
00004E4C                            
00004E4C                            LevSelControls:				; XREF: LevelSelect
00004E4C 1238 F605                  		move.b	(Joypad|Press),d1
00004E50 0201 0003                  		andi.b	#Up+Down,d1	; is up/down held?
00004E54 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004E56 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	until next move
00004E5A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004E5C                            
00004E5C                            LevSel_UpDown:
00004E5C 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00004E62 1238 F604                  		move.b	(Joypad|Held),d1
00004E66 0201 0003                  		andi.b	#Up+Down,d1	; is up/down held?
00004E6A 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004E6C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004E70 0801 0000                  		btst	#iUp,d1		; is up	held?
00004E74 6700                       		beq.s	LevSel_Down	; if not, branch
00004E76 5340                       		subq.w	#1,d0		; move up 1 selection
00004E78 6400                       		bcc.s	LevSel_Down
00004E7A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004E7C                            
00004E7C                            LevSel_Down:
00004E7C 0801 0001                  		btst	#iDown,d1	; is down held?
00004E80 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004E82 5240                       		addq.w	#1,d0		; move down 1 selection
00004E84 0C40 0015                  		cmpi.w	#$15,d0
00004E88 6500                       		bcs.s	LevSel_Refresh
00004E8A 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004E8C                            
00004E8C                            LevSel_Refresh:
00004E8C 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00004E90 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004E94 4E75                       		rts	
00004E96                            ; ===========================================================================
00004E96                            
00004E96                            LevSel_SndTest:				; XREF: LevSelControls
00004E96 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00004E9C 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004E9E 1238 F605                  		move.b	(Joypad|Press),d1
00004EA2 0201 000C                  		andi.b	#Left+Right,d1	; is left/right	pressed?
00004EA6 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004EA8 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004EAC 0801 0002                  		btst	#iLeft,d1	; is left pressed?
00004EB0 6700                       		beq.s	LevSel_Right	; if not, branch
00004EB2 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004EB4 6400                       		bcc.s	LevSel_Right
00004EB6 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004EB8                            
00004EB8                            LevSel_Right:
00004EB8 0801 0003                  		btst	#iRight,d1	; is right pressed?
00004EBC 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004EBE 5240                       		addq.w	#1,d0		; add 1	to sound test
00004EC0 0C40 0050                  		cmpi.w	#$50,d0
00004EC4 6500                       		bcs.s	LevSel_Refresh2
00004EC6 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004EC8                            
00004EC8                            LevSel_Refresh2:
00004EC8 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00004ECC 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004ED0                            
00004ED0                            LevSel_NoMove:
00004ED0 4E75                       		rts	
00004ED2                            ; End of function LevSelControls
00004ED2                            
00004ED2                            ; ---------------------------------------------------------------------------
00004ED2                            ; Subroutine to load level select text
00004ED2                            ; ---------------------------------------------------------------------------
00004ED2                            
00004ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004ED2                            
00004ED2                            
00004ED2                            LevSelTextLoad:				; XREF: TitleScreen
00004ED2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004ED8 4DF9 00C0 0000             		lea	($C00000).l,a6
00004EE4 363C E680                  		move.w	#$E680,d3	; VRAM setting
00004EE8 7214                       		moveq	#$14,d1		; number of lines of text
00004EEA                            
00004EEA                            loc_34FE:
00004EEA 2D44 0004                  		move.l	d4,4(a6)
00004EEE 6100 0000                  		bsr.w	LevSel_ChgLine
00004EF2 0684 0080 0000             		addi.l	#$800000,d4
00004EF8 51C9 FFF0                  		dbf	d1,loc_34FE
00004EFC 7000                       		moveq	#0,d0
00004EFE 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004F02 3200                       		move.w	d0,d1
00004F04 283C 6210 0003             		move.l	#$62100003,d4
00004F0A EF48                       		lsl.w	#7,d0
00004F0C 4840                       		swap	d0
00004F0E D880                       		add.l	d0,d4
00004F10 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004F16 E749                       		lsl.w	#3,d1
00004F18 3001                       		move.w	d1,d0
00004F1A D241                       		add.w	d1,d1
00004F1C D240                       		add.w	d0,d1
00004F1E D2C1                       		adda.w	d1,a1
00004F20 363C C680                  		move.w	#$C680,d3
00004F24 2D44 0004                  		move.l	d4,4(a6)
00004F28 6100 0000                  		bsr.w	LevSel_ChgLine
00004F2C 363C E680                  		move.w	#$E680,d3
00004F30 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00004F36 6600                       		bne.s	loc_3550
00004F38 363C C680                  		move.w	#$C680,d3
00004F3C                            
00004F3C                            loc_3550:
00004F46 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004F4A 0640 0080                  		addi.w	#$80,d0
00004F4E 1400                       		move.b	d0,d2
00004F50 E808                       		lsr.b	#4,d0
00004F52 6100 0000                  		bsr.w	LevSel_ChgSnd
00004F56 1002                       		move.b	d2,d0
00004F58 6100 0000                  		bsr.w	LevSel_ChgSnd
00004F5C 4E75                       		rts	
00004F5E                            ; End of function LevSelTextLoad
00004F5E                            
00004F5E                            
00004F5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F5E                            
00004F5E                            
00004F5E                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004F5E 0240 000F                  		andi.w	#$F,d0
00004F62 0C00 000A                  		cmpi.b	#$A,d0
00004F66 6500                       		bcs.s	loc_3580
00004F68 5E00                       		addi.b	#7,d0
00004F6A                            
00004F6A                            loc_3580:
00004F6A D043                       		add.w	d3,d0
00004F6C 3C80                       		move.w	d0,(a6)
00004F6E 4E75                       		rts	
00004F70                            ; End of function LevSel_ChgSnd
00004F70                            
00004F70                            
00004F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F70                            
00004F70                            
00004F70                            LevSel_ChgLine:
00004F70 7417                       		moveq	#$17,d2		; number of characters per line
00004F72                            
00004F72                            loc_3588:
00004F72 7000                       		moveq	#0,d0
00004F74 1019                       		move.b	(a1)+,d0	; load char to d0
00004F76 6A00                       		bpl.s	loc_3598	; if char is less than $80, branch
00004F78 3CBC 0000                  		move.w	#0,(a6)		; display space
00004F7C 51CA FFF4                  		dbf	d2,loc_3588
00004F80 4E75                       		rts	
00004F82                            ; ===========================================================================
00004F82                            
00004F82                            loc_3598:				; XREF: LevSel_ChgLine
00004F82 D043                       		add.w	d3,d0
00004F84 3C80                       		move.w	d0,(a6)		; display char
00004F86 51CA FFEA                  		dbf	d2,loc_3588
00004F8A 4E75                       		rts	
00004F8C                            ; End of function LevSel_ChgLine
00004F8C                            
00004F8C                            ; ===========================================================================
00004F8C                            ; ---------------------------------------------------------------------------
00004F8C                            ; Level	select menu text
00004F8C                            ; ---------------------------------------------------------------------------
00004F8C                            LevelMenuText:	incbin	misc\menutext.bin
00005184                            		even
00005184                            ; ---------------------------------------------------------------------------
00005184                            ; Music	playlist
00005184                            ; ---------------------------------------------------------------------------
00005184 8184 878A 8D90 9300        MusicList:	dc.b	$81, $84, $87, $8A, $8D, $90, $93, 0
0000518C                            
0000518C                            ; ===========================================================================
0000518C                            
0000518C                            ; ---------------------------------------------------------------------------
0000518C                            ; Level
0000518C                            ; ---------------------------------------------------------------------------
0000518C                            
0000518C                            Level:					; XREF: GameModeArray
0000518C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00005192 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005196 6B00                       		bmi.s	loc_37B6
00005198 103C 00E0                  		move.b	#$E0,d0
0000519C 6100 C12A                  		bsr.w	PlaySound_Special ; fade out music
000051A0                            
000051A0                            loc_37B6:
000051A0 6100 C3F2                  		bsr.w	ClearPLC
000051A4 6100 CC6C                  		bsr.w	Pal_FadeFrom
000051A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000051AC 6B00                       		bmi.s	Level_ClrRam
000051AE                            
000051AE                            		; load title card patterns
000051AE 46FC 2700                  		move	#$2700,sr	; disable interrupts
000051BC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0
000051C2 6100 C232                  		bsr.w	NemDec                       
000051C6 46FC 2300                  		move	#$2300,sr	; enable interrupts
000051CA                            
000051CA                            		; load level patterns
000051CA 7000                       		moveq	#0,d0
000051CC 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; move zone number to d0
000051D0 E948                       		lsl.w	#4,d0		; multiple it by 2^4
000051D2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000051D8 45F2 0000                  		lea	(a2,d0.w),a2
000051DC 7000                       		moveq	#0,d0
000051DE 1012                       		move.b	(a2),d0		; get PLC block number
000051E0 6700                       		beq.s	loc_37FC	; if it's zero, branch
000051E2 6100 C352                  		bsr.w	LoadPLC		; load level patterns
000051E6                            
000051E6                            loc_37FC:
000051E6 7001                       		moveq	#1,d0
000051E8 6100 C34C                  		bsr.w	LoadPLC		; load standard	patterns
000051EC                            
000051EC                            Level_ClrRam:	; clear Object RAM
000051EC 43F8 D000                  		lea	($FFFFD000).w,a1
000051F0 7000                       		moveq	#0,d0
000051F2 323C 07FF                  		move.w	#$7FF,d1
000051F6 22C0                       @ClrObjRam:	move.l	d0,(a1)+	 ; fill object RAM with $0
000051F8 51C9 FFFC                  		dbf	d1,@ClrObjRam
000051FC                            
000051FC                            		; clear misc variables, part 1
000051FC 43F8 F628                  		lea	($FFFFF628).w,a1 ; load RAM destination
00005200 7000                       		moveq	#0,d0
00005202 323C 0015                  		move.w	#$15,d1
00005206 22C0                       @ClrVars:	move.l	d0,(a1)+	; fill area RAM with $0
00005208 51C9 FFFC                  		dbf	d1,@ClrVars	; repeat $15 more times
0000520C                            
0000520C                            		; clear misc variables, part 2
0000520C 43F8 F700                  		lea	($FFFFF700).w,a1 ; load RAM destination
00005210 7000                       		moveq	#0,d0
00005212 323C 003F                  		move.w	#$3F,d1
00005216 22C0                       @ClrVars2:	move.l	d0,(a1)+	; fill area RAM with $0
00005218 51C9 FFFC                  		dbf	d1,@ClrVars2	; repeat $3F more times
0000521C                            
0000521C                            		; clear misc variables, part 3
0000521C 43F8 FE60                  		lea	($FFFFFE60).w,a1 ; load RAM destination
00005220 7000                       		moveq	#0,d0
00005222 323C 0047                  		move.w	#$47,d1
00005226 22C0                       @ClrVars3:	move.l	d0,(a1)+	; fill area RAM with $0
00005228 51C9 FFFC                  		dbf	d1,@ClrVars3	; repeat $47 more times
0000522C                            
0000522C 46FC 2700                  		move	#$2700,sr	; disable interrupts
00005230 6100 BFBE                  		bsr.w	ClearScreen
00005234 4DF9 00C0 0004             		lea	($C00004).l,a6
0000523A                            		
0000523A                            		; setup VDP registers
0000523A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000523E 3CBC 8230                  		move.w	#$8230,(a6)
00005242 3CBC 8407                  		move.w	#$8407,(a6)
00005246 3CBC 857C                  		move.w	#$857C,(a6)
0000524A 3CBC 9001                  		move.w	#$9001,(a6)
0000524E 3CBC 8004                  		move.w	#$8004,(a6)
00005252 3CBC 8720                  		move.w	#$8720,(a6)
00005256                            
00005256 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000525C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005260 4278 C800                  		clr.w	($FFFFC800).w
00005264 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000526C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w; is level LZ?
00005272 6600                       		bne.s	Level_LoadPal	; if not, branch
00005274 3CBC 8014                  		move.w	#$8014,(a6)
00005278 7000                       		moveq	#0,d0
0000527A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000527E D040                       		add.w	d0,d0
00005280 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00005286 3031 0000                  		move.w	(a1,d0.w),d0
0000528A 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000528E 31C0 F648                  		move.w	d0,($FFFFF648).w
00005292 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00005296 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
0000529A 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000529E 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000052A4                            
000052A4                            Level_LoadPal:
000052A4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000052AA 46FC 2300                  		move	#$2300,sr
000052AE 7003                       		moveq	#3,d0
000052B0 6100 CE3A                  		bsr.w	PalLoad2	; load Sonic's pallet line
000052B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000052BA 6600                       		bne.s	Level_GetBgm	; if not, branch
000052BC 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000052BE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000052C4 6600                       		bne.s	Level_WaterPal	; if not, branch
000052C6 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000052C8                            
000052C8                            Level_WaterPal:
000052C8 6100 CE3A                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000052CC 4A38 FE30                  		tst.b	($FFFFFE30).w
000052D0 6700                       		beq.s	Level_GetBgm
000052D2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000052D8                            
000052D8                            Level_GetBgm:
000052D8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000052DC 6B00                       		bmi.s	loc_3946
000052DE 7000                       		moveq	#0,d0
000052E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000052E4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000052EA 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000052EC 7005                       		moveq	#5,d0		; move 5 to d0
000052EE                            
000052EE                            Level_BgmNotLZ4:
000052EE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000052F4 6600                       		bne.s	Level_PlayBgm	; if not, branch
000052F6 303C 0093                  		move.w  #$93,d0
000052FA 6000                       		bra.s   Level_PlayBgm3
000052FC                            
000052FC                            Level_PlayBgm:
000052FC 43F9 0000 5184             		lea	(MusicList).l,a1 ; load	music playlist
00005302 1031 0000                  		move.b	(a1,d0.w),d0
00005306 1238 FE11                  		move.b  ($FFFFFE11).w,d1
0000530A 0C01 0003                  		cmpi.b  #3,d1		; is this act 4?
0000530E 6600                       		bne.s   Level_PlayBgm2	; if not, branch
00005310 5301                       	        subi.b  #1,d1
00005312                                            	
00005312                            Level_PlayBgm2:
00005312 D001                                       add.b	d1,d0
00005314                            		
00005314                            Level_PlayBgm3:                
00005314 6100 BFAC                                  bsr.w	PlaySound	 ; play music
00005318 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
0000531E                            
0000531E                            Level_TtlCard:
0000531E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005324 6100 D656                  		bsr.w	DelayProgram
00005328 4EB9 0000 0000             		jsr	ObjectsLoad
0000532E 4EB9 0000 0000             		jsr	BuildSprites
00005334 6100 C26C                  		bsr.w	RunPLC_RAM
00005338 3038 D108                  		move.w	($FFFFD108).w,d0
0000533C B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00005340 66DC                       		bne.s	Level_TtlCard	; if not, branch
00005342 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00005346 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00005348 4EB9 0000 0000             		jsr	Hud_Base
0000534E                            
0000534E                            loc_3946:
0000534E 7003                       		moveq	#3,d0
00005350 6100 CD7E                  		bsr.w	PalLoad1	; load Sonic's pallet line
00005354 6100 0000                  		bsr.w	LevelSizeLoad
00005358 6100 0000                  		bsr.w	DeformBgLayer
0000535C 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005362 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00005366 6100 0000                  		bsr.w	LoadTilesFromStart
0000536A 4EB9 0000 0000             		jsr	FloorLog_Unk
00005370 6100 0000                  		bsr.w	ColIndexLoad
00005374 6100 0000                  		bsr.w	LZWaterEffects
00005378 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000537E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005382 6B00                       		bmi.s	Level_ChkDebug
00005384 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000538A                            
0000538A                            Level_ChkDebug:
0000538A 4A38 FFE2                  		tst.b   ($FFFFFFE2).w   	; has debug cheat been entered?
0000538E 6700                       		beq.s   Level_ChkWater  	; if not, branch
00005390 0838 0006 F604             		btst    #iA,(Joypad|Held).w	; is A button pressed?
00005396 6700                       		beq.s   Level_ChkWater 		; if not, branch
00005398 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w	; enable debug mode
0000539E                            
0000539E                            Level_ChkWater:
0000539E 31FC 0000 F602             		move.w	#0,(SonicControl)
000053A4 31FC 0000 F604             		move.w	#0,(Joypad)
000053AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000053B0 6600                       		bne.s	Level_LoadObj	; if not, branch
000053B2 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000053B8 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000053BE 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000053C4 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000053CA                            
000053CA                            Level_LoadObj:
000053CA 4EB9 0000 0000             		jsr	ObjPosLoad
000053D0 4EB9 0000 0000             		jsr	ObjectsLoad
000053D6 4EB9 0000 0000             		jsr	BuildSprites
000053DC 7000                       		moveq	#0,d0
000053DE 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000053E2 6600                       		bne.s	loc_39E8	; if yes, branch
000053E4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000053E8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000053EC 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000053F0                            
000053F0                            loc_39E8:
000053F0 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000053F4 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000053F8 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000053FC 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00005400 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005404 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005408 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000540C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005410 6100 0000                  		bsr.w	OscillateNumInit
00005414 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000541A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00005420 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00005426 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000542C 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00005432 7000                       		moveq	#0,d0
00005434 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005438 E548                       		lsl.w	#2,d0
0000543A 2271 0000                  		movea.l	(a1,d0.w),a1
0000543E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005442 6A00                       		bpl.s	Level_Demo	; if yes, branch
00005444 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
0000544A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000544E 5340                       		subq.w	#1,d0
00005450 E548                       		lsl.w	#2,d0
00005452 2271 0000                  		movea.l	(a1,d0.w),a1
00005456                            
00005456                            Level_Demo:
00005456 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
0000545C 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00005460 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005466 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000546A 6A00                       		bpl.s	Level_ChkWaterPal
0000546C 31FC 021C F614             		move.w	#540,($FFFFF614).w
00005472 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00005478 6600                       		bne.s	Level_ChkWaterPal
0000547A 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00005480                            
00005480                            Level_ChkWaterPal:
00005480 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00005486 6600                       		bne.s	Level_Delay	; if not, branch
00005488 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
0000548A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00005490 6600                       		bne.s	Level_WaterPal2	; if not, branch
00005492 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00005494                            
00005494                            Level_WaterPal2:
00005494 6100 CC8A                  		bsr.w	PalLoad4_Water
00005498                            
00005498                            Level_Delay:
00005498 323C 0003                  		move.w	#3,d1
0000549C                            
0000549C                            Level_DelayLoop:
0000549C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000054A2 6100 D4D8                  		bsr.w	DelayProgram
000054A6 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000054AA                            
000054AA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054B0 6100 C8C0                  		bsr.w	Pal_FadeTo2
000054B4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000054B8 6B00                       		bmi.s	Level_ClrCardArt
000054BA 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
000054BE 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
000054C2 5838 D124                  		addq.b	#4,($FFFFD124).w
000054C6 5838 D164                  		addq.b	#4,($FFFFD164).w
000054CA 6000                       		bra.s	Level_StartGame
000054CC                            ; ===========================================================================
000054CC                            
000054CC                            Level_ClrCardArt:
000054CC 7002                       		moveq	#2,d0
000054CE 4EB9 0000 1536             		jsr	(LoadPLC).l	; load explosion patterns
000054D4 7000                       		moveq	#0,d0
000054D6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000054DA 0640 0015                  		addi.w	#$15,d0
000054DE 4EB9 0000 1536             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
000054E4                            
000054E4                            Level_StartGame:
000054E4 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
000054EA                            
000054EA                            ; ---------------------------------------------------------------------------
000054EA                            ; Main level loop (when	all title card and loading sequences are finished)
000054EA                            ; ---------------------------------------------------------------------------
000054EA                            
000054EA                            Level_MainLoop:
000054EA 6100 BDE2                  		bsr.w	PauseGame
000054EE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000054F4 6100 D486                  		bsr.w	DelayProgram
000054F8 5278 FE04                  		addq.w	#1,($FFFFFE04).w	; add 1 to level timer
000054FC 6100 0000                  		bsr.w	MoveSonicInDemo
00005500 6100 0000                  		bsr.w	LZWaterEffects
00005504 4EB9 0000 0000             		jsr	ObjectsLoad
0000550A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
0000550E 6600 FC7C                  		bne.w	Level		; if yes, branch
00005512 4A78 FE08                  		tst.w	($FFFFFE08).w
00005516 6600                       		bne.s	loc_3B10
00005518 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w	; is Sonic dying?
0000551E 6400                       		bcc.s	loc_3B14		; if yes, branch
00005520                            
00005520                            loc_3B10:
00005520 6100 0000                  		bsr.w	DeformBgLayer
00005524                            
00005524                            loc_3B14:
00005524 4EB9 0000 0000             		jsr	BuildSprites
0000552A 4EB9 0000 0000             		jsr	ObjPosLoad
00005530 6100 C3CA                  		bsr.w	PalCycle_Load
00005534 6100 C06C                  		bsr.w	RunPLC_RAM
00005538 6100 0000                  		bsr.w	OscillateNumDo
0000553C 6100 0000                  		bsr.w	ChangeRingFrame
00005540 6100 0000                  		bsr.w	SignpostArtLoad
00005544 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000554A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000554C 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00005552 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00005556 4E75                       		rts			; quit
00005558                            ; ===========================================================================
00005558                            
00005558                            Level_ChkDemo:				; XREF: Level_MainLoop
00005558 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000555C 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000555E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00005562 6700                       		beq.s	Level_EndDemo	; if not, branch
00005564 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000556A 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000556E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005574 4E75                       		rts	
00005576                            ; ===========================================================================
00005576                            
00005576                            Level_EndDemo:				; XREF: Level_ChkDemo
00005576 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000557C 6600                       		bne.s	loc_3B88	; if not, branch
0000557E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005584 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005588 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000558A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00005590                            
00005590                            loc_3B88:
00005590 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00005596 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000559C 4278 F794                  		clr.w	($FFFFF794).w
000055A0                            
000055A0                            loc_3B98:
000055A0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000055A6 6100 D3D4                  		bsr.w	DelayProgram
000055AA 6100 0000                  		bsr.w	MoveSonicInDemo
000055AE 4EB9 0000 0000             		jsr	ObjectsLoad
000055B4 4EB9 0000 0000             		jsr	BuildSprites
000055BA 4EB9 0000 0000             		jsr	ObjPosLoad
000055C0 5378 F794                  		subq.w	#1,($FFFFF794).w
000055C4 6A00                       		bpl.s	loc_3BC8
000055C6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000055CC 6100 C864                  		bsr.w	Pal_FadeOut
000055D0                            
000055D0                            loc_3BC8:
000055D0 4A78 F614                  		tst.w	($FFFFF614).w
000055D4 66CA                       		bne.s	loc_3B98
000055D6 4E75                       		rts	
000055D8                            ; ===========================================================================
000055D8                            ; ---------------------------------------------------------------------------
000055D8                            ; Subroutine to	do special water effects in Labyrinth Zone
000055D8                            ; ---------------------------------------------------------------------------
000055D8                            
000055D8                            LZWaterEffects:				; XREF: Level
000055D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000055DE 6600                       		bne.s	locret_3C28	; if not, branch
000055E0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000055E6 6400                       		bcc.s	LZMoveWater
000055E8 6100 0000                  		bsr.w	LZWindTunnels
000055EC 6100 0000                  		bsr.w	LZWaterSlides
000055F0 6100 0000                  		bsr.w	LZDynamicWater
000055F4                            
000055F4                            LZMoveWater:
000055F4 4238 F64E                  		clr.b	($FFFFF64E).w
000055F8 7000                       		moveq	#0,d0
000055FA 1038 FE60                  		move.b	($FFFFFE60).w,d0
000055FE E248                       		lsr.w	#1,d0
00005600 D078 F648                  		add.w	($FFFFF648).w,d0
00005604 31C0 F646                  		move.w	d0,($FFFFF646).w
00005608 3038 F646                  		move.w	($FFFFF646).w,d0
0000560C 9078 F704                  		sub.w	($FFFFF704).w,d0
00005610 6400                       		bcc.s	loc_3C1A
00005612 4A40                       		tst.w	d0
00005614 6A00                       		bpl.s	loc_3C1A
00005616 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000561C 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00005622                            
00005622                            loc_3C1A:
00005622 0C40 00DF                  		cmpi.w	#$DF,d0
00005626 6500                       		bcs.s	loc_3C24
00005628 303C 00DF                  		move.w	#$DF,d0
0000562C                            
0000562C                            loc_3C24:
0000562C 11C0 F625                  		move.b	d0,($FFFFF625).w
00005630                            
00005630                            locret_3C28:
00005630 4E75                       		rts	
00005632                            ; ===========================================================================
00005632                            ; ---------------------------------------------------------------------------
00005632                            ; Labyrinth default water heights
00005632                            ; ---------------------------------------------------------------------------
00005632                            WaterHeight:	incbin	misc\lz_heigh.bin
0000563A                            		even
0000563A                            ; ===========================================================================
0000563A                            
0000563A                            ; ---------------------------------------------------------------------------
0000563A                            ; Labyrinth dynamic water routines
0000563A                            ; ---------------------------------------------------------------------------
0000563A                            
0000563A                            LZDynamicWater:				; XREF: LZWaterEffects
0000563A 7000                       		moveq	#0,d0
0000563C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00005640 D040                       		add.w	d0,d0
00005642 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00005646 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
0000564A 7200                       		moveq	#0,d1
0000564C 1238 F64C                  		move.b	($FFFFF64C).w,d1
00005650 3038 F64A                  		move.w	($FFFFF64A).w,d0
00005654 9078 F648                  		sub.w	($FFFFF648).w,d0
00005658 6700                       		beq.s	locret_3C5A
0000565A 6400                       		bcc.s	loc_3C56
0000565C 4441                       		neg.w	d1
0000565E                            
0000565E                            loc_3C56:
0000565E D378 F648                  		add.w	d1,($FFFFF648).w
00005662                            
00005662                            locret_3C5A:
00005662 4E75                       		rts	
00005664                            ; ===========================================================================
00005664 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00005666 0000                       		dc.w DynWater_LZ2-DynWater_Index
00005668 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000566A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000566C                            ; ===========================================================================
0000566C                            
0000566C                            DynWater_LZ1:				; XREF: DynWater_Index
0000566C 3038 F700                  		move.w	($FFFFF700).w,d0
00005670 1438 F64D                  		move.b	($FFFFF64D).w,d2
00005674 6600                       		bne.s	loc_3CD0
00005676 323C 00B8                  		move.w	#$B8,d1
0000567A 0C40 0600                  		cmpi.w	#$600,d0
0000567E 6500                       		bcs.s	loc_3CB4
00005680 323C 0108                  		move.w	#$108,d1
00005684 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000568A 6500                       		bcs.s	loc_3CBA
0000568C 0C40 0C00                  		cmpi.w	#$C00,d0
00005690 6500                       		bcs.s	loc_3CB4
00005692 323C 0318                  		move.w	#$318,d1
00005696 0C40 1080                  		cmpi.w	#$1080,d0
0000569A 6500                       		bcs.s	loc_3CB4
0000569C 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000056A2 323C 05C8                  		move.w	#$5C8,d1
000056A6 0C40 1380                  		cmpi.w	#$1380,d0
000056AA 6500                       		bcs.s	loc_3CB4
000056AC 323C 03A8                  		move.w	#$3A8,d1
000056B0 B278 F648                  		cmp.w	($FFFFF648).w,d1
000056B4 6600                       		bne.s	loc_3CB4
000056B6 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000056BC                            
000056BC                            loc_3CB4:
000056BC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000056C0 4E75                       		rts	
000056C2                            ; ===========================================================================
000056C2                            
000056C2                            loc_3CBA:				; XREF: DynWater_LZ1
000056C2 0C40 0C80                  		cmpi.w	#$C80,d0
000056C6 65F4                       		bcs.s	loc_3CB4
000056C8 323C 00E8                  		move.w	#$E8,d1
000056CC 0C40 1500                  		cmpi.w	#$1500,d0
000056D0 65EA                       		bcs.s	loc_3CB4
000056D2 323C 0108                  		move.w	#$108,d1
000056D6 60E4                       		bra.s	loc_3CB4
000056D8                            ; ===========================================================================
000056D8                            
000056D8                            loc_3CD0:				; XREF: DynWater_LZ1
000056D8 5302                       		subq.b	#1,d2
000056DA 6600                       		bne.s	locret_3CF4
000056DC 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000056E2 6400                       		bcc.s	locret_3CF4
000056E4 323C 03A8                  		move.w	#$3A8,d1
000056E8 0C40 1300                  		cmpi.w	#$1300,d0
000056EC 6500                       		bcs.s	loc_3CF0
000056EE 323C 0108                  		move.w	#$108,d1
000056F2 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000056F8                            
000056F8                            loc_3CF0:
000056F8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000056FC                            
000056FC                            locret_3CF4:
000056FC 4E75                       		rts	
000056FE                            ; ===========================================================================
000056FE                            
000056FE                            DynWater_LZ2:				; XREF: DynWater_Index
000056FE 3038 F700                  		move.w	($FFFFF700).w,d0
00005702 323C 0328                  		move.w	#$328,d1
00005706 0C40 0500                  		cmpi.w	#$500,d0
0000570A 6500                       		bcs.s	loc_3D12
0000570C 323C 03C8                  		move.w	#$3C8,d1
00005710 0C40 0B00                  		cmpi.w	#$B00,d0
00005714 6500                       		bcs.s	loc_3D12
00005716 323C 0428                  		move.w	#$428,d1
0000571A                            
0000571A                            loc_3D12:
0000571A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000571E 4E75                       		rts	
00005720                            ; ===========================================================================
00005720                            
00005720                            DynWater_LZ3:				; XREF: DynWater_Index
00005720 3038 F700                  		move.w	($FFFFF700).w,d0
00005724 1438 F64D                  		move.b	($FFFFF64D).w,d2
00005728 6600                       		bne.s	loc_3D5E
0000572A 323C 0900                  		move.w	#$900,d1
0000572E 0C40 0600                  		cmpi.w	#$600,d0
00005732 6500                       		bcs.s	loc_3D54
00005734 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000573A 6500                       		bcs.s	loc_3D54
0000573C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00005742 6400                       		bcc.s	loc_3D54
00005744 323C 04C8                  		move.w	#$4C8,d1
00005748 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
0000574E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00005754 303C 00B7                  		move.w	#$B7,d0
00005758 6100 BB6E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
0000575C                            
0000575C                            loc_3D54:
0000575C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005760 31C1 F648                  		move.w	d1,($FFFFF648).w
00005764 4E75                       		rts	
00005766                            ; ===========================================================================
00005766                            
00005766                            loc_3D5E:				; XREF: DynWater_LZ3
00005766 5302                       		subq.b	#1,d2
00005768 6600                       		bne.s	loc_3DA8
0000576A 323C 04C8                  		move.w	#$4C8,d1
0000576E 0C40 0770                  		cmpi.w	#$770,d0
00005772 6500                       		bcs.s	loc_3DA2
00005774 323C 0308                  		move.w	#$308,d1
00005778 0C40 1400                  		cmpi.w	#$1400,d0
0000577C 6500                       		bcs.s	loc_3DA2
0000577E 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00005784 6700                       		beq.s	loc_3D8E
00005786 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000578C 6400                       		bcc.s	loc_3D8E
0000578E 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00005794 6400                       		bcc.s	loc_3DA2
00005796                            
00005796                            loc_3D8E:
00005796 323C 0508                  		move.w	#$508,d1
0000579A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000579E 0C40 1770                  		cmpi.w	#$1770,d0
000057A2 6500                       		bcs.s	loc_3DA2
000057A4 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000057AA                            
000057AA                            loc_3DA2:
000057AA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000057AE 4E75                       		rts	
000057B0                            ; ===========================================================================
000057B0                            
000057B0                            loc_3DA8:
000057B0 5302                       		subq.b	#1,d2
000057B2 6600                       		bne.s	loc_3DD2
000057B4 323C 0508                  		move.w	#$508,d1
000057B8 0C40 1860                  		cmpi.w	#$1860,d0
000057BC 6500                       		bcs.s	loc_3DCC
000057BE 323C 0188                  		move.w	#$188,d1
000057C2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000057C6 6400                       		bcc.s	loc_3DC6
000057C8 B278 F648                  		cmp.w	($FFFFF648).w,d1
000057CC 6600                       		bne.s	loc_3DCC
000057CE                            
000057CE                            loc_3DC6:
000057CE 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000057D4                            
000057D4                            loc_3DCC:
000057D4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000057D8 4E75                       		rts	
000057DA                            ; ===========================================================================
000057DA                            
000057DA                            loc_3DD2:
000057DA 5302                       		subq.b	#1,d2
000057DC 6600                       		bne.s	loc_3E0E
000057DE 323C 0188                  		move.w	#$188,d1
000057E2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000057E6 6500                       		bcs.s	loc_3E04
000057E8 323C 0900                  		move.w	#$900,d1
000057EC 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000057F0 6500                       		bcs.s	loc_3E04
000057F2 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000057F8 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000057FE 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00005804 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000580A 4E75                       		rts	
0000580C                            ; ===========================================================================
0000580C                            
0000580C                            loc_3E04:
0000580C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005810 31C1 F648                  		move.w	d1,($FFFFF648).w
00005814 4E75                       		rts	
00005816                            ; ===========================================================================
00005816                            
00005816                            loc_3E0E:
00005816 0C40 1E00                  		cmpi.w	#$1E00,d0
0000581A 6500                       		bcs.s	locret_3E1A
0000581C 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00005822                            
00005822                            locret_3E1A:
00005822 4E75                       		rts	
00005824                            ; ===========================================================================
00005824                            
00005824                            DynWater_SBZ3:				; XREF: DynWater_Index
00005824 323C 0228                  		move.w	#$228,d1
00005828 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000582E 6500                       		bcs.s	loc_3E2C
00005830 323C 04C8                  		move.w	#$4C8,d1
00005834                            
00005834                            loc_3E2C:
00005834 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005838 4E75                       		rts
0000583A                            
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            ; Labyrinth Zone "wind tunnels"	subroutine
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            
0000583A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000583A                            
0000583A                            
0000583A                            LZWindTunnels:				; XREF: LZWaterEffects
0000583A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000583E 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00005842 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00005848 7000                       		moveq	#0,d0
0000584A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000584E E748                       		lsl.w	#3,d0
00005850 D4C0                       		adda.w	d0,a2
00005852 7200                       		moveq	#0,d1
00005854 4A38 FE11                  		tst.b	($FFFFFE11).w
00005858 6600                       		bne.s	loc_3E56
0000585A 7201                       		moveq	#1,d1
0000585C 514A                       		subq.w	#8,a2
0000585E                            
0000585E                            loc_3E56:
0000585E 43F8 D000                  		lea	($FFFFD000).w,a1
00005862                            
00005862                            LZWind_Loop:
00005862 3029 0008                  		move.w	8(a1),d0
00005866 B052                       		cmp.w	(a2),d0
00005868 6500 0000                  		bcs.w	loc_3EF4
0000586C B06A 0004                  		cmp.w	4(a2),d0
00005870 6400 0000                  		bcc.w	loc_3EF4
00005874 3429 000C                  		move.w	$C(a1),d2
00005878 B46A 0002                  		cmp.w	2(a2),d2
0000587C 6500                       		bcs.s	loc_3EF4
0000587E B46A 0006                  		cmp.w	6(a2),d2
00005882 6400                       		bcc.s	loc_3EF4
00005884 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005888 0200 003F                  		andi.b	#$3F,d0
0000588C 6600                       		bne.s	loc_3E90
0000588E 303C 00D0                  		move.w	#$D0,d0
00005892 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play rushing water sound
00005898                            
00005898                            loc_3E90:
00005898 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000589C 6600 0000                  		bne.w	locret_3F0A
000058A0 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000058A6 6400                       		bcc.s	loc_3F06
000058A8 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000058AE 0440 0080                  		subi.w	#$80,d0
000058B2 B052                       		cmp.w	(a2),d0
000058B4 6400                       		bcc.s	LZWind_Move
000058B6 7002                       		moveq	#2,d0
000058B8 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000058BE 6600                       		bne.s	loc_3EBA
000058C0 4440                       		neg.w	d0
000058C2                            
000058C2                            loc_3EBA:
000058C2 D169 000C                  		add.w	d0,$C(a1)
000058C6                            
000058C6                            LZWind_Move:
000058C6 5869 0008                  		addq.w	#4,8(a1)
000058CA 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000058D0 337C 0000 0012             		move.w	#0,$12(a1)
000058D6 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000058DC 08E9 0001 0022             		bset	#1,$22(a1)
000058E2 0838 0000 F602             		btst	#iUp,(SonicControl|Held)	; is up pressed?
000058E8 6700                       		beq.s	LZWind_MoveDown			; if not, branch
000058EA 5369 000C                  		subq.w	#1,$C(a1)			; move Sonic up
000058EE                            
000058EE                            LZWind_MoveDown:
000058EE 0838 0001 F602             		btst	#iDown,(SonicControl|Held)	; is down being pressed?
000058F4 6700                       		beq.s	locret_3EF2			; if not, branch
000058F6 5269 000C                  		addq.w	#1,$C(a1)			; move Sonic down
000058FA                            
000058FA                            locret_3EF2:
000058FA 4E75                       		rts
000058FC                            ; ===========================================================================
000058FC                            
000058FC                            loc_3EF4:				; XREF: LZWindTunnels
000058FC 504A                       		addq.w	#8,a2
000058FE 51C9 FF62                  		dbf	d1,LZWind_Loop
00005902 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00005906 6700                       		beq.s	locret_3F0A
00005908 137C 0000 001C             		move.b	#0,$1C(a1)
0000590E                            
0000590E                            loc_3F06:
0000590E 4238 F7C7                  		clr.b	($FFFFF7C7).w
00005912                            
00005912                            locret_3F0A:
00005912 4E75                       		rts	
00005914                            ; End of function LZWindTunnels
00005914                            
00005914                            ; ===========================================================================
00005914 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000591C 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000592E 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000593C                            					; XREF: LZWindTunnels
0000593C                            		even
0000593C                            
0000593C                            ; ---------------------------------------------------------------------------
0000593C                            ; Labyrinth Zone water slide subroutine
0000593C                            ; ---------------------------------------------------------------------------
0000593C                            
0000593C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000593C                            
0000593C                            
0000593C                            LZWaterSlides:				; XREF: LZWaterEffects
0000593C 43F8 D000                  		lea	($FFFFD000).w,a1
00005940 0829 0001 0022             		btst	#1,$22(a1)
00005946 6600                       		bne.s	loc_3F6A
00005948 3029 000C                  		move.w	$C(a1),d0
0000594C E248                       		lsr.w	#1,d0
0000594E 0240 0380                  		andi.w	#$380,d0
00005952 1229 0008                  		move.b	8(a1),d1
00005956 0241 007F                  		andi.w	#$7F,d1
0000595A D041                       		add.w	d1,d0
0000595C 45F8 A400                  		lea	($FFFFA400).w,a2
00005960 1032 0000                  		move.b	(a2,d0.w),d0
00005964 45FA 0000                  		lea	byte_3FCF(pc),a2
00005968 7206                       		moveq	#6,d1
0000596A                            
0000596A                            loc_3F62:
0000596A B022                       		cmp.b	-(a2),d0
0000596C 57C9 FFFC                  		dbeq	d1,loc_3F62
00005970 6700                       		beq.s	LZSlide_Move
00005972                            
00005972                            loc_3F6A:
00005972 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00005976 6700                       		beq.s	locret_3F7A
00005978 337C 0005 003E             		move.w	#5,$3E(a1)
0000597E 4238 F7CA                  		clr.b	($FFFFF7CA).w
00005982                            
00005982                            locret_3F7A:
00005982 4E75                       		rts	
00005984                            ; ===========================================================================
00005984                            
00005984                            LZSlide_Move:				; XREF: LZWaterSlides
00005984 0C41 0003                  		cmpi.w	#3,d1
00005988 6400                       		bcc.s	loc_3F84
0000598A 4E71                       		nop	
0000598C                            
0000598C                            loc_3F84:
0000598C 08A9 0000 0022             		bclr	#0,$22(a1)
00005992 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00005996 1340 0014                  		move.b	d0,$14(a1)
0000599A 6A00                       		bpl.s	loc_3F9A
0000599C 08E9 0000 0022             		bset	#0,$22(a1)
000059A2                            
000059A2                            loc_3F9A:
000059A2 4229 0015                  		clr.b	$15(a1)
000059A6 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000059AC 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000059B2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000059B6 0200 001F                  		andi.b	#$1F,d0
000059BA 6600                       		bne.s	locret_3FBE
000059BC 303C 00D0                  		move.w	#$D0,d0
000059C0 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play water sound
000059C6                            
000059C6                            locret_3FBE:
000059C6 4E75                       		rts	
000059C8                            ; End of function LZWaterSlides
000059C8                            
000059C8                            ; ===========================================================================
000059C8 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000059D7 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000059D8                            		even
000059D8                            
000059D8                            ; ---------------------------------------------------------------------------
000059D8                            ; Subroutine to	move Sonic in demo mode
000059D8                            ; ---------------------------------------------------------------------------
000059D8                            
000059D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059D8                            
000059D8                            
000059D8                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000059D8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000059DC 6600                       		bne.s	MoveDemo_On	; if yes, branch
000059DE 4E75                       		rts	
000059E0                            ; ===========================================================================
000059E0                            
000059E0                            ; ---------------------------------------------------------------------------
000059E0                            ; Unused subroutine to record demos
000059E0                            ; ---------------------------------------------------------------------------
000059E0                            
000059E0                            MoveDemo_Record:
000059E0 43F9 0008 0000             		lea	($80000).l,a1		; RAM space, where demo is written
000059E6 3038 F790                  		move.w	($FFFFF790).w,d0	; load record index
000059EA D2C0                       		adda.w	d0,a1			; load record
000059EC 1038 F604                  		move.b	(Joypad|Held),d0	; get button presses
000059F0 B011                       		cmp.b	(a1),d0			; have input buttons been changed?
000059F2 6600                       		bne.s	@RecordItem		; if yes, branch
000059F4 5229 0001                  		addq.b	#1,1(a1)		; increase buttons state counter
000059F8 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)		; is counter about to overflow?
000059FE 6700                       		beq.s	@RecordItem		; if yes, branch
00005A00 4E75                       		rts
00005A02                            
00005A02                            ;loc_3FFA:
00005A02                            @RecordItem:
00005A02 1340 0002                  		move.b	d0,2(a1)		; record button state into next slot
00005A06 137C 0000 0003             		move.b	#0,3(a1)		; record button state counter into next slot
00005A0C 5478 F790                  		addq.w	#2,($FFFFF790).w	; increase record index
00005A10 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00005A16 4E75                       		rts
00005A18                            ; ===========================================================================
00005A18                            
00005A18                            MoveDemo_On:				; XREF: MoveSonicInDemo
00005A18 4A38 F604                  		tst.b	(Joypad|Held)	; test joypad input
00005A1C 6A00                       		bpl.s	loc_4022	; if Start is not pressed, branch
00005A1E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is it demos in Ending sequence?
00005A22 6B00                       		bmi.s	loc_4022	; if yes, branch
00005A24 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to Title Screen
00005A2A                            
00005A2A                            loc_4022:
00005A2A 43F9 0000 0000             		lea	(Demo_Index).l,a1
00005A30 7000                       		moveq	#0,d0
00005A32 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A36 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00005A3C 6600                       		bne.s	loc_4038
00005A3E 7006                       		moveq	#6,d0
00005A40                            
00005A40                            loc_4038:
00005A40 E548                       		lsl.w	#2,d0
00005A42 2271 0000                  		movea.l	(a1,d0.w),a1
00005A46 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is it demos in Ending sequence?
00005A4A 6A00                       		bpl.s	loc_4056	; if not, branch
00005A4C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00005A52 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005A56 5340                       		subq.w	#1,d0
00005A58 E548                       		lsl.w	#2,d0
00005A5A 2271 0000                  		movea.l	(a1,d0.w),a1
00005A5E                            
00005A5E                            loc_4056:
00005A5E 3038 F790                  		move.w	($FFFFF790).w,d0 ; load record index
00005A62 D2C0                       		adda.w	d0,a1		; add it to a1 to get the record
00005A64 1011                       		move.b	(a1),d0		; read button press from the recorded demo
00005A66 41F8 F604                  		lea	(Joypad),a0	; load Joypad button states
00005A6A 1200                       		move.b	d0,d1
00005A6C 1428 FFFE                  		move.b	-2(a0),d2
00005A70 B500                       		eor.b	d2,d0
00005A72 10C1                       		move.b	d1,(a0)+
00005A74 C001                       		and.b	d1,d0
00005A76 10C0                       		move.b	d0,(a0)+
00005A78 5338 F792                  		subq.b	#1,($FFFFF792).w
00005A7C 6400                       		bcc.s	locret_407E
00005A7E 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00005A84 5478 F790                  		addq.w	#2,($FFFFF790).w
00005A88                            
00005A88                            locret_407E:
00005A88 4E75                       		rts	
00005A8A                            ; End of function MoveSonicInDemo
00005A8A                            
00005A8A                            ; ===========================================================================
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A                            ; Demo sequence	pointers
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A                            Demo_Index:
00005A8A                            	include "_inc\Demo pointers for intro.asm"
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A                            ; Demo sequence	pointers
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A 0000 0000                  	dc.l Demo_GHZ
00005A8E 0000 0000                  	dc.l Demo_GHZ
00005A92 0000 0000                  	dc.l Demo_MZ
00005A96 0000 0000                  	dc.l Demo_MZ
00005A9A 0000 0000                  	dc.l Demo_SYZ
00005A9E 0000 0000                  	dc.l Demo_SYZ
00005AA2 0000 0000                  	dc.l Demo_SS
00005AA6 0000 0000                  	dc.l Demo_SS
00005AA6 0000 0000                  	dc.l Demo_SS
00005AAA                            
00005AAA                            Demo_EndIndex:
00005AAA                            	include "_inc\Demo pointers for ending.asm"
00005AAA                            ; ---------------------------------------------------------------------------
00005AAA                            ; Demo (ending) sequence pointers
00005AAA                            ; ---------------------------------------------------------------------------
00005AAA 0000 0000                  	dc.l Demo_EndGHZ1
00005AAE 0000 0000                  	dc.l Demo_EndMZ
00005AB2 0000 0000                  	dc.l Demo_EndSYZ
00005AB6 0000 0000                  	dc.l Demo_EndLZ
00005ABA 0000 0000                  	dc.l Demo_EndSLZ
00005ABE 0000 0000                  	dc.l Demo_EndSBZ1
00005AC2 0000 0000                  	dc.l Demo_EndSBZ2
00005AC6 0000 0000                  	dc.l Demo_EndGHZ2
00005AC6 0000 0000                  	dc.l Demo_EndGHZ2
00005ACA                            
00005ACA 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005ADA 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005AEA 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005AFA                            		even
00005AFA                            
00005AFA                            ; ---------------------------------------------------------------------------
00005AFA                            ; Collision index loading subroutine
00005AFA                            ; ---------------------------------------------------------------------------
00005AFA                            
00005AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AFA                            
00005AFA                            
00005AFA                            ColIndexLoad:				; XREF: Level
00005AFA 7000                       		moveq	#0,d0
00005AFC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B00 E548                       		lsl.w	#2,d0
00005B02 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00005B08 4E75                       		rts	
00005B0A                            ; End of function ColIndexLoad
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Collision index pointers
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ColPointers:
00005B0A                            	include "_inc\Collision index pointers.asm"
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Collision index pointers
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A 0000 0000                  	dc.l Col_GHZ
00005B0E 0000 0000                  	dc.l Col_LZ
00005B12 0000 0000                  	dc.l Col_MZ
00005B16 0000 0000                  	dc.l Col_SLZ
00005B1A 0000 0000                  	dc.l Col_SYZ
00005B1E 0000 0000                  	dc.l Col_SBZ
00005B1E 0000 0000                  	dc.l Col_SBZ
00005B22                            
00005B22                            ; ---------------------------------------------------------------------------
00005B22                            ; Oscillating number subroutine
00005B22                            ; ---------------------------------------------------------------------------
00005B22                            
00005B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B22                            
00005B22                            
00005B22                            OscillateNumInit:			; XREF: Level
00005B22 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005B26 45F9 0000 0000             		lea	(Osc_Data).l,a2
00005B2C 7220                       		moveq	#$20,d1
00005B2E                            
00005B2E                            Osc_Loop:
00005B2E 32DA                       		move.w	(a2)+,(a1)+
00005B30 51C9 FFFC                  		dbf	d1,Osc_Loop
00005B34 4E75                       		rts	
00005B36                            ; End of function OscillateNumInit
00005B36                            
00005B36                            ; ===========================================================================
00005B36 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00005B3A 0000 0080                  		dc.w 0,	$80
00005B3E 0000 0080                  		dc.w 0,	$80
00005B42 0000 0080                  		dc.w 0,	$80
00005B46 0000 0080                  		dc.w 0,	$80
00005B4A 0000 0080                  		dc.w 0,	$80
00005B4E 0000 0080                  		dc.w 0,	$80
00005B52 0000 0080                  		dc.w 0,	$80
00005B56 0000 0080                  		dc.w 0,	$80
00005B5A 0000 50F0                  		dc.w 0,	$50F0
00005B5E 011E 2080                  		dc.w $11E, $2080
00005B62 00B4 3080                  		dc.w $B4, $3080
00005B66 010E 5080                  		dc.w $10E, $5080
00005B6A 01C2 7080                  		dc.w $1C2, $7080
00005B6E 0276 0080                  		dc.w $276, $80
00005B72 0000 0080                  		dc.w 0,	$80
00005B76 0000                       		dc.w 0
00005B78                            		even
00005B78                            
00005B78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B78                            
00005B78                            
00005B78                            OscillateNumDo:				; XREF: Level
00005B78 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B7E 6400                       		bcc.s	locret_41C4
00005B80 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005B84 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00005B8A 3619                       		move.w	(a1)+,d3
00005B8C 720F                       		moveq	#$F,d1
00005B8E                            
00005B8E                            loc_4184:
00005B8E 341A                       		move.w	(a2)+,d2
00005B90 381A                       		move.w	(a2)+,d4
00005B92 0303                       		btst	d1,d3
00005B94 6600                       		bne.s	loc_41A4
00005B96 3029 0002                  		move.w	2(a1),d0
00005B9A D042                       		add.w	d2,d0
00005B9C 3340 0002                  		move.w	d0,2(a1)
00005BA0 D151                       		add.w	d0,0(a1)
00005BA2 B811                       		cmp.b	0(a1),d4
00005BA4 6200                       		bhi.s	loc_41BA
00005BA6 03C3                       		bset	d1,d3
00005BA8 6000                       		bra.s	loc_41BA
00005BAA                            ; ===========================================================================
00005BAA                            
00005BAA                            loc_41A4:				; XREF: OscillateNumDo
00005BAA 3029 0002                  		move.w	2(a1),d0
00005BAE 9042                       		sub.w	d2,d0
00005BB0 3340 0002                  		move.w	d0,2(a1)
00005BB4 D151                       		add.w	d0,0(a1)
00005BB6 B811                       		cmp.b	0(a1),d4
00005BB8 6300                       		bls.s	loc_41BA
00005BBA 0383                       		bclr	d1,d3
00005BBC                            
00005BBC                            loc_41BA:
00005BBC 5849                       		addq.w	#4,a1
00005BBE 51C9 FFCE                  		dbf	d1,loc_4184
00005BC2 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00005BC6                            
00005BC6                            locret_41C4:
00005BC6 4E75                       		rts	
00005BC8                            ; End of function OscillateNumDo
00005BC8                            
00005BC8                            ; ===========================================================================
00005BC8 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00005BCC 0002 0018                  		dc.w 2,	$18
00005BD0 0002 0020                  		dc.w 2,	$20
00005BD4 0002 0030                  		dc.w 2,	$30
00005BD8 0004 0020                  		dc.w 4,	$20
00005BDC 0008 0008                  		dc.w 8,	8
00005BE0 0008 0040                  		dc.w 8,	$40
00005BE4 0004 0040                  		dc.w 4,	$40
00005BE8 0002 0050                  		dc.w 2,	$50
00005BEC 0002 0050                  		dc.w 2,	$50
00005BF0 0002 0020                  		dc.w 2,	$20
00005BF4 0003 0030                  		dc.w 3,	$30
00005BF8 0005 0050                  		dc.w 5,	$50
00005BFC 0007 0070                  		dc.w 7,	$70
00005C00 0002 0010                  		dc.w 2,	$10
00005C04 0002 0010                  		dc.w 2,	$10
00005C08                            		even
00005C08                            
00005C08                            ; ---------------------------------------------------------------------------
00005C08                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00005C08                            ; ---------------------------------------------------------------------------
00005C08                            
00005C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C08                            
00005C08                            
00005C08                            ChangeRingFrame:			; XREF: Level
00005C08 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00005C0C 6A00                       		bpl.s	loc_421C
00005C0E 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00005C14 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00005C18 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00005C1E                            
00005C1E                            loc_421C:
00005C1E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00005C22 6A00                       		bpl.s	loc_4232
00005C24 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00005C2A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00005C2E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00005C34                            
00005C34                            loc_4232:
00005C34 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00005C38 6A00                       		bpl.s	loc_4250
00005C3A 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00005C40 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00005C44 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00005C4A 6500                       		bcs.s	loc_4250
00005C4C 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00005C52                            
00005C52                            loc_4250:
00005C52 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00005C56 6700                       		beq.s	locret_4272
00005C58 7000                       		moveq	#0,d0
00005C5A 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00005C5E D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00005C62 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00005C66 EF58                       		rol.w	#7,d0
00005C68 0240 0003                  		andi.w	#3,d0
00005C6C 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00005C70 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00005C74                            
00005C74                            locret_4272:
00005C74 4E75                       		rts	
00005C76                            ; End of function ChangeRingFrame
00005C76                            
00005C76                            ; ---------------------------------------------------------------------------
00005C76                            ; End-of-act signpost pattern loading subroutine
00005C76                            ; ---------------------------------------------------------------------------
00005C76                            
00005C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C76                            
00005C76                            
00005C76                            SignpostArtLoad:			; XREF: Level
00005C76 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00005C7A 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00005C7E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00005C84 6700                       		beq.s	Signpost_Exit	; if yes, branch
00005C86 3038 F700                  		move.w	($FFFFF700).w,d0
00005C8A 3238 F72A                  		move.w	($FFFFF72A).w,d1
00005C8E 0441 0100                  		subi.w	#$100,d1
00005C92 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005C94 6D00                       		blt.s	Signpost_Exit	; if not, branch
00005C96 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00005C9A 6700                       		beq.s	Signpost_Exit
00005C9C B278 F728                  		cmp.w	($FFFFF728).w,d1
00005CA0 6700                       		beq.s	Signpost_Exit
00005CA2 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00005CA6 7012                       		moveq	#$12,d0
00005CA8 6000 B8BE                  		bra.w	LoadPLC2	; load signpost	patterns
00005CAC                            ; ===========================================================================
00005CAC                            
00005CAC                            Signpost_Exit:
00005CAC 4E75                       		rts	
00005CAE                            ; End of function SignpostArtLoad
00005CAE                            
00005CAE                            ; ===========================================================================
00005CAE                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005D2E                            Demo_MZ:	incbin	demodata\i_mz.bin
00005E5E                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005EDE                            Demo_SS:	incbin	demodata\i_ss.bin
00005FDE                            ; ===========================================================================
00005FDE                            
00005FDE                            ; ---------------------------------------------------------------------------
00005FDE                            ; Special Stage
00005FDE                            ; ---------------------------------------------------------------------------
00005FDE                            
00005FDE                            SpecialStage:				; XREF: GameModeArray
00005FDE 303C 00CA                  		move.w	#$CA,d0
00005FE2 6100 B2E4                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005FE6 6100 BF54                  		bsr.w	Pal_MakeFlash
00005FEA 46FC 2700                  		move	#$2700,sr
00005FEE 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FF4 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FF8 3CBC 8004                  		move.w	#$8004,(a6)
00005FFC 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00006002 3CBC 9011                  		move.w	#$9011,(a6)
00006006 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000600A 0200 00BF                  		andi.b	#$BF,d0
0000600E 33C0 00C0 0004             		move.w	d0,($C00004).l
00006014 6100 B1DA                  		bsr.w	ClearScreen
00006018 46FC 2300                  		move	#$2300,sr
0000601C 4BF9 00C0 0004             		lea	($C00004).l,a5
00006022 3ABC 8F01                  		move.w	#$8F01,(a5)
00006026 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000602C 3ABC 9780                  		move.w	#$9780,(a5)
00006030 2ABC 5000 0081             		move.l	#$50000081,(a5)
00006036 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000603E                            
0000603E                            loc_463C:
0000603E 3215                       		move.w	(a5),d1
00006040 0801 0001                  		btst	#1,d1
00006044 66F8                       		bne.s	loc_463C
00006046 3ABC 8F02                  		move.w	#$8F02,(a5)
0000604A 6100 0000                  		bsr.w	SS_BGLoad
0000604E 7014                       		moveq	#$14,d0
00006050 6100 B65A                  		bsr.w	RunPLC_ROM	; load special stage patterns
00006054 43F8 D000                  		lea	($FFFFD000).w,a1
00006058 7000                       		moveq	#0,d0
0000605A 323C 07FF                  		move.w	#$7FF,d1
0000605E                            
0000605E                            SS_ClrObjRam:
0000605E 22C0                       		move.l	d0,(a1)+
00006060 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00006064                            
00006064 43F8 F700                  		lea	($FFFFF700).w,a1
00006068 7000                       		moveq	#0,d0
0000606A 323C 003F                  		move.w	#$3F,d1
0000606E                            
0000606E                            SS_ClrRam:
0000606E 22C0                       		move.l	d0,(a1)+
00006070 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00006074                            
00006074 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006078 7000                       		moveq	#0,d0
0000607A 323C 0027                  		move.w	#$27,d1
0000607E                            
0000607E                            SS_ClrRam2:
0000607E 22C0                       		move.l	d0,(a1)+
00006080 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00006084                            
00006084 43F8 AA00                  		lea	($FFFFAA00).w,a1
00006088 7000                       		moveq	#0,d0
0000608A 323C 007F                  		move.w	#$7F,d1
0000608E                            
0000608E                            SS_ClrNemRam:
0000608E 22C0                       		move.l	d0,(a1)+
00006090 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00006094                            
00006094 4238 F64E                  		clr.b	($FFFFF64E).w
00006098 4278 FE02                  		clr.w	($FFFFFE02).w
0000609C 700A                       		moveq	#$A,d0
0000609E 6100 C030                  		bsr.w	PalLoad1	; load special stage pallet
000060A2 4EB9 0000 0000             		jsr	SS_Load
000060A8 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000060B0 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000060B8 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000060BE 6100 0000                  		bsr.w	PalCycle_SS
000060C2 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000060C6 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000060CC 303C 0095                  		move.w	#$95,d0
000060D0 6100 B1F0                  		bsr.w	PlaySound	; play special stage BG	music
000060D4 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000060DA 43F9 0000 5A8A             		lea	(Demo_Index).l,a1
000060E0 7006                       		moveq	#6,d0
000060E2 E548                       		lsl.w	#2,d0
000060E4 2271 0000                  		movea.l	(a1,d0.w),a1
000060E8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000060EE 5338 F792                  		subq.b	#1,($FFFFF792).w
000060F2 4278 FE20                  		clr.w	($FFFFFE20).w
000060F6 4238 FE1B                  		clr.b	($FFFFFE1B).w
000060FA 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00006100 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006106 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000610A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000610C 0838 0006 F604             		btst	#iA,(Joypad|Held); is A	button pressed?
00006112 6700                       		beq.s	SS_NoDebug	; if not, branch
00006114 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000611A                            
0000611A                            SS_NoDebug:
0000611A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000611E 0000 0040                  		ori.b	#$40,d0
00006122 33C0 00C0 0004             		move.w	d0,($C00004).l
00006128 6100 BD66                  		bsr.w	Pal_MakeWhite
0000612C                            
0000612C                            ; ---------------------------------------------------------------------------
0000612C                            ; Main Special Stage loop
0000612C                            ; ---------------------------------------------------------------------------
0000612C                            
0000612C                            SS_MainLoop:
0000612C 6100 B1A0                  		bsr.w	PauseGame
00006130 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00006136 6100 C844                  		bsr.w	DelayProgram
0000613A 6100 F89C                  		bsr.w	MoveSonicInDemo
0000613E 31F8 F604 F602             		move.w	(Joypad),(SonicControl)
00006144 4EB9 0000 0000             		jsr	ObjectsLoad
0000614A 4EB9 0000 0000             		jsr	BuildSprites
00006150 4EB9 0000 0000             		jsr	SS_ShowLayout
00006156 6100 0000                  		bsr.w	SS_BGAnimate
0000615A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000615E 6700                       		beq.s	SS_ChkEnd	; if not, branch
00006160 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00006164 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00006168                            
00006168                            SS_ChkEnd:
00006168 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000616E 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00006172                            
00006172 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006176 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000617A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006180 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00006186 6500                       		bcs.s	SS_End		; if not, branch
00006188 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000618C                            
0000618C                            SS_End:
0000618C 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00006192 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006198 4278 F794                  		clr.w	($FFFFF794).w
0000619C                            
0000619C                            SS_EndLoop:
0000619C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000061A2 6100 C7D8                  		bsr.w	DelayProgram
000061A6 6100 F830                  		bsr.w	MoveSonicInDemo
000061AA 31F8 F604 F602             		move.w	(Joypad),(SonicControl)
000061B0 4EB9 0000 0000             		jsr	ObjectsLoad
000061B6 4EB9 0000 0000             		jsr	BuildSprites
000061BC 4EB9 0000 0000             		jsr	SS_ShowLayout
000061C2 6100 0000                  		bsr.w	SS_BGAnimate
000061C6 5378 F794                  		subq.w	#1,($FFFFF794).w
000061CA 6A00                       		bpl.s	loc_47D4
000061CC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000061D2 6100 BD88                  		bsr.w	Pal_ToWhite
000061D6                            
000061D6                            loc_47D4:
000061D6 4A78 F614                  		tst.w	($FFFFF614).w
000061DA 66C0                       		bne.s	SS_EndLoop
000061DC                            
000061DC 46FC 2700                  		move	#$2700,sr
000061E0 4DF9 00C0 0004             		lea	($C00004).l,a6
000061E6 3CBC 8230                  		move.w	#$8230,(a6)
000061EA 3CBC 8407                  		move.w	#$8407,(a6)
000061EE 3CBC 9001                  		move.w	#$9001,(a6)
000061F2 6100 AFFC                  		bsr.w	ClearScreen
000061F6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00006200 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00006206 6100 B1EE                  		bsr.w	NemDec
0000620A 4EB9 0000 0000             		jsr	Hud_Base
00006210 4278 C800                  		clr.w	($FFFFC800).w
00006214 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000621C 46FC 2300                  		move	#$2300,sr
00006220 7011                       		moveq	#$11,d0
00006222 6100 BEC8                  		bsr.w	PalLoad2	; load results screen pallet
00006226 7000                       		moveq	#0,d0
00006228 6100 B33E                  		bsr.w	LoadPLC2
0000622C 701B                       		moveq	#$1B,d0
0000622E 6100 B306                  		bsr.w	LoadPLC		; load results screen patterns
00006232 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00006238 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000623E 3038 FE20                  		move.w	($FFFFFE20).w,d0
00006242 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00006246 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000624A 303C 0099                  		move.w	#$99,d0
0000624E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play end-of-level music
00006254 43F8 D000                  		lea	($FFFFD000).w,a1
00006258 7000                       		moveq	#0,d0
0000625A 323C 07FF                  		move.w	#$7FF,d1
0000625E                            
0000625E                            SS_EndClrObjRam:
0000625E 22C0                       		move.l	d0,(a1)+
00006260 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00006264                            
00006264 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000626A                            
0000626A                            SS_NormalExit:
0000626A 6100 B062                  		bsr.w	PauseGame
0000626E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00006274 6100 C706                  		bsr.w	DelayProgram
00006278 4EB9 0000 0000             		jsr	ObjectsLoad
0000627E 4EB9 0000 0000             		jsr	BuildSprites
00006284 6100 B31C                  		bsr.w	RunPLC_RAM
00006288 4A78 FE02                  		tst.w	($FFFFFE02).w
0000628C 67DC                       		beq.s	SS_NormalExit
0000628E 4AB8 F680                  		tst.l	($FFFFF680).w
00006292 66D6                       		bne.s	SS_NormalExit
00006294 303C 00CA                  		move.w	#$CA,d0
00006298 6100 B02E                  		bsr.w	PlaySound_Special ; play special stage exit sound
0000629C 6100 BC9E                  		bsr.w	Pal_MakeFlash
000062A0 4E75                       		rts	
000062A2                            ; ===========================================================================
000062A2                            
000062A2                            SS_ToSegaScreen:
000062A2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000062A8 4E75                       		rts
000062AA                            
000062AA                            ; ---------------------------------------------------------------------------
000062AA                            ; Special stage	background loading subroutine
000062AA                            ; ---------------------------------------------------------------------------
000062AA                            
000062AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062AA                            
000062AA                            
000062AA                            SS_BGLoad:				; XREF: SpecialStage
000062AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000062B0 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000062B6 303C 4051                  		move.w	#$4051,d0
000062BA 6100 B422                  		bsr.w	EniDec
000062BE 263C 5000 0001             		move.l	#$50000001,d3
000062C4 45F9 00FF 0080             		lea	($FF0080).l,a2
000062CA 7E06                       		moveq	#6,d7
000062CC                            
000062CC                            loc_48BE:
000062CC 2003                       		move.l	d3,d0
000062CE 7C03                       		moveq	#3,d6
000062D0 7800                       		moveq	#0,d4
000062D2 0C47 0003                  		cmpi.w	#3,d7
000062D6 6400                       		bcc.s	loc_48CC
000062D8 7801                       		moveq	#1,d4
000062DA                            
000062DA                            loc_48CC:
000062DA 7A07                       		moveq	#7,d5
000062DC                            
000062DC                            loc_48CE:
000062DC 224A                       		movea.l	a2,a1
000062DE 0A04 0001                  		eori.b	#1,d4
000062E2 6600                       		bne.s	loc_48E2
000062E4 0C47 0006                  		cmpi.w	#6,d7
000062E8 6600                       		bne.s	loc_48F2
000062EA 43F9 00FF 0000             		lea	($FF0000).l,a1
000062F0                            
000062F0                            loc_48E2:
000062F0 48E7 F800                  		movem.l	d0-d4,-(sp)
000062F4 7207                       		moveq	#7,d1
000062F6 7407                       		moveq	#7,d2
000062F8 6100 B04C                  		bsr.w	ShowVDPGraphics
000062FC 4CDF 001F                  		movem.l	(sp)+,d0-d4
00006300                            
00006300                            loc_48F2:
00006300 0680 0010 0000             		addi.l	#$100000,d0
00006306 51CD FFD4                  		dbf	d5,loc_48CE
0000630A 0680 0380 0000             		addi.l	#$3800000,d0
00006310 0A04 0001                  		eori.b	#1,d4
00006314 51CE FFC4                  		dbf	d6,loc_48CC
00006318 0683 1000 0000             		addi.l	#$10000000,d3
0000631E 6A00                       		bpl.s	loc_491C
00006320 4843                       		swap	d3
00006322 0683 0000 C000             		addi.l	#$C000,d3
00006328 4843                       		swap	d3
0000632A                            
0000632A                            loc_491C:
0000632A D4FC 0080                  		adda.w	#$80,a2
0000632E 51CF FF9C                  		dbf	d7,loc_48BE
00006332 43F9 00FF 0000             		lea	($FF0000).l,a1
00006338 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000633E 303C 4000                  		move.w	#$4000,d0
00006342 6100 B39A                  		bsr.w	EniDec
00006346 43F9 00FF 0000             		lea	($FF0000).l,a1
0000634C 203C 4000 0003             		move.l	#$40000003,d0
00006352 723F                       		moveq	#$3F,d1
00006354 741F                       		moveq	#$1F,d2
00006356 6100 AFEE                  		bsr.w	ShowVDPGraphics
0000635A 43F9 00FF 0000             		lea	($FF0000).l,a1
00006360 203C 5000 0003             		move.l	#$50000003,d0
00006366 723F                       		moveq	#$3F,d1
00006368 743F                       		moveq	#$3F,d2
0000636A 6100 AFDA                  		bsr.w	ShowVDPGraphics
0000636E 4E75                       		rts	
00006370                            ; End of function SS_BGLoad
00006370                            
00006370                            ; ---------------------------------------------------------------------------
00006370                            ; Pallet cycling routine - special stage
00006370                            ; ---------------------------------------------------------------------------
00006370                            
00006370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006370                            
00006370                            
00006370                            PalCycle_SS:				; XREF: VBlank_Sub0A; SpecialStage
00006370 4A78 F63A                  		tst.w	($FFFFF63A).w
00006374 6600                       		bne.s	locret_49E6
00006376 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000637A 6A00                       		bpl.s	locret_49E6
0000637C 4DF9 00C0 0004             		lea	($C00004).l,a6
00006382 3038 F79A                  		move.w	($FFFFF79A).w,d0
00006386 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000638A 0240 001F                  		andi.w	#$1F,d0
0000638E E548                       		lsl.w	#2,d0
00006390 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00006396 D0C0                       		adda.w	d0,a0
00006398 1018                       		move.b	(a0)+,d0
0000639A 6A00                       		bpl.s	loc_4992
0000639C 303C 01FF                  		move.w	#$1FF,d0
000063A0                            
000063A0                            loc_4992:
000063A0 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000063A4 7000                       		moveq	#0,d0
000063A6 1018                       		move.b	(a0)+,d0
000063A8 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000063AC 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000063B2 43F1 0000                  		lea	(a1,d0.w),a1
000063B6 303C 8200                  		move.w	#-$7E00,d0
000063BA 1019                       		move.b	(a1)+,d0
000063BC 3C80                       		move.w	d0,(a6)
000063BE 11D1 F616                  		move.b	(a1),($FFFFF616).w
000063C2 303C 8400                  		move.w	#-$7C00,d0
000063C6 1018                       		move.b	(a0)+,d0
000063C8 3C80                       		move.w	d0,(a6)
000063CA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000063D4 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000063DC 7000                       		moveq	#0,d0
000063DE 1018                       		move.b	(a0)+,d0
000063E0 6B00                       		bmi.s	loc_49E8
000063E2 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000063E8 D2C0                       		adda.w	d0,a1
000063EA 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000063EE 24D9                       		move.l	(a1)+,(a2)+
000063F0 24D9                       		move.l	(a1)+,(a2)+
000063F2 24D9                       		move.l	(a1)+,(a2)+
000063F4                            
000063F4                            locret_49E6:
000063F4 4E75                       		rts	
000063F6                            ; ===========================================================================
000063F6                            
000063F6                            loc_49E8:				; XREF: PalCycle_SS
000063F6 3238 F79E                  		move.w	($FFFFF79E).w,d1
000063FA 0C40 008A                  		cmpi.w	#$8A,d0
000063FE 6500                       		bcs.s	loc_49F4
00006400 5241                       		addq.w	#1,d1
00006402                            
00006402                            loc_49F4:
00006402 C2FC 002A                  		mulu.w	#$2A,d1
00006406 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000640C D2C1                       		adda.w	d1,a1
0000640E 0240 007F                  		andi.w	#$7F,d0
00006412 0880 0000                  		bclr	#0,d0
00006416 6700                       		beq.s	loc_4A18
00006418 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000641C 24D1                       		move.l	(a1),(a2)+
0000641E 24E9 0004                  		move.l	4(a1),(a2)+
00006422 24E9 0008                  		move.l	8(a1),(a2)+
00006426                            
00006426                            loc_4A18:
00006426 D2FC 000C                  		adda.w	#$C,a1
0000642A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000642E 0C40 000A                  		cmpi.w	#$A,d0
00006432 6500                       		bcs.s	loc_4A2E
00006434 0440 000A                  		subi.w	#$A,d0
00006438 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000643C                            
0000643C                            loc_4A2E:
0000643C 3200                       		move.w	d0,d1
0000643E D040                       		add.w	d0,d0
00006440 D041                       		add.w	d1,d0
00006442 D2C0                       		adda.w	d0,a1
00006444 24D9                       		move.l	(a1)+,(a2)+
00006446 34D9                       		move.w	(a1)+,(a2)+
00006448 4E75                       		rts	
0000644A                            ; End of function PalCycle_SS
0000644A                            
0000644A                            ; ===========================================================================
0000644A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000645A                            					; XREF: PalCycle_SS
0000645A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000646A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000647A FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000648A 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000649A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000064AA 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000064BA FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000064CA                            		even
000064CA 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
000064D8                            					; XREF: PalCycle_SS
000064D8                            		even
000064D8                            
000064D8                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00006520                            		even
00006520                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000065F2                            		even
000065F2                            
000065F2                            ; ---------------------------------------------------------------------------
000065F2                            ; Subroutine to	make the special stage background animated
000065F2                            ; ---------------------------------------------------------------------------
000065F2                            
000065F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065F2                            
000065F2                            
000065F2                            SS_BGAnimate:				; XREF: SpecialStage
000065F2 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000065F6 6600                       		bne.s	loc_4BF6
000065F8 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000065FE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006604                            
00006604                            loc_4BF6:
00006604 0C40 0008                  		cmpi.w	#8,d0
00006608 6400                       		bcc.s	loc_4C4E
0000660A 0C40 0006                  		cmpi.w	#6,d0
0000660E 6600                       		bne.s	loc_4C10
00006610 5278 F718                  		addq.w	#1,($FFFFF718).w
00006614 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00006618 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000661E                            
0000661E                            loc_4C10:
0000661E 7000                       		moveq	#0,d0
00006620 3038 F708                  		move.w	($FFFFF708).w,d0
00006624 4440                       		neg.w	d0
00006626 4840                       		swap	d0
00006628 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000662E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00006632 7609                       		moveq	#9,d3
00006634                            
00006634                            loc_4C26:
00006634 302B 0002                  		move.w	2(a3),d0
00006638 6100 C374                  		bsr.w	CalcSine
0000663C 7400                       		moveq	#0,d2
0000663E 1419                       		move.b	(a1)+,d2
00006640 C1C2                       		muls.w	d2,d0
00006642 E080                       		asr.l	#8,d0
00006644 36C0                       		move.w	d0,(a3)+
00006646 1419                       		move.b	(a1)+,d2
00006648 4882                       		ext.w	d2
0000664A D55B                       		add.w	d2,(a3)+
0000664C 51CB FFE6                  		dbf	d3,loc_4C26
00006650 47F8 AA00                  		lea	($FFFFAA00).w,a3
00006654 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000665A 6000                       		bra.s	loc_4C7E
0000665C                            ; ===========================================================================
0000665C                            
0000665C                            loc_4C4E:				; XREF: SS_BGAnimate
0000665C 0C40 000C                  		cmpi.w	#$C,d0
00006660 6600                       		bne.s	loc_4C74
00006662 5378 F718                  		subq.w	#1,($FFFFF718).w
00006666 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000666A 243C 0001 8000             		move.l	#$18000,d2
00006670 7206                       		moveq	#6,d1
00006672                            
00006672                            loc_4C64:
00006672 2013                       		move.l	(a3),d0
00006674 9082                       		sub.l	d2,d0
00006676 26C0                       		move.l	d0,(a3)+
00006678 0482 0000 2000             		subi.l	#$2000,d2
0000667E 51C9 FFF2                  		dbf	d1,loc_4C64
00006682                            
00006682                            loc_4C74:
00006682 47F8 AB00                  		lea	($FFFFAB00).w,a3
00006686 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000668C                            
0000668C                            loc_4C7E:
0000668C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006690 3038 F718                  		move.w	($FFFFF718).w,d0
00006694 4440                       		neg.w	d0
00006696 4840                       		swap	d0
00006698 7600                       		moveq	#0,d3
0000669A 161A                       		move.b	(a2)+,d3
0000669C 3438 F70C                  		move.w	($FFFFF70C).w,d2
000066A0 4442                       		neg.w	d2
000066A2 0242 00FF                  		andi.w	#$FF,d2
000066A6 E54A                       		lsl.w	#2,d2
000066A8                            
000066A8                            loc_4C9A:
000066A8 301B                       		move.w	(a3)+,d0
000066AA 544B                       		addq.w	#2,a3
000066AC 7200                       		moveq	#0,d1
000066AE 121A                       		move.b	(a2)+,d1
000066B0 5341                       		subq.w	#1,d1
000066B2                            
000066B2                            loc_4CA4:
000066B2 2380 2000                  		move.l	d0,(a1,d2.w)
000066B6 5842                       		addq.w	#4,d2
000066B8 0242 03FC                  		andi.w	#$3FC,d2
000066BC 51C9 FFF4                  		dbf	d1,loc_4CA4
000066C0 51CB FFE6                  		dbf	d3,loc_4C9A
000066C4 4E75                       		rts	
000066C6                            ; End of function SS_BGAnimate
000066C6                            
000066C6                            ; ===========================================================================
000066C6 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000066D2                            		even
000066D2 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000066DA                            		even
000066DA 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000066EE                            		even
000066EE                            					; XREF: SS_BGAnimate
000066EE                            ; ===========================================================================
000066EE                            
000066EE                            ; ---------------------------------------------------------------------------
000066EE                            ; Continue screen
000066EE                            ; ---------------------------------------------------------------------------
000066EE                            
000066EE                            ContinueScreen:				; XREF: GameModeArray
000066EE 6100 B722                  		bsr.w	Pal_FadeFrom
000066F2 46FC 2700                  		move	#$2700,sr	; disable interrupts
000066F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000066FA 0200 00BF                  		andi.b	#$BF,d0
000066FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00006704 4DF9 00C0 0004             		lea	($C00004).l,a6
0000670A 3CBC 8004                  		move.w	#$8004,(a6)
0000670E 3CBC 8700                  		move.w	#$8700,(a6)
00006712 6100 AADC                  		bsr.w	ClearScreen
00006716 43F8 D000                  		lea	($FFFFD000).w,a1
0000671A 7000                       		moveq	#0,d0
0000671C 323C 07FF                  		move.w	#$7FF,d1
00006720                            
00006720                            Cont_ClrObjRam:
00006720 22C0                       		move.l	d0,(a1)+
00006722 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00006726                            
00006726                            		; load title card patterns
00006730 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0
00006736 6100 ACBE                  		bsr.w	NemDec
0000673A                            
0000673A                            		; load Sonic patterns
00006744 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0
0000674A 6100 ACAA                  		bsr.w	NemDec
0000674E                            		
0000674E                            		; load continue screen patterns
00006758 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 
0000675E 6100 AC96                  		bsr.w	NemDec
00006762                            
00006762 720A                       		moveq	#10,d1
00006764 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000676A 7012                       		moveq	#$12,d0
0000676C 6100 B962                  		bsr.w	PalLoad1	; load continue	screen pallet
00006770 103C 0094                  		move.b	#$94,d0
00006774 6100 AB4C                  		bsr.w	PlaySound	; play continue	music
00006778 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000677E 42B8 F700                  		clr.l	($FFFFF700).w
00006782 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000678A 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00006790 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00006796 11FC 0080 D080             		move.b	#$80,($FFFFD080).w ;
0000679C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000067A2 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000067A8 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000067AE 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000067B4 4EB9 0000 0000             		jsr	ObjectsLoad
000067BA 4EB9 0000 0000             		jsr	BuildSprites
000067C0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000067C4 0000 0040                  		ori.b	#$40,d0
000067C8 33C0 00C0 0004             		move.w	d0,($C00004).l
000067CE 6100 B59C                  		bsr.w	Pal_FadeTo
000067D2                            
000067D2                            ; ---------------------------------------------------------------------------
000067D2                            ; Continue screen main loop
000067D2                            ; ---------------------------------------------------------------------------
000067D2                            
000067D2                            Cont_MainLoop:
000067D2 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000067D8 6100 C1A2                  		bsr.w	DelayProgram
000067DC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067E2 6400                       		bcc.s	loc_4DF2
000067E4 46FC 2700                  		move	#$2700,sr		; disable interrupts
000067E8 3238 F614                  		move.w	($FFFFF614).w,d1
000067EC 82FC 003C                  		divu.w	#$3C,d1
000067F0 0281 0000 000F             		andi.l	#$F,d1
000067F6 4EB9 0000 0000             		jsr	ContScrCounter
000067FC 46FC 2300                  		move	#$2300,sr		; enable interrupts
00006800                            
00006800                            loc_4DF2:
00006800 4EB9 0000 0000             		jsr	ObjectsLoad
00006806 4EB9 0000 0000             		jsr	BuildSprites
0000680C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w	; has Sonic run off screen?
00006812 6400                       		bcc.s	Cont_GotoLevel		; if yes, branch
00006814 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000681A 64B6                       		bcc.s	Cont_MainLoop
0000681C 4A78 F614                  		tst.w	($FFFFF614).w
00006820 6600 FFB0                  		bne.w	Cont_MainLoop
00006824 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; go to Sega screen
0000682A 4E75                       		rts	
0000682C                            ; ===========================================================================
0000682C                            
0000682C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000682C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006832 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00006838 7000                       		moveq	#0,d0
0000683A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000683E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006842 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006846 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000684A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000684E 4E75                       		rts	
00006850                            ; ===========================================================================
00006850                            
00006850                            ; ---------------------------------------------------------------------------
00006850                            ; Object 80 - Continue screen elements
00006850                            ; ---------------------------------------------------------------------------
00006850                            
00006850                            Obj80:					; XREF: Obj_Index
00006850 7000                       		moveq	#0,d0
00006852 1028 0024                  		move.b	$24(a0),d0
00006856 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000685A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000685E                            ; ===========================================================================
0000685E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00006860 0000                       		dc.w Obj80_Display-Obj80_Index
00006862 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00006864 0000                       		dc.w Obj80_ChkType-Obj80_Index
00006866                            ; ===========================================================================
00006866                            
00006866                            Obj80_Main:				; XREF: Obj80_Index
00006866 5428 0024                  		addq.b	#2,$24(a0)
0000686A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006872 317C 8500 0002             		move.w	#$8500,2(a0)
00006878 117C 0000 0001             		move.b	#0,1(a0)
0000687E 117C 003C 0019             		move.b	#$3C,$19(a0)
00006884 317C 0120 0008             		move.w	#$120,8(a0)
0000688A 317C 00C0 000A             		move.w	#$C0,$A(a0)
00006890 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00006896                            
00006896                            Obj80_Display:				; XREF: Obj80_Index
00006896 4EF9 0000 0000             		jmp	DisplaySprite
0000689C                            ; ===========================================================================
0000689C                            Obj80_MiniSonicPos:
0000689C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000068AE 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000068BA                            ; ===========================================================================
000068BA                            
000068BA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000068BA 2248                       		movea.l	a0,a1
000068BC 45F9 0000 689C             		lea	(Obj80_MiniSonicPos).l,a2
000068C2 7200                       		moveq	#0,d1
000068C4 1238 FE18                  		move.b	($FFFFFE18).w,d1
000068C8 5501                       		subq.b	#2,d1
000068CA 6400                       		bcc.s	loc_4EC4
000068CC 4EF9 0000 0000             		jmp	DeleteObject
000068D2                            ; ===========================================================================
000068D2                            
000068D2                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000068D2 7601                       		moveq	#1,d3
000068D4 0C01 000E                  		cmpi.b	#$E,d1
000068D8 6500                       		bcs.s	loc_4ED0
000068DA 7600                       		moveq	#0,d3
000068DC 720E                       		moveq	#$E,d1
000068DE                            
000068DE                            loc_4ED0:
000068DE 1401                       		move.b	d1,d2
000068E0 0202 0001                  		andi.b	#1,d2
000068E4                            
000068E4                            Obj80_MiniSonLoop:
000068E4 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000068E8 335A 0008                  		move.w	(a2)+,8(a1)
000068EC 4A02                       		tst.b	d2
000068EE 6700                       		beq.s	loc_4EEA
000068F0 0469 000A 0008             		subi.w	#$A,8(a1)
000068F6                            
000068F6                            loc_4EEA:
000068F6 337C 00D0 000A             		move.w	#$D0,$A(a1)
000068FC 137C 0006 001A             		move.b	#6,$1A(a1)
00006902 137C 0006 0024             		move.b	#6,$24(a1)
00006908 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00006910 337C 8551 0002             		move.w	#$8551,2(a1)
00006916 137C 0000 0001             		move.b	#0,1(a1)
0000691C 43E9 0040                  		lea	$40(a1),a1
00006920 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00006924 43E9 FFC0                  		lea	-$40(a1),a1
00006928 1343 0028                  		move.b	d3,$28(a1)
0000692C                            
0000692C                            Obj80_ChkType:				; XREF: Obj80_Index
0000692C 4A28 0028                  		tst.b	$28(a0)
00006930 6700                       		beq.s	loc_4F40
00006932 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00006938 6500                       		bcs.s	loc_4F40
0000693A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000693E 0200 0001                  		andi.b	#1,d0
00006942 6600                       		bne.s	loc_4F40
00006944 4A78 D010                  		tst.w	($FFFFD010).w
00006948 6600                       		bne.s	Obj80_Delete
0000694A 4E75                       		rts	
0000694C                            ; ===========================================================================
0000694C                            
0000694C                            loc_4F40:				; XREF: Obj80_ChkType
0000694C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006950 0200 000F                  		andi.b	#$F,d0
00006954 6600                       		bne.s	Obj80_Display2
00006956 0868 0000 001A             		bchg	#0,$1A(a0)
0000695C                            
0000695C                            Obj80_Display2:
0000695C 4EF9 0000 0000             		jmp	DisplaySprite
00006962                            ; ===========================================================================
00006962                            
00006962                            Obj80_Delete:				; XREF: Obj80_ChkType
00006962 4EF9 0000 0000             		jmp	DeleteObject
00006968                            ; ===========================================================================
00006968                            
00006968                            ; ---------------------------------------------------------------------------
00006968                            ; Object 81 - Sonic on the continue screen
00006968                            ; ---------------------------------------------------------------------------
00006968                            
00006968                            Obj81:					; XREF: Obj_Index
00006968 7000                       		moveq	#0,d0
0000696A 1028 0024                  		move.b	$24(a0),d0
0000696E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00006972 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00006976 4EF9 0000 0000             		jmp	DisplaySprite
0000697C                            ; ===========================================================================
0000697C 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000697E 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00006980 0000                       		dc.w Obj81_Animate-Obj81_Index
00006982 0000                       		dc.w Obj81_Run-Obj81_Index
00006984                            ; ===========================================================================
00006984                            
00006984                            Obj81_Main:				; XREF: Obj81_Index
00006984 5428 0024                  		addq.b	#2,$24(a0)
00006988 317C 00A0 0008             		move.w	#$A0,8(a0)
0000698E 317C 00C0 000C             		move.w	#$C0,$C(a0)
00006994 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000699C 317C 0780 0002             		move.w	#$780,2(a0)
000069A2 117C 0004 0001             		move.b	#4,1(a0)
000069A8 117C 0002 0018             		move.b	#2,$18(a0)
000069AE 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000069B4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000069BA                            
000069BA                            Obj81_ChkLand:				; XREF: Obj81_Index
000069BA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000069C0 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000069C2 5428 0024                  		addq.b	#2,$24(a0)
000069C6 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000069CA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000069D2 317C 8500 0002             		move.w	#$8500,2(a0)
000069D8 117C 0000 001C             		move.b	#0,$1C(a0)
000069DE 6000                       		bra.s	Obj81_Animate
000069E0                            ; ===========================================================================
000069E0                            
000069E0                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000069E0 4EB9 0000 0000             		jsr	SpeedToPos
000069E6 4EB9 0000 0000             		jsr	Sonic_Animate
000069EC 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000069F2                            ; ===========================================================================
000069F2                            
000069F2                            Obj81_Animate:				; XREF: Obj81_Index
000069F2 4A38 F605                  		tst.b	(Joypad|Press)	; is any button	pressed?
000069F6 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000069F8 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000069FE 4EF9 0000 0000             		jmp	AnimateSprite
00006A04                            ; ===========================================================================
00006A04                            
00006A04                            Obj81_GetUp:				; XREF: Obj81_Animate
00006A04 5428 0024                  		addq.b	#2,$24(a0)
00006A08 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00006A10 317C 0780 0002             		move.w	#$780,2(a0)
00006A16 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00006A1C 4268 0014                  		clr.w	$14(a0)
00006A20 5168 000C                  		subq.w	#8,$C(a0)
00006A24 103C 00E0                  		move.b	#$E0,d0
00006A28 6100 A89E                  		bsr.w	PlaySound_Special ; fade out music
00006A2C                            
00006A2C                            Obj81_Run:				; XREF: Obj81_Index
00006A2C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00006A32 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00006A34 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00006A3A 6000                       		bra.s	Obj81_ShowRun
00006A3C                            ; ===========================================================================
00006A3C                            
00006A3C                            Obj81_AddSpeed:				; XREF: Obj81_Run
00006A3C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00006A42                            
00006A42                            Obj81_ShowRun:				; XREF: Obj81_Run
00006A42 4EB9 0000 0000             		jsr	SpeedToPos
00006A48 4EB9 0000 0000             		jsr	Sonic_Animate
00006A4E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00006A54                            ; ===========================================================================
00006A54                            Ani_obj81:
00006A54                            	include "_anim\obj81.asm"
00006A54                            ; ---------------------------------------------------------------------------
00006A54                            ; Animation script - Sonic on the continue screen
00006A54                            ; ---------------------------------------------------------------------------
00006A54 0000                       		dc.w byte_504A-Ani_obj81
00006A56 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00006A62 00                         		even
00006A62 00                         		even
00006A62                            
00006A62                            ; ---------------------------------------------------------------------------
00006A62                            ; Sprite mappings - Continue screen
00006A62                            ; ---------------------------------------------------------------------------
00006A62                            Map_obj80:
00006A62                            	include "_maps\obj80.asm"
00006A62                            ; ---------------------------------------------------------------------------
00006A62                            ; Sprite mappings - Continue screen
00006A62                            ; ---------------------------------------------------------------------------
00006A62 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00006A66 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00006A6A 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00006A6E 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00006A72 0B                         byte_5066:	dc.b $B
00006A73 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006A78 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006A7D F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006A82 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006A87 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006A8C F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00006A91 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006A96 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006A9B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00006AA0 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00006AA5 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006AAA 03                         byte_509E:	dc.b 3
00006AAB 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00006AB0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006AB5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006ABA 03                         byte_50AE:	dc.b 3
00006ABB 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00006AC0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006AC5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006ACA 03                         byte_50BE:	dc.b 3
00006ACB 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00006AD0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006AD5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006ADA 02                         byte_50CE:	dc.b 2
00006ADB 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00006AE0 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00006AE5 01                         byte_50D9:	dc.b 1
00006AE6 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00006AEB 01                         byte_50DF:	dc.b 1
00006AEC 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00006AF2 00                         		even
00006AF2 00                         		even
00006AF2                            
00006AF2                            ; ===========================================================================
00006AF2                            ; ---------------------------------------------------------------------------
00006AF2                            ; Ending sequence in Green Hill	Zone
00006AF2                            ; ---------------------------------------------------------------------------
00006AF2                            
00006AF2                            EndingSequence:				; XREF: GameModeArray
00006AF2 103C 00E4                  		move.b	#$E4,d0
00006AF6 6100 A7D0                  		bsr.w	PlaySound_Special ; stop music
00006AFA 6100 B316                  		bsr.w	Pal_FadeFrom
00006AFE 43F8 D000                  		lea	($FFFFD000).w,a1
00006B02 7000                       		moveq	#0,d0
00006B04 323C 07FF                  		move.w	#$7FF,d1
00006B08                            
00006B08                            End_ClrObjRam:
00006B08 22C0                       		move.l	d0,(a1)+
00006B0A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006B0E                            
00006B0E 43F8 F628                  		lea	($FFFFF628).w,a1
00006B12 7000                       		moveq	#0,d0
00006B14 323C 0015                  		move.w	#$15,d1
00006B18                            
00006B18                            End_ClrRam:
00006B18 22C0                       		move.l	d0,(a1)+
00006B1A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00006B1E                            
00006B1E 43F8 F700                  		lea	($FFFFF700).w,a1
00006B22 7000                       		moveq	#0,d0
00006B24 323C 003F                  		move.w	#$3F,d1
00006B28                            
00006B28                            End_ClrRam2:
00006B28 22C0                       		move.l	d0,(a1)+
00006B2A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006B2E                            
00006B2E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006B32 7000                       		moveq	#0,d0
00006B34 323C 0047                  		move.w	#$47,d1
00006B38                            
00006B38                            End_ClrRam3:
00006B38 22C0                       		move.l	d0,(a1)+
00006B3A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006B3E                            
00006B3E 46FC 2700                  		move	#$2700,sr
00006B42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006B46 0200 00BF                  		andi.b	#$BF,d0
00006B4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00006B50 6100 A69E                  		bsr.w	ClearScreen
00006B54 4DF9 00C0 0004             		lea	($C00004).l,a6
00006B5A 3CBC 8B03                  		move.w	#$8B03,(a6)
00006B5E 3CBC 8230                  		move.w	#$8230,(a6)
00006B62 3CBC 8407                  		move.w	#$8407,(a6)
00006B66 3CBC 857C                  		move.w	#$857C,(a6)
00006B6A 3CBC 9001                  		move.w	#$9001,(a6)
00006B6E 3CBC 8004                  		move.w	#$8004,(a6)
00006B72 3CBC 8720                  		move.w	#$8720,(a6)
00006B76 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00006B7C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00006B80 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00006B86 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00006B8C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006B92 6700                       		beq.s	End_LoadData	; if yes, branch
00006B94 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00006B9A                            
00006B9A                            End_LoadData:
00006B9A 701C                       		moveq	#$1C,d0
00006B9C 6100 AB0E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00006BA0 4EB9 0000 0000             		jsr	Hud_Base
00006BA6 6100 0000                  		bsr.w	LevelSizeLoad
00006BAA 6100 0000                  		bsr.w	DeformBgLayer
00006BAE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BB4 6100 0000                  		bsr.w	MainLoadBlockLoad
00006BB8 6100 0000                  		bsr.w	LoadTilesFromStart
00006BBC 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w	; load collision index
00006BC4 46FC 2300                  		move	#$2300,sr		; enable interrupts
00006BC8 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0	; load extra flower patterns
00006BCE 43F8 9400                  		lea	($FFFF9400).w,a1	; RAM address to buffer the patterns
00006BD2 6100 AC88                  		bsr.w	KosDec
00006BD6 7003                       		moveq	#3,d0
00006BD8 6100 B4F6                  		bsr.w	PalLoad1		; load Sonic's pallet
00006BDC 303C 0097                  		move.w	#$97,d0
00006BE0 6100 A6E0                  		bsr.w	PlaySound		; play ending sequence music
00006BE4 0838 0000 F604             		btst	#iUp,(Joypad|Held)	; is button A pressed?
00006BEA 6700                       		beq.s	End_LoadSonic		; if not, branch
00006BEC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w	; enable debug mode
00006BF2                            
00006BF2                            End_LoadSonic:
00006BF2 11FC 0001 D000             		move.b	#1,($FFFFD000).w	; load	Sonic object
00006BF8 08F8 0000 D022             		bset	#0,($FFFFD022).w	; make	Sonic face left
00006BFE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w	; lock	controls
00006C04 31FC 0400 F602             		move.w	#(Left)<<8,(SonicControl) ; move Sonic to the left
00006C0A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w	; set Sonic's speed
00006C10 11FC 0021 D040             		move.b	#$21,($FFFFD040).w	; load HUD object
00006C16 4EB9 0000 0000             		jsr	ObjPosLoad
00006C1C 4EB9 0000 0000             		jsr	ObjectsLoad
00006C22 4EB9 0000 0000             		jsr	BuildSprites
00006C28 7000                       		moveq	#0,d0
00006C2A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00006C2E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00006C32 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00006C36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00006C3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00006C3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00006C42 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006C46 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00006C4A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00006C4E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00006C52 6100 EECE                  		bsr.w	OscillateNumInit
00006C56 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00006C5C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00006C62 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00006C68 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006C6E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C74 6100 BD06                  		bsr.w	DelayProgram
00006C78 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006C7C 0000 0040                  		ori.b	#$40,d0
00006C80 33C0 00C0 0004             		move.w	d0,($C00004).l
00006C86 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006C8C 6100 B0DE                  		bsr.w	Pal_FadeTo
00006C90                            
00006C90                            ; ---------------------------------------------------------------------------
00006C90                            ; Main ending sequence loop
00006C90                            ; ---------------------------------------------------------------------------
00006C90                            
00006C90                            End_MainLoop:
00006C90 6100 A63C                  		bsr.w	PauseGame
00006C94 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C9A 6100 BCE0                  		bsr.w	DelayProgram
00006C9E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006CA2 6100 0000                  		bsr.w	End_MoveSonic
00006CA6 4EB9 0000 0000             		jsr	ObjectsLoad
00006CAC 6100 0000                  		bsr.w	DeformBgLayer
00006CB0 4EB9 0000 0000             		jsr	BuildSprites
00006CB6 4EB9 0000 0000             		jsr	ObjPosLoad
00006CBC 6100 AC3E                  		bsr.w	PalCycle_Load
00006CC0 6100 EEB6                  		bsr.w	OscillateNumDo
00006CC4 6100 EF42                  		bsr.w	ChangeRingFrame
00006CC8 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w	; is scene number $18 (ending)?
00006CCE 6700                       		beq.s	loc_52DA		; if yes, branch
00006CD0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w	; set scene to $1C (credits)
00006CD6 103C 009D                  		move.b	#$9D,d0
00006CDA 6100 A5EC                  		bsr.w	PlaySound_Special	; play credits music
00006CDE 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w	; set credits index number to 0
00006CE4 4E75                       		rts
00006CE6                            ; ===========================================================================
00006CE6                            
00006CE6                            loc_52DA:
00006CE6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00006CEA 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00006CEE                            
00006CEE 4278 FE02                  		clr.w	($FFFFFE02).w
00006CF2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006CF8 4278 F794                  		clr.w	($FFFFF794).w
00006CFC                            
00006CFC                            End_AllEmlds:				; XREF: loc_5334
00006CFC 6100 A5D0                  		bsr.w	PauseGame
00006D00 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006D06 6100 BC74                  		bsr.w	DelayProgram
00006D0A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006D0E 6100 0000                  		bsr.w	End_MoveSonic
00006D12 4EB9 0000 0000             		jsr	ObjectsLoad
00006D18 6100 0000                  		bsr.w	DeformBgLayer
00006D1C 4EB9 0000 0000             		jsr	BuildSprites
00006D22 4EB9 0000 0000             		jsr	ObjPosLoad
00006D28 6100 EE4E                  		bsr.w	OscillateNumDo
00006D2C 6100 EEDA                  		bsr.w	ChangeRingFrame
00006D30 5378 F794                  		subq.w	#1,($FFFFF794).w
00006D34 6A00                       		bpl.s	loc_5334
00006D36 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006D3C 6100 B21E                  		bsr.w	Pal_ToWhite
00006D40                            
00006D40                            loc_5334:
00006D40 4A78 FE02                  		tst.w	($FFFFFE02).w
00006D44 6700 FFB6                  		beq.w	End_AllEmlds
00006D48 4278 FE02                  		clr.w	($FFFFFE02).w
00006D4C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006D52 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D58 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D5E 47F8 F700                  		lea	($FFFFF700).w,a3
00006D62 49F8 A400                  		lea	($FFFFA400).w,a4
00006D66 343C 4000                  		move.w	#$4000,d2
00006D6A 6100 0000                  		bsr.w	LoadTilesFromStart2
00006D6E 7013                       		moveq	#$13,d0
00006D70 6100 B35E                  		bsr.w	PalLoad1	; load ending pallet
00006D74 6100 B11A                  		bsr.w	Pal_MakeWhite
00006D78 6000 FF16                  		bra.w	End_MainLoop
00006D7C                            
00006D7C                            ; ---------------------------------------------------------------------------
00006D7C                            ; Subroutine controlling Sonic on the ending sequence
00006D7C                            ; ---------------------------------------------------------------------------
00006D7C                            
00006D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D7C                            
00006D7C                            
00006D7C                            End_MoveSonic:				; XREF: End_MainLoop
00006D7C 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00006D80 6600                       		bne.s	End_MoveSonic2
00006D82 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w	; has Sonic passed $90 on y-axis?
00006D88 6400                       		bcc.s	End_MoveSonExit		; if not, branch
00006D8A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D8E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w		; lock player's controls
00006D94 31FC 0800 F602             		move.w	#(Right)<<8,(SonicControl)	; move Sonic to the right
00006D9A 4E75                       		rts
00006D9C                            ; ===========================================================================
00006D9C                            
00006D9C                            End_MoveSonic2:				; XREF: End_MoveSonic
00006D9C 5500                       		subq.b	#2,d0
00006D9E 6600                       		bne.s	End_MoveSonic3
00006DA0 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w	; has Sonic passed $A0 on y-axis?
00006DA6 6500                       		bcs.s	End_MoveSonExit		; if not, branch
00006DA8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006DAC 7000                       		moveq	#0,d0
00006DAE 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006DB2 31C0 F602                  		move.w	d0,(SonicControl)	; stop Sonic moving
00006DB6 31C0 D014                  		move.w	d0,($FFFFD014).w
00006DBA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006DC0 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006DC6 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w	; use "standing" animation
00006DCC 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006DD2 4E75                       		rts	
00006DD4                            ; ===========================================================================
00006DD4                            
00006DD4                            End_MoveSonic3:				; XREF: End_MoveSonic
00006DD4 5500                       		subq.b	#2,d0
00006DD6 6600                       		bne.s	End_MoveSonExit
00006DD8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006DDC 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006DE2 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006DE8 4278 D024                  		clr.w	($FFFFD024).w
00006DEC                            
00006DEC                            End_MoveSonExit:
00006DEC 4E75                       		rts	
00006DEE                            ; End of function End_MoveSonic
00006DEE                            
00006DEE                            ; ===========================================================================
00006DEE                            ; ---------------------------------------------------------------------------
00006DEE                            ; Object 87 - Sonic on ending sequence
00006DEE                            ; ---------------------------------------------------------------------------
00006DEE                            
00006DEE                            Obj87:					; XREF: Obj_Index
00006DEE 7000                       		moveq	#0,d0
00006DF0 1028 0025                  		move.b	$25(a0),d0
00006DF4 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006DF8 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00006DFC 4EF9 0000 0000             		jmp	DisplaySprite
00006E02                            ; ===========================================================================
00006E02 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006E06 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00006E0A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00006E0E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006E12 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006E16                            ; ===========================================================================
00006E16                            
00006E16                            Obj87_Main:				; XREF: Obj87_Index
00006E16 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006E1C 6700                       		beq.s	Obj87_Main2	; if yes, branch
00006E1E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006E24 317C 00D8 0030             		move.w	#$D8,$30(a0)
00006E2A 4E75                       		rts	
00006E2C                            ; ===========================================================================
00006E2C                            
00006E2C                            Obj87_Main2:				; XREF: Obj87_Main
00006E2C 5428 0025                  		addq.b	#2,$25(a0)
00006E30 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006E38 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006E3E 117C 0004 0001             		move.b	#4,1(a0)
00006E44 4228 0022                  		clr.b	$22(a0)
00006E48 117C 0002 0018             		move.b	#2,$18(a0)
00006E4E 117C 0000 001A             		move.b	#0,$1A(a0)
00006E54 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00006E5A                            
00006E5A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00006E5A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006E5E 6600                       		bne.s	Obj87_Wait
00006E60 5428 0025                  		addq.b	#2,$25(a0)
00006E64 317C 0001 001C             		move.w	#1,$1C(a0)
00006E6A 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006E70                            
00006E70                            Obj87_Wait:
00006E70 4E75                       		rts	
00006E72                            ; ===========================================================================
00006E72                            
00006E72                            Obj87_LookUp:				; XREF: Obj87_Index
00006E72 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00006E7A 6600                       		bne.s	locret_5480
00006E7C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00006E82 317C 005A 0030             		move.w	#$5A,$30(a0)
00006E88 5428 0025                  		addq.b	#2,$25(a0)
00006E8C                            
00006E8C                            locret_5480:
00006E8C 4E75                       		rts	
00006E8E                            ; ===========================================================================
00006E8E                            
00006E8E                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00006E8E 5368 0030                  		subq.w	#1,$30(a0)
00006E92 6600                       		bne.s	Obj87_Wait2
00006E94 43F8 D400                  		lea	($FFFFD400).w,a1
00006E98 323C 00FF                  		move.w	#$FF,d1
00006E9C                            
00006E9C                            Obj87_ClrLoop:
00006E9C 4299                       		clr.l	(a1)+
00006E9E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006EA2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00006EA8 5428 0025                  		addq.b	#2,$25(a0)
00006EAC 117C 0001 001C             		move.b	#1,$1C(a0)
00006EB2 317C 003C 0030             		move.w	#$3C,$30(a0)
00006EB8                            
00006EB8                            Obj87_Wait2:
00006EB8 4E75                       		rts	
00006EBA                            ; ===========================================================================
00006EBA                            
00006EBA                            Obj87_MakeLogo:				; XREF: Obj87_Index
00006EBA 5368 0030                  		subq.w	#1,$30(a0)
00006EBE 6600                       		bne.s	Obj87_Wait3
00006EC0 5428 0025                  		addq.b	#2,$25(a0)
00006EC4 317C 00B4 0030             		move.w	#$B4,$30(a0)
00006ECA 117C 0002 001C             		move.b	#2,$1C(a0)
00006ED0 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006ED6                            
00006ED6                            Obj87_Wait3:
00006ED6 4E75                       		rts	
00006ED8                            ; ===========================================================================
00006ED8                            
00006ED8                            Obj87_Animate:				; XREF: Obj87_Index
00006ED8 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00006EDE 4EF9 0000 0000             		jmp	AnimateSprite
00006EE4                            ; ===========================================================================
00006EE4                            
00006EE4                            Obj87_Leap:				; XREF: Obj87_Index
00006EE4 5368 0030                  		subq.w	#1,$30(a0)
00006EE8 6600                       		bne.s	Obj87_Wait4
00006EEA 5428 0025                  		addq.b	#2,$25(a0)
00006EEE 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006EF6 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006EFC 117C 0004 0001             		move.b	#4,1(a0)
00006F02 4228 0022                  		clr.b	$22(a0)
00006F06 117C 0002 0018             		move.b	#2,$18(a0)
00006F0C 117C 0005 001A             		move.b	#5,$1A(a0)
00006F12 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006F18 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006F1E 60B8                       		bra.s	Obj87_Animate
00006F20                            ; ===========================================================================
00006F20                            
00006F20                            Obj87_Wait4:				; XREF: Obj87_Leap
00006F20 4E75                       		rts	
00006F22                            ; ===========================================================================
00006F22                            Ani_obj87:
00006F22                            	include "_anim\obj87.asm"
00006F22                            ; ---------------------------------------------------------------------------
00006F22                            ; Animation script - Sonic on the ending sequence
00006F22                            ; ---------------------------------------------------------------------------
00006F22 0000                       		dc.w byte_551C-Ani_obj87
00006F24 0000                       		dc.w byte_552A-Ani_obj87
00006F26 0000                       		dc.w byte_5534-Ani_obj87
00006F28 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006F36 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006F40 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006F48                            		even
00006F48                            		even
00006F48                            
00006F48                            ; ===========================================================================
00006F48                            ; ---------------------------------------------------------------------------
00006F48                            ; Object 88 - chaos emeralds on	the ending sequence
00006F48                            ; ---------------------------------------------------------------------------
00006F48                            
00006F48                            Obj88:					; XREF: Obj_Index
00006F48 7000                       		moveq	#0,d0
00006F4A 1028 0024                  		move.b	$24(a0),d0
00006F4E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006F52 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006F56 4EF9 0000 0000             		jmp	DisplaySprite
00006F5C                            ; ===========================================================================
00006F5C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006F5E 0000                       		dc.w Obj88_Move-Obj88_Index
00006F60                            ; ===========================================================================
00006F60                            
00006F60                            Obj88_Main:				; XREF: Obj88_Index
00006F60 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006F66 6700                       		beq.s	Obj88_Main2
00006F68 588F                       		addq.l	#4,sp
00006F6A 4E75                       		rts	
00006F6C                            ; ===========================================================================
00006F6C                            
00006F6C                            Obj88_Main2:				; XREF: Obj88_Main
00006F6C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006F72 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00006F78 2248                       		movea.l	a0,a1
00006F7A 7600                       		moveq	#0,d3
00006F7C 7401                       		moveq	#1,d2
00006F7E 7205                       		moveq	#5,d1
00006F80                            
00006F80                            Obj88_MainLoop:
00006F80 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00006F84 5429 0024                  		addq.b	#2,$24(a1)
00006F88 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00006F90 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006F96 137C 0004 0001             		move.b	#4,1(a1)
00006F9C 137C 0001 0018             		move.b	#1,$18(a1)
00006FA2 3368 0008 0038             		move.w	8(a0),$38(a1)
00006FA8 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006FAE 1342 001C                  		move.b	d2,$1C(a1)
00006FB2 1342 001A                  		move.b	d2,$1A(a1)
00006FB6 5202                       		addq.b	#1,d2
00006FB8 1343 0026                  		move.b	d3,$26(a1)
00006FBC 0603 002A                  		addi.b	#$2A,d3
00006FC0 43E9 0040                  		lea	$40(a1),a1
00006FC4 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006FC8                            
00006FC8                            Obj88_Move:				; XREF: Obj88_Index
00006FC8 3028 003E                  		move.w	$3E(a0),d0
00006FCC D168 0026                  		add.w	d0,$26(a0)
00006FD0 1028 0026                  		move.b	$26(a0),d0
00006FD4 4EB9 0000 29AE             		jsr	(CalcSine).l
00006FDA 7800                       		moveq	#0,d4
00006FDC 1828 003C                  		move.b	$3C(a0),d4
00006FE0 C3C4                       		muls.w	d4,d1
00006FE2 E081                       		asr.l	#8,d1
00006FE4 C1C4                       		muls.w	d4,d0
00006FE6 E080                       		asr.l	#8,d0
00006FE8 D268 0038                  		add.w	$38(a0),d1
00006FEC D068 003A                  		add.w	$3A(a0),d0
00006FF0 3141 0008                  		move.w	d1,8(a0)
00006FF4 3140 000C                  		move.w	d0,$C(a0)
00006FF8 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006FFE 6700                       		beq.s	loc_55FA
00007000 0668 0020 003C             		addi.w	#$20,$3C(a0)
00007006                            
00007006                            loc_55FA:
00007006 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000700C 6700                       		beq.s	loc_5608
0000700E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00007014                            
00007014                            loc_5608:
00007014 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000701A 6700                       		beq.s	locret_5614
0000701C 5368 003A                  		subq.w	#1,$3A(a0)
00007020                            
00007020                            locret_5614:
00007020 4E75                       		rts	
00007022                            ; ===========================================================================
00007022                            ; ---------------------------------------------------------------------------
00007022                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00007022                            ; ---------------------------------------------------------------------------
00007022                            
00007022                            Obj89:					; XREF: Obj_Index
00007022 7000                       		moveq	#0,d0
00007024 1028 0024                  		move.b	$24(a0),d0
00007028 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000702C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00007030                            ; ===========================================================================
00007030 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00007032 0000                       		dc.w Obj89_Move-Obj89_Index
00007034 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00007036                            ; ===========================================================================
00007036                            
00007036                            Obj89_Main:				; XREF: Obj89_Index
00007036 5428 0024                  		addq.b	#2,$24(a0)
0000703A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00007040 317C 00D8 000A             		move.w	#$D8,$A(a0)
00007046 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000704E 317C 05C5 0002             		move.w	#$5C5,2(a0)
00007054 117C 0000 0001             		move.b	#0,1(a0)
0000705A 117C 0000 0018             		move.b	#0,$18(a0)
00007060                            
00007060                            Obj89_Move:				; XREF: Obj89_Index
00007060 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00007066 6700                       		beq.s	Obj89_Delay	; if yes, branch
00007068 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000706E 4EF9 0000 0000             		jmp	DisplaySprite
00007074                            ; ===========================================================================
00007074                            
00007074                            Obj89_Delay:				; XREF: Obj89_Move
00007074 5428 0024                  		addq.b	#2,$24(a0)
00007078 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000707E                            
0000707E                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000707E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00007082 6A00                       		bpl.s	Obj89_Display
00007084 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000708A                            
0000708A                            Obj89_Display:
0000708A 4EF9 0000 0000             		jmp	DisplaySprite
00007090                            ; ===========================================================================
00007090                            ; ---------------------------------------------------------------------------
00007090                            ; Sprite mappings - Sonic on the ending	sequence
00007090                            ; ---------------------------------------------------------------------------
00007090                            Map_obj87:
00007090                            	include "_maps\obj87.asm"
00007090                            ; ---------------------------------------------------------------------------
00007090                            ; Sprite mappings - Sonic on the ending	sequence
00007090                            ; ---------------------------------------------------------------------------
00007090 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00007094 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00007098 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000709C 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000070A0 02                         byte_5690:	dc.b 2
000070A1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000070A6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000070AB 03                         byte_569B:	dc.b 3
000070AC FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000070B1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000070B6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000070BB 02                         byte_56AB:	dc.b 2
000070BC EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000070C1 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000070C6 02                         byte_56B6:	dc.b 2
000070C7 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000070CC FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000070D1 02                         byte_56C1:	dc.b 2
000070D2 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000070D7 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000070DC 03                         byte_56CC:	dc.b 3
000070DD EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000070E2 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000070E7 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000070EC 07                         byte_56DC:	dc.b 7
000070ED B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000070F2 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000070F7 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000070FC CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00007101 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00007106 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000710B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00007110 18                         byte_5700:	dc.b $18
00007111 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00007116 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000711B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00007120 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00007125 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000712A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000712F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00007134 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00007139 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000713E B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00007143 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00007148 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000714D C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00007152 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00007157 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000715C D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00007161 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00007166 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000716B E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00007170 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00007175 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000717A E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000717F F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00007184 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000718A 00                         		even
0000718A 00                         		even
0000718A                            
0000718A                            ; ---------------------------------------------------------------------------
0000718A                            ; Sprite mappings - chaos emeralds on the ending sequence
0000718A                            ; ---------------------------------------------------------------------------
0000718A                            Map_obj88:
0000718A                            	include "_maps\obj88.asm"
0000718A                            ; ---------------------------------------------------------------------------
0000718A                            ; Sprite mappings - chaos emeralds on the ending sequence
0000718A                            ; ---------------------------------------------------------------------------
0000718A 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000718E 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00007192 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00007196 0000                       		dc.w byte_57AC-Map_obj88
00007198 01                         byte_5788:	dc.b 1
00007199 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000719E 01                         byte_578E:	dc.b 1
0000719F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000071A4 01                         byte_5794:	dc.b 1
000071A5 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000071AA 01                         byte_579A:	dc.b 1
000071AB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000071B0 01                         byte_57A0:	dc.b 1
000071B1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000071B6 01                         byte_57A6:	dc.b 1
000071B7 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000071BC 01                         byte_57AC:	dc.b 1
000071BD F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000071C2                            		even
000071C2                            		even
000071C2                            
000071C2                            ; ---------------------------------------------------------------------------
000071C2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071C2                            ; ---------------------------------------------------------------------------
000071C2                            Map_obj89:
000071C2                            	include "_maps\obj89.asm"
000071C2                            ; ---------------------------------------------------------------------------
000071C2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071C2                            ; ---------------------------------------------------------------------------
000071C2 0000                       		dc.w byte_57B4-Map_obj89
000071C4 03                         byte_57B4:	dc.b 3
000071C5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000071CA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000071CF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000071D4                            		even
000071D4                            		even
000071D4                            
000071D4                            ; ===========================================================================
000071D4                            ; ---------------------------------------------------------------------------
000071D4                            ; Credits ending sequence
000071D4                            ; ---------------------------------------------------------------------------
000071D4                            
000071D4                            Credits:				; XREF: GameModeArray
000071D4 6100 A3BE                  		bsr.w	ClearPLC
000071D8 6100 AC38                  		bsr.w	Pal_FadeFrom
000071DC 4DF9 00C0 0004             		lea	($C00004).l,a6
000071E2 3CBC 8004                  		move.w	#$8004,(a6)
000071E6 3CBC 8230                  		move.w	#$8230,(a6)
000071EA 3CBC 8407                  		move.w	#$8407,(a6)
000071EE 3CBC 9001                  		move.w	#$9001,(a6)
000071F2 3CBC 9200                  		move.w	#$9200,(a6)
000071F6 3CBC 8B03                  		move.w	#$8B03,(a6)
000071FA 3CBC 8720                  		move.w	#$8720,(a6)
000071FE 4238 F64E                  		clr.b	($FFFFF64E).w
00007202 6100 9FEC                  		bsr.w	ClearScreen
00007206 43F8 D000                  		lea	($FFFFD000).w,a1
0000720A 7000                       		moveq	#0,d0
0000720C 323C 07FF                  		move.w	#$7FF,d1
00007210                            
00007210                            Cred_ClrObjRam:
00007210 22C0                       		move.l	d0,(a1)+
00007212 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00007216                            
00007216                            ; Vladikcomper:	To fit more letters in credits alphabet patterns, it's now placed
00007216                            ;		at $B000 in VRAM, in original game it was placed at $B400
00007220 41F9 0000 0000             		lea	(Nem_CreditText).l,a0	; load credits alphabet patterns
00007226 6100 A1CE                  		bsr.w	NemDec
0000722A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000722E 7000                       		moveq	#0,d0
00007230 323C 001F                  		move.w	#$1F,d1
00007234                            
00007234                            Cred_ClrPallet:
00007234 22C0                       		move.l	d0,(a1)+
00007236 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000723A                            
0000723A 7003                       		moveq	#3,d0
0000723C 6100 AE92                  		bsr.w	PalLoad1	; load Sonic's pallet
00007240 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00007246 4EB9 0000 0000             		jsr	ObjectsLoad
0000724C 4EB9 0000 0000             		jsr	BuildSprites
00007252 6100 0000                  		bsr.w	EndingDemoLoad
00007256 7000                       		moveq	#0,d0
00007258 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000725C E948                       		lsl.w	#4,d0
0000725E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00007264 45F2 0000                  		lea	(a2,d0.w),a2
00007268 7000                       		moveq	#0,d0
0000726A 1012                       		move.b	(a2),d0
0000726C 6700                       		beq.s	loc_5862
0000726E 6100 A2C6                  		bsr.w	LoadPLC		; load level patterns
00007272                            
00007272                            loc_5862:
00007272 7001                       		moveq	#1,d0
00007274 6100 A2C0                  		bsr.w	LoadPLC		; load standard	level patterns
00007278 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
0000727E 6100 AAEC                  		bsr.w	Pal_FadeTo
00007282                            
00007282                            Cred_WaitLoop:
00007282 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00007288 6100 B6F2                  		bsr.w	DelayProgram
0000728C 6100 A314                  		bsr.w	RunPLC_RAM
00007290 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00007294 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00007296 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000729A 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
0000729C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000072A2 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000072A6 4E75                       		rts	
000072A8                            
000072A8                            ; ---------------------------------------------------------------------------
000072A8                            ; Ending sequence demo loading subroutine
000072A8                            ; ---------------------------------------------------------------------------
000072A8                            
000072A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A8                            
000072A8                            
000072A8                            EndingDemoLoad:				; XREF: Credits
000072A8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000072AC 0240 000F                  		andi.w	#$F,d0
000072B0 D040                       		add.w	d0,d0
000072B2 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000072B6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000072BA 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000072BE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000072C4 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000072C6 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000072CC 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000072D2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000072D8 7000                       		moveq	#0,d0
000072DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000072DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000072E2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000072E6 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000072EA 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000072F0 6600                       		bne.s	EndDemo_Exit	; if not, branch
000072F2 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000072F8 45F8 FE30                  		lea	($FFFFFE30).w,a2
000072FC 303C 0008                  		move.w	#8,d0
00007300                            
00007300                            EndDemo_LampLoad:
00007300 24D9                       		move.l	(a1)+,(a2)+
00007302 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00007306                            
00007306                            EndDemo_Exit:
00007306 4E75                       		rts	
00007308                            ; End of function EndingDemoLoad
00007308                            
00007308                            ; ===========================================================================
00007308                            ; ---------------------------------------------------------------------------
00007308                            ; Levels used in the end sequence demos
00007308                            ; ---------------------------------------------------------------------------
00007308                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00007318                            
00007318                            ; ---------------------------------------------------------------------------
00007318                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00007318                            ; ---------------------------------------------------------------------------
00007318                            EndDemo_LampVar:
00007318 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000731A 0A00 062C 000D             		dc.w $A00, $62C, $D
00007320 0000 0000                  		dc.l 0
00007324 0000                       		dc.b 0,	0
00007326 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000733A 0101                       		dc.b 1,	1
0000733C                            ; ===========================================================================
0000733C                            ; ---------------------------------------------------------------------------
0000733C                            ; "TRY AGAIN" and "END"	screens
0000733C                            ; ---------------------------------------------------------------------------
0000733C                            
0000733C                            TryAgainEnd:				; XREF: Credits
0000733C 6100 A256                  		bsr.w	ClearPLC
00007340 6100 AAD0                  		bsr.w	Pal_FadeFrom
00007344 4DF9 00C0 0004             		lea	($C00004).l,a6
0000734A 3CBC 8004                  		move.w	#$8004,(a6)
0000734E 3CBC 8230                  		move.w	#$8230,(a6)
00007352 3CBC 8407                  		move.w	#$8407,(a6)
00007356 3CBC 9001                  		move.w	#$9001,(a6)
0000735A 3CBC 9200                  		move.w	#$9200,(a6)
0000735E 3CBC 8B03                  		move.w	#$8B03,(a6)
00007362 3CBC 8720                  		move.w	#$8720,(a6)
00007366 4238 F64E                  		clr.b	($FFFFF64E).w
0000736A 6100 9E84                  		bsr.w	ClearScreen
0000736E 43F8 D000                  		lea	($FFFFD000).w,a1
00007372 7000                       		moveq	#0,d0
00007374 323C 07FF                  		move.w	#$7FF,d1
00007378                            
00007378                            TryAg_ClrObjRam:
00007378 22C0                       		move.l	d0,(a1)+
0000737A 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000737E                            
0000737E 701D                       		moveq	#$1D,d0
00007380 6100 A32A                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00007384 43F8 FB80                  		lea	($FFFFFB80).w,a1
00007388 7000                       		moveq	#0,d0
0000738A 323C 001F                  		move.w	#$1F,d1
0000738E                            
0000738E                            TryAg_ClrPallet:
0000738E 22C0                       		move.l	d0,(a1)+
00007390 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00007394                            
00007394 7013                       		moveq	#$13,d0
00007396 6100 AD38                  		bsr.w	PalLoad1	; load ending pallet
0000739A 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000739E 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000073A4 4EB9 0000 0000             		jsr	ObjectsLoad
000073AA 4EB9 0000 0000             		jsr	BuildSprites
000073B0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000073B6 6100 A9B4                  		bsr.w	Pal_FadeTo
000073BA                            
000073BA                            ; ---------------------------------------------------------------------------
000073BA                            ; "TRY AGAIN" and "END"	screen main loop
000073BA                            ; ---------------------------------------------------------------------------
000073BA                            TryAg_MainLoop:
000073BA 6100 9F12                  		bsr.w	PauseGame
000073BE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000073C4 6100 B5B6                  		bsr.w	DelayProgram
000073C8 4EB9 0000 0000             		jsr	ObjectsLoad
000073CE 4EB9 0000 0000             		jsr	BuildSprites
000073D4 0238 0080 F605             		andi.b	#Start,(Joypad|Press)	; is Start button pressed?
000073DA 6600                       		bne.s	TryAg_Exit		; if yes, branch
000073DC 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000073E0 6700                       		beq.s	TryAg_Exit	; if yes, branch
000073E2 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000073E8 67D0                       		beq.s	TryAg_MainLoop
000073EA                            
000073EA                            TryAg_Exit:
000073EA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000073F0 4E75                       		rts	
000073F2                            
000073F2                            ; ===========================================================================
000073F2                            ; ---------------------------------------------------------------------------
000073F2                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000073F2                            ; ---------------------------------------------------------------------------
000073F2                            
000073F2                            Obj8B:					; XREF: Obj_Index
000073F2 7000                       		moveq	#0,d0
000073F4 1028 0024                  		move.b	$24(a0),d0
000073F8 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000073FC 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00007400 4EF9 0000 0000             		jmp	DisplaySprite
00007406                            ; ===========================================================================
00007406 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00007408 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000740A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000740C 0000                       		dc.w loc_5A8E-Obj8B_Index
0000740E                            ; ===========================================================================
0000740E                            
0000740E                            Obj8B_Main:				; XREF: Obj8B_Index
0000740E 5428 0024                  		addq.b	#2,$24(a0)
00007412 317C 0120 0008             		move.w	#$120,8(a0)
00007418 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000741E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00007426 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000742C 117C 0000 0001             		move.b	#0,1(a0)
00007432 117C 0002 0018             		move.b	#2,$18(a0)
00007438 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000743E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007444 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00007446 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000744C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00007452 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00007458 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000745E                            
0000745E                            Obj8B_Animate:				; XREF: Obj8B_Index
0000745E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00007464 4EF9 0000 0000             		jmp	AnimateSprite
0000746A                            ; ===========================================================================
0000746A                            
0000746A                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000746A 5428 0024                  		addq.b	#2,$24(a0)
0000746E 7002                       		moveq	#2,d0
00007470 0828 0000 001C             		btst	#0,$1C(a0)
00007476 6700                       		beq.s	loc_5A6A
00007478 4440                       		neg.w	d0
0000747A                            
0000747A                            loc_5A6A:
0000747A 43F8 D800                  		lea	($FFFFD800).w,a1
0000747E 7205                       		moveq	#5,d1
00007480                            
00007480                            loc_5A70:
00007480 1340 003E                  		move.b	d0,$3E(a1)
00007484 3400                       		move.w	d0,d2
00007486 E742                       		asl.w	#3,d2
00007488 D529 0026                  		add.b	d2,$26(a1)
0000748C 43E9 0040                  		lea	$40(a1),a1
00007490 51C9 FFEE                  		dbf	d1,loc_5A70
00007494 5228 001A                  		addq.b	#1,$1A(a0)
00007498 317C 0070 0030             		move.w	#112,$30(a0)
0000749E                            
0000749E                            loc_5A8E:				; XREF: Obj8B_Index
0000749E 5368 0030                  		subq.w	#1,$30(a0)
000074A2 6A00                       		bpl.s	locret_5AA0
000074A4 0868 0000 001C             		bchg	#0,$1C(a0)
000074AA 117C 0002 0024             		move.b	#2,$24(a0)
000074B0                            
000074B0                            locret_5AA0:
000074B0 4E75                       		rts	
000074B2                            ; ===========================================================================
000074B2                            Ani_obj8B:
000074B2                            	include "_anim\obj8B.asm"
000074B2                            ; ---------------------------------------------------------------------------
000074B2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000074B2                            ; ---------------------------------------------------------------------------
000074B2 0000                       		dc.w byte_5AA8-Ani_obj8B
000074B4 0000                       		dc.w byte_5AAC-Ani_obj8B
000074B6 0000                       		dc.w byte_5AB0-Ani_obj8B
000074B8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000074BC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000074C0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000074D2                            		even
000074D2                            		even
000074D2                            
000074D2                            ; ===========================================================================
000074D2                            ; ---------------------------------------------------------------------------
000074D2                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000074D2                            ; ---------------------------------------------------------------------------
000074D2                            
000074D2                            Obj8C:					; XREF: Obj_Index
000074D2 7000                       		moveq	#0,d0
000074D4 1028 0024                  		move.b	$24(a0),d0
000074D8 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000074DC 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000074E0 4EF9 0000 0000             		jmp	DisplaySprite
000074E6                            ; ===========================================================================
000074E6 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
000074E8 0000                       		dc.w Obj8C_Move-Obj8C_Index
000074EA                            ; ===========================================================================
000074EA                            
000074EA                            Obj8C_Main:				; XREF: Obj8C_Index
000074EA 2248                       		movea.l	a0,a1
000074EC 7400                       		moveq	#0,d2
000074EE 7600                       		moveq	#0,d3
000074F0 7205                       		moveq	#5,d1
000074F2 9238 FE57                  		sub.b	($FFFFFE57).w,d1
000074F6                            
000074F6                            Obj8C_MakeEms:				; XREF: loc_5B42
000074F6 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
000074FA 5429 0024                  		addq.b	#2,$24(a1)
000074FE 237C 0000 718A 0004        		move.l	#Map_obj88,4(a1)
00007506 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000750C 137C 0000 0001             		move.b	#0,1(a1)
00007512 137C 0001 0018             		move.b	#1,$18(a1)
00007518 337C 0104 0008             		move.w	#$104,8(a1)
0000751E 337C 0120 0038             		move.w	#$120,$38(a1)
00007524 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000752A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00007530 137C 001C 003C             		move.b	#$1C,$3C(a1)
00007536 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000753A                            
0000753A                            Obj8C_ChkEms:
0000753A 7000                       		moveq	#0,d0
0000753C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00007540 5340                       		subq.w	#1,d0
00007542 6500                       		bcs.s	loc_5B42
00007544                            
00007544                            Obj8C_ChkEmLoop:
00007544 B433 0000                  		cmp.b	(a3,d0.w),d2
00007548 6600                       		bne.s	loc_5B3E
0000754A 5202                       		addq.b	#1,d2
0000754C 60EC                       		bra.s	Obj8C_ChkEms
0000754E                            ; ===========================================================================
0000754E                            
0000754E                            loc_5B3E:
0000754E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00007552                            
00007552                            loc_5B42:
00007552 1342 001A                  		move.b	d2,$1A(a1)
00007556 5229 001A                  		addq.b	#1,$1A(a1)
0000755A 5202                       		addq.b	#1,d2
0000755C 137C 0080 0026             		move.b	#$80,$26(a1)
00007562 1343 001E                  		move.b	d3,$1E(a1)
00007566 1343 001F                  		move.b	d3,$1F(a1)
0000756A 0643 000A                  		addi.w	#$A,d3
0000756E 43E9 0040                  		lea	$40(a1),a1
00007572 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00007576                            
00007576                            Obj8C_Move:				; XREF: Obj8C_Index
00007576 4A68 003E                  		tst.w	$3E(a0)
0000757A 6700                       		beq.s	locret_5BBA
0000757C 4A28 001E                  		tst.b	$1E(a0)
00007580 6700                       		beq.s	loc_5B78
00007582 5328 001E                  		subq.b	#1,$1E(a0)
00007586 6600                       		bne.s	loc_5B80
00007588                            
00007588                            loc_5B78:
00007588 3028 003E                  		move.w	$3E(a0),d0
0000758C D168 0026                  		add.w	d0,$26(a0)
00007590                            
00007590                            loc_5B80:
00007590 1028 0026                  		move.b	$26(a0),d0
00007594 6700                       		beq.s	loc_5B8C
00007596 0C00 0080                  		cmpi.b	#$80,d0
0000759A 6600                       		bne.s	loc_5B96
0000759C                            
0000759C                            loc_5B8C:
0000759C 4268 003E                  		clr.w	$3E(a0)
000075A0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000075A6                            
000075A6                            loc_5B96:
000075A6 4EB9 0000 29AE             		jsr	(CalcSine).l
000075AC 7800                       		moveq	#0,d4
000075AE 1828 003C                  		move.b	$3C(a0),d4
000075B2 C3C4                       		muls.w	d4,d1
000075B4 E081                       		asr.l	#8,d1
000075B6 C1C4                       		muls.w	d4,d0
000075B8 E080                       		asr.l	#8,d0
000075BA D268 0038                  		add.w	$38(a0),d1
000075BE D068 003A                  		add.w	$3A(a0),d0
000075C2 3141 0008                  		move.w	d1,8(a0)
000075C6 3140 000A                  		move.w	d0,$A(a0)
000075CA                            
000075CA                            locret_5BBA:
000075CA 4E75                       		rts	
000075CC                            ; ===========================================================================
000075CC                            ; ---------------------------------------------------------------------------
000075CC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000075CC                            ; ---------------------------------------------------------------------------
000075CC                            Map_obj8B:
000075CC                            	include "_maps\obj8B.asm"
000075CC                            ; ---------------------------------------------------------------------------
000075CC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000075CC                            ; ---------------------------------------------------------------------------
000075CC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000075D0 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000075D4 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000075D8 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000075DC 08                         byte_5BCC:	dc.b 8
000075DD E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000075E2 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000075E7 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000075EC F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000075F1 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000075F6 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000075FB 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007600 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007605 08                         byte_5BF5:	dc.b 8
00007606 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000760B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00007610 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00007615 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000761A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000761F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007624 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007629 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000762E 08                         byte_5C1E:	dc.b 8
0000762F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00007634 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00007639 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000763E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00007643 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00007648 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000764D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007652 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007657 08                         byte_5C47:	dc.b 8
00007658 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000765D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00007662 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00007667 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000766C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00007671 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007676 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000767B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007680 0C                         byte_5C70:	dc.b $C
00007681 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00007686 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000768B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00007690 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00007695 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000769A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000769F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000076A4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000076A9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000076AE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000076B3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000076B8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000076BD 0A                         byte_5CAD:	dc.b $A
000076BE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000076C3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000076C8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000076CD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000076D2 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000076D7 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000076DC 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000076E1 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000076E6 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000076EB 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000076F0 0A                         byte_5CE0:	dc.b $A
000076F1 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000076F6 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000076FB EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00007700 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00007705 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000770A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000770F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00007714 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00007719 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000771E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00007723 0C                         byte_5D13:	dc.b $C
00007724 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00007729 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000772E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00007733 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00007738 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000773D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00007742 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00007747 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000774C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00007751 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00007756 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000775B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00007760                            		even
00007760                            		even
00007760                            
00007760                            ; ---------------------------------------------------------------------------
00007760                            ; Ending sequence demos
00007760                            ; ---------------------------------------------------------------------------
00007760                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000778E                            		even
0000778E                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000077CE                            		even
000077CE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000077FE                            		even
000077FE                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000782E                            		even
0000782E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000784E                            		even
0000784E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000786E                            		even
0000786E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000789E                            		even
0000789E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000078CE                            		even
000078CE                            
000078CE                            ; ---------------------------------------------------------------------------
000078CE                            ; Subroutine to	load level boundaries and start	locations
000078CE                            ; ---------------------------------------------------------------------------
000078CE                            
000078CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078CE                            
000078CE                            
000078CE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000078CE 7000                       		moveq	#0,d0
000078D0 11C0 F740                  		move.b	d0,($FFFFF740).w
000078D4 11C0 F741                  		move.b	d0,($FFFFF741).w
000078D8 11C0 F746                  		move.b	d0,($FFFFF746).w
000078DC 11C0 F748                  		move.b	d0,($FFFFF748).w
000078E0 11C0 F742                  		move.b	d0,($FFFFF742).w
000078E4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000078E8 ED08                       		lsl.b	#6,d0
000078EA E848                       		lsr.w	#4,d0
000078EC 3200                       		move.w	d0,d1
000078EE D040                       		add.w	d0,d0
000078F0 D041                       		add.w	d1,d0
000078F2 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000078F6 3018                       		move.w	(a0)+,d0
000078F8 31C0 F730                  		move.w	d0,($FFFFF730).w
000078FC 2018                       		move.l	(a0)+,d0
000078FE 21C0 F728                  		move.l	d0,($FFFFF728).w
00007902 21C0 F720                  		move.l	d0,($FFFFF720).w
00007906 2018                       		move.l	(a0)+,d0
00007908 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000790C 21C0 F724                  		move.l	d0,($FFFFF724).w
00007910 3038 F728                  		move.w	($FFFFF728).w,d0
00007914 0640 0240                  		addi.w	#$240,d0
00007918 31C0 F732                  		move.w	d0,($FFFFF732).w
0000791C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00007922 3018                       		move.w	(a0)+,d0
00007924 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00007928 6000 0000                  		bra.w	LevSz_ChkLamp
0000792C                            ; ===========================================================================
0000792C                            ; ---------------------------------------------------------------------------
0000792C                            ; Level size array and ending start location array
0000792C                            ; ---------------------------------------------------------------------------
0000792C                            LevelSizeArray:	incbin	misc\lvl_size.bin
00007A7C                            		even
00007A7C                            
00007A7C                            EndingStLocArray:
00007A7C                            		incbin	misc\sloc_end.bin
00007A9C                            		even
00007A9C                            
00007A9C                            ; ===========================================================================
00007A9C                            
00007A9C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00007A9C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00007AA0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007AA2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00007AA8 3238 D008                  		move.w	($FFFFD008).w,d1
00007AAC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007AB0 6000                       		bra.s	loc_60D0
00007AB2                            ; ===========================================================================
00007AB2                            
00007AB2                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00007AB2 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007AB6 ED08                       		lsl.b	#6,d0
00007AB8 E848                       		lsr.w	#4,d0
00007ABA 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00007ABE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00007AC2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007AC4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007AC8 5340                       		subq.w	#1,d0
00007ACA E548                       		lsl.w	#2,d0
00007ACC 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007AD0                            
00007AD0                            LevSz_SonicPos:
00007AD0 7200                       		moveq	#0,d1
00007AD2 3219                       		move.w	(a1)+,d1
00007AD4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00007AD8 7000                       		moveq	#0,d0
00007ADA 3011                       		move.w	(a1),d0
00007ADC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00007AE0                            
00007AE0                            loc_60D0:				; XREF: LevSz_ChkLamp
00007AE0 0441 00A0                  		subi.w	#$A0,d1
00007AE4 6400                       		bcc.s	loc_60D8
00007AE6 7200                       		moveq	#0,d1
00007AE8                            
00007AE8                            loc_60D8:
00007AE8 3438 F72A                  		move.w	($FFFFF72A).w,d2
00007AEC B242                       		cmp.w	d2,d1
00007AEE 6500                       		bcs.s	loc_60E2
00007AF0 3202                       		move.w	d2,d1
00007AF2                            
00007AF2                            loc_60E2:
00007AF2 31C1 F700                  		move.w	d1,($FFFFF700).w
00007AF6 0440 0060                  		subi.w	#$60,d0
00007AFA 6400                       		bcc.s	loc_60EE
00007AFC 7000                       		moveq	#0,d0
00007AFE                            
00007AFE                            loc_60EE:
00007AFE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007B02 6D00                       		blt.s	loc_60F8
00007B04 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007B08                            
00007B08                            loc_60F8:
00007B08 31C0 F704                  		move.w	d0,($FFFFF704).w
00007B0C 6100 0000                  		bsr.w	BgScrollSpeed
00007B10 7000                       		moveq	#0,d0
00007B12 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007B16 E508                       		lsl.b	#2,d0
00007B18 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00007B1E 6000 0000                  		bra.w	LevSz_Unk
00007B22                            ; ===========================================================================
00007B22                            ; ---------------------------------------------------------------------------
00007B22                            ; Sonic	start location array
00007B22                            ; ---------------------------------------------------------------------------
00007B22                            StartLocArray:	incbin	misc\sloc_lev.bin
00007B92                            		even
00007B92                            
00007B92                            ; ---------------------------------------------------------------------------
00007B92                            ; Which	256x256	tiles contain loops or roll-tunnels
00007B92                            ; ---------------------------------------------------------------------------
00007B92                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00007B92                            ; loop,	loop, tunnel, tunnel
00007B92                            ; ---------------------------------------------------------------------------
00007B92                            LoopTileNums:	incbin	misc\loopnums.bin
00007BAE                            		even
00007BAE                            
00007BAE                            ; ===========================================================================
00007BAE                            
00007BAE                            LevSz_Unk:				; XREF: LevelSizeLoad
00007BAE 7000                       		moveq	#0,d0
00007BB0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007BB4 E748                       		lsl.w	#3,d0
00007BB6 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00007BBA 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00007BBE 24D9                       		move.l	(a1)+,(a2)+
00007BC0 24D9                       		move.l	(a1)+,(a2)+
00007BC2 4E75                       		rts	
00007BC4                            ; End of function LevelSizeLoad
00007BC4                            
00007BC4                            ; ===========================================================================
00007BC4 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00007BCC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BD4 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BDC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BE4 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BEC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BF4 0070 0100 0100 0100        		dc.l $700100, $1000100
00007BFC                            
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            ; Subroutine to	set scroll speed of some backgrounds
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            
00007BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BFC                            
00007BFC                            
00007BFC                            BgScrollSpeed:				; XREF: LevelSizeLoad
00007BFC 4A38 FE30                  		tst.b	($FFFFFE30).w
00007C00 6600                       		bne.s	loc_6206
00007C02 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C06 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C0A 31C1 F708                  		move.w	d1,($FFFFF708).w
00007C0E 31C1 F710                  		move.w	d1,($FFFFF710).w
00007C12 31C1 F718                  		move.w	d1,($FFFFF718).w
00007C16                            
00007C16                            loc_6206:
00007C16 7400                       		moveq	#0,d2
00007C18 1438 FE10                  		move.b	($FFFFFE10).w,d2
00007C1C D442                       		add.w	d2,d2
00007C1E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007C22 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007C26                            ; End of function BgScrollSpeed
00007C26                            
00007C26                            ; ===========================================================================
00007C26 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007C2A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007C2E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007C32 0000                       		dc.w BgScroll_End-BgScroll_Index
00007C34                            ; ===========================================================================
00007C34                            
00007C34                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007C34 6000 0000                  		bra.w	Deform_GHZ
00007C38                            ; ===========================================================================
00007C38                            
00007C38                            BgScroll_LZ:				; XREF: BgScroll_Index
00007C38 E280                       		asr.l	#1,d0
00007C3A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C3E 4E75                       		rts	
00007C40                            ; ===========================================================================
00007C40                            
00007C40                            BgScroll_MZ:				; XREF: BgScroll_Index
00007C40 4E75                       		rts	
00007C42                            ; ===========================================================================
00007C42                            
00007C42                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007C42 E280                       		asr.l	#1,d0
00007C44 0640 00C0                  		addi.w	#$C0,d0
00007C48 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C4C 4E75                       		rts	
00007C4E                            ; ===========================================================================
00007C4E                            
00007C4E                            BgScroll_SYZ:				; XREF: BgScroll_Index
00007C4E E980                       		asl.l	#4,d0
00007C50 2400                       		move.l	d0,d2
00007C52 E380                       		asl.l	#1,d0
00007C54 D082                       		add.l	d2,d0
00007C56 E080                       		asr.l	#8,d0
00007C58 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C5C 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C60 4E75                       		rts	
00007C62                            ; ===========================================================================
00007C62                            
00007C62                            BgScroll_SBZ:				; XREF: BgScroll_Index
00007C62 E980                       		asl.l	#4,d0
00007C64 E380                       		asl.l	#1,d0
00007C66 E080                       		asr.l	#8,d0
00007C68 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C6C 4E75                       		rts	
00007C6E                            ; ===========================================================================
00007C6E                            
00007C6E                            BgScroll_End:				; XREF: BgScroll_Index
00007C6E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007C74 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007C7A 4E75                       		rts	
00007C7C                            ; ===========================================================================
00007C7C 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007C82 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007C88 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00007C8E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007C94 4E75                       		rts
00007C96                            
00007C96                            ; ---------------------------------------------------------------------------
00007C96                            ; Background layer deformation subroutines
00007C96                            ; ---------------------------------------------------------------------------
00007C96                            
00007C96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C96                            
00007C96                            
00007C96                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007C96 4A38 F744                  		tst.b	($FFFFF744).w
00007C9A 6700                       		beq.s	loc_628E
00007C9C 4E75                       		rts	
00007C9E                            ; ===========================================================================
00007C9E                            
00007C9E                            loc_628E:
00007C9E 4278 F754                  		clr.w	($FFFFF754).w
00007CA2 4278 F756                  		clr.w	($FFFFF756).w
00007CA6 4278 F758                  		clr.w	($FFFFF758).w
00007CAA 4278 F75A                  		clr.w	($FFFFF75A).w
00007CAE 6100 0000                  		bsr.w	ScrollHoriz
00007CB2 6100 0000                  		bsr.w	ScrollVertical
00007CB6 6100 0000                  		bsr.w	DynScrResizeLoad
00007CBA 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007CC0 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007CC6 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00007CCC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007CD2 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007CD8 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00007CDE 7000                       		moveq	#0,d0
00007CE0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007CE4 D040                       		add.w	d0,d0
00007CE6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007CEA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007CEE                            ; End of function DeformBgLayer
00007CEE                            
00007CEE                            ; ===========================================================================
00007CEE                            ; ---------------------------------------------------------------------------
00007CEE                            ; Offset index for background layer deformation	code
00007CEE                            ; ---------------------------------------------------------------------------
00007CEE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007CF2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007CF6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007CFA 0000                       		dc.w Deform_GHZ-Deform_Index
00007CFC                            ; ---------------------------------------------------------------------------
00007CFC                            ; Green	Hill Zone background layer deformation code
00007CFC                            ; ---------------------------------------------------------------------------
00007CFC                            
00007CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CFC                            
00007CFC                            
00007CFC                            Deform_GHZ:				; XREF: Deform_Index
00007CFC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007D00 48C4                       		ext.l	d4
00007D02 EB84                       		asl.l	#5,d4
00007D04 2204                       		move.l	d4,d1
00007D06 E384                       		asl.l	#1,d4
00007D08 D881                       		add.l	d1,d4
00007D0A 7A00                       		moveq	#0,d5
00007D0C 6100 0000                  		bsr.w	ScrollBlock1
00007D10 6100 0000                  		bsr.w	ScrollBlock4
00007D14 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007D18 3038 F704                  		move.w	($FFFFF704).w,d0
00007D1C 0240 07FF                  		andi.w	#$7FF,d0
00007D20 EA48                       		lsr.w	#5,d0
00007D22 4440                       		neg.w	d0
00007D24 0640 0026                  		addi.w	#$26,d0
00007D28 31C0 F714                  		move.w	d0,($FFFFF714).w
00007D2C 3800                       		move.w	d0,d4
00007D2E 6100 0000                  		bsr.w	ScrollBlock3
00007D32 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007D38 323C 006F                  		move.w	#$6F,d1
00007D3C 9244                       		sub.w	d4,d1
00007D3E 3038 F700                  		move.w	($FFFFF700).w,d0
00007D42 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007D48 6600                       		bne.s	loc_633C
00007D4A 7000                       		moveq	#0,d0
00007D4C                            
00007D4C                            loc_633C:
00007D4C 4440                       		neg.w	d0
00007D4E 4840                       		swap	d0
00007D50 3038 F708                  		move.w	($FFFFF708).w,d0
00007D54 4440                       		neg.w	d0
00007D56                            
00007D56                            loc_6346:
00007D56 22C0                       		move.l	d0,(a1)+
00007D58 51C9 FFFC                  		dbf	d1,loc_6346
00007D5C 323C 0027                  		move.w	#$27,d1
00007D60 3038 F710                  		move.w	($FFFFF710).w,d0
00007D64 4440                       		neg.w	d0
00007D66                            
00007D66                            loc_6356:
00007D66 22C0                       		move.l	d0,(a1)+
00007D68 51C9 FFFC                  		dbf	d1,loc_6356
00007D6C 3038 F710                  		move.w	($FFFFF710).w,d0
00007D70 0640 0000                  		addi.w	#0,d0
00007D74 3438 F700                  		move.w	($FFFFF700).w,d2
00007D78 0642 FE00                  		addi.w	#-$200,d2
00007D7C 9440                       		sub.w	d0,d2
00007D7E 48C2                       		ext.l	d2
00007D80 E182                       		asl.l	#8,d2
00007D82 85FC 0068                  		divs.w	#$68,d2
00007D86 48C2                       		ext.l	d2
00007D88 E182                       		asl.l	#8,d2
00007D8A 7600                       		moveq	#0,d3
00007D8C 3600                       		move.w	d0,d3
00007D8E 323C 0047                  		move.w	#$47,d1
00007D92 D244                       		add.w	d4,d1
00007D94                            
00007D94                            loc_6384:
00007D94 3003                       		move.w	d3,d0
00007D96 4440                       		neg.w	d0
00007D98 22C0                       		move.l	d0,(a1)+
00007D9A 4843                       		swap	d3
00007D9C D682                       		add.l	d2,d3
00007D9E 4843                       		swap	d3
00007DA0 51C9 FFF2                  		dbf	d1,loc_6384
00007DA4 4E75                       		rts	
00007DA6                            ; End of function Deform_GHZ
00007DA6                            
00007DA6                            ; ---------------------------------------------------------------------------
00007DA6                            ; Labyrinth Zone background layer deformation code
00007DA6                            ; ---------------------------------------------------------------------------
00007DA6                            
00007DA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DA6                            
00007DA6                            
00007DA6                            Deform_LZ:				; XREF: Deform_Index
00007DA6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007DAA 48C4                       		ext.l	d4
00007DAC EF84                       		asl.l	#7,d4
00007DAE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007DB2 48C5                       		ext.l	d5
00007DB4 EF85                       		asl.l	#7,d5
00007DB6 6100 0000                  		bsr.w	ScrollBlock1
00007DBA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007DC0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007DC4 323C 00DF                  		move.w	#$DF,d1
00007DC8 3038 F700                  		move.w	($FFFFF700).w,d0
00007DCC 4440                       		neg.w	d0
00007DCE 4840                       		swap	d0
00007DD0 3038 F708                  		move.w	($FFFFF708).w,d0
00007DD4 4440                       		neg.w	d0
00007DD6                            
00007DD6                            loc_63C6:
00007DD6 22C0                       		move.l	d0,(a1)+
00007DD8 51C9 FFFC                  		dbf	d1,loc_63C6
00007DDC 3038 F646                  		move.w	($FFFFF646).w,d0
00007DE0 9078 F704                  		sub.w	($FFFFF704).w,d0
00007DE4 4E75                       		rts	
00007DE6                            ; End of function Deform_LZ
00007DE6                            
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6                            ; Marble Zone background layer deformation code
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6                            
00007DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE6                            
00007DE6                            
00007DE6                            Deform_MZ:				; XREF: Deform_Index
00007DE6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007DEA 48C4                       		ext.l	d4
00007DEC ED84                       		asl.l	#6,d4
00007DEE 2204                       		move.l	d4,d1
00007DF0 E384                       		asl.l	#1,d4
00007DF2 D881                       		add.l	d1,d4
00007DF4 7A00                       		moveq	#0,d5
00007DF6 6100 0000                  		bsr.w	ScrollBlock1
00007DFA 303C 0200                  		move.w	#$200,d0
00007DFE 3238 F704                  		move.w	($FFFFF704).w,d1
00007E02 0441 01C8                  		subi.w	#$1C8,d1
00007E06 6500                       		bcs.s	loc_6402
00007E08 3401                       		move.w	d1,d2
00007E0A D241                       		add.w	d1,d1
00007E0C D242                       		add.w	d2,d1
00007E0E E441                       		asr.w	#2,d1
00007E10 D041                       		add.w	d1,d0
00007E12                            
00007E12                            loc_6402:
00007E12 31C0 F714                  		move.w	d0,($FFFFF714).w
00007E16 6100 0000                  		bsr.w	ScrollBlock3
00007E1A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E20 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E24 323C 00DF                  		move.w	#$DF,d1
00007E28 3038 F700                  		move.w	($FFFFF700).w,d0
00007E2C 4440                       		neg.w	d0
00007E2E 4840                       		swap	d0
00007E30 3038 F708                  		move.w	($FFFFF708).w,d0
00007E34 4440                       		neg.w	d0
00007E36                            
00007E36                            loc_6426:
00007E36 22C0                       		move.l	d0,(a1)+
00007E38 51C9 FFFC                  		dbf	d1,loc_6426
00007E3C 4E75                       		rts	
00007E3E                            ; End of function Deform_MZ
00007E3E                            
00007E3E                            ; ---------------------------------------------------------------------------
00007E3E                            ; Star Light Zone background layer deformation code
00007E3E                            ; ---------------------------------------------------------------------------
00007E3E                            
00007E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3E                            
00007E3E                            
00007E3E                            Deform_SLZ:				; XREF: Deform_Index
00007E3E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E42 48C4                       		ext.l	d4
00007E44 EF84                       		asl.l	#7,d4
00007E46 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007E4A 48C5                       		ext.l	d5
00007E4C EF85                       		asl.l	#7,d5
00007E4E 6100 0000                  		bsr.w	ScrollBlock2
00007E52 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E58 6100 0000                  		bsr.w	Deform_SLZ_2
00007E5C 45F8 A800                  		lea	($FFFFA800).w,a2
00007E60 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007E64 3400                       		move.w	d0,d2
00007E66 0440 00C0                  		subi.w	#$C0,d0
00007E6A 0240 03F0                  		andi.w	#$3F0,d0
00007E6E E648                       		lsr.w	#3,d0
00007E70 45F2 0000                  		lea	(a2,d0.w),a2
00007E74 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E78 323C 000E                  		move.w	#$E,d1
00007E7C 3038 F700                  		move.w	($FFFFF700).w,d0
00007E80 4440                       		neg.w	d0
00007E82 4840                       		swap	d0
00007E84 0242 000F                  		andi.w	#$F,d2
00007E88 D442                       		add.w	d2,d2
00007E8A 301A                       		move.w	(a2)+,d0
00007E8C 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00007E90                            ; ===========================================================================
00007E90                            
00007E90                            loc_6480:				; XREF: Deform_SLZ
00007E90 301A                       		move.w	(a2)+,d0
00007E92                            
00007E92                            loc_6482:
00007E92 22C0                       		move.l	d0,(a1)+
00007E94 22C0                       		move.l	d0,(a1)+
00007E96 22C0                       		move.l	d0,(a1)+
00007E98 22C0                       		move.l	d0,(a1)+
00007E9A 22C0                       		move.l	d0,(a1)+
00007E9C 22C0                       		move.l	d0,(a1)+
00007E9E 22C0                       		move.l	d0,(a1)+
00007EA0 22C0                       		move.l	d0,(a1)+
00007EA2 22C0                       		move.l	d0,(a1)+
00007EA4 22C0                       		move.l	d0,(a1)+
00007EA6 22C0                       		move.l	d0,(a1)+
00007EA8 22C0                       		move.l	d0,(a1)+
00007EAA 22C0                       		move.l	d0,(a1)+
00007EAC 22C0                       		move.l	d0,(a1)+
00007EAE 22C0                       		move.l	d0,(a1)+
00007EB0 22C0                       		move.l	d0,(a1)+
00007EB2 51C9 FFDC                  		dbf	d1,loc_6480
00007EB6 4E75                       		rts	
00007EB8                            ; End of function Deform_SLZ
00007EB8                            
00007EB8                            
00007EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EB8                            
00007EB8                            
00007EB8                            Deform_SLZ_2:				; XREF: Deform_SLZ
00007EB8 43F8 A800                  		lea	($FFFFA800).w,a1
00007EBC 3438 F700                  		move.w	($FFFFF700).w,d2
00007EC0 4442                       		neg.w	d2
00007EC2 3002                       		move.w	d2,d0
00007EC4 E640                       		asr.w	#3,d0
00007EC6 9042                       		sub.w	d2,d0
00007EC8 48C0                       		ext.l	d0
00007ECA E980                       		asl.l	#4,d0
00007ECC 81FC 001C                  		divs.w	#$1C,d0
00007ED0 48C0                       		ext.l	d0
00007ED2 E980                       		asl.l	#4,d0
00007ED4 E180                       		asl.l	#8,d0
00007ED6 7600                       		moveq	#0,d3
00007ED8 3602                       		move.w	d2,d3
00007EDA 323C 001B                  		move.w	#$1B,d1
00007EDE                            
00007EDE                            loc_64CE:
00007EDE 32C3                       		move.w	d3,(a1)+
00007EE0 4843                       		swap	d3
00007EE2 D680                       		add.l	d0,d3
00007EE4 4843                       		swap	d3
00007EE6 51C9 FFF6                  		dbf	d1,loc_64CE
00007EEA 3002                       		move.w	d2,d0
00007EEC E640                       		asr.w	#3,d0
00007EEE 323C 0004                  		move.w	#4,d1
00007EF2                            
00007EF2                            loc_64E2:
00007EF2 32C0                       		move.w	d0,(a1)+
00007EF4 51C9 FFFC                  		dbf	d1,loc_64E2
00007EF8 3002                       		move.w	d2,d0
00007EFA E440                       		asr.w	#2,d0
00007EFC 323C 0004                  		move.w	#4,d1
00007F00                            
00007F00                            loc_64F0:
00007F00 32C0                       		move.w	d0,(a1)+
00007F02 51C9 FFFC                  		dbf	d1,loc_64F0
00007F06 3002                       		move.w	d2,d0
00007F08 E240                       		asr.w	#1,d0
00007F0A 323C 001D                  		move.w	#$1D,d1
00007F0E                            
00007F0E                            loc_64FE:
00007F0E 32C0                       		move.w	d0,(a1)+
00007F10 51C9 FFFC                  		dbf	d1,loc_64FE
00007F14 4E75                       		rts	
00007F16                            ; End of function Deform_SLZ_2
00007F16                            
00007F16                            ; ---------------------------------------------------------------------------
00007F16                            ; Spring Yard Zone background layer deformation	code
00007F16                            ; ---------------------------------------------------------------------------
00007F16                            
00007F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F16                            
00007F16                            
00007F16                            Deform_SYZ:				; XREF: Deform_Index
00007F16 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F1A 48C4                       		ext.l	d4
00007F1C ED84                       		asl.l	#6,d4
00007F1E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F22 48C5                       		ext.l	d5
00007F24 E985                       		asl.l	#4,d5
00007F26 2205                       		move.l	d5,d1
00007F28 E385                       		asl.l	#1,d5
00007F2A DA81                       		add.l	d1,d5
00007F2C 6100 0000                  		bsr.w	ScrollBlock1
00007F30 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F36 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F3A 323C 00DF                  		move.w	#$DF,d1
00007F3E 3038 F700                  		move.w	($FFFFF700).w,d0
00007F42 4440                       		neg.w	d0
00007F44 4840                       		swap	d0
00007F46 3038 F708                  		move.w	($FFFFF708).w,d0
00007F4A 4440                       		neg.w	d0
00007F4C                            
00007F4C                            loc_653C:
00007F4C 22C0                       		move.l	d0,(a1)+
00007F4E 51C9 FFFC                  		dbf	d1,loc_653C
00007F52 4E75                       		rts	
00007F54                            ; End of function Deform_SYZ
00007F54                            
00007F54                            ; ---------------------------------------------------------------------------
00007F54                            ; Scrap	Brain Zone background layer deformation	code
00007F54                            ; ---------------------------------------------------------------------------
00007F54                            
00007F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F54                            
00007F54                            
00007F54                            Deform_SBZ:				; XREF: Deform_Index
00007F54 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F58 48C4                       		ext.l	d4
00007F5A ED84                       		asl.l	#6,d4
00007F5C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F60 48C5                       		ext.l	d5
00007F62 E985                       		asl.l	#4,d5
00007F64 E385                       		asl.l	#1,d5
00007F66 6100 0000                  		bsr.w	ScrollBlock1
00007F6A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F70 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F74 323C 00DF                  		move.w	#$DF,d1
00007F78 3038 F700                  		move.w	($FFFFF700).w,d0
00007F7C 4440                       		neg.w	d0
00007F7E 4840                       		swap	d0
00007F80 3038 F708                  		move.w	($FFFFF708).w,d0
00007F84 4440                       		neg.w	d0
00007F86                            
00007F86                            loc_6576:
00007F86 22C0                       		move.l	d0,(a1)+
00007F88 51C9 FFFC                  		dbf	d1,loc_6576
00007F8C 4E75                       		rts	
00007F8E                            ; End of function Deform_SBZ
00007F8E                            
00007F8E                            ; ---------------------------------------------------------------------------
00007F8E                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007F8E                            ; ---------------------------------------------------------------------------
00007F8E                            
00007F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F8E                            
00007F8E                            
00007F8E                            ScrollHoriz:				; XREF: DeformBgLayer
00007F8E 3838 F700                  		move.w	($FFFFF700).w,d4
00007F92 6100                       		bsr.s	ScrollHoriz2
00007F94 3038 F700                  		move.w	($FFFFF700).w,d0
00007F98 0240 0010                  		andi.w	#$10,d0
00007F9C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007FA0 B300                       		eor.b	d1,d0
00007FA2 6600                       		bne.s	locret_65B0
00007FA4 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007FAA 3038 F700                  		move.w	($FFFFF700).w,d0
00007FAE 9044                       		sub.w	d4,d0
00007FB0 6A00                       		bpl.s	loc_65AA
00007FB2 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007FB8 4E75                       		rts	
00007FBA                            ; ===========================================================================
00007FBA                            
00007FBA                            loc_65AA:
00007FBA 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007FC0                            
00007FC0                            locret_65B0:
00007FC0 4E75                       		rts	
00007FC2                            ; End of function ScrollHoriz
00007FC2                            
00007FC2                            
00007FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC2                            
00007FC2                            
00007FC2                            ScrollHoriz2:				; XREF: ScrollHoriz
00007FC2 3038 D008                  		move.w	($FFFFD008).w,d0
00007FC6 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FCA 0440 0090                  		subi.w	#$90,d0
00007FCE 6500                       		bcs.s	loc_65F6
00007FD0 0440 0010                  		subi.w	#$10,d0
00007FD4 6400                       		bcc.s	loc_65CC
00007FD6 4278 F73A                  		clr.w	($FFFFF73A).w
00007FDA 4E75                       		rts	
00007FDC                            ; ===========================================================================
00007FDC                            
00007FDC                            loc_65CC:
00007FDC 0C40 0010                  		cmpi.w	#$10,d0
00007FE0 6500                       		bcs.s	loc_65D6
00007FE2 303C 0010                  		move.w	#$10,d0
00007FE6                            
00007FE6                            loc_65D6:
00007FE6 D078 F700                  		add.w	($FFFFF700).w,d0
00007FEA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007FEE 6D00                       		blt.s	loc_65E4
00007FF0 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007FF4                            
00007FF4                            loc_65E4:
00007FF4 3200                       		move.w	d0,d1
00007FF6 9278 F700                  		sub.w	($FFFFF700).w,d1
00007FFA E141                       		asl.w	#8,d1
00007FFC 31C0 F700                  		move.w	d0,($FFFFF700).w
00008000 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00008004 4E75                       		rts	
00008006                            ; ===========================================================================
00008006                            
00008006                            loc_65F6:				; XREF: ScrollHoriz2
00008006 D078 F700                  		add.w	($FFFFF700).w,d0
0000800A B078 F728                  		cmp.w	($FFFFF728).w,d0
0000800E 6EE4                       		bgt.s	loc_65E4
00008010 3038 F728                  		move.w	($FFFFF728).w,d0
00008014 60DE                       		bra.s	loc_65E4
00008016                            ; End of function ScrollHoriz2
00008016                            
00008016                            ; ===========================================================================
00008016 4A40                       		tst.w	d0
00008018 6A00                       		bpl.s	loc_6610
0000801A 303C FFFE                  		move.w	#-2,d0
0000801E 60E6                       		bra.s	loc_65F6
00008020                            ; ===========================================================================
00008020                            
00008020                            loc_6610:
00008020 303C 0002                  		move.w	#2,d0
00008024 60B6                       		bra.s	loc_65CC
00008026                            
00008026                            ; ---------------------------------------------------------------------------
00008026                            ; Subroutine to	scroll the level vertically as Sonic moves
00008026                            ; ---------------------------------------------------------------------------
00008026                            
00008026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008026                            
00008026                            
00008026                            ScrollVertical:				; XREF: DeformBgLayer
00008026 7200                       		moveq	#0,d1
00008028 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000802C 9078 F704                  		sub.w	($FFFFF704).w,d0
00008030 0838 0002 D022             		btst	#2,($FFFFD022).w
00008036 6700                       		beq.s	loc_662A
00008038 5B40                       		subq.w	#5,d0
0000803A                            
0000803A                            loc_662A:
0000803A 0838 0001 D022             		btst	#1,($FFFFD022).w
00008040 6700                       		beq.s	loc_664A
00008042 0640 0020                  		addi.w	#$20,d0
00008046 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000804A 6500                       		bcs.s	loc_6696
0000804C 0440 0040                  		subi.w	#$40,d0
00008050 6400                       		bcc.s	loc_6696
00008052 4A38 F75C                  		tst.b	($FFFFF75C).w
00008056 6600                       		bne.s	loc_66A8
00008058 6000                       		bra.s	loc_6656
0000805A                            ; ===========================================================================
0000805A                            
0000805A                            loc_664A:
0000805A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000805E 6600                       		bne.s	loc_665C
00008060 4A38 F75C                  		tst.b	($FFFFF75C).w
00008064 6600                       		bne.s	loc_66A8
00008066                            
00008066                            loc_6656:
00008066 4278 F73C                  		clr.w	($FFFFF73C).w
0000806A 4E75                       		rts	
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            loc_665C:
0000806C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00008072 6600                       		bne.s	loc_6684
00008074 3238 D014                  		move.w	($FFFFD014).w,d1
00008078 6A00                       		bpl.s	loc_666C
0000807A 4441                       		neg.w	d1
0000807C                            
0000807C                            loc_666C:
0000807C 0C41 0800                  		cmpi.w	#$800,d1
00008080 6400                       		bcc.s	loc_6696
00008082 323C 0600                  		move.w	#$600,d1
00008086 0C40 0006                  		cmpi.w	#6,d0
0000808A 6E00                       		bgt.s	loc_66F6
0000808C 0C40 FFFA                  		cmpi.w	#-6,d0
00008090 6D00                       		blt.s	loc_66C0
00008092 6000                       		bra.s	loc_66AE
00008094                            ; ===========================================================================
00008094                            
00008094                            loc_6684:
00008094 323C 0200                  		move.w	#$200,d1
00008098 0C40 0002                  		cmpi.w	#2,d0
0000809C 6E00                       		bgt.s	loc_66F6
0000809E 0C40 FFFE                  		cmpi.w	#-2,d0
000080A2 6D00                       		blt.s	loc_66C0
000080A4 6000                       		bra.s	loc_66AE
000080A6                            ; ===========================================================================
000080A6                            
000080A6                            loc_6696:
000080A6 323C 1000                  		move.w	#$1000,d1
000080AA 0C40 0010                  		cmpi.w	#$10,d0
000080AE 6E00                       		bgt.s	loc_66F6
000080B0 0C40 FFF0                  		cmpi.w	#-$10,d0
000080B4 6D00                       		blt.s	loc_66C0
000080B6 6000                       		bra.s	loc_66AE
000080B8                            ; ===========================================================================
000080B8                            
000080B8                            loc_66A8:
000080B8 7000                       		moveq	#0,d0
000080BA 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000080BE                            
000080BE                            loc_66AE:
000080BE 7200                       		moveq	#0,d1
000080C0 3200                       		move.w	d0,d1
000080C2 D278 F704                  		add.w	($FFFFF704).w,d1
000080C6 4A40                       		tst.w	d0
000080C8 6A00 0000                  		bpl.w	loc_6700
000080CC 6000 0000                  		bra.w	loc_66CC
000080D0                            ; ===========================================================================
000080D0                            
000080D0                            loc_66C0:
000080D0 4441                       		neg.w	d1
000080D2 48C1                       		ext.l	d1
000080D4 E181                       		asl.l	#8,d1
000080D6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000080DA 4841                       		swap	d1
000080DC                            
000080DC                            loc_66CC:
000080DC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000080E0 6E00                       		bgt.s	loc_6724
000080E2 0C41 FF00                  		cmpi.w	#-$100,d1
000080E6 6E00                       		bgt.s	loc_66F0
000080E8 0241 07FF                  		andi.w	#$7FF,d1
000080EC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000080F2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000080F8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000080FE 6000                       		bra.s	loc_6724
00008100                            ; ===========================================================================
00008100                            
00008100                            loc_66F0:
00008100 3238 F72C                  		move.w	($FFFFF72C).w,d1
00008104 6000                       		bra.s	loc_6724
00008106                            ; ===========================================================================
00008106                            
00008106                            loc_66F6:
00008106 48C1                       		ext.l	d1
00008108 E181                       		asl.l	#8,d1
0000810A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000810E 4841                       		swap	d1
00008110                            
00008110                            loc_6700:
00008110 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00008114 6D00                       		blt.s	loc_6724
00008116 0441 0800                  		subi.w	#$800,d1
0000811A 6500                       		bcs.s	loc_6720
0000811C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00008122 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00008128 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000812E 6000                       		bra.s	loc_6724
00008130                            ; ===========================================================================
00008130                            
00008130                            loc_6720:
00008130 3238 F72E                  		move.w	($FFFFF72E).w,d1
00008134                            
00008134                            loc_6724:
00008134 3838 F704                  		move.w	($FFFFF704).w,d4
00008138 4841                       		swap	d1
0000813A 2601                       		move.l	d1,d3
0000813C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00008140 E09B                       		ror.l	#8,d3
00008142 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00008146 21C1 F704                  		move.l	d1,($FFFFF704).w
0000814A 3038 F704                  		move.w	($FFFFF704).w,d0
0000814E 0240 0010                  		andi.w	#$10,d0
00008152 1238 F74B                  		move.b	($FFFFF74B).w,d1
00008156 B300                       		eor.b	d1,d0
00008158 6600                       		bne.s	locret_6766
0000815A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00008160 3038 F704                  		move.w	($FFFFF704).w,d0
00008164 9044                       		sub.w	d4,d0
00008166 6A00                       		bpl.s	loc_6760
00008168 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000816E 4E75                       		rts	
00008170                            ; ===========================================================================
00008170                            
00008170                            loc_6760:
00008170 08F8 0001 F754             		bset	#1,($FFFFF754).w
00008176                            
00008176                            locret_6766:
00008176 4E75                       		rts	
00008178                            ; End of function ScrollVertical
00008178                            
00008178                            
00008178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008178                            
00008178                            
00008178                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00008178 2438 F708                  		move.l	($FFFFF708).w,d2
0000817C 2002                       		move.l	d2,d0
0000817E D084                       		add.l	d4,d0
00008180 21C0 F708                  		move.l	d0,($FFFFF708).w
00008184 2200                       		move.l	d0,d1
00008186 4841                       		swap	d1
00008188 0241 0010                  		andi.w	#$10,d1
0000818C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00008190 B701                       		eor.b	d3,d1
00008192 6600                       		bne.s	loc_679C
00008194 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000819A 9082                       		sub.l	d2,d0
0000819C 6A00                       		bpl.s	loc_6796
0000819E 08F8 0002 F756             		bset	#2,($FFFFF756).w
000081A4 6000                       		bra.s	loc_679C
000081A6                            ; ===========================================================================
000081A6                            
000081A6                            loc_6796:
000081A6 08F8 0003 F756             		bset	#3,($FFFFF756).w
000081AC                            
000081AC                            loc_679C:
000081AC 2638 F70C                  		move.l	($FFFFF70C).w,d3
000081B0 2003                       		move.l	d3,d0
000081B2 D085                       		add.l	d5,d0
000081B4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000081B8 2200                       		move.l	d0,d1
000081BA 4841                       		swap	d1
000081BC 0241 0010                  		andi.w	#$10,d1
000081C0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000081C4 B501                       		eor.b	d2,d1
000081C6 6600                       		bne.s	locret_67D0
000081C8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000081CE 9083                       		sub.l	d3,d0
000081D0 6A00                       		bpl.s	loc_67CA
000081D2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000081D8 4E75                       		rts	
000081DA                            ; ===========================================================================
000081DA                            
000081DA                            loc_67CA:
000081DA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000081E0                            
000081E0                            locret_67D0:
000081E0 4E75                       		rts	
000081E2                            ; End of function ScrollBlock1
000081E2                            
000081E2                            
000081E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081E2                            
000081E2                            
000081E2                            ScrollBlock2:				; XREF: Deform_SLZ
000081E2 2438 F708                  		move.l	($FFFFF708).w,d2
000081E6 2002                       		move.l	d2,d0
000081E8 D084                       		add.l	d4,d0
000081EA 21C0 F708                  		move.l	d0,($FFFFF708).w
000081EE 2638 F70C                  		move.l	($FFFFF70C).w,d3
000081F2 2003                       		move.l	d3,d0
000081F4 D085                       		add.l	d5,d0
000081F6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000081FA 2200                       		move.l	d0,d1
000081FC 4841                       		swap	d1
000081FE 0241 0010                  		andi.w	#$10,d1
00008202 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008206 B501                       		eor.b	d2,d1
00008208 6600                       		bne.s	locret_6812
0000820A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00008210 9083                       		sub.l	d3,d0
00008212 6A00                       		bpl.s	loc_680C
00008214 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000821A 4E75                       		rts	
0000821C                            ; ===========================================================================
0000821C                            
0000821C                            loc_680C:
0000821C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008222                            
00008222                            locret_6812:
00008222 4E75                       		rts	
00008224                            ; End of function ScrollBlock2
00008224                            
00008224                            
00008224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008224                            
00008224                            
00008224                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00008224 3638 F70C                  		move.w	($FFFFF70C).w,d3
00008228 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000822C 3200                       		move.w	d0,d1
0000822E 0241 0010                  		andi.w	#$10,d1
00008232 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008236 B501                       		eor.b	d2,d1
00008238 6600                       		bne.s	locret_6842
0000823A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00008240 9043                       		sub.w	d3,d0
00008242 6A00                       		bpl.s	loc_683C
00008244 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000824A 4E75                       		rts	
0000824C                            ; ===========================================================================
0000824C                            
0000824C                            loc_683C:
0000824C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008252                            
00008252                            locret_6842:
00008252 4E75                       		rts	
00008254                            ; End of function ScrollBlock3
00008254                            
00008254                            
00008254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008254                            
00008254                            
00008254                            ScrollBlock4:				; XREF: Deform_GHZ
00008254 3438 F710                  		move.w	($FFFFF710).w,d2
00008258 3638 F714                  		move.w	($FFFFF714).w,d3
0000825C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00008260 48C0                       		ext.l	d0
00008262 EF80                       		asl.l	#7,d0
00008264 D1B8 F710                  		add.l	d0,($FFFFF710).w
00008268 3038 F710                  		move.w	($FFFFF710).w,d0
0000826C 0240 0010                  		andi.w	#$10,d0
00008270 1238 F74E                  		move.b	($FFFFF74E).w,d1
00008274 B300                       		eor.b	d1,d0
00008276 6600                       		bne.s	locret_6884
00008278 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000827E 3038 F710                  		move.w	($FFFFF710).w,d0
00008282 9042                       		sub.w	d2,d0
00008284 6A00                       		bpl.s	loc_687E
00008286 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000828C 6000                       		bra.s	locret_6884
0000828E                            ; ===========================================================================
0000828E                            
0000828E                            loc_687E:
0000828E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00008294                            
00008294                            locret_6884:
00008294 4E75                       		rts	
00008296                            ; End of function ScrollBlock4
00008296                            
00008296                            
00008296                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008296                            
00008296                            
00008296                            sub_6886:				; XREF: VBlank_Sub04
00008296 4BF9 00C0 0004             		lea	($C00004).l,a5
0000829C 4DF9 00C0 0000             		lea	($C00000).l,a6
000082A2 45F8 F756                  		lea	($FFFFF756).w,a2
000082A6 47F8 F708                  		lea	($FFFFF708).w,a3
000082AA 49F8 A440                  		lea	($FFFFA440).w,a4
000082AE 343C 6000                  		move.w	#$6000,d2
000082B2 6100 0000                  		bsr.w	sub_6954
000082B6 45F8 F758                  		lea	($FFFFF758).w,a2
000082BA 47F8 F710                  		lea	($FFFFF710).w,a3
000082BE 6000 0000                  		bra.w	sub_69F4
000082C2                            ; End of function sub_6886
000082C2                            
000082C2                            ; ---------------------------------------------------------------------------
000082C2                            ; Subroutine to	display	correct	tiles as you move
000082C2                            ; ---------------------------------------------------------------------------
000082C2                            
000082C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C2                            
000082C2                            
000082C2                            LoadTilesAsYouMove:			; XREF: Demo_Time
000082C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000082C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000082CE 45F8 FF32                  		lea	($FFFFFF32).w,a2
000082D2 47F8 FF18                  		lea	($FFFFFF18).w,a3
000082D6 49F8 A440                  		lea	($FFFFA440).w,a4
000082DA 343C 6000                  		move.w	#$6000,d2
000082DE 6100 0000                  		bsr.w	sub_6954
000082E2 45F8 FF34                  		lea	($FFFFFF34).w,a2
000082E6 47F8 FF20                  		lea	($FFFFFF20).w,a3
000082EA 6100 0000                  		bsr.w	sub_69F4
000082EE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000082F2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000082F6 49F8 A400                  		lea	($FFFFA400).w,a4
000082FA 343C 4000                  		move.w	#$4000,d2
000082FE 4A12                       		tst.b	(a2)
00008300 6700                       		beq.s	locret_6952
00008302 0892 0000                  		bclr	#0,(a2)
00008306 6700                       		beq.s	loc_6908
00008308 78F0                       		moveq	#-$10,d4
0000830A 7AF0                       		moveq	#-$10,d5
0000830C 6100 0000                  		bsr.w	sub_6C20
00008310 78F0                       		moveq	#-$10,d4
00008312 7AF0                       		moveq	#-$10,d5
00008314 6100 0000                  		bsr.w	sub_6AD8
00008318                            
00008318                            loc_6908:
00008318 0892 0001                  		bclr	#1,(a2)
0000831C 6700                       		beq.s	loc_6922
0000831E 383C 00E0                  		move.w	#$E0,d4
00008322 7AF0                       		moveq	#-$10,d5
00008324 6100 0000                  		bsr.w	sub_6C20
00008328 383C 00E0                  		move.w	#$E0,d4
0000832C 7AF0                       		moveq	#-$10,d5
0000832E 6100 0000                  		bsr.w	sub_6AD8
00008332                            
00008332                            loc_6922:
00008332 0892 0002                  		bclr	#2,(a2)
00008336 6700                       		beq.s	loc_6938
00008338 78F0                       		moveq	#-$10,d4
0000833A 7AF0                       		moveq	#-$10,d5
0000833C 6100 0000                  		bsr.w	sub_6C20
00008340 78F0                       		moveq	#-$10,d4
00008342 7AF0                       		moveq	#-$10,d5
00008344 6100 0000                  		bsr.w	sub_6B04
00008348                            
00008348                            loc_6938:
00008348 0892 0003                  		bclr	#3,(a2)
0000834C 6700                       		beq.s	locret_6952
0000834E 78F0                       		moveq	#-$10,d4
00008350 3A3C 0140                  		move.w	#$140,d5
00008354 6100 0000                  		bsr.w	sub_6C20
00008358 78F0                       		moveq	#-$10,d4
0000835A 3A3C 0140                  		move.w	#$140,d5
0000835E 6100 0000                  		bsr.w	sub_6B04
00008362                            
00008362                            locret_6952:
00008362 4E75                       		rts	
00008364                            ; End of function LoadTilesAsYouMove
00008364                            
00008364                            
00008364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008364                            
00008364                            
00008364                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00008364 4A12                       		tst.b	(a2)
00008366 6700 0000                  		beq.w	locret_69F2
0000836A 0892 0000                  		bclr	#0,(a2)
0000836E 6700                       		beq.s	loc_6972
00008370 78F0                       		moveq	#-$10,d4
00008372 7AF0                       		moveq	#-$10,d5
00008374 6100 0000                  		bsr.w	sub_6C20
00008378 78F0                       		moveq	#-$10,d4
0000837A 7AF0                       		moveq	#-$10,d5
0000837C 7C1F                       		moveq	#$1F,d6
0000837E 6100 0000                  		bsr.w	sub_6ADA
00008382                            
00008382                            loc_6972:
00008382 0892 0001                  		bclr	#1,(a2)
00008386 6700                       		beq.s	loc_698E
00008388 383C 00E0                  		move.w	#$E0,d4
0000838C 7AF0                       		moveq	#-$10,d5
0000838E 6100 0000                  		bsr.w	sub_6C20
00008392 383C 00E0                  		move.w	#$E0,d4
00008396 7AF0                       		moveq	#-$10,d5
00008398 7C1F                       		moveq	#$1F,d6
0000839A 6100 0000                  		bsr.w	sub_6ADA
0000839E                            
0000839E                            loc_698E:
0000839E 0892 0002                  		bclr	#2,(a2)
000083A2 6700                       		beq.s	loc_69BE
000083A4 78F0                       		moveq	#-$10,d4
000083A6 7AF0                       		moveq	#-$10,d5
000083A8 6100 0000                  		bsr.w	sub_6C20
000083AC 78F0                       		moveq	#-$10,d4
000083AE 7AF0                       		moveq	#-$10,d5
000083B0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000083B4 322B 0004                  		move.w	4(a3),d1
000083B8 0241 FFF0                  		andi.w	#-$10,d1
000083BC 9C41                       		sub.w	d1,d6
000083BE 6D00                       		blt.s	loc_69BE
000083C0 E84E                       		lsr.w	#4,d6
000083C2 0C46 000F                  		cmpi.w	#$F,d6
000083C6 6500                       		bcs.s	loc_69BA
000083C8 7C0F                       		moveq	#$F,d6
000083CA                            
000083CA                            loc_69BA:
000083CA 6100 0000                  		bsr.w	sub_6B06
000083CE                            
000083CE                            loc_69BE:
000083CE 0892 0003                  		bclr	#3,(a2)
000083D2 6700                       		beq.s	locret_69F2
000083D4 78F0                       		moveq	#-$10,d4
000083D6 3A3C 0140                  		move.w	#$140,d5
000083DA 6100 0000                  		bsr.w	sub_6C20
000083DE 78F0                       		moveq	#-$10,d4
000083E0 3A3C 0140                  		move.w	#$140,d5
000083E4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000083E8 322B 0004                  		move.w	4(a3),d1
000083EC 0241 FFF0                  		andi.w	#-$10,d1
000083F0 9C41                       		sub.w	d1,d6
000083F2 6D00                       		blt.s	locret_69F2
000083F4 E84E                       		lsr.w	#4,d6
000083F6 0C46 000F                  		cmpi.w	#$F,d6
000083FA 6500                       		bcs.s	loc_69EE
000083FC 7C0F                       		moveq	#$F,d6
000083FE                            
000083FE                            loc_69EE:
000083FE 6100 0000                  		bsr.w	sub_6B06
00008402                            
00008402                            locret_69F2:
00008402 4E75                       		rts	
00008404                            ; End of function sub_6954
00008404                            
00008404                            
00008404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008404                            
00008404                            
00008404                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00008404 4A12                       		tst.b	(a2)
00008406 6700 0000                  		beq.w	locret_6A80
0000840A 0892 0002                  		bclr	#2,(a2)
0000840E 6700                       		beq.s	loc_6A3E
00008410 0C53 0010                  		cmpi.w	#$10,(a3)
00008414 6500                       		bcs.s	loc_6A3E
00008416 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000841A 322B 0004                  		move.w	4(a3),d1
0000841E 0241 FFF0                  		andi.w	#-$10,d1
00008422 9841                       		sub.w	d1,d4
00008424 3F04                       		move.w	d4,-(sp)
00008426 7AF0                       		moveq	#-$10,d5
00008428 6100 0000                  		bsr.w	sub_6C20
0000842C 381F                       		move.w	(sp)+,d4
0000842E 7AF0                       		moveq	#-$10,d5
00008430 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008434 322B 0004                  		move.w	4(a3),d1
00008438 0241 FFF0                  		andi.w	#-$10,d1
0000843C 9C41                       		sub.w	d1,d6
0000843E 6D00                       		blt.s	loc_6A3E
00008440 E84E                       		lsr.w	#4,d6
00008442 0446 000E                  		subi.w	#$E,d6
00008446 6400                       		bcc.s	loc_6A3E
00008448 4446                       		neg.w	d6
0000844A 6100 0000                  		bsr.w	sub_6B06
0000844E                            
0000844E                            loc_6A3E:
0000844E 0892 0003                  		bclr	#3,(a2)
00008452 6700                       		beq.s	locret_6A80
00008454 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008458 322B 0004                  		move.w	4(a3),d1
0000845C 0241 FFF0                  		andi.w	#-$10,d1
00008460 9841                       		sub.w	d1,d4
00008462 3F04                       		move.w	d4,-(sp)
00008464 3A3C 0140                  		move.w	#$140,d5
00008468 6100 0000                  		bsr.w	sub_6C20
0000846C 381F                       		move.w	(sp)+,d4
0000846E 3A3C 0140                  		move.w	#$140,d5
00008472 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008476 322B 0004                  		move.w	4(a3),d1
0000847A 0241 FFF0                  		andi.w	#-$10,d1
0000847E 9C41                       		sub.w	d1,d6
00008480 6D00                       		blt.s	locret_6A80
00008482 E84E                       		lsr.w	#4,d6
00008484 0446 000E                  		subi.w	#$E,d6
00008488 6400                       		bcc.s	locret_6A80
0000848A 4446                       		neg.w	d6
0000848C 6100 0000                  		bsr.w	sub_6B06
00008490                            
00008490                            locret_6A80:
00008490 4E75                       		rts	
00008492                            ; End of function sub_69F4
00008492                            
00008492                            ; ===========================================================================
00008492 4A12                       		tst.b	(a2)
00008494 6700                       		beq.s	locret_6AD6
00008496 0892 0002                  		bclr	#2,(a2)
0000849A 6700                       		beq.s	loc_6AAC
0000849C 383C 00D0                  		move.w	#$D0,d4
000084A0 322B 0004                  		move.w	4(a3),d1
000084A4 0241 FFF0                  		andi.w	#-$10,d1
000084A8 9841                       		sub.w	d1,d4
000084AA 3F04                       		move.w	d4,-(sp)
000084AC 7AF0                       		moveq	#-$10,d5
000084AE 6100 0000                  		bsr.w	sub_6C3C
000084B2 381F                       		move.w	(sp)+,d4
000084B4 7AF0                       		moveq	#-$10,d5
000084B6 7C02                       		moveq	#2,d6
000084B8 6100 0000                  		bsr.w	sub_6B06
000084BC                            
000084BC                            loc_6AAC:
000084BC 0892 0003                  		bclr	#3,(a2)
000084C0 6700                       		beq.s	locret_6AD6
000084C2 383C 00D0                  		move.w	#$D0,d4
000084C6 322B 0004                  		move.w	4(a3),d1
000084CA 0241 FFF0                  		andi.w	#-$10,d1
000084CE 9841                       		sub.w	d1,d4
000084D0 3F04                       		move.w	d4,-(sp)
000084D2 3A3C 0140                  		move.w	#$140,d5
000084D6 6100 0000                  		bsr.w	sub_6C3C
000084DA 381F                       		move.w	(sp)+,d4
000084DC 3A3C 0140                  		move.w	#$140,d5
000084E0 7C02                       		moveq	#2,d6
000084E2 6100 0000                  		bsr.w	sub_6B06
000084E6                            
000084E6                            locret_6AD6:
000084E6 4E75                       		rts	
000084E8                            
000084E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084E8                            
000084E8                            
000084E8                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000084E8 7C15                       		moveq	#$15,d6
000084EA                            ; End of function sub_6AD8
000084EA                            
000084EA                            
000084EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084EA                            
000084EA                            
000084EA                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000084EA 2E3C 0080 0000             		move.l	#$800000,d7
000084F0 2200                       		move.l	d0,d1
000084F2                            
000084F2                            loc_6AE2:
000084F2 48E7 0C00                  		movem.l	d4-d5,-(sp)
000084F6 6100 0000                  		bsr.w	sub_6BD6
000084FA 2001                       		move.l	d1,d0
000084FC 6100 0000                  		bsr.w	sub_6B32
00008500 5801                       		addq.b	#4,d1
00008502 0201 007F                  		andi.b	#$7F,d1
00008506 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000850A 0645 0010                  		addi.w	#$10,d5
0000850E 51CE FFE2                  		dbf	d6,loc_6AE2
00008512 4E75                       		rts	
00008514                            ; End of function sub_6ADA
00008514                            
00008514                            
00008514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008514                            
00008514                            
00008514                            sub_6B04:				; XREF: LoadTilesAsYouMove
00008514 7C0F                       		moveq	#$F,d6
00008516                            ; End of function sub_6B04
00008516                            
00008516                            
00008516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008516                            
00008516                            
00008516                            sub_6B06:				; XREF: sub_6954
00008516 2E3C 0080 0000             		move.l	#$800000,d7
0000851C 2200                       		move.l	d0,d1
0000851E                            
0000851E                            loc_6B0E:
0000851E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008522 6100 0000                  		bsr.w	sub_6BD6
00008526 2001                       		move.l	d1,d0
00008528 6100 0000                  		bsr.w	sub_6B32
0000852C 0641 0100                  		addi.w	#$100,d1
00008530 0241 0FFF                  		andi.w	#$FFF,d1
00008534 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008538 0644 0010                  		addi.w	#$10,d4
0000853C 51CE FFE0                  		dbf	d6,loc_6B0E
00008540 4E75                       		rts	
00008542                            ; End of function sub_6B06
00008542                            
00008542                            
00008542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008542                            
00008542                            
00008542                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00008542 8042                       		or.w	d2,d0
00008544 4840                       		swap	d0
00008546 0810 0004                  		btst	#4,(a0)
0000854A 6600                       		bne.s	loc_6B6E
0000854C 0810 0003                  		btst	#3,(a0)
00008550 6600                       		bne.s	loc_6B4E
00008552 2A80                       		move.l	d0,(a5)
00008554 2C99                       		move.l	(a1)+,(a6)
00008556 D087                       		add.l	d7,d0
00008558 2A80                       		move.l	d0,(a5)
0000855A 2C99                       		move.l	(a1)+,(a6)
0000855C 4E75                       		rts	
0000855E                            ; ===========================================================================
0000855E                            
0000855E                            loc_6B4E:
0000855E 2A80                       		move.l	d0,(a5)
00008560 2819                       		move.l	(a1)+,d4
00008562 0A84 0800 0800             		eori.l	#$8000800,d4
00008568 4844                       		swap	d4
0000856A 2C84                       		move.l	d4,(a6)
0000856C D087                       		add.l	d7,d0
0000856E 2A80                       		move.l	d0,(a5)
00008570 2819                       		move.l	(a1)+,d4
00008572 0A84 0800 0800             		eori.l	#$8000800,d4
00008578 4844                       		swap	d4
0000857A 2C84                       		move.l	d4,(a6)
0000857C 4E75                       		rts	
0000857E                            ; ===========================================================================
0000857E                            
0000857E                            loc_6B6E:
0000857E 0810 0003                  		btst	#3,(a0)
00008582 6600                       		bne.s	loc_6B90
00008584 2A80                       		move.l	d0,(a5)
00008586 2A19                       		move.l	(a1)+,d5
00008588 2819                       		move.l	(a1)+,d4
0000858A 0A84 1000 1000             		eori.l	#$10001000,d4
00008590 2C84                       		move.l	d4,(a6)
00008592 D087                       		add.l	d7,d0
00008594 2A80                       		move.l	d0,(a5)
00008596 0A85 1000 1000             		eori.l	#$10001000,d5
0000859C 2C85                       		move.l	d5,(a6)
0000859E 4E75                       		rts	
000085A0                            ; ===========================================================================
000085A0                            
000085A0                            loc_6B90:
000085A0 2A80                       		move.l	d0,(a5)
000085A2 2A19                       		move.l	(a1)+,d5
000085A4 2819                       		move.l	(a1)+,d4
000085A6 0A84 1800 1800             		eori.l	#$18001800,d4
000085AC 4844                       		swap	d4
000085AE 2C84                       		move.l	d4,(a6)
000085B0 D087                       		add.l	d7,d0
000085B2 2A80                       		move.l	d0,(a5)
000085B4 0A85 1800 1800             		eori.l	#$18001800,d5
000085BA 4845                       		swap	d5
000085BC 2C85                       		move.l	d5,(a6)
000085BE 4E75                       		rts	
000085C0                            ; End of function sub_6B32
000085C0                            
000085C0                            ; ===========================================================================
000085C0 4E75                       		rts	
000085C2                            ; ===========================================================================
000085C2 2A80                       		move.l	d0,(a5)
000085C4 3A3C 2000                  		move.w	#$2000,d5
000085C8 3819                       		move.w	(a1)+,d4
000085CA D845                       		add.w	d5,d4
000085CC 3C84                       		move.w	d4,(a6)
000085CE 3819                       		move.w	(a1)+,d4
000085D0 D845                       		add.w	d5,d4
000085D2 3C84                       		move.w	d4,(a6)
000085D4 D087                       		add.l	d7,d0
000085D6 2A80                       		move.l	d0,(a5)
000085D8 3819                       		move.w	(a1)+,d4
000085DA D845                       		add.w	d5,d4
000085DC 3C84                       		move.w	d4,(a6)
000085DE 3819                       		move.w	(a1)+,d4
000085E0 D845                       		add.w	d5,d4
000085E2 3C84                       		move.w	d4,(a6)
000085E4 4E75                       		rts	
000085E6                            
000085E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E6                            
000085E6                            
000085E6                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000085E6 43F8 B000                  		lea	($FFFFB000).w,a1
000085EA D86B 0004                  		add.w	4(a3),d4
000085EE DA53                       		add.w	(a3),d5
000085F0 3604                       		move.w	d4,d3
000085F2 E24B                       		lsr.w	#1,d3
000085F4 0243 0380                  		andi.w	#$380,d3
000085F8 E64D                       		lsr.w	#3,d5
000085FA 3005                       		move.w	d5,d0
000085FC EA48                       		lsr.w	#5,d0
000085FE 0240 007F                  		andi.w	#$7F,d0
00008602 D043                       		add.w	d3,d0
00008604 76FF                       		moveq	#-1,d3
00008606 1634 0000                  		move.b	(a4,d0.w),d3
0000860A 6700                       		beq.s	locret_6C1E
0000860C 5303                       		subq.b	#1,d3
0000860E 0243 007F                  		andi.w	#$7F,d3
00008612 EE5B                       		ror.w	#7,d3
00008614 D844                       		add.w	d4,d4
00008616 0244 01E0                  		andi.w	#$1E0,d4
0000861A 0245 001E                  		andi.w	#$1E,d5
0000861E D644                       		add.w	d4,d3
00008620 D645                       		add.w	d5,d3
00008622 2043                       		movea.l	d3,a0
00008624 3610                       		move.w	(a0),d3
00008626 0243 03FF                  		andi.w	#$3FF,d3
0000862A E74B                       		lsl.w	#3,d3
0000862C D2C3                       		adda.w	d3,a1
0000862E                            
0000862E                            locret_6C1E:
0000862E 4E75                       		rts	
00008630                            ; End of function sub_6BD6
00008630                            
00008630                            
00008630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008630                            
00008630                            
00008630                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00008630 D86B 0004                  		add.w	4(a3),d4
00008634 DA53                       		add.w	(a3),d5
00008636 0244 00F0                  		andi.w	#$F0,d4
0000863A 0245 01F0                  		andi.w	#$1F0,d5
0000863E E94C                       		lsl.w	#4,d4
00008640 E44D                       		lsr.w	#2,d5
00008642 D845                       		add.w	d5,d4
00008644 7003                       		moveq	#3,d0
00008646 4840                       		swap	d0
00008648 3004                       		move.w	d4,d0
0000864A 4E75                       		rts	
0000864C                            ; End of function sub_6C20
0000864C                            
0000864C                            
0000864C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000864C                            ; not used
0000864C                            
0000864C                            
0000864C                            sub_6C3C:
0000864C D86B 0004                  		add.w	4(a3),d4
00008650 DA53                       		add.w	(a3),d5
00008652 0244 00F0                  		andi.w	#$F0,d4
00008656 0245 01F0                  		andi.w	#$1F0,d5
0000865A E94C                       		lsl.w	#4,d4
0000865C E44D                       		lsr.w	#2,d5
0000865E D845                       		add.w	d5,d4
00008660 7002                       		moveq	#2,d0
00008662 4840                       		swap	d0
00008664 3004                       		move.w	d4,d0
00008666 4E75                       		rts	
00008668                            ; End of function sub_6C3C
00008668                            
00008668                            ; ---------------------------------------------------------------------------
00008668                            ; Subroutine to	load tiles as soon as the level	appears
00008668                            ; ---------------------------------------------------------------------------
00008668                            
00008668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008668                            
00008668                            
00008668                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00008668 4BF9 00C0 0004             		lea	($C00004).l,a5
0000866E 4DF9 00C0 0000             		lea	($C00000).l,a6
00008674 47F8 F700                  		lea	($FFFFF700).w,a3
00008678 49F8 A400                  		lea	($FFFFA400).w,a4
0000867C 343C 4000                  		move.w	#$4000,d2
00008680 6100                       		bsr.s	LoadTilesFromStart2
00008682 47F8 F708                  		lea	($FFFFF708).w,a3
00008686 49F8 A440                  		lea	($FFFFA440).w,a4
0000868A 343C 6000                  		move.w	#$6000,d2
0000868E                            ; End of function LoadTilesFromStart
0000868E                            
0000868E                            
0000868E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000868E                            
0000868E                            
0000868E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000868E 78F0                       		moveq	#-$10,d4
00008690 7C0F                       		moveq	#$F,d6
00008692                            
00008692                            loc_6C82:
00008692 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008696 7A00                       		moveq	#0,d5
00008698 3204                       		move.w	d4,d1
0000869A 6100 FF94                  		bsr.w	sub_6C20
0000869E 3801                       		move.w	d1,d4
000086A0 7A00                       		moveq	#0,d5
000086A2 7C1F                       		moveq	#$1F,d6
000086A4 6100 FE44                  		bsr.w	sub_6ADA
000086A8 4CDF 0070                  		movem.l	(sp)+,d4-d6
000086AC 0644 0010                  		addi.w	#$10,d4
000086B0 51CE FFE0                  		dbf	d6,loc_6C82
000086B4 4E75                       		rts	
000086B6                            ; End of function LoadTilesFromStart2
000086B6                            
000086B6                            ; ---------------------------------------------------------------------------
000086B6                            ; Main Load Block loading subroutine
000086B6                            ; ---------------------------------------------------------------------------
000086B6                            
000086B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B6                            
000086B6                            
000086B6                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000086B6 7000                       		moveq	#0,d0
000086B8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000086BC E948                       		lsl.w	#4,d0
000086BE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000086C4 45F2 0000                  		lea	(a2,d0.w),a2
000086C8 2F0A                       		move.l	a2,-(sp)
000086CA 588A                       		addq.l	#4,a2
000086CC 205A                       		movea.l	(a2)+,a0
000086CE 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000086D2 303C 0000                  		move.w	#0,d0
000086D6 6100 9006                  		bsr.w	EniDec
000086DA 205A                       		movea.l	(a2)+,a0
000086DC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000086E2 6100 9178                  		bsr.w	KosDec
000086E6 6100 0000                  		bsr.w	LevelLayoutLoad
000086EA 301A                       		move.w	(a2)+,d0
000086EC 3012                       		move.w	(a2),d0
000086EE 0240 00FF                  		andi.w	#$FF,d0
000086F2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000086F8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000086FA 700C                       		moveq	#$C,d0		; use SB3 pallet
000086FC                            
000086FC                            MLB_ChkSBZPal:
000086FC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00008702 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00008704 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000870A 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000870C                            
0000870C                            MLB_UsePal0E:
0000870C 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000870E                            
0000870E                            MLB_NormalPal:
0000870E 6100 99C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00008712 245F                       		movea.l	(sp)+,a2
00008714 584A                       		addq.w	#4,a2
00008716 7000                       		moveq	#0,d0
00008718 1012                       		move.b	(a2),d0
0000871A 6700                       		beq.s	locret_6D10
0000871C 6100 8E18                  		bsr.w	LoadPLC		; load pattern load cues
00008720                            
00008720                            locret_6D10:
00008720 4E75                       		rts	
00008722                            ; End of function MainLoadBlockLoad
00008722                            
00008722                            ; ---------------------------------------------------------------------------
00008722                            ; Level	layout loading subroutine
00008722                            ; ---------------------------------------------------------------------------
00008722                            
00008722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008722                            
00008722                            
00008722                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00008722 47F8 A400                  		lea	($FFFFA400).w,a3
00008726 323C 01FF                  		move.w	#$1FF,d1
0000872A 7000                       		moveq	#0,d0
0000872C                            
0000872C                            LevLoad_ClrRam:
0000872C 26C0                       		move.l	d0,(a3)+
0000872E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00008732                            
00008732 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00008736 7200                       		moveq	#0,d1
00008738 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000873C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00008740 7202                       		moveq	#2,d1
00008742                            ; End of function LevelLayoutLoad
00008742                            
00008742                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008742                            
00008742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008742                            
00008742                            
00008742                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00008742 3038 FE10                  		move.w	($FFFFFE10).w,d0
00008746 ED08                       		lsl.b	#6,d0
00008748 EA48                       		lsr.w	#5,d0
0000874A 3400                       		move.w	d0,d2
0000874C D040                       		add.w	d0,d0
0000874E D042                       		add.w	d2,d0
00008750 D041                       		add.w	d1,d0
00008752 43F9 0000 0000             		lea	(Level_Index).l,a1
00008758 3031 0000                  		move.w	(a1,d0.w),d0
0000875C 43F1 0000                  		lea	(a1,d0.w),a1
00008760 7200                       		moveq	#0,d1
00008762 3401                       		move.w	d1,d2
00008764 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008766 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008768                            
00008768                            LevLoad_NumRows:
00008768 3001                       		move.w	d1,d0
0000876A 204B                       		movea.l	a3,a0
0000876C                            
0000876C                            LevLoad_Row:
0000876C 10D9                       		move.b	(a1)+,(a0)+
0000876E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008772 47EB 0080                  		lea	$80(a3),a3	; do next row
00008776 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000877A 4E75                       		rts	
0000877C                            ; End of function LevelLayoutLoad2
0000877C                            
0000877C                            ; ---------------------------------------------------------------------------
0000877C                            ; Dynamic screen resize	loading	subroutine
0000877C                            ; ---------------------------------------------------------------------------
0000877C                            
0000877C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000877C                            
0000877C                            
0000877C                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000877C 7000                       		moveq	#0,d0
0000877E 1038 FE10                  		move.b	($FFFFFE10).w,d0	; load zone id
00008782 D040                       		add.w	d0,d0			; double it
00008784 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00008788 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)	; run routine depending on current zone
0000878C 7202                       		moveq	#2,d1
0000878E 3038 F726                  		move.w	($FFFFF726).w,d0
00008792 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00008796 6700                       		beq.s	locret_6DAA
00008798 6400                       		bcc.s	loc_6DAC
0000879A 4441                       		neg.w	d1
0000879C 3038 F704                  		move.w	($FFFFF704).w,d0
000087A0 B078 F726                  		cmp.w	($FFFFF726).w,d0
000087A4 6300                       		bls.s	loc_6DA0
000087A6 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000087AA 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000087B0                            
000087B0                            loc_6DA0:
000087B0 D378 F72E                  		add.w	d1,($FFFFF72E).w
000087B4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087BA                            
000087BA                            locret_6DAA:
000087BA 4E75                       		rts	
000087BC                            ; ===========================================================================
000087BC                            
000087BC                            loc_6DAC:				; XREF: DynScrResizeLoad
000087BC 3038 F704                  		move.w	($FFFFF704).w,d0
000087C0 5040                       		addq.w	#8,d0
000087C2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000087C6 6500                       		bcs.s	loc_6DC4
000087C8 0838 0001 D022             		btst	#1,($FFFFD022).w
000087CE 6700                       		beq.s	loc_6DC4
000087D0 D241                       		add.w	d1,d1
000087D2 D241                       		add.w	d1,d1
000087D4                            
000087D4                            loc_6DC4:
000087D4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000087D8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087DE 4E75                       		rts	
000087E0                            ; End of function DynScrResizeLoad
000087E0                            
000087E0                            ; ===========================================================================
000087E0                            ; ---------------------------------------------------------------------------
000087E0                            ; Offset index for dynamic screen resizing
000087E0                            ; ---------------------------------------------------------------------------
000087E0 0000                       Resize_Index:	dc.w Resize_GHZ-Resize_Index
000087E2 0000                       		dc.w Resize_LZ-Resize_Index
000087E4 0000                       		dc.w Resize_MZ-Resize_Index
000087E6 0000                       		dc.w Resize_SLZ-Resize_Index
000087E8 0000                       		dc.w Resize_SYZ-Resize_Index
000087EA 0000                       		dc.w Resize_SBZ-Resize_Index
000087EC 0000                       		dc.w Resize_Ending-Resize_Index
000087EE                            
000087EE                            ; ===========================================================================
000087EE                            ; ---------------------------------------------------------------------------
000087EE                            ; Green	Hill Zone dynamic screen resizing
000087EE                            ; ---------------------------------------------------------------------------
000087EE                            
000087EE                            Resize_GHZ:				; XREF: Resize_Index
000087EE 7000                       		moveq	#0,d0
000087F0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000087F4 D040                       		add.w	d0,d0
000087F6 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000087FA 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000087FE                            ; ===========================================================================
000087FE 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00008800 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00008802 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00008804                            ; ===========================================================================
00008804                            
00008804                            Resize_GHZ1:
00008804 31FC 0300 F726             		move.w	#$300,($FFFFF726).w	; set lower y-boundary
0000880A 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w	; has the camera reached $1780 on x-axis?
00008810 6500                       		bcs.s	locret_6E08		; if not, branch
00008812 31FC 0400 F726             		move.w	#$400,($FFFFF726).w	; set lower y-boundary
00008818                            
00008818                            locret_6E08:
00008818 4E75                       		rts	
0000881A                            ; ===========================================================================
0000881A                            
0000881A                            Resize_GHZ2:
0000881A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008820 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00008826 6500                       		bcs.s	locret_6E3A
00008828 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000882E 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00008834 6500                       		bcs.s	locret_6E3A
00008836 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000883C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00008842 6500                       		bcs.s	locret_6E3A
00008844 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000884A                            
0000884A                            locret_6E3A:
0000884A 4E75                       		rts	
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            Resize_GHZ3:
0000884C 7000                       		moveq	#0,d0
0000884E 1038 F742                  		move.b	($FFFFF742).w,d0
00008852 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008856 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000885A                            ; ===========================================================================
0000885A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000885C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000885E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00008860                            ; ===========================================================================
00008860                            
00008860                            Resize_GHZ3main:
00008860 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008866 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000886C 6500                       		bcs.s	locret_6E96
0000886E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00008874 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000887A 6500                       		bcs.s	locret_6E96
0000887C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00008882 6500                       		bcs.s	loc_6E98
00008884 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000888A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00008890 6400                       		bcc.s	loc_6E8E
00008892 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00008898 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000889E                            
0000889E                            loc_6E8E:
0000889E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000088A4 6400                       		bcc.s	loc_6E98
000088A6                            
000088A6                            locret_6E96:
000088A6 4E75                       		rts	
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            loc_6E98:
000088A8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000088AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000088B2 4E75                       		rts	
000088B4                            ; ===========================================================================
000088B4                            
000088B4                            Resize_GHZ3boss:
000088B4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000088BA 6400                       		bcc.s	loc_6EB0
000088BC 5538 F742                  		subq.b	#2,($FFFFF742).w
000088C0                            
000088C0                            loc_6EB0:
000088C0 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000088C6 6500                       		bcs.s	locret_6EE8
000088C8 6100 0000                  		bsr.w	SingleObjLoad
000088CC 6600                       		bne.s	loc_6ED0
000088CE 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000088D2 337C 2A60 0008             		move.w	#$2A60,8(a1)	; X-position
000088D8 337C 0280 000C             		move.w	#$280,$C(a1)	; Y-position
000088DE                            
000088DE                            loc_6ED0:
000088DE 303C 009C                  		move.w	#$9C,d0
000088E2 6100 89DE                  		bsr.w	PlaySound	; play boss music
000088E6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000088EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000088F0 7011                       		moveq	#$11,d0
000088F2 6000 8C42                  		bra.w	LoadPLC		; load boss patterns
000088F6                            ; ===========================================================================
000088F6                            
000088F6                            locret_6EE8:
000088F6 4E75                       		rts	
000088F8                            ; ===========================================================================
000088F8                            
000088F8                            Resize_GHZ3end:
000088F8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000088FE 4E75                       		rts	
00008900                            ; ===========================================================================
00008900                            ; ---------------------------------------------------------------------------
00008900                            ; Labyrinth Zone dynamic screen	resizing
00008900                            ; ---------------------------------------------------------------------------
00008900                            
00008900                            Resize_LZ:				; XREF: Resize_Index
00008900 7000                       		moveq	#0,d0
00008902 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008906 D040                       		add.w	d0,d0
00008908 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000890C 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00008910                            ; ===========================================================================
00008910 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00008912 0000                       		dc.w Resize_LZ12-Resize_LZx
00008914 0000                       		dc.w Resize_LZ3-Resize_LZx
00008916 0000                       		dc.w Resize_SBZ3-Resize_LZx
00008918                            ; ===========================================================================
00008918                            
00008918                            Resize_LZ12:
00008918 4E75                       		rts	
0000891A                            ; ===========================================================================
0000891A                            
0000891A                            Resize_LZ3:
0000891A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000891E 6700                       		beq.s	loc_6F28	; if not, branch
00008920 43F8 A506                  		lea	($FFFFA506).w,a1
00008924 0C11 0007                  		cmpi.b	#7,(a1)
00008928 6700                       		beq.s	loc_6F28
0000892A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000892E 303C 00B7                  		move.w	#$B7,d0
00008932 6100 8994                  		bsr.w	PlaySound_Special ; play rumbling sound
00008936                            
00008936                            loc_6F28:
00008936 4A38 F742                  		tst.b	($FFFFF742).w
0000893A 6600                       		bne.s	locret_6F64
0000893C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00008942 6500                       		bcs.s	locret_6F62
00008944 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000894A 6400                       		bcc.s	locret_6F62
0000894C 6100 0000                  		bsr.w	SingleObjLoad
00008950 6600                       		bne.s	loc_6F4A
00008952 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00008956                            
00008956                            loc_6F4A:
00008956 303C 009C                  		move.w	#$9C,d0
0000895A 6100 8966                  		bsr.w	PlaySound	; play boss music
0000895E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008964 5438 F742                  		addq.b	#2,($FFFFF742).w
00008968 7011                       		moveq	#$11,d0
0000896A 6000 8BCA                  		bra.w	LoadPLC		; load boss patterns
0000896E                            ; ===========================================================================
0000896E                            
0000896E                            locret_6F62:
0000896E 4E75                       		rts	
00008970                            ; ===========================================================================
00008970                            
00008970                            locret_6F64:
00008970 4E75                       		rts	
00008972                            ; ===========================================================================
00008972                            
00008972                            ; Vladikcomper:	Some code was changed to fit level order.
00008972                            
00008972                            Resize_SBZ3:
00008972 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008978 6500                       		bcs.s	locret_6F8C
0000897A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w	; has Sonic reached the top of the level?
00008980 6400                       		bcc.s	locret_6F8C		; if not, branch
00008982 4238 FE30                  		clr.b	($FFFFFE30).w
00008986 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w	; freeze Sonic
0000898C 45F9 0000 0000             		lea	LevelOrder,a2		; load level order array
00008992 302A 000E                  		move.w	$E(a2),d0
00008996 6700                       		beq.s	@GotoSegaScreen
00008998 31C0 FE10                  		move.w	d0,($FFFFFE10).w	; set next level according level order
0000899C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; set restart level flag
000089A2 4E75                       		rts
000089A4                            
000089A4                            @GotoSegaScreen:
000089A4 11FC 0000 F600             		move.b	#0,($FFFFF600).w
000089AA                            
000089AA                            locret_6F8C:
000089AA 4E75                       		rts	
000089AC                            ; ===========================================================================
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            ; Marble Zone dynamic screen resizing
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            
000089AC                            Resize_MZ:				; XREF: Resize_Index
000089AC 7000                       		moveq	#0,d0
000089AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000089B2 D040                       		add.w	d0,d0
000089B4 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000089B8 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000089BC                            ; ===========================================================================
000089BC 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000089BE 0000                       		dc.w Resize_MZ2-Resize_MZx
000089C0 0000                       		dc.w Resize_MZ3-Resize_MZx
000089C2                            ; ===========================================================================
000089C2                            
000089C2                            Resize_MZ1:
000089C2 7000                       		moveq	#0,d0
000089C4 1038 F742                  		move.b	($FFFFF742).w,d0
000089C8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000089CC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000089D0                            ; ===========================================================================
000089D0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000089D2 0000                       		dc.w loc_6FEA-off_6FB2
000089D4 0000                       		dc.w loc_702E-off_6FB2
000089D6 0000                       		dc.w loc_7050-off_6FB2
000089D8                            ; ===========================================================================
000089D8                            
000089D8                            loc_6FBA:
000089D8 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000089DE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000089E4 6500                       		bcs.s	locret_6FE8
000089E6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000089EC 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000089F2 6500                       		bcs.s	locret_6FE8
000089F4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000089FA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008A00 6500                       		bcs.s	locret_6FE8
00008A02 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A06                            
00008A06                            locret_6FE8:
00008A06 4E75                       		rts	
00008A08                            ; ===========================================================================
00008A08                            
00008A08                            loc_6FEA:
00008A08 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008A0E 6400                       		bcc.s	loc_6FF8
00008A10 5538 F742                  		subq.b	#2,($FFFFF742).w
00008A14 4E75                       		rts	
00008A16                            ; ===========================================================================
00008A16                            
00008A16                            loc_6FF8:
00008A16 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008A1C 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008A22 6400                       		bcc.s	locret_702C
00008A24 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008A2A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008A30 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00008A36 6400                       		bcc.s	locret_702C
00008A38 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A3E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A44 6500                       		bcs.s	locret_702C
00008A46 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A4A                            
00008A4A                            locret_702C:
00008A4A 4E75                       		rts	
00008A4C                            ; ===========================================================================
00008A4C                            
00008A4C                            loc_702E:
00008A4C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A52 6400                       		bcc.s	loc_703C
00008A54 5538 F742                  		subq.b	#2,($FFFFF742).w
00008A58 4E75                       		rts	
00008A5A                            ; ===========================================================================
00008A5A                            
00008A5A                            loc_703C:
00008A5A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008A60 6500                       		bcs.s	locret_704E
00008A62 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008A68 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A6C                            
00008A6C                            locret_704E:
00008A6C 4E75                       		rts	
00008A6E                            ; ===========================================================================
00008A6E                            
00008A6E                            loc_7050:
00008A6E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008A74 6500                       		bcs.s	locret_7072
00008A76 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008A7C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A82 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008A88 6500                       		bcs.s	locret_7072
00008A8A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008A90                            
00008A90                            locret_7072:
00008A90 4E75                       		rts	
00008A92                            ; ===========================================================================
00008A92                            
00008A92                            Resize_MZ2:
00008A92 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008A98 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008A9E 6500                       		bcs.s	locret_7088
00008AA0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008AA6                            
00008AA6                            locret_7088:
00008AA6 4E75                       		rts	
00008AA8                            ; ===========================================================================
00008AA8                            
00008AA8                            Resize_MZ3:
00008AA8 7000                       		moveq	#0,d0
00008AAA 1038 F742                  		move.b	($FFFFF742).w,d0
00008AAE 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008AB2 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008AB6                            ; ===========================================================================
00008AB6 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008AB8 0000                       		dc.w Resize_MZ3end-off_7098
00008ABA                            ; ===========================================================================
00008ABA                            
00008ABA                            Resize_MZ3boss:
00008ABA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008AC0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008AC6 6500                       		bcs.s	locret_70E8
00008AC8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008ACE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008AD4 6500                       		bcs.s	locret_70E8
00008AD6 6100 0000                  		bsr.w	SingleObjLoad
00008ADA 6600                       		bne.s	loc_70D0
00008ADC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00008AE0 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008AE6 337C 022C 000C             		move.w	#$22C,$C(a1)
00008AEC                            
00008AEC                            loc_70D0:
00008AEC 303C 009C                  		move.w	#$9C,d0
00008AF0 6100 87D0                  		bsr.w	PlaySound	; play boss music
00008AF4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008AFA 5438 F742                  		addq.b	#2,($FFFFF742).w
00008AFE 7011                       		moveq	#$11,d0
00008B00 6000 8A34                  		bra.w	LoadPLC		; load boss patterns
00008B04                            ; ===========================================================================
00008B04                            
00008B04                            locret_70E8:
00008B04 4E75                       		rts	
00008B06                            ; ===========================================================================
00008B06                            
00008B06                            Resize_MZ3end:
00008B06 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008B0C 4E75                       		rts	
00008B0E                            ; ===========================================================================
00008B0E                            ; ---------------------------------------------------------------------------
00008B0E                            ; Star Light Zone dynamic screen resizing
00008B0E                            ; ---------------------------------------------------------------------------
00008B0E                            
00008B0E                            Resize_SLZ:				; XREF: Resize_Index
00008B0E 7000                       		moveq	#0,d0
00008B10 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008B14 D040                       		add.w	d0,d0
00008B16 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008B1A 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008B1E                            ; ===========================================================================
00008B1E 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008B20 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008B22 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008B24                            ; ===========================================================================
00008B24                            
00008B24                            Resize_SLZ12:
00008B24 4E75                       		rts	
00008B26                            ; ===========================================================================
00008B26                            
00008B26                            Resize_SLZ3:
00008B26 7000                       		moveq	#0,d0
00008B28 1038 F742                  		move.b	($FFFFF742).w,d0
00008B2C 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008B30 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008B34                            ; ===========================================================================
00008B34 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00008B36 0000                       		dc.w Resize_SLZ3boss-off_7118
00008B38 0000                       		dc.w Resize_SLZ3end-off_7118
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            Resize_SLZ3main:
00008B3A 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008B40 6500                       		bcs.s	locret_7130
00008B42 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008B48 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B4C                            
00008B4C                            locret_7130:
00008B4C 4E75                       		rts	
00008B4E                            ; ===========================================================================
00008B4E                            
00008B4E                            Resize_SLZ3boss:
00008B4E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008B54 6500                       		bcs.s	locret_715C
00008B56 6100 0000                  		bsr.w	SingleObjLoad
00008B5A 6600                       		bne.s	loc_7144
00008B5C 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008B60                            
00008B60                            loc_7144:
00008B60 303C 009C                  		move.w	#$9C,d0
00008B64 6100 875C                  		bsr.w	PlaySound	; play boss music
00008B68 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008B6E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B72 7011                       		moveq	#$11,d0
00008B74 6000 89C0                  		bra.w	LoadPLC		; load boss patterns
00008B78                            ; ===========================================================================
00008B78                            
00008B78                            locret_715C:
00008B78 4E75                       		rts	
00008B7A                            ; ===========================================================================
00008B7A                            
00008B7A                            Resize_SLZ3end:
00008B7A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008B80 4E75                       		rts
00008B82 4E75                       		rts
00008B84                            ; ===========================================================================
00008B84                            ; ---------------------------------------------------------------------------
00008B84                            ; Spring Yard Zone dynamic screen resizing
00008B84                            ; ---------------------------------------------------------------------------
00008B84                            
00008B84                            Resize_SYZ:				; XREF: Resize_Index
00008B84 7000                       		moveq	#0,d0
00008B86 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008B8A D040                       		add.w	d0,d0
00008B8C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008B90 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008B94                            ; ===========================================================================
00008B94 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008B96 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008B98 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008B9A                            ; ===========================================================================
00008B9A                            
00008B9A                            Resize_SYZ1:
00008B9A 4E75                       		rts	
00008B9C                            ; ===========================================================================
00008B9C                            
00008B9C                            Resize_SYZ2:
00008B9C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008BA2 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008BA8 6500                       		bcs.s	locret_71A2
00008BAA 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008BB0 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008BB6 6500                       		bcs.s	locret_71A2
00008BB8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008BBE                            
00008BBE                            locret_71A2:
00008BBE 4E75                       		rts	
00008BC0                            ; ===========================================================================
00008BC0                            
00008BC0                            Resize_SYZ3:
00008BC0 7000                       		moveq	#0,d0
00008BC2 1038 F742                  		move.b	($FFFFF742).w,d0
00008BC6 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008BCA 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008BCE                            ; ===========================================================================
00008BCE 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00008BD0 0000                       		dc.w Resize_SYZ3boss-off_71B2
00008BD2 0000                       		dc.w Resize_SYZ3end-off_71B2
00008BD4                            ; ===========================================================================
00008BD4                            
00008BD4                            Resize_SYZ3main:
00008BD4 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008BDA 6500                       		bcs.s	locret_71CE
00008BDC 6100 0000                  		bsr.w	SingleObjLoad
00008BE0 6600                       		bne.s	locret_71CE
00008BE2 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008BE6 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BEA                            
00008BEA                            locret_71CE:
00008BEA 4E75                       		rts	
00008BEC                            ; ===========================================================================
00008BEC                            
00008BEC                            Resize_SYZ3boss:
00008BEC 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00008BF2 6500                       		bcs.s	locret_7200
00008BF4 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008BFA 6100 0000                  		bsr.w	SingleObjLoad
00008BFE 6600                       		bne.s	loc_71EC
00008C00 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00008C04 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C08                            
00008C08                            loc_71EC:
00008C08 303C 009C                  		move.w	#$9C,d0
00008C0C 6100 86B4                  		bsr.w	PlaySound	; play boss music
00008C10 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008C16 7011                       		moveq	#$11,d0
00008C18 6000 891C                  		bra.w	LoadPLC		; load boss patterns
00008C1C                            ; ===========================================================================
00008C1C                            
00008C1C                            locret_7200:
00008C1C 4E75                       		rts	
00008C1E                            ; ===========================================================================
00008C1E                            
00008C1E                            Resize_SYZ3end:
00008C1E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008C24 4E75                       		rts	
00008C26                            ; ===========================================================================
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            ; Scrap	Brain Zone dynamic screen resizing
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            
00008C26                            Resize_SBZ:				; XREF: Resize_Index
00008C26 7000                       		moveq	#0,d0
00008C28 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008C2C D040                       		add.w	d0,d0
00008C2E 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008C32 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00008C36                            ; ===========================================================================
00008C36 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008C38 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008C3A 0000                       		dc.w Resize_FZ-Resize_SBZx
00008C3C                            ; ===========================================================================
00008C3C                            
00008C3C                            Resize_SBZ1:
00008C3C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008C42 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008C48 6500                       		bcs.s	locret_7242
00008C4A 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008C50 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008C56 6500                       		bcs.s	locret_7242
00008C58 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008C5E                            
00008C5E                            locret_7242:
00008C5E 4E75                       		rts	
00008C60                            ; ===========================================================================
00008C60                            
00008C60                            Resize_SBZ2:
00008C60 7000                       		moveq	#0,d0
00008C62 1038 F742                  		move.b	($FFFFF742).w,d0
00008C66 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008C6A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008C6E                            ; ===========================================================================
00008C6E 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008C70 0000                       		dc.w Resize_SBZ2boss-off_7252
00008C72 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008C74 0000                       		dc.w Resize_SBZ2end-off_7252
00008C76                            ; ===========================================================================
00008C76                            
00008C76                            Resize_SBZ2main:
00008C76 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008C7C 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008C82 6500                       		bcs.s	locret_727A
00008C84 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008C8A 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008C90 6500                       		bcs.s	locret_727A
00008C92 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C96                            
00008C96                            locret_727A:
00008C96 4E75                       		rts	
00008C98                            ; ===========================================================================
00008C98                            
00008C98                            Resize_SBZ2boss:
00008C98 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008C9E 6500                       		bcs.s	locret_7298
00008CA0 6100 0000                  		bsr.w	SingleObjLoad
00008CA4 6600                       		bne.s	locret_7298
00008CA6 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008CAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CAE 701E                       		moveq	#$1E,d0
00008CB0 6000 8884                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008CB4                            ; ===========================================================================
00008CB4                            
00008CB4                            locret_7298:
00008CB4 4E75                       		rts	
00008CB6                            ; ===========================================================================
00008CB6                            
00008CB6                            Resize_SBZ2boss2:
00008CB6 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008CBC 6500                       		bcs.s	loc_72B6
00008CBE 6100 0000                  		bsr.w	SingleObjLoad
00008CC2 6600                       		bne.s	loc_72B0
00008CC4 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008CC8 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CCC                            
00008CCC                            loc_72B0:
00008CCC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008CD2                            
00008CD2                            loc_72B6:
00008CD2 6000                       		bra.s	loc_72C2
00008CD4                            ; ===========================================================================
00008CD4                            
00008CD4                            Resize_SBZ2end:
00008CD4 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008CDA 6500                       		bcs.s	loc_72C2
00008CDC 4E75                       		rts	
00008CDE                            ; ===========================================================================
00008CDE                            
00008CDE                            loc_72C2:
00008CDE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008CE4 4E75                       		rts	
00008CE6                            ; ===========================================================================
00008CE6                            
00008CE6                            Resize_FZ:
00008CE6 7000                       		moveq	#0,d0
00008CE8 1038 F742                  		move.b	($FFFFF742).w,d0
00008CEC 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008CF0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008CF4                            ; ===========================================================================
00008CF4 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008CF8 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008CFC 0000                       		dc.w Resize_FZend2-off_72D8
00008CFE                            ; ===========================================================================
00008CFE                            
00008CFE                            Resize_FZmain:
00008CFE 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00008D04 6500                       		bcs.s	loc_72F4
00008D06 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D0A 701F                       		moveq	#$1F,d0
00008D0C 6100 8828                  		bsr.w	LoadPLC		; load FZ boss patterns
00008D10                            
00008D10                            loc_72F4:
00008D10 60CC                       		bra.s	loc_72C2
00008D12                            ; ===========================================================================
00008D12                            
00008D12                            Resize_FZboss:
00008D12 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00008D18 6500                       		bcs.s	loc_7312
00008D1A 6100 0000                  		bsr.w	SingleObjLoad
00008D1E 6600                       		bne.s	loc_7312
00008D20 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00008D24 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D28 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008D2E                            
00008D2E                            loc_7312:
00008D2E 60AE                       		bra.s	loc_72C2
00008D30                            ; ===========================================================================
00008D30                            
00008D30                            Resize_FZend:
00008D30 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00008D36 6500                       		bcs.s	loc_7320
00008D38 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D3C                            
00008D3C                            loc_7320:
00008D3C 60A0                       		bra.s	loc_72C2
00008D3E                            ; ===========================================================================
00008D3E                            
00008D3E                            locret_7322:
00008D3E 4E75                       		rts	
00008D40                            ; ===========================================================================
00008D40                            
00008D40                            Resize_FZend2:
00008D40 609C                       		bra.s	loc_72C2
00008D42                            ; ===========================================================================
00008D42                            ; ---------------------------------------------------------------------------
00008D42                            ; Ending sequence dynamic screen resizing (empty)
00008D42                            ; ---------------------------------------------------------------------------
00008D42                            
00008D42                            Resize_Ending:				; XREF: Resize_Index
00008D42 4E75                       		rts	
00008D44                            ; ===========================================================================
00008D44                            ; ---------------------------------------------------------------------------
00008D44                            ; Object 11 - GHZ bridge
00008D44                            ; ---------------------------------------------------------------------------
00008D44                            
00008D44                            Obj11:					; XREF: Obj_Index
00008D44 7000                       		moveq	#0,d0
00008D46 1028 0024                  		move.b	$24(a0),d0
00008D4A 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008D4E 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008D52                            ; ===========================================================================
00008D52 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008D56 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008D5A 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            Obj11_Main:				; XREF: Obj11_Index
00008D5E 5428 0024                  		addq.b	#2,$24(a0)
00008D62 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008D6A 317C 438E 0002             		move.w	#$438E,2(a0)
00008D70 117C 0004 0001             		move.b	#4,1(a0)
00008D76 117C 0003 0018             		move.b	#3,$18(a0)
00008D7C 117C 0080 0019             		move.b	#$80,$19(a0)
00008D82 3428 000C                  		move.w	$C(a0),d2
00008D86 3628 0008                  		move.w	8(a0),d3
00008D8A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008D8C 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008D90 7200                       		moveq	#0,d1
00008D92 1212                       		move.b	(a2),d1		; copy a2 to d1
00008D94 14FC 0000                  		move.b	#0,(a2)+
00008D98 3001                       		move.w	d1,d0
00008D9A E248                       		lsr.w	#1,d0
00008D9C E948                       		lsl.w	#4,d0
00008D9E 9640                       		sub.w	d0,d3
00008DA0 5501                       		subq.b	#2,d1
00008DA2 6500                       		bcs.s	Obj11_Action
00008DA4                            
00008DA4                            Obj11_MakeBdg:
00008DA4 6100 0000                  		bsr.w	SingleObjLoad
00008DA8 6600                       		bne.s	Obj11_Action
00008DAA 5228 0028                  		addq.b	#1,$28(a0)
00008DAE B668 0008                  		cmp.w	8(a0),d3
00008DB2 6600                       		bne.s	loc_73B8
00008DB4 0643 0010                  		addi.w	#$10,d3
00008DB8 3142 000C                  		move.w	d2,$C(a0)
00008DBC 3142 003C                  		move.w	d2,$3C(a0)
00008DC0 3A08                       		move.w	a0,d5
00008DC2 0445 D000                  		subi.w	#-$3000,d5
00008DC6 EC4D                       		lsr.w	#6,d5
00008DC8 0245 007F                  		andi.w	#$7F,d5
00008DCC 14C5                       		move.b	d5,(a2)+
00008DCE 5228 0028                  		addq.b	#1,$28(a0)
00008DD2                            
00008DD2                            loc_73B8:				; XREF: ROM:00007398j
00008DD2 3A09                       		move.w	a1,d5
00008DD4 0445 D000                  		subi.w	#-$3000,d5
00008DD8 EC4D                       		lsr.w	#6,d5
00008DDA 0245 007F                  		andi.w	#$7F,d5
00008DDE 14C5                       		move.b	d5,(a2)+
00008DE0 137C 000A 0024             		move.b	#$A,$24(a1)
00008DE6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008DE8 3342 000C                  		move.w	d2,$C(a1)
00008DEC 3342 003C                  		move.w	d2,$3C(a1)
00008DF0 3343 0008                  		move.w	d3,8(a1)
00008DF4 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008DFC 337C 438E 0002             		move.w	#$438E,2(a1)
00008E02 137C 0004 0001             		move.b	#4,1(a1)
00008E08 137C 0003 0018             		move.b	#3,$18(a1)
00008E0E 137C 0008 0019             		move.b	#8,$19(a1)
00008E14 0643 0010                  		addi.w	#$10,d3
00008E18 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008E1C                            
00008E1C                            Obj11_Action:				; XREF: Obj11_Index
00008E1C 6100                       		bsr.s	Obj11_Solid
00008E1E 4A28 003E                  		tst.b	$3E(a0)
00008E22 6700                       		beq.s	Obj11_Display
00008E24 5928 003E                  		subq.b	#4,$3E(a0)
00008E28 6100 0000                  		bsr.w	Obj11_Bend
00008E2C                            
00008E2C                            Obj11_Display:
00008E2C 6100 0000                  		bsr.w	DisplaySprite
00008E30 6000 0000                  		bra.w	Obj11_ChkDel
00008E34                            
00008E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E34                            
00008E34                            
00008E34                            Obj11_Solid:				; XREF: Obj11_Action
00008E34 7200                       		moveq	#0,d1
00008E36 1228 0028                  		move.b	$28(a0),d1
00008E3A E749                       		lsl.w	#3,d1
00008E3C 3401                       		move.w	d1,d2
00008E3E 5041                       		addq.w	#8,d1
00008E40 D442                       		add.w	d2,d2
00008E42 43F8 D000                  		lea	($FFFFD000).w,a1
00008E46 4A69 0012                  		tst.w	$12(a1)
00008E4A 6B00 0000                  		bmi.w	locret_751E
00008E4E 3029 0008                  		move.w	8(a1),d0
00008E52 9068 0008                  		sub.w	8(a0),d0
00008E56 D041                       		add.w	d1,d0
00008E58 6B00 0000                  		bmi.w	locret_751E
00008E5C B042                       		cmp.w	d2,d0
00008E5E 6400 0000                  		bcc.w	locret_751E
00008E62 6000                       		bra.s	Platform2
00008E64                            ; End of function Obj11_Solid
00008E64                            
00008E64                            ; ---------------------------------------------------------------------------
00008E64                            ; Platform subroutine
00008E64                            ; ---------------------------------------------------------------------------
00008E64                            
00008E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E64                            
00008E64                            
00008E64                            PlatformObject:
00008E64 43F8 D000                  		lea	($FFFFD000).w,a1
00008E68 4A69 0012                  		tst.w	$12(a1)
00008E6C 6B00 0000                  		bmi.w	locret_751E
00008E70 3029 0008                  		move.w	8(a1),d0
00008E74 9068 0008                  		sub.w	8(a0),d0
00008E78 D041                       		add.w	d1,d0
00008E7A 6B00 0000                  		bmi.w	locret_751E
00008E7E D241                       		add.w	d1,d1
00008E80 B041                       		cmp.w	d1,d0
00008E82 6400 0000                  		bcc.w	locret_751E
00008E86                            
00008E86                            Platform2:
00008E86 3028 000C                  		move.w	$C(a0),d0
00008E8A 5140                       		subq.w	#8,d0
00008E8C                            
00008E8C                            Platform3:
00008E8C 3429 000C                  		move.w	$C(a1),d2
00008E90 1229 0016                  		move.b	$16(a1),d1
00008E94 4881                       		ext.w	d1
00008E96 D242                       		add.w	d2,d1
00008E98 5841                       		addq.w	#4,d1
00008E9A 9041                       		sub.w	d1,d0
00008E9C 6200 0000                  		bhi.w	locret_751E
00008EA0 0C40 FFF0                  		cmpi.w	#-$10,d0
00008EA4 6500 0000                  		bcs.w	locret_751E
00008EA8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008EAC 6B00 0000                  		bmi.w	locret_751E
00008EB0 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008EB6 6400 0000                  		bcc.w	locret_751E
00008EBA D440                       		add.w	d0,d2
00008EBC 5642                       		addq.w	#3,d2
00008EBE 3342 000C                  		move.w	d2,$C(a1)
00008EC2 5428 0024                  		addq.b	#2,$24(a0)
00008EC6                            
00008EC6                            loc_74AE:
00008EC6 0829 0003 0022             		btst	#3,$22(a1)
00008ECC 6700                       		beq.s	loc_74DC
00008ECE 7000                       		moveq	#0,d0
00008ED0 1029 003D                  		move.b	$3D(a1),d0
00008ED4 ED48                       		lsl.w	#6,d0
00008ED6 0680 00FF D000             		addi.l	#$FFD000,d0
00008EDC 2440                       		movea.l	d0,a2
00008EDE 08AA 0003 0022             		bclr	#3,$22(a2)
00008EE4 422A 0025                  		clr.b	$25(a2)
00008EE8 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008EEE 6600                       		bne.s	loc_74DC
00008EF0 552A 0024                  		subq.b	#2,$24(a2)
00008EF4                            
00008EF4                            loc_74DC:
00008EF4 3008                       		move.w	a0,d0
00008EF6 0440 D000                  		subi.w	#-$3000,d0
00008EFA EC48                       		lsr.w	#6,d0
00008EFC 0240 007F                  		andi.w	#$7F,d0
00008F00 1340 003D                  		move.b	d0,$3D(a1)
00008F04 137C 0000 0026             		move.b	#0,$26(a1)
00008F0A 337C 0000 0012             		move.w	#0,$12(a1)
00008F10 3369 0010 0014             		move.w	$10(a1),$14(a1)
00008F16 0829 0001 0022             		btst	#1,$22(a1)
00008F1C 6700                       		beq.s	loc_7512
00008F1E 2F08                       		move.l	a0,-(sp)
00008F20 2049                       		movea.l	a1,a0
00008F22 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00008F28 205F                       		movea.l	(sp)+,a0
00008F2A                            
00008F2A                            loc_7512:
00008F2A 08E9 0003 0022             		bset	#3,$22(a1)
00008F30 08E8 0003 0022             		bset	#3,$22(a0)
00008F36                            
00008F36                            locret_751E:
00008F36 4E75                       		rts	
00008F38                            ; End of function PlatformObject
00008F38                            
00008F38                            ; ---------------------------------------------------------------------------
00008F38                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008F38                            ; ---------------------------------------------------------------------------
00008F38                            
00008F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F38                            
00008F38                            
00008F38                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008F38 43F8 D000                  		lea	($FFFFD000).w,a1
00008F3C 4A69 0012                  		tst.w	$12(a1)
00008F40 6B00 FFF4                  		bmi.w	locret_751E
00008F44 3029 0008                  		move.w	8(a1),d0
00008F48 9068 0008                  		sub.w	8(a0),d0
00008F4C D041                       		add.w	d1,d0
00008F4E 6BE6                       		bmi.s	locret_751E
00008F50 D241                       		add.w	d1,d1
00008F52 B041                       		cmp.w	d1,d0
00008F54 64E0                       		bcc.s	locret_751E
00008F56 0828 0000 0001             		btst	#0,1(a0)
00008F5C 6700                       		beq.s	loc_754A
00008F5E 4640                       		not.w	d0
00008F60 D041                       		add.w	d1,d0
00008F62                            
00008F62                            loc_754A:
00008F62 E248                       		lsr.w	#1,d0
00008F64 7600                       		moveq	#0,d3
00008F66 1632 0000                  		move.b	(a2,d0.w),d3
00008F6A 3028 000C                  		move.w	$C(a0),d0
00008F6E 9043                       		sub.w	d3,d0
00008F70 6000 FF1A                  		bra.w	Platform3
00008F74                            ; End of function SlopeObject
00008F74                            
00008F74                            
00008F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F74                            
00008F74                            
00008F74                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008F74 43F8 D000                  		lea	($FFFFD000).w,a1
00008F78 4A69 0012                  		tst.w	$12(a1)
00008F7C 6B00 FFB8                  		bmi.w	locret_751E
00008F80 3029 0008                  		move.w	8(a1),d0
00008F84 9068 0008                  		sub.w	8(a0),d0
00008F88 D041                       		add.w	d1,d0
00008F8A 6B00 FFAA                  		bmi.w	locret_751E
00008F8E D241                       		add.w	d1,d1
00008F90 B041                       		cmp.w	d1,d0
00008F92 6400 FFA2                  		bcc.w	locret_751E
00008F96 3028 000C                  		move.w	$C(a0),d0
00008F9A 9043                       		sub.w	d3,d0
00008F9C 6000 FEEE                  		bra.w	Platform3
00008FA0                            ; End of function Obj15_Solid
00008FA0                            
00008FA0                            ; ===========================================================================
00008FA0                            
00008FA0                            Obj11_Action2:				; XREF: Obj11_Index
00008FA0 6100                       		bsr.s	Obj11_WalkOff
00008FA2 6100 0000                  		bsr.w	DisplaySprite
00008FA6 6000 0000                  		bra.w	Obj11_ChkDel
00008FAA                            
00008FAA                            ; ---------------------------------------------------------------------------
00008FAA                            ; Subroutine allowing Sonic to walk off a bridge
00008FAA                            ; ---------------------------------------------------------------------------
00008FAA                            
00008FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FAA                            
00008FAA                            
00008FAA                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008FAA 7200                       		moveq	#0,d1
00008FAC 1228 0028                  		move.b	$28(a0),d1
00008FB0 E749                       		lsl.w	#3,d1
00008FB2 3401                       		move.w	d1,d2
00008FB4 5041                       		addq.w	#8,d1
00008FB6 6100                       		bsr.s	ExitPlatform2
00008FB8 6400                       		bcc.s	locret_75BE
00008FBA E848                       		lsr.w	#4,d0
00008FBC 1140 003F                  		move.b	d0,$3F(a0)
00008FC0 1028 003E                  		move.b	$3E(a0),d0
00008FC4 0C00 0040                  		cmpi.b	#$40,d0
00008FC8 6700                       		beq.s	loc_75B6
00008FCA 5828 003E                  		addq.b	#4,$3E(a0)
00008FCE                            
00008FCE                            loc_75B6:
00008FCE 6100 0000                  		bsr.w	Obj11_Bend
00008FD2 6100 0000                  		bsr.w	Obj11_MoveSonic
00008FD6                            
00008FD6                            locret_75BE:
00008FD6 4E75                       		rts	
00008FD8                            ; End of function Obj11_WalkOff
00008FD8                            
00008FD8                            ; ---------------------------------------------------------------------------
00008FD8                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008FD8                            ; ---------------------------------------------------------------------------
00008FD8                            
00008FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FD8                            
00008FD8                            
00008FD8                            ExitPlatform:
00008FD8 3401                       		move.w	d1,d2
00008FDA                            
00008FDA                            ExitPlatform2:
00008FDA D442                       		add.w	d2,d2
00008FDC 43F8 D000                  		lea	($FFFFD000).w,a1
00008FE0 0829 0001 0022             		btst	#1,$22(a1)
00008FE6 6600                       		bne.s	loc_75E0
00008FE8 3029 0008                  		move.w	8(a1),d0
00008FEC 9068 0008                  		sub.w	8(a0),d0
00008FF0 D041                       		add.w	d1,d0
00008FF2 6B00                       		bmi.s	loc_75E0
00008FF4 B042                       		cmp.w	d2,d0
00008FF6 6500                       		bcs.s	locret_75F2
00008FF8                            
00008FF8                            loc_75E0:
00008FF8 08A9 0003 0022             		bclr	#3,$22(a1)
00008FFE 117C 0002 0024             		move.b	#2,$24(a0)
00009004 08A8 0003 0022             		bclr	#3,$22(a0)
0000900A                            
0000900A                            locret_75F2:
0000900A 4E75                       		rts	
0000900C                            ; End of function ExitPlatform
0000900C                            
0000900C                            
0000900C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000900C                            
0000900C                            
0000900C                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
0000900C 7000                       		moveq	#0,d0
0000900E 1028 003F                  		move.b	$3F(a0),d0
00009012 1030 0029                  		move.b	$29(a0,d0.w),d0
00009016 ED48                       		lsl.w	#6,d0
00009018 0680 00FF D000             		addi.l	#$FFD000,d0
0000901E 2440                       		movea.l	d0,a2
00009020 43F8 D000                  		lea	($FFFFD000).w,a1
00009024 302A 000C                  		move.w	$C(a2),d0
00009028 5140                       		subq.w	#8,d0
0000902A 7200                       		moveq	#0,d1
0000902C 1229 0016                  		move.b	$16(a1),d1
00009030 9041                       		sub.w	d1,d0
00009032 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00009036 4E75                       		rts	
00009038                            ; End of function Obj11_MoveSonic
00009038                            
00009038                            
00009038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009038                            
00009038                            
00009038                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00009038 1028 003E                  		move.b	$3E(a0),d0
0000903C 6100 9970                  		bsr.w	CalcSine
00009040 3800                       		move.w	d0,d4
00009042 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009048 7000                       		moveq	#0,d0
0000904A 1028 0028                  		move.b	$28(a0),d0
0000904E E948                       		lsl.w	#4,d0
00009050 7600                       		moveq	#0,d3
00009052 1628 003F                  		move.b	$3F(a0),d3
00009056 3403                       		move.w	d3,d2
00009058 D640                       		add.w	d0,d3
0000905A 7A00                       		moveq	#0,d5
0000905C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009062 1A35 3000                  		move.b	(a5,d3.w),d5
00009066 0243 000F                  		andi.w	#$F,d3
0000906A E94B                       		lsl.w	#4,d3
0000906C 47F4 3000                  		lea	(a4,d3.w),a3
00009070 45E8 0029                  		lea	$29(a0),a2
00009074                            
00009074                            loc_765C:
00009074 7000                       		moveq	#0,d0
00009076 101A                       		move.b	(a2)+,d0
00009078 ED48                       		lsl.w	#6,d0
0000907A 0680 00FF D000             		addi.l	#$FFD000,d0
00009080 2240                       		movea.l	d0,a1
00009082 7000                       		moveq	#0,d0
00009084 101B                       		move.b	(a3)+,d0
00009086 5240                       		addq.w	#1,d0
00009088 C0C5                       		mulu.w	d5,d0
0000908A C0C4                       		mulu.w	d4,d0
0000908C 4840                       		swap	d0
0000908E D069 003C                  		add.w	$3C(a1),d0
00009092 3340 000C                  		move.w	d0,$C(a1)
00009096 51CA FFDC                  		dbf	d2,loc_765C
0000909A 7000                       		moveq	#0,d0
0000909C 1028 0028                  		move.b	$28(a0),d0
000090A0 7600                       		moveq	#0,d3
000090A2 1628 003F                  		move.b	$3F(a0),d3
000090A6 5203                       		addq.b	#1,d3
000090A8 9600                       		sub.b	d0,d3
000090AA 4403                       		neg.b	d3
000090AC 6B00                       		bmi.s	locret_76CA
000090AE 3403                       		move.w	d3,d2
000090B0 E94B                       		lsl.w	#4,d3
000090B2 47F4 3000                  		lea	(a4,d3.w),a3
000090B6 D6C2                       		adda.w	d2,a3
000090B8 5342                       		subq.w	#1,d2
000090BA 6500                       		bcs.s	locret_76CA
000090BC                            
000090BC                            loc_76A4:
000090BC 7000                       		moveq	#0,d0
000090BE 101A                       		move.b	(a2)+,d0
000090C0 ED48                       		lsl.w	#6,d0
000090C2 0680 00FF D000             		addi.l	#$FFD000,d0
000090C8 2240                       		movea.l	d0,a1
000090CA 7000                       		moveq	#0,d0
000090CC 1023                       		move.b	-(a3),d0
000090CE 5240                       		addq.w	#1,d0
000090D0 C0C5                       		mulu.w	d5,d0
000090D2 C0C4                       		mulu.w	d4,d0
000090D4 4840                       		swap	d0
000090D6 D069 003C                  		add.w	$3C(a1),d0
000090DA 3340 000C                  		move.w	d0,$C(a1)
000090DE 51CA FFDC                  		dbf	d2,loc_76A4
000090E2                            
000090E2                            locret_76CA:
000090E2 4E75                       		rts	
000090E4                            ; End of function Obj11_Bend
000090E4                            
000090E4                            ; ===========================================================================
000090E4                            ; ---------------------------------------------------------------------------
000090E4                            ; GHZ bridge-bending data
000090E4                            ; (Defines how the bridge bends	when Sonic walks across	it)
000090E4                            ; ---------------------------------------------------------------------------
000090E4                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000091F4                            		even
000091F4                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000092F4                            		even
000092F4                            
000092F4                            ; ===========================================================================
000092F4                            
000092F4                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000092F4 3028 0008                  		move.w	8(a0),d0
000092F8 0240 FF80                  		andi.w	#$FF80,d0
000092FC 3238 F700                  		move.w	($FFFFF700).w,d1
00009300 0441 0080                  		subi.w	#$80,d1
00009304 0241 FF80                  		andi.w	#$FF80,d1
00009308 9041                       		sub.w	d1,d0
0000930A 0C40 0280                  		cmpi.w	#$280,d0
0000930E 6200 0000                  		bhi.w	Obj11_DelAll
00009312 4E75                       		rts	
00009314                            ; ===========================================================================
00009314                            
00009314                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00009314 7400                       		moveq	#0,d2
00009316 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000931A 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000931C 5302                       		subq.b	#1,d2		; subtract 1
0000931E 6500                       		bcs.s	Obj11_Delete
00009320                            
00009320                            Obj11_DelLoop:
00009320 7000                       		moveq	#0,d0
00009322 101A                       		move.b	(a2)+,d0
00009324 ED48                       		lsl.w	#6,d0
00009326 0680 00FF D000             		addi.l	#$FFD000,d0
0000932C 2240                       		movea.l	d0,a1
0000932E B048                       		cmp.w	a0,d0
00009330 6700                       		beq.s	loc_791E
00009332 6100 0000                  		bsr.w	DeleteObject2
00009336                            
00009336                            loc_791E:
00009336 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000933A                            
0000933A                            Obj11_Delete:
0000933A 6100 0000                  		bsr.w	DeleteObject
0000933E 4E75                       		rts	
00009340                            ; ===========================================================================
00009340                            
00009340                            Obj11_Delete2:				; XREF: Obj11_Index
00009340 6100 0000                  		bsr.w	DeleteObject
00009344 4E75                       		rts	
00009346                            ; ===========================================================================
00009346                            
00009346                            Obj11_Display2:				; XREF: Obj11_Index
00009346 6100 0000                  		bsr.w	DisplaySprite
0000934A 4E75                       		rts	
0000934C                            ; ===========================================================================
0000934C                            ; ---------------------------------------------------------------------------
0000934C                            ; Sprite mappings - GHZ	bridge
0000934C                            ; ---------------------------------------------------------------------------
0000934C                            Map_obj11:
0000934C                            	include "_maps\obj11.asm"
0000934C                            ; ---------------------------------------------------------------------------
0000934C                            ; Sprite mappings - GHZ	bridge
0000934C                            ; ---------------------------------------------------------------------------
0000934C 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00009350 0000                       		dc.w byte_794B-Map_obj11
00009352 01                         byte_793A:	dc.b 1
00009353 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009358 02                         byte_7940:	dc.b 2
00009359 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000935E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009363 01                         byte_794B:	dc.b 1
00009364 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000936A 00                         		even
0000936A 00                         		even
0000936A                            
0000936A                            ; ===========================================================================
0000936A                            ; ---------------------------------------------------------------------------
0000936A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000936A                            ;	    - spiked ball on a chain (SBZ)
0000936A                            ; ---------------------------------------------------------------------------
0000936A                            
0000936A                            Obj15:					; XREF: Obj_Index
0000936A 7000                       		moveq	#0,d0
0000936C 1028 0024                  		move.b	$24(a0),d0
00009370 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00009374 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00009378                            ; ===========================================================================
00009378 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000937C 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00009380 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00009384 0000                       		dc.w Obj15_Action-Obj15_Index
00009386                            ; ===========================================================================
00009386                            
00009386                            Obj15_Main:				; XREF: Obj15_Index
00009386 5428 0024                  		addq.b	#2,$24(a0)
0000938A 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00009392 317C 4380 0002             		move.w	#$4380,2(a0)
00009398 117C 0004 0001             		move.b	#4,1(a0)
0000939E 117C 0003 0018             		move.b	#3,$18(a0)
000093A4 117C 0018 0019             		move.b	#$18,$19(a0)
000093AA 117C 0008 0016             		move.b	#8,$16(a0)
000093B0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000093B6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000093BC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000093C2 6600                       		bne.s	Obj15_NotSLZ
000093C4 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000093CC 317C 43DC 0002             		move.w	#$43DC,2(a0)
000093D2 117C 0020 0019             		move.b	#$20,$19(a0)
000093D8 117C 0010 0016             		move.b	#$10,$16(a0)
000093DE 117C 0099 0020             		move.b	#$99,$20(a0)
000093E4                            
000093E4                            Obj15_NotSLZ:
000093E4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000093EA 6600                       		bne.s	Obj15_SetLength
000093EC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000093F4 317C 0391 0002             		move.w	#$391,2(a0)
000093FA 117C 0018 0019             		move.b	#$18,$19(a0)
00009400 117C 0018 0016             		move.b	#$18,$16(a0)
00009406 117C 0086 0020             		move.b	#$86,$20(a0)
0000940C 117C 000C 0024             		move.b	#$C,$24(a0)
00009412                            
00009412                            Obj15_SetLength:
00009412 1810                       		move.b	0(a0),d4
00009414 7200                       		moveq	#0,d1
00009416 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000941A 1212                       		move.b	(a2),d1		; move a2 to d1
0000941C 3F01                       		move.w	d1,-(sp)
0000941E 0241 000F                  		andi.w	#$F,d1
00009422 14FC 0000                  		move.b	#0,(a2)+
00009426 3601                       		move.w	d1,d3
00009428 E94B                       		lsl.w	#4,d3
0000942A 5003                       		addq.b	#8,d3
0000942C 1143 003C                  		move.b	d3,$3C(a0)
00009430 5103                       		subq.b	#8,d3
00009432 4A28 001A                  		tst.b	$1A(a0)
00009436 6700                       		beq.s	Obj15_MakeChain
00009438 5003                       		addq.b	#8,d3
0000943A 5341                       		subq.w	#1,d1
0000943C                            
0000943C                            Obj15_MakeChain:
0000943C 6100 0000                  		bsr.w	SingleObjLoad
00009440 6600                       		bne.s	loc_7A92
00009442 5228 0028                  		addq.b	#1,$28(a0)
00009446 3A09                       		move.w	a1,d5
00009448 0445 D000                  		subi.w	#-$3000,d5
0000944C EC4D                       		lsr.w	#6,d5
0000944E 0245 007F                  		andi.w	#$7F,d5
00009452 14C5                       		move.b	d5,(a2)+
00009454 137C 000A 0024             		move.b	#$A,$24(a1)
0000945A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000945C 2368 0004 0004             		move.l	4(a0),4(a1)
00009462 3368 0002 0002             		move.w	2(a0),2(a1)
00009468 08A9 0006 0002             		bclr	#6,2(a1)
0000946E 137C 0004 0001             		move.b	#4,1(a1)
00009474 137C 0004 0018             		move.b	#4,$18(a1)
0000947A 137C 0008 0019             		move.b	#8,$19(a1)
00009480 137C 0001 001A             		move.b	#1,$1A(a1)
00009486 1343 003C                  		move.b	d3,$3C(a1)
0000948A 0403 0010                  		subi.b	#$10,d3
0000948E 6400                       		bcc.s	loc_7A8E
00009490 137C 0002 001A             		move.b	#2,$1A(a1)
00009496 137C 0003 0018             		move.b	#3,$18(a1)
0000949C 08E9 0006 0002             		bset	#6,2(a1)
000094A2                            
000094A2                            loc_7A8E:
000094A2 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000094A6                            
000094A6                            loc_7A92:
000094A6 3A08                       		move.w	a0,d5
000094A8 0445 D000                  		subi.w	#-$3000,d5
000094AC EC4D                       		lsr.w	#6,d5
000094AE 0245 007F                  		andi.w	#$7F,d5
000094B2 14C5                       		move.b	d5,(a2)+
000094B4 317C 4080 0026             		move.w	#$4080,$26(a0)
000094BA 317C FE00 003E             		move.w	#-$200,$3E(a0)
000094C0 321F                       		move.w	(sp)+,d1
000094C2 0801 0004                  		btst	#4,d1		; is object type $8X ?
000094C6 6700                       		beq.s	loc_7AD4	; if not, branch
000094C8 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000094D0 317C 43AA 0002             		move.w	#$43AA,2(a0)
000094D6 117C 0001 001A             		move.b	#1,$1A(a0)
000094DC 117C 0002 0018             		move.b	#2,$18(a0)
000094E2 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000094E8                            
000094E8                            loc_7AD4:
000094E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000094EE 6700                       		beq.s	Obj15_Action	; if yes, branch
000094F0                            
000094F0                            Obj15_SetSolid:				; XREF: Obj15_Index
000094F0 7200                       		moveq	#0,d1
000094F2 1228 0019                  		move.b	$19(a0),d1
000094F6 7600                       		moveq	#0,d3
000094F8 1628 0016                  		move.b	$16(a0),d3
000094FC 6100 FA76                  		bsr.w	Obj15_Solid
00009500                            
00009500                            Obj15_Action:				; XREF: Obj15_Index
00009500 6100 0000                  		bsr.w	Obj15_Move
00009504 6100 0000                  		bsr.w	DisplaySprite
00009508 6000 0000                  		bra.w	Obj15_ChkDel
0000950C                            ; ===========================================================================
0000950C                            
0000950C                            Obj15_Action2:				; XREF: Obj15_Index
0000950C 7200                       		moveq	#0,d1
0000950E 1228 0019                  		move.b	$19(a0),d1
00009512 6100 FAC4                  		bsr.w	ExitPlatform
00009516 3F28 0008                  		move.w	8(a0),-(sp)
0000951A 6100 0000                  		bsr.w	Obj15_Move
0000951E 341F                       		move.w	(sp)+,d2
00009520 7600                       		moveq	#0,d3
00009522 1628 0016                  		move.b	$16(a0),d3
00009526 5203                       		addq.b	#1,d3
00009528 6100 0000                  		bsr.w	MvSonicOnPtfm
0000952C 6100 0000                  		bsr.w	DisplaySprite
00009530 6000 0000                  		bra.w	Obj15_ChkDel
00009534                            
00009534 4E75                       		rts
00009536                            
00009536                            ; ---------------------------------------------------------------------------
00009536                            ; Subroutine to	change Sonic's position with a platform
00009536                            ; ---------------------------------------------------------------------------
00009536                            
00009536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009536                            
00009536                            
00009536                            MvSonicOnPtfm:
00009536 43F8 D000                  		lea	($FFFFD000).w,a1
0000953A 3028 000C                  		move.w	$C(a0),d0
0000953E 9043                       		sub.w	d3,d0
00009540 6000                       		bra.s	MvSonic2
00009542                            ; End of function MvSonicOnPtfm
00009542                            
00009542                            ; ---------------------------------------------------------------------------
00009542                            ; Subroutine to	change Sonic's position with a platform
00009542                            ; ---------------------------------------------------------------------------
00009542                            
00009542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009542                            
00009542                            
00009542                            MvSonicOnPtfm2:
00009542 43F8 D000                  		lea	($FFFFD000).w,a1
00009546 3028 000C                  		move.w	$C(a0),d0
0000954A 0440 0009                  		subi.w	#9,d0
0000954E                            
0000954E                            MvSonic2:
0000954E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009552 6B00                       		bmi.s	locret_7B62
00009554 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000955A 6400                       		bcc.s	locret_7B62
0000955C 4A78 FE08                  		tst.w	($FFFFFE08).w
00009560 6600                       		bne.s	locret_7B62
00009562 7200                       		moveq	#0,d1
00009564 1229 0016                  		move.b	$16(a1),d1
00009568 9041                       		sub.w	d1,d0
0000956A 3340 000C                  		move.w	d0,$C(a1)
0000956E 9468 0008                  		sub.w	8(a0),d2
00009572 9569 0008                  		sub.w	d2,8(a1)
00009576                            
00009576                            locret_7B62:
00009576 4E75                       		rts	
00009578                            ; End of function MvSonicOnPtfm2
00009578                            
00009578                            
00009578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009578                            
00009578                            
00009578                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00009578 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000957C 323C 0080                  		move.w	#$80,d1
00009580 0828 0000 0022             		btst	#0,$22(a0)
00009586 6700                       		beq.s	loc_7B78
00009588 4440                       		neg.w	d0
0000958A D041                       		add.w	d1,d0
0000958C                            
0000958C                            loc_7B78:
0000958C 6000                       		bra.s	Obj15_Move2
0000958E                            ; End of function Obj15_Move
0000958E                            
0000958E                            
0000958E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000958E                            
0000958E                            
0000958E                            Obj48_Move:				; XREF: Obj48_Display2
0000958E 4A28 003D                  		tst.b	$3D(a0)
00009592 6600                       		bne.s	loc_7B9C
00009594 3028 003E                  		move.w	$3E(a0),d0
00009598 5040                       		addq.w	#8,d0
0000959A 3140 003E                  		move.w	d0,$3E(a0)
0000959E D168 0026                  		add.w	d0,$26(a0)
000095A2 0C40 0200                  		cmpi.w	#$200,d0
000095A6 6600                       		bne.s	loc_7BB6
000095A8 117C 0001 003D             		move.b	#1,$3D(a0)
000095AE 6000                       		bra.s	loc_7BB6
000095B0                            ; ===========================================================================
000095B0                            
000095B0                            loc_7B9C:
000095B0 3028 003E                  		move.w	$3E(a0),d0
000095B4 5140                       		subq.w	#8,d0
000095B6 3140 003E                  		move.w	d0,$3E(a0)
000095BA D168 0026                  		add.w	d0,$26(a0)
000095BE 0C40 FE00                  		cmpi.w	#-$200,d0
000095C2 6600                       		bne.s	loc_7BB6
000095C4 117C 0000 003D             		move.b	#0,$3D(a0)
000095CA                            
000095CA                            loc_7BB6:
000095CA 1028 0026                  		move.b	$26(a0),d0
000095CE                            ; End of function Obj48_Move
000095CE                            
000095CE                            
000095CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095CE                            
000095CE                            
000095CE                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000095CE 6100 93DE                  		bsr.w	CalcSine
000095D2 3428 0038                  		move.w	$38(a0),d2
000095D6 3628 003A                  		move.w	$3A(a0),d3
000095DA 45E8 0028                  		lea	$28(a0),a2
000095DE 7C00                       		moveq	#0,d6
000095E0 1C1A                       		move.b	(a2)+,d6
000095E2                            
000095E2                            loc_7BCE:
000095E2 7800                       		moveq	#0,d4
000095E4 181A                       		move.b	(a2)+,d4
000095E6 ED4C                       		lsl.w	#6,d4
000095E8 0684 00FF D000             		addi.l	#$FFD000,d4
000095EE 2244                       		movea.l	d4,a1
000095F0 7800                       		moveq	#0,d4
000095F2 1829 003C                  		move.b	$3C(a1),d4
000095F6 2A04                       		move.l	d4,d5
000095F8 C9C0                       		muls.w	d0,d4
000095FA E084                       		asr.l	#8,d4
000095FC CBC1                       		muls.w	d1,d5
000095FE E085                       		asr.l	#8,d5
00009600 D842                       		add.w	d2,d4
00009602 DA43                       		add.w	d3,d5
00009604 3344 000C                  		move.w	d4,$C(a1)
00009608 3345 0008                  		move.w	d5,8(a1)
0000960C 51CE FFD4                  		dbf	d6,loc_7BCE
00009610 4E75                       		rts	
00009612                            ; End of function Obj15_Move2
00009612                            
00009612                            ; ===========================================================================
00009612                            
00009612                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00009612 3028 003A                  		move.w	$3A(a0),d0
00009616 0240 FF80                  		andi.w	#$FF80,d0
0000961A 3238 F700                  		move.w	($FFFFF700).w,d1
0000961E 0441 0080                  		subi.w	#$80,d1
00009622 0241 FF80                  		andi.w	#$FF80,d1
00009626 9041                       		sub.w	d1,d0
00009628 0C40 0280                  		cmpi.w	#$280,d0
0000962C 6200 0000                  		bhi.w	Obj15_DelAll
00009630 4E75                       		rts	
00009632                            ; ===========================================================================
00009632                            
00009632                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00009632 7400                       		moveq	#0,d2
00009634 45E8 0028                  		lea	$28(a0),a2
00009638 141A                       		move.b	(a2)+,d2
0000963A                            
0000963A                            Obj15_DelLoop:
0000963A 7000                       		moveq	#0,d0
0000963C 101A                       		move.b	(a2)+,d0
0000963E ED48                       		lsl.w	#6,d0
00009640 0680 00FF D000             		addi.l	#$FFD000,d0
00009646 2240                       		movea.l	d0,a1
00009648 6100 0000                  		bsr.w	DeleteObject2
0000964C 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00009650 4E75                       		rts	
00009652                            ; ===========================================================================
00009652                            
00009652                            Obj15_Delete:				; XREF: Obj15_Index
00009652 6100 0000                  		bsr.w	DeleteObject
00009656 4E75                       		rts	
00009658                            ; ===========================================================================
00009658                            
00009658                            Obj15_Display:				; XREF: Obj15_Index
00009658 6000 0000                  		bra.w	DisplaySprite
0000965C                            ; ===========================================================================
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            Map_obj15:
0000965C                            	include "_maps\obj15ghz.asm"
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000965C                            ; ---------------------------------------------------------------------------
0000965C 0000                       		dc.w byte_7C4E-Map_obj15
0000965E 0000                       		dc.w byte_7C59-Map_obj15
00009660 0000                       		dc.w byte_7C5F-Map_obj15
00009662 02                         byte_7C4E:	dc.b 2
00009663 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009668 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000966D 01                         byte_7C59:	dc.b 1
0000966E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009673 01                         byte_7C5F:	dc.b 1
00009674 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000967A 00                         		even
0000967A 00                         		even
0000967A                            
0000967A                            ; ---------------------------------------------------------------------------
0000967A                            ; Sprite mappings - SLZ	swinging platforms
0000967A                            ; ---------------------------------------------------------------------------
0000967A                            Map_obj15a:
0000967A                            	include "_maps\obj15slz.asm"
0000967A                            ; ---------------------------------------------------------------------------
0000967A                            ; Sprite mappings - SLZ	swinging platforms
0000967A                            ; ---------------------------------------------------------------------------
0000967A 0000                       		dc.w byte_7C6C-Map_obj15a
0000967C 0000                       		dc.w byte_7C95-Map_obj15a
0000967E 0000                       		dc.w byte_7C9B-Map_obj15a
00009680 08                         byte_7C6C:	dc.b 8
00009681 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009686 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000968B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009690 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009695 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000969A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000969F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000096A4 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000096A9 01                         byte_7C95:	dc.b 1
000096AA F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000096AF 01                         byte_7C9B:	dc.b 1
000096B0 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000096B6 00                         		even
000096B6 00                         		even
000096B6                            
000096B6                            ; ===========================================================================
000096B6                            ; ---------------------------------------------------------------------------
000096B6                            ; Object 17 - helix of spikes on a pole	(GHZ)
000096B6                            ; ---------------------------------------------------------------------------
000096B6                            
000096B6                            Obj17:					; XREF: Obj_Index
000096B6 7000                       		moveq	#0,d0
000096B8 1028 0024                  		move.b	$24(a0),d0
000096BC 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000096C0 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000096C4                            ; ===========================================================================
000096C4 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000096C6 0000                       		dc.w Obj17_Action-Obj17_Index
000096C8 0000                       		dc.w Obj17_Action-Obj17_Index
000096CA 0000                       		dc.w Obj17_Delete-Obj17_Index
000096CC 0000                       		dc.w Obj17_Display-Obj17_Index
000096CE                            ; ===========================================================================
000096CE                            
000096CE                            Obj17_Main:				; XREF: Obj17_Index
000096CE 5428 0024                  		addq.b	#2,$24(a0)
000096D2 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000096DA 317C 4398 0002             		move.w	#$4398,2(a0)
000096E0 117C 0007 0022             		move.b	#7,$22(a0)
000096E6 117C 0004 0001             		move.b	#4,1(a0)
000096EC 117C 0003 0018             		move.b	#3,$18(a0)
000096F2 117C 0008 0019             		move.b	#8,$19(a0)
000096F8 3428 000C                  		move.w	$C(a0),d2
000096FC 3628 0008                  		move.w	8(a0),d3
00009700 1810                       		move.b	0(a0),d4
00009702 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00009706 7200                       		moveq	#0,d1
00009708 1212                       		move.b	(a2),d1		; move a2 to d1
0000970A 14FC 0000                  		move.b	#0,(a2)+
0000970E 3001                       		move.w	d1,d0
00009710 E248                       		lsr.w	#1,d0
00009712 E948                       		lsl.w	#4,d0
00009714 9640                       		sub.w	d0,d3
00009716 5501                       		subq.b	#2,d1
00009718 6500                       		bcs.s	Obj17_Action
0000971A 7C00                       		moveq	#0,d6
0000971C                            
0000971C                            Obj17_MakeHelix:
0000971C 6100 0000                  		bsr.w	SingleObjLoad
00009720 6600                       		bne.s	Obj17_Action
00009722 5228 0028                  		addq.b	#1,$28(a0)
00009726 3A09                       		move.w	a1,d5
00009728 0445 D000                  		subi.w	#$D000,d5
0000972C EC4D                       		lsr.w	#6,d5
0000972E 0245 007F                  		andi.w	#$7F,d5
00009732 14C5                       		move.b	d5,(a2)+
00009734 137C 0008 0024             		move.b	#8,$24(a1)
0000973A 1284                       		move.b	d4,0(a1)
0000973C 3342 000C                  		move.w	d2,$C(a1)
00009740 3343 0008                  		move.w	d3,8(a1)
00009744 2368 0004 0004             		move.l	4(a0),4(a1)
0000974A 337C 4398 0002             		move.w	#$4398,2(a1)
00009750 137C 0004 0001             		move.b	#4,1(a1)
00009756 137C 0003 0018             		move.b	#3,$18(a1)
0000975C 137C 0008 0019             		move.b	#8,$19(a1)
00009762 1346 003E                  		move.b	d6,$3E(a1)
00009766 5206                       		addq.b	#1,d6
00009768 0206 0007                  		andi.b	#7,d6
0000976C 0643 0010                  		addi.w	#$10,d3
00009770 B668 0008                  		cmp.w	8(a0),d3
00009774 6600                       		bne.s	loc_7D78
00009776 1146 003E                  		move.b	d6,$3E(a0)
0000977A 5206                       		addq.b	#1,d6
0000977C 0206 0007                  		andi.b	#7,d6
00009780 0643 0010                  		addi.w	#$10,d3
00009784 5228 0028                  		addq.b	#1,$28(a0)
00009788                            
00009788                            loc_7D78:
00009788 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000978C                            
0000978C                            Obj17_Action:				; XREF: Obj17_Index
0000978C 6100 0000                  		bsr.w	Obj17_RotateSpikes
00009790 6100 0000                  		bsr.w	DisplaySprite
00009794 6000 0000                  		bra.w	Obj17_ChkDel
00009798                            
00009798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009798                            
00009798                            
00009798                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00009798 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000979C 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000097A2 D028 003E                  		add.b	$3E(a0),d0
000097A6 0200 0007                  		andi.b	#7,d0
000097AA 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000097AE 6600                       		bne.s	locret_7DA6
000097B0 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000097B6                            
000097B6                            locret_7DA6:
000097B6 4E75                       		rts	
000097B8                            ; End of function Obj17_RotateSpikes
000097B8                            
000097B8                            ; ===========================================================================
000097B8                            
000097B8                            Obj17_ChkDel:				; XREF: Obj17_Action
000097B8 3028 0008                  		move.w	8(a0),d0
000097BC 0240 FF80                  		andi.w	#$FF80,d0
000097C0 3238 F700                  		move.w	($FFFFF700).w,d1
000097C4 0441 0080                  		subi.w	#$80,d1
000097C8 0241 FF80                  		andi.w	#$FF80,d1
000097CC 9041                       		sub.w	d1,d0
000097CE 0C40 0280                  		cmpi.w	#$280,d0
000097D2 6200 0000                  		bhi.w	Obj17_DelAll
000097D6 4E75                       		rts	
000097D8                            ; ===========================================================================
000097D8                            
000097D8                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000097D8 7400                       		moveq	#0,d2
000097DA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000097DE 141A                       		move.b	(a2)+,d2	; move a2 to d2
000097E0 5502                       		subq.b	#2,d2
000097E2 6500                       		bcs.s	Obj17_Delete
000097E4                            
000097E4                            Obj17_DelLoop:
000097E4 7000                       		moveq	#0,d0
000097E6 101A                       		move.b	(a2)+,d0
000097E8 ED48                       		lsl.w	#6,d0
000097EA 0680 00FF D000             		addi.l	#$FFD000,d0
000097F0 2240                       		movea.l	d0,a1
000097F2 6100 0000                  		bsr.w	DeleteObject2	; delete object
000097F6 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000097FA                            
000097FA                            Obj17_Delete:				; XREF: Obj17_Index
000097FA 6100 0000                  		bsr.w	DeleteObject
000097FE 4E75                       		rts	
00009800                            ; ===========================================================================
00009800                            
00009800                            Obj17_Display:				; XREF: Obj17_Index
00009800 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00009804 6000 0000                  		bra.w	DisplaySprite
00009808                            ; ===========================================================================
00009808                            ; ---------------------------------------------------------------------------
00009808                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009808                            ; ---------------------------------------------------------------------------
00009808                            Map_obj17:
00009808                            	include "_maps\obj17.asm"
00009808                            ; ---------------------------------------------------------------------------
00009808                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009808                            ; ---------------------------------------------------------------------------
00009808 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000980C 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00009810 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00009814 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00009818 01                         byte_7E08:	dc.b 1
00009819 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000981E 01                         byte_7E0E:	dc.b 1
0000981F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00009824 01                         byte_7E14:	dc.b 1
00009825 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000982A 01                         byte_7E1A:	dc.b 1
0000982B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00009830 01                         byte_7E20:	dc.b 1
00009831 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00009836 01                         byte_7E26:	dc.b 1
00009837 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000983C 01                         byte_7E2C:	dc.b 1
0000983D F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00009842                            		even
00009842                            		even
00009842                            
00009842                            ; ===========================================================================
00009842                            ; ---------------------------------------------------------------------------
00009842                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009842                            ; ---------------------------------------------------------------------------
00009842                            
00009842                            Obj18:					; XREF: Obj_Index
00009842 7000                       		moveq	#0,d0
00009844 1028 0024                  		move.b	$24(a0),d0
00009848 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000984C 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00009850                            ; ===========================================================================
00009850 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00009852 0000                       		dc.w Obj18_Solid-Obj18_Index
00009854 0000                       		dc.w Obj18_Action2-Obj18_Index
00009856 0000                       		dc.w Obj18_Delete-Obj18_Index
00009858 0000                       		dc.w Obj18_Action-Obj18_Index
0000985A                            ; ===========================================================================
0000985A                            
0000985A                            Obj18_Main:				; XREF: Obj18_Index
0000985A 5428 0024                  		addq.b	#2,$24(a0)
0000985E 317C 4000 0002             		move.w	#$4000,2(a0)
00009864 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000986C 117C 0020 0019             		move.b	#$20,$19(a0)
00009872 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00009878 6600                       		bne.s	Obj18_NotSYZ
0000987A 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00009882 117C 0020 0019             		move.b	#$20,$19(a0)
00009888                            
00009888                            Obj18_NotSYZ:
00009888 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000988E 6600                       		bne.s	Obj18_NotSLZ
00009890 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00009898 117C 0020 0019             		move.b	#$20,$19(a0)
0000989E 317C 4000 0002             		move.w	#$4000,2(a0)
000098A4 117C 0003 0028             		move.b	#3,$28(a0)
000098AA                            
000098AA                            Obj18_NotSLZ:
000098AA 117C 0004 0001             		move.b	#4,1(a0)
000098B0 117C 0004 0018             		move.b	#4,$18(a0)
000098B6 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000098BC 3168 000C 0034             		move.w	$C(a0),$34(a0)
000098C2 3168 0008 0032             		move.w	8(a0),$32(a0)
000098C8 317C 0080 0026             		move.w	#$80,$26(a0)
000098CE 7200                       		moveq	#0,d1
000098D0 1028 0028                  		move.b	$28(a0),d0
000098D4 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000098D8 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000098DA 5201                       		addq.b	#1,d1		; use frame #1
000098DC 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000098E2                            
000098E2                            Obj18_SetFrame:
000098E2 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000098E6                            
000098E6                            Obj18_Solid:				; XREF: Obj18_Index
000098E6 4A28 0038                  		tst.b	$38(a0)
000098EA 6700                       		beq.s	loc_7EE0
000098EC 5928 0038                  		subq.b	#4,$38(a0)
000098F0                            
000098F0                            loc_7EE0:
000098F0 7200                       		moveq	#0,d1
000098F2 1228 0019                  		move.b	$19(a0),d1
000098F6 6100 F56C                  		bsr.w	PlatformObject
000098FA                            
000098FA                            Obj18_Action:				; XREF: Obj18_Index
000098FA 6100 0000                  		bsr.w	Obj18_Move
000098FE 6100 0000                  		bsr.w	Obj18_Nudge
00009902 6100 0000                  		bsr.w	DisplaySprite
00009906 6000 0000                  		bra.w	Obj18_ChkDel
0000990A                            ; ===========================================================================
0000990A                            
0000990A                            Obj18_Action2:				; XREF: Obj18_Index
0000990A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009910 6700                       		beq.s	loc_7F06
00009912 5828 0038                  		addq.b	#4,$38(a0)
00009916                            
00009916                            loc_7F06:
00009916 7200                       		moveq	#0,d1
00009918 1228 0019                  		move.b	$19(a0),d1
0000991C 6100 F6BA                  		bsr.w	ExitPlatform
00009920 3F28 0008                  		move.w	8(a0),-(sp)
00009924 6100 0000                  		bsr.w	Obj18_Move
00009928 6100 0000                  		bsr.w	Obj18_Nudge
0000992C 341F                       		move.w	(sp)+,d2
0000992E 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009932 6100 0000                  		bsr.w	DisplaySprite
00009936 6000 0000                  		bra.w	Obj18_ChkDel
0000993A                            
0000993A 4E75                       		rts
0000993C                            
0000993C                            ; ---------------------------------------------------------------------------
0000993C                            ; Subroutine to	move platform slightly when you	stand on it
0000993C                            ; ---------------------------------------------------------------------------
0000993C                            
0000993C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000993C                            
0000993C                            
0000993C                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000993C 1028 0038                  		move.b	$38(a0),d0
00009940 6100 906C                  		bsr.w	CalcSine
00009944 323C 0400                  		move.w	#$400,d1
00009948 C1C1                       		muls.w	d1,d0
0000994A 4840                       		swap	d0
0000994C D068 002C                  		add.w	$2C(a0),d0
00009950 3140 000C                  		move.w	d0,$C(a0)
00009954 4E75                       		rts	
00009956                            ; End of function Obj18_Nudge
00009956                            
00009956                            ; ---------------------------------------------------------------------------
00009956                            ; Subroutine to	move platforms
00009956                            ; ---------------------------------------------------------------------------
00009956                            
00009956                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009956                            
00009956                            
00009956                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00009956 7000                       		moveq	#0,d0
00009958 1028 0028                  		move.b	$28(a0),d0
0000995C 0240 000F                  		andi.w	#$F,d0
00009960 D040                       		add.w	d0,d0
00009962 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00009966 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000996A                            ; End of function Obj18_Move
0000996A                            
0000996A                            ; ===========================================================================
0000996A 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000996E 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00009972 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00009976 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000997A 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000997E 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00009982 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00009984                            ; ===========================================================================
00009984                            
00009984                            Obj18_Type00:
00009984 4E75                       		rts			; platform 00 doesn't move
00009986                            ; ===========================================================================
00009986                            
00009986                            Obj18_Type05:
00009986 3028 0032                  		move.w	$32(a0),d0
0000998A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000998E 4401                       		neg.b	d1		; reverse platform-motion
00009990 0601 0040                  		addi.b	#$40,d1
00009994 6000                       		bra.s	Obj18_01_Move
00009996                            ; ===========================================================================
00009996                            
00009996                            Obj18_Type01:
00009996 3028 0032                  		move.w	$32(a0),d0
0000999A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000999E 0401 0040                  		subi.b	#$40,d1
000099A2                            
000099A2                            Obj18_01_Move:
000099A2 4881                       		ext.w	d1
000099A4 D041                       		add.w	d1,d0
000099A6 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000099AA 6000 0000                  		bra.w	Obj18_ChgMotion
000099AE                            ; ===========================================================================
000099AE                            
000099AE                            Obj18_Type0C:
000099AE 3028 0034                  		move.w	$34(a0),d0
000099B2 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000099B6 4401                       		neg.b	d1		; reverse platform-motion
000099B8 0601 0030                  		addi.b	#$30,d1
000099BC 6000                       		bra.s	Obj18_02_Move
000099BE                            ; ===========================================================================
000099BE                            
000099BE                            Obj18_Type0B:
000099BE 3028 0034                  		move.w	$34(a0),d0
000099C2 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000099C6 0401 0030                  		subi.b	#$30,d1
000099CA 6000                       		bra.s	Obj18_02_Move
000099CC                            ; ===========================================================================
000099CC                            
000099CC                            Obj18_Type06:
000099CC 3028 0034                  		move.w	$34(a0),d0
000099D0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099D4 4401                       		neg.b	d1		; reverse platform-motion
000099D6 0601 0040                  		addi.b	#$40,d1
000099DA 6000                       		bra.s	Obj18_02_Move
000099DC                            ; ===========================================================================
000099DC                            
000099DC                            Obj18_Type02:
000099DC 3028 0034                  		move.w	$34(a0),d0
000099E0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099E4 0401 0040                  		subi.b	#$40,d1
000099E8                            
000099E8                            Obj18_02_Move:
000099E8 4881                       		ext.w	d1
000099EA D041                       		add.w	d1,d0
000099EC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000099F0 6000 0000                  		bra.w	Obj18_ChgMotion
000099F4                            ; ===========================================================================
000099F4                            
000099F4                            Obj18_Type03:
000099F4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000099F8 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000099FA 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009A00 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009A02 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009A08                            
00009A08                            Obj18_03_NoMove:
00009A08 4E75                       		rts	
00009A0A                            ; ===========================================================================
00009A0A                            
00009A0A                            Obj18_03_Wait:
00009A0A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009A0E 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009A10 317C 0020 003A             		move.w	#32,$3A(a0)
00009A16 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00009A1A 4E75                       		rts	
00009A1C                            ; ===========================================================================
00009A1C                            
00009A1C                            Obj18_Type04:
00009A1C 4A68 003A                  		tst.w	$3A(a0)
00009A20 6700                       		beq.s	loc_8048
00009A22 5368 003A                  		subq.w	#1,$3A(a0)
00009A26 6600                       		bne.s	loc_8048
00009A28 0828 0003 0022             		btst	#3,$22(a0)
00009A2E 6700                       		beq.s	loc_8042
00009A30 08E9 0001 0022             		bset	#1,$22(a1)
00009A36 08A9 0003 0022             		bclr	#3,$22(a1)
00009A3C 137C 0002 0024             		move.b	#2,$24(a1)
00009A42 08A8 0003 0022             		bclr	#3,$22(a0)
00009A48 4228 0025                  		clr.b	$25(a0)
00009A4C 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009A52                            
00009A52                            loc_8042:
00009A52 117C 0008 0024             		move.b	#8,$24(a0)
00009A58                            
00009A58                            loc_8048:
00009A58 2628 002C                  		move.l	$2C(a0),d3
00009A5C 3028 0012                  		move.w	$12(a0),d0
00009A60 48C0                       		ext.l	d0
00009A62 E180                       		asl.l	#8,d0
00009A64 D680                       		add.l	d0,d3
00009A66 2143 002C                  		move.l	d3,$2C(a0)
00009A6A 0668 0038 0012             		addi.w	#$38,$12(a0)
00009A70 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009A74 0640 00E0                  		addi.w	#$E0,d0
00009A78 B068 002C                  		cmp.w	$2C(a0),d0
00009A7C 6400                       		bcc.s	locret_8074
00009A7E 117C 0006 0024             		move.b	#6,$24(a0)
00009A84                            
00009A84                            locret_8074:
00009A84 4E75                       		rts	
00009A86                            ; ===========================================================================
00009A86                            
00009A86                            Obj18_Type07:
00009A86 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009A8A 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00009A8C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00009A90 7000                       		moveq	#0,d0
00009A92 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009A96 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009A98 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009A9C 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00009A9E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009AA4                            
00009AA4                            Obj18_07_NoMove:
00009AA4 4E75                       		rts	
00009AA6                            ; ===========================================================================
00009AA6                            
00009AA6                            Obj18_07_Wait:
00009AA6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009AAA 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00009AAC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009AB0 4E75                       		rts	
00009AB2                            ; ===========================================================================
00009AB2                            
00009AB2                            Obj18_Type08:
00009AB2 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009AB6 3028 0034                  		move.w	$34(a0),d0
00009ABA 0440 0200                  		subi.w	#$200,d0
00009ABE B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009AC2 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009AC4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009AC8                            
00009AC8                            Obj18_08_NoStop:
00009AC8 4E75                       		rts	
00009ACA                            ; ===========================================================================
00009ACA                            
00009ACA                            Obj18_Type0A:
00009ACA 3028 0034                  		move.w	$34(a0),d0
00009ACE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009AD2 0401 0040                  		subi.b	#$40,d1
00009AD6 4881                       		ext.w	d1
00009AD8 E241                       		asr.w	#1,d1
00009ADA D041                       		add.w	d1,d0
00009ADC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009AE0                            
00009AE0                            Obj18_ChgMotion:
00009AE0 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009AE6 4E75                       		rts	
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009AE8 3028 0032                  		move.w	$32(a0),d0
00009AEC 0240 FF80                  		andi.w	#$FF80,d0
00009AF0 3238 F700                  		move.w	($FFFFF700).w,d1
00009AF4 0441 0080                  		subi.w	#$80,d1
00009AF8 0241 FF80                  		andi.w	#$FF80,d1
00009AFC 9041                       		sub.w	d1,d0
00009AFE 0C40 0280                  		cmpi.w	#$280,d0
00009B02 6200                       		bhi.s	Obj18_Delete
00009B04 4E75                       		rts	
00009B06                            ; ===========================================================================
00009B06                            
00009B06                            Obj18_Delete:				; XREF: Obj18_Index
00009B06 6000 0000                  		bra.w	DeleteObject
00009B0A                            ; ===========================================================================
00009B0A                            ; ---------------------------------------------------------------------------
00009B0A                            ; Sprite mappings - unused
00009B0A                            ; ---------------------------------------------------------------------------
00009B0A                            Map_obj18x:
00009B0A                            	include "_maps\obj18x.asm"
00009B0A                            ; ---------------------------------------------------------------------------
00009B0A                            ; Sprite mappings - unused
00009B0A                            ; ---------------------------------------------------------------------------
00009B0A 0000                       		dc.w byte_80FE-Map_obj18x
00009B0C 0000                       		dc.w byte_8109-Map_obj18x
00009B0E 02                         byte_80FE:	dc.b 2
00009B0F F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009B14 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009B19 0A                         byte_8109:	dc.b $A
00009B1A F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009B1F 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009B24 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009B29 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009B2E 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009B33 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009B38 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009B3D 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009B42 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009B47 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009B4C                            		even
00009B4C                            		even
00009B4C                            
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C                            ; Sprite mappings - GHZ	platforms
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C                            Map_obj18:
00009B4C                            	include "_maps\obj18ghz.asm"
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C                            ; Sprite mappings - GHZ	platforms
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C 0000                       		dc.w byte_8140-Map_obj18
00009B4E 0000                       		dc.w byte_8155-Map_obj18
00009B50 04                         byte_8140:	dc.b 4
00009B51 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009B56 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009B5B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009B60 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009B65 0A                         byte_8155:	dc.b $A
00009B66 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009B6B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009B70 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009B75 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009B7A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009B7F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009B84 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009B89 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009B8E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009B93 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009B98                            		even
00009B98                            		even
00009B98                            
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Sprite mappings - SYZ	platforms
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            Map_obj18a:
00009B98                            	include "_maps\obj18syz.asm"
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Sprite mappings - SYZ	platforms
00009B98                            ; ---------------------------------------------------------------------------
00009B98 0000                       		dc.w byte_818A-Map_obj18a
00009B9A 03                         byte_818A:	dc.b 3
00009B9B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009BA0 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009BA5 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009BAA                            		even
00009BAA                            		even
00009BAA                            
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA                            ; Sprite mappings - SLZ	platforms
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA                            Map_obj18b:
00009BAA                            	include "_maps\obj18slz.asm"
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA                            ; Sprite mappings - SLZ	platforms
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA 0000                       		dc.w byte_819C-Map_obj18b
00009BAC 02                         byte_819C:	dc.b 2
00009BAD F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009BB2 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009BB8 00                         		even
00009BB8 00                         		even
00009BB8                            
00009BB8                            ; ===========================================================================
00009BB8                            ; ---------------------------------------------------------------------------
00009BB8                            ; Object 19 - blank
00009BB8                            ; ---------------------------------------------------------------------------
00009BB8                            
00009BB8                            Obj19:					; XREF: Obj_Index
00009BB8 4E75                       		rts	
00009BBA                            ; ===========================================================================
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            Map_obj48:
00009BBA                            	include "_maps\obj48.asm"
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009BBE 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009BC2 06                         byte_81B2:	dc.b 6
00009BC3 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009BC8 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009BCD E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009BD2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009BD7 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009BDC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009BE1 04                         byte_81D1:	dc.b 4
00009BE2 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009BE7 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009BEC 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009BF1 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009BF6 04                         byte_81E6:	dc.b 4
00009BF7 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009BFC E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009C01 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009C06 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009C0B 04                         byte_81FB:	dc.b 4
00009C0C E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009C11 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009C16 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009C1B 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009C20                            		even
00009C20                            		even
00009C20                            
00009C20                            ; ===========================================================================
00009C20                            ; ---------------------------------------------------------------------------
00009C20                            ; Object 1A - GHZ collapsing ledge
00009C20                            ; ---------------------------------------------------------------------------
00009C20                            
00009C20                            Obj1A:					; XREF: Obj_Index
00009C20 7000                       		moveq	#0,d0
00009C22 1028 0024                  		move.b	$24(a0),d0
00009C26 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009C2A 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009C2E                            ; ===========================================================================
00009C2E 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009C32 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00009C36 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009C3A                            ; ===========================================================================
00009C3A                            
00009C3A                            Obj1A_Main:				; XREF: Obj1A_Index
00009C3A 5428 0024                  		addq.b	#2,$24(a0)
00009C3E 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00009C46 317C 4000 0002             		move.w	#$4000,2(a0)
00009C4C 0028 0004 0001             		ori.b	#4,1(a0)
00009C52 117C 0004 0018             		move.b	#4,$18(a0)
00009C58 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009C5E 117C 0064 0019             		move.b	#$64,$19(a0)
00009C64 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009C6A 117C 0038 0016             		move.b	#$38,$16(a0)
00009C70 08E8 0004 0001             		bset	#4,1(a0)
00009C76                            
00009C76                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00009C76 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009C7A 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009C7C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00009C80 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009C84 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009C88                            
00009C88                            Obj1A_Slope:
00009C88 323C 0030                  		move.w	#$30,d1
00009C8C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009C92 6100 F2A4                  		bsr.w	SlopeObject
00009C96 6000 0000                  		bra.w	MarkObjGone
00009C9A                            ; ===========================================================================
00009C9A                            
00009C9A                            Obj1A_Touch:				; XREF: Obj1A_Index
00009C9A 4A28 0038                  		tst.b	$38(a0)
00009C9E 6700 0000                  		beq.w	loc_847A
00009CA2 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009CA8 5328 0038                  		subq.b	#1,$38(a0)
00009CAC                            
00009CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CAC                            
00009CAC                            
00009CAC                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009CAC 323C 0030                  		move.w	#$30,d1
00009CB0 6100 F326                  		bsr.w	ExitPlatform
00009CB4 323C 0030                  		move.w	#$30,d1
00009CB8 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009CBE 3428 0008                  		move.w	8(a0),d2
00009CC2 6100 0000                  		bsr.w	SlopeObject2
00009CC6 6000 0000                  		bra.w	MarkObjGone
00009CCA                            ; End of function Obj1A_WalkOff
00009CCA                            
00009CCA                            ; ===========================================================================
00009CCA                            
00009CCA                            Obj1A_Display:				; XREF: Obj1A_Index
00009CCA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009CCE 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009CD0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009CD4 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009CD8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009CDC 6000 0000                  		bra.w	DisplaySprite
00009CE0                            ; ===========================================================================
00009CE0                            
00009CE0                            loc_82D0:				; XREF: Obj1A_Display
00009CE0 5328 0038                  		subq.b	#1,$38(a0)
00009CE4 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009CE8 43F8 D000                  		lea	($FFFFD000).w,a1
00009CEC 0829 0003 0022             		btst	#3,$22(a1)
00009CF2 6700                       		beq.s	loc_82FC
00009CF4 4A28 0038                  		tst.b	$38(a0)
00009CF8 6600                       		bne.s	locret_8308
00009CFA 08A9 0003 0022             		bclr	#3,$22(a1)
00009D00 08A9 0005 0022             		bclr	#5,$22(a1)
00009D06 137C 0001 001D             		move.b	#1,$1D(a1)
00009D0C                            
00009D0C                            loc_82FC:
00009D0C 117C 0000 003A             		move.b	#0,$3A(a0)
00009D12 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009D18                            
00009D18                            locret_8308:
00009D18 4E75                       		rts	
00009D1A                            ; ===========================================================================
00009D1A                            
00009D1A                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009D1A 6100 0000                  		bsr.w	ObjectFall
00009D1E 6100 0000                  		bsr.w	DisplaySprite
00009D22 4A28 0001                  		tst.b	1(a0)
00009D26 6A00                       		bpl.s	Obj1A_Delete
00009D28 4E75                       		rts	
00009D2A                            ; ===========================================================================
00009D2A                            
00009D2A                            Obj1A_Delete:				; XREF: Obj1A_Index
00009D2A 6100 0000                  		bsr.w	DeleteObject
00009D2E 4E75                       		rts	
00009D30                            ; ===========================================================================
00009D30                            ; ---------------------------------------------------------------------------
00009D30                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009D30                            ; ---------------------------------------------------------------------------
00009D30                            
00009D30                            Obj53:					; XREF: Obj_Index
00009D30 7000                       		moveq	#0,d0
00009D32 1028 0024                  		move.b	$24(a0),d0
00009D36 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009D3A 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009D3E                            ; ===========================================================================
00009D3E 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009D42 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00009D46 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00009D4A                            ; ===========================================================================
00009D4A                            
00009D4A                            Obj53_Main:				; XREF: Obj53_Index
00009D4A 5428 0024                  		addq.b	#2,$24(a0)
00009D4E 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009D56 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009D5C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009D62 6600                       		bne.s	Obj53_NotSLZ
00009D64 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009D6A 5428 001A                  		addq.b	#2,$1A(a0)
00009D6E                            
00009D6E                            Obj53_NotSLZ:
00009D6E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009D74 6600                       		bne.s	Obj53_NotSBZ
00009D76 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009D7C                            
00009D7C                            Obj53_NotSBZ:
00009D7C 0028 0004 0001             		ori.b	#4,1(a0)
00009D82 117C 0004 0018             		move.b	#4,$18(a0)
00009D88 117C 0007 0038             		move.b	#7,$38(a0)
00009D8E 117C 0044 0019             		move.b	#$44,$19(a0)
00009D94                            
00009D94                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009D94 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009D98 6700                       		beq.s	Obj53_Solid	; if not, branch
00009D9A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009D9E 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009DA2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009DA6                            
00009DA6                            Obj53_Solid:
00009DA6 323C 0020                  		move.w	#$20,d1
00009DAA 6100 F0B8                  		bsr.w	PlatformObject
00009DAE 4A28 0028                  		tst.b	$28(a0)
00009DB2 6A00                       		bpl.s	Obj53_MarkAsGone
00009DB4 0829 0003 0022             		btst	#3,$22(a1)
00009DBA 6700                       		beq.s	Obj53_MarkAsGone
00009DBC 08A8 0000 0001             		bclr	#0,1(a0)
00009DC2 3029 0008                  		move.w	8(a1),d0
00009DC6 9068 0008                  		sub.w	8(a0),d0
00009DCA 6400                       		bcc.s	Obj53_MarkAsGone
00009DCC 08E8 0000 0001             		bset	#0,1(a0)
00009DD2                            
00009DD2                            Obj53_MarkAsGone:
00009DD2 6000 0000                  		bra.w	MarkObjGone
00009DD6                            ; ===========================================================================
00009DD6                            
00009DD6                            Obj53_Touch:				; XREF: Obj53_Index
00009DD6 4A28 0038                  		tst.b	$38(a0)
00009DDA 6700 0000                  		beq.w	loc_8458
00009DDE 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009DE4 5328 0038                  		subq.b	#1,$38(a0)
00009DE8                            
00009DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DE8                            
00009DE8                            
00009DE8                            Obj53_WalkOff:				; XREF: Obj53_Index
00009DE8 323C 0020                  		move.w	#$20,d1
00009DEC 6100 F1EA                  		bsr.w	ExitPlatform
00009DF0 3428 0008                  		move.w	8(a0),d2
00009DF4 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00009DF8 6000 0000                  		bra.w	MarkObjGone
00009DFC                            ; End of function Obj53_WalkOff
00009DFC                            
00009DFC                            ; ===========================================================================
00009DFC                            
00009DFC                            Obj53_Display:				; XREF: Obj53_Index
00009DFC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009E00 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009E02 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009E06 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009E0A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009E0E 6000 0000                  		bra.w	DisplaySprite
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            loc_8402:
00009E12 5328 0038                  		subq.b	#1,$38(a0)
00009E16 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009E1A 43F8 D000                  		lea	($FFFFD000).w,a1
00009E1E 0829 0003 0022             		btst	#3,$22(a1)
00009E24 6700                       		beq.s	loc_842E
00009E26 4A28 0038                  		tst.b	$38(a0)
00009E2A 6600                       		bne.s	locret_843A
00009E2C 08A9 0003 0022             		bclr	#3,$22(a1)
00009E32 08A9 0005 0022             		bclr	#5,$22(a1)
00009E38 137C 0001 001D             		move.b	#1,$1D(a1)
00009E3E                            
00009E3E                            loc_842E:
00009E3E 117C 0000 003A             		move.b	#0,$3A(a0)
00009E44 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00009E4A                            
00009E4A                            locret_843A:
00009E4A 4E75                       		rts	
00009E4C                            ; ===========================================================================
00009E4C                            
00009E4C                            Obj53_TimeZero:				; XREF: Obj53_Display
00009E4C 6100 0000                  		bsr.w	ObjectFall
00009E50 6100 0000                  		bsr.w	DisplaySprite
00009E54 4A28 0001                  		tst.b	1(a0)
00009E58 6A00                       		bpl.s	Obj53_Delete
00009E5A 4E75                       		rts	
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            Obj53_Delete:				; XREF: Obj53_Index
00009E5C 6100 0000                  		bsr.w	DeleteObject
00009E60 4E75                       		rts	
00009E62                            ; ===========================================================================
00009E62                            
00009E62                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009E62 117C 0000 003A             		move.b	#0,$3A(a0)
00009E68                            
00009E68                            loc_8458:				; XREF: Obj53_Touch
00009E68 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009E6E 0828 0000 0028             		btst	#0,$28(a0)
00009E74 6700                       		beq.s	loc_846C
00009E76 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009E7C                            
00009E7C                            loc_846C:
00009E7C 7207                       		moveq	#7,d1
00009E7E 5228 001A                  		addq.b	#1,$1A(a0)
00009E82 6000                       		bra.s	loc_8486
00009E84                            ; ===========================================================================
00009E84                            
00009E84                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009E84 117C 0000 003A             		move.b	#0,$3A(a0)
00009E8A                            
00009E8A                            loc_847A:				; XREF: Obj1A_Touch
00009E8A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009E90 7218                       		moveq	#$18,d1
00009E92 5428 001A                  		addq.b	#2,$1A(a0)
00009E96                            
00009E96                            loc_8486:				; XREF: Obj53_Collapse
00009E96 7000                       		moveq	#0,d0
00009E98 1028 001A                  		move.b	$1A(a0),d0
00009E9C D040                       		add.w	d0,d0
00009E9E 2668 0004                  		movea.l	4(a0),a3
00009EA2 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009EA6 524B                       		addq.w	#1,a3
00009EA8 08E8 0005 0001             		bset	#5,1(a0)
00009EAE 1810                       		move.b	0(a0),d4
00009EB0 1A28 0001                  		move.b	1(a0),d5
00009EB4 2248                       		movea.l	a0,a1
00009EB6 6000                       		bra.s	loc_84B2
00009EB8                            ; ===========================================================================
00009EB8                            
00009EB8                            loc_84AA:
00009EB8 6100 0000                  		bsr.w	SingleObjLoad
00009EBC 6600                       		bne.s	loc_84F2
00009EBE 5A4B                       		addq.w	#5,a3
00009EC0                            
00009EC0                            loc_84B2:
00009EC0 137C 0006 0024             		move.b	#6,$24(a1)
00009EC6 1284                       		move.b	d4,0(a1)
00009EC8 234B 0004                  		move.l	a3,4(a1)
00009ECC 1345 0001                  		move.b	d5,1(a1)
00009ED0 3368 0008 0008             		move.w	8(a0),8(a1)
00009ED6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EDC 3368 0002 0002             		move.w	2(a0),2(a1)
00009EE2 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009EE8 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009EEE 135C 0038                  		move.b	(a4)+,$38(a1)
00009EF2 B3C8                       		cmpa.l	a0,a1
00009EF4 6400                       		bcc.s	loc_84EE
00009EF6 6100 0000                  		bsr.w	DisplaySprite2
00009EFA                            
00009EFA                            loc_84EE:
00009EFA 51C9 FFBC                  		dbf	d1,loc_84AA
00009EFE                            
00009EFE                            loc_84F2:
00009EFE 6100 0000                  		bsr.w	DisplaySprite
00009F02 303C 00B9                  		move.w	#$B9,d0
00009F06 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009F0C                            ; ===========================================================================
00009F0C                            ; ---------------------------------------------------------------------------
00009F0C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009F0C                            ; ---------------------------------------------------------------------------
00009F0C 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009F1C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009F26 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009F2E 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009F36                            
00009F36                            ; ---------------------------------------------------------------------------
00009F36                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009F36                            ; ---------------------------------------------------------------------------
00009F36                            
00009F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F36                            
00009F36                            
00009F36                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009F36 43F8 D000                  		lea	($FFFFD000).w,a1
00009F3A 0829 0003 0022             		btst	#3,$22(a1)
00009F40 6700                       		beq.s	locret_856E
00009F42 3029 0008                  		move.w	8(a1),d0
00009F46 9068 0008                  		sub.w	8(a0),d0
00009F4A D041                       		add.w	d1,d0
00009F4C E248                       		lsr.w	#1,d0
00009F4E 0828 0000 0001             		btst	#0,1(a0)
00009F54 6700                       		beq.s	loc_854E
00009F56 4640                       		not.w	d0
00009F58 D041                       		add.w	d1,d0
00009F5A                            
00009F5A                            loc_854E:
00009F5A 7200                       		moveq	#0,d1
00009F5C 1232 0000                  		move.b	(a2,d0.w),d1
00009F60 3028 000C                  		move.w	$C(a0),d0
00009F64 9041                       		sub.w	d1,d0
00009F66 7200                       		moveq	#0,d1
00009F68 1229 0016                  		move.b	$16(a1),d1
00009F6C 9041                       		sub.w	d1,d0
00009F6E 3340 000C                  		move.w	d0,$C(a1)
00009F72 9468 0008                  		sub.w	8(a0),d2
00009F76 9569 0008                  		sub.w	d2,8(a1)
00009F7A                            
00009F7A                            locret_856E:
00009F7A 4E75                       		rts	
00009F7C                            ; End of function SlopeObject2
00009F7C                            
00009F7C                            ; ===========================================================================
00009F7C                            ; ---------------------------------------------------------------------------
00009F7C                            ; Collision data for GHZ collapsing ledge
00009F7C                            ; ---------------------------------------------------------------------------
00009F7C                            Obj1A_SlopeData:
00009F7C                            		incbin	misc\ghzledge.bin
00009FAC                            		even
00009FAC                            
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Sprite mappings - GHZ	collapsing ledge
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            Map_obj1A:
00009FAC                            	include "_maps\obj1A.asm"
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Sprite mappings - GHZ	collapsing ledge
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009FB0 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009FB4 10                         byte_85A8:	dc.b $10
00009FB5 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009FBA D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FBF E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FC4 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FC9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FCE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009FD3 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009FD8 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009FDD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009FE2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009FE7 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009FEC 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009FF1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009FF6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009FFB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A000 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A005 10                         byte_85F9:	dc.b $10
0000A006 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A00B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A010 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A015 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A01A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A01F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A024 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A029 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A02E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A033 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A038 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A03D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A042 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A047 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A04C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A051 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A056 19                         byte_864A:	dc.b $19
0000A057 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A05C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A061 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A066 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A06B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A070 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A075 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A07A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A07F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A084 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A089 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A08E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A093 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A098 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A09D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A0A2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A0A7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A0AC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A0B1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A0B6 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A0BB 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A0C0 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A0C5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A0CA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A0CF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0D4 19                         byte_86C8:	dc.b $19
0000A0D5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A0DA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A0DF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A0E4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A0E9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A0EE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A0F3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A0F8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A0FD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A102 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A107 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A10C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A111 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A116 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A11B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A120 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A125 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A12A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A12F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A134 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A139 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A13E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A143 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A148 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A14D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A152                            		even
0000A152                            		even
0000A152                            
0000A152                            ; ---------------------------------------------------------------------------
0000A152                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A152                            ; ---------------------------------------------------------------------------
0000A152                            Map_obj53:
0000A152                            	include "_maps\obj53.asm"
0000A152                            ; ---------------------------------------------------------------------------
0000A152                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A152                            ; ---------------------------------------------------------------------------
0000A152 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000A156 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000A15A 04                         byte_874E:	dc.b 4
0000A15B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A160 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A165 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A16A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A16F 08                         byte_8763:	dc.b 8
0000A170 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A175 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A17A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A17F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A184 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A189 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A18E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A193 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A198 04                         byte_878C:	dc.b 4
0000A199 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A19E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A1A3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A1A8 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A1AD 08                         byte_87A1:	dc.b 8
0000A1AE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A1B3 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A1B8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A1BD F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A1C2 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A1C7 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A1CC 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A1D1 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A1D6                            		even
0000A1D6                            		even
0000A1D6                            
0000A1D6                            ; ===========================================================================
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            
0000A1D6                            Obj1C:					; XREF: Obj_Index
0000A1D6 7000                       		moveq	#0,d0
0000A1D8 1028 0024                  		move.b	$24(a0),d0
0000A1DC 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000A1E0 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000A1E4                            ; ===========================================================================
0000A1E4 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000A1E6 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000A1E8                            ; ===========================================================================
0000A1E8                            
0000A1E8                            Obj1C_Main:				; XREF: Obj1C_Index
0000A1E8 5428 0024                  		addq.b	#2,$24(a0)
0000A1EC 7000                       		moveq	#0,d0
0000A1EE 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000A1F2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A1F6 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000A1FA 2159 0004                  		move.l	(a1)+,4(a0)
0000A1FE 3159 0002                  		move.w	(a1)+,2(a0)
0000A202 0028 0004 0001             		ori.b	#4,1(a0)
0000A208 1159 001A                  		move.b	(a1)+,$1A(a0)
0000A20C 1159 0019                  		move.b	(a1)+,$19(a0)
0000A210 1159 0018                  		move.b	(a1)+,$18(a0)
0000A214 1159 0020                  		move.b	(a1)+,$20(a0)
0000A218                            
0000A218                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000A218 3028 0008                  		move.w	8(a0),d0
0000A21C 0240 FF80                  		andi.w	#$FF80,d0
0000A220 3238 F700                  		move.w	($FFFFF700).w,d1
0000A224 0441 0080                  		subi.w	#$80,d1
0000A228 0241 FF80                  		andi.w	#$FF80,d1
0000A22C 9041                       		sub.w	d1,d0
0000A22E 0C40 0280                  		cmpi.w	#$280,d0
0000A232 6200 0000                  		bhi.w	DeleteObject
0000A236 6000 0000                  		bra.w	DisplaySprite
0000A23A                            ; ===========================================================================
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A                            ; Variables for	object $1C are stored in an array
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000A23E 44D8                       		dc.w $44D8		; VRAM setting
0000A240 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A244 0000 0000                  		dc.l Map_obj1C
0000A248 44D8                       		dc.w $44D8
0000A24A 0008 0200                  		dc.b 0,	8, 2, 0
0000A24E 0000 0000                  		dc.l Map_obj1C
0000A252 44D8                       		dc.w $44D8
0000A254 0008 0200                  		dc.b 0,	8, 2, 0
0000A258 0000 934C                  		dc.l Map_obj11
0000A25C 438E                       		dc.w $438E
0000A25E 0110 0100                  		dc.b 1,	$10, 1,	0
0000A262                            ; ---------------------------------------------------------------------------
0000A262                            ; Sprite mappings - SLZ	lava thrower
0000A262                            ; ---------------------------------------------------------------------------
0000A262                            Map_obj1C:
0000A262                            	include "_maps\obj1C.asm"
0000A262                            ; ---------------------------------------------------------------------------
0000A262                            ; Sprite mappings - SLZ	lava thrower
0000A262                            ; ---------------------------------------------------------------------------
0000A262 0000                       		dc.w byte_8858-Map_obj1C
0000A264 01                         byte_8858:	dc.b 1
0000A265 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A26A                            		even
0000A26A                            		even
0000A26A                            
0000A26A                            ; ===========================================================================
0000A26A                            ; ---------------------------------------------------------------------------
0000A26A                            ; Object 1D - switch that activates when Sonic touches it
0000A26A                            ; (this	is not used anywhere in	the game)
0000A26A                            ; ---------------------------------------------------------------------------
0000A26A                            
0000A26A                            Obj1D:					; XREF: Obj_Index
0000A26A 7000                       		moveq	#0,d0
0000A26C 1028 0024                  		move.b	$24(a0),d0
0000A270 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000A274 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000A278                            ; ===========================================================================
0000A278 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000A27A 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000A27C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000A27E                            ; ===========================================================================
0000A27E                            
0000A27E                            Obj1D_Main:				; XREF: Obj1D_Index
0000A27E 5428 0024                  		addq.b	#2,$24(a0)
0000A282 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000A28A 317C 4000 0002             		move.w	#$4000,2(a0)
0000A290 117C 0004 0001             		move.b	#4,1(a0)
0000A296 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000A29C 117C 0010 0019             		move.b	#$10,$19(a0)
0000A2A2 117C 0005 0018             		move.b	#5,$18(a0)
0000A2A8                            
0000A2A8                            Obj1D_Action:				; XREF: Obj1D_Index
0000A2A8 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000A2AE 323C 0010                  		move.w	#$10,d1
0000A2B2 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000A2B6 6700                       		beq.s	Obj1D_ChkDel
0000A2B8 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000A2BC 7001                       		moveq	#1,d0
0000A2BE 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000A2C2                            
0000A2C2                            Obj1D_ChkDel:
0000A2C2 6100 0000                  		bsr.w	DisplaySprite
0000A2C6 3028 0008                  		move.w	8(a0),d0
0000A2CA 0240 FF80                  		andi.w	#$FF80,d0
0000A2CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2D2 0441 0080                  		subi.w	#$80,d1
0000A2D6 0241 FF80                  		andi.w	#$FF80,d1
0000A2DA 9041                       		sub.w	d1,d0
0000A2DC 0C40 0280                  		cmpi.w	#$280,d0
0000A2E0 6200 0000                  		bhi.w	Obj1D_Delete
0000A2E4 4E75                       		rts	
0000A2E6                            ; ===========================================================================
0000A2E6                            
0000A2E6                            Obj1D_Delete:				; XREF: Obj1D_Index
0000A2E6 6100 0000                  		bsr.w	DeleteObject
0000A2EA 4E75                       		rts	
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC                            ; Subroutine to	check if Sonic touches the object
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC                            
0000A2EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2EC                            
0000A2EC                            
0000A2EC                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000A2EC 43F8 D000                  		lea	($FFFFD000).w,a1
0000A2F0 3029 0008                  		move.w	8(a1),d0
0000A2F4 9068 0008                  		sub.w	8(a0),d0
0000A2F8 D041                       		add.w	d1,d0
0000A2FA 6B00                       		bmi.s	loc_8918
0000A2FC D241                       		add.w	d1,d1
0000A2FE B041                       		cmp.w	d1,d0
0000A300 6400                       		bcc.s	loc_8918
0000A302 3429 000C                  		move.w	$C(a1),d2
0000A306 1229 0016                  		move.b	$16(a1),d1
0000A30A 4881                       		ext.w	d1
0000A30C D242                       		add.w	d2,d1
0000A30E 3028 000C                  		move.w	$C(a0),d0
0000A312 0440 0010                  		subi.w	#$10,d0
0000A316 9041                       		sub.w	d1,d0
0000A318 6200                       		bhi.s	loc_8918
0000A31A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A31E 6500                       		bcs.s	loc_8918
0000A320 70FF                       		moveq	#-1,d0
0000A322 4E75                       		rts	
0000A324                            ; ===========================================================================
0000A324                            
0000A324                            loc_8918:
0000A324 7000                       		moveq	#0,d0
0000A326 4E75                       		rts	
0000A328                            ; End of function Obj1D_ChkTouch
0000A328                            
0000A328                            ; ===========================================================================
0000A328                            ; ---------------------------------------------------------------------------
0000A328                            ; Sprite mappings - object 1D
0000A328                            ; ---------------------------------------------------------------------------
0000A328                            Map_obj1D:
0000A328                            	include "_maps\obj1D.asm"
0000A328                            ; ---------------------------------------------------------------------------
0000A328                            ; Sprite mappings - object 1D
0000A328                            ; ---------------------------------------------------------------------------
0000A328 0000                       		dc.w byte_891E-Map_obj1D
0000A32A 04                         byte_891E:	dc.b 4
0000A32B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A330 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A335 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A33A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A340 00                         		even
0000A340 00                         		even
0000A340                            
0000A340                            ; ===========================================================================
0000A340                            ; ---------------------------------------------------------------------------
0000A340                            ; Object 2A - doors (SBZ)
0000A340                            ; ---------------------------------------------------------------------------
0000A340                            
0000A340                            Obj2A:					; XREF: Obj_Index
0000A340 7000                       		moveq	#0,d0
0000A342 1028 0024                  		move.b	$24(a0),d0
0000A346 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000A34A 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000A34E                            ; ===========================================================================
0000A34E 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000A350 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000A352                            ; ===========================================================================
0000A352                            
0000A352                            Obj2A_Main:				; XREF: Obj2A_Index
0000A352 5428 0024                  		addq.b	#2,$24(a0)
0000A356 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000A35E 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000A364 0028 0004 0001             		ori.b	#4,1(a0)
0000A36A 117C 0008 0019             		move.b	#8,$19(a0)
0000A370 117C 0004 0018             		move.b	#4,$18(a0)
0000A376                            
0000A376                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000A376 323C 0040                  		move.w	#$40,d1
0000A37A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000A37E 3038 D008                  		move.w	($FFFFD008).w,d0
0000A382 D041                       		add.w	d1,d0
0000A384 B068 0008                  		cmp.w	8(a0),d0
0000A388 6500                       		bcs.s	Obj2A_Animate
0000A38A 9041                       		sub.w	d1,d0
0000A38C 9041                       		sub.w	d1,d0
0000A38E B068 0008                  		cmp.w	8(a0),d0
0000A392 6400                       		bcc.s	Obj2A_Animate
0000A394 D041                       		add.w	d1,d0
0000A396 B068 0008                  		cmp.w	8(a0),d0
0000A39A 6400                       		bcc.s	loc_899A
0000A39C 0828 0000 0022             		btst	#0,$22(a0)
0000A3A2 6600                       		bne.s	Obj2A_Animate
0000A3A4 6000                       		bra.s	Obj2A_Open
0000A3A6                            ; ===========================================================================
0000A3A6                            
0000A3A6                            loc_899A:				; XREF: Obj2A_OpenShut
0000A3A6 0828 0000 0022             		btst	#0,$22(a0)
0000A3AC 6700                       		beq.s	Obj2A_Animate
0000A3AE                            
0000A3AE                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000A3AE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000A3B4                            
0000A3B4                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000A3B4 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000A3BA 6100 0000                  		bsr.w	AnimateSprite
0000A3BE 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000A3C2 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000A3C4 323C 0011                  		move.w	#$11,d1
0000A3C8 343C 0020                  		move.w	#$20,d2
0000A3CC 3602                       		move.w	d2,d3
0000A3CE 5243                       		addq.w	#1,d3
0000A3D0 3828 0008                  		move.w	8(a0),d4
0000A3D4 6100 0000                  		bsr.w	SolidObject
0000A3D8                            
0000A3D8                            Obj2A_MarkAsUsed:
0000A3D8 6000 0000                  		bra.w	MarkObjGone
0000A3DC                            ; ===========================================================================
0000A3DC                            Ani_obj2A:
0000A3DC                            	include "_anim\obj2A.asm"
0000A3DC                            ; ---------------------------------------------------------------------------
0000A3DC                            ; Animation script - doors (SBZ)
0000A3DC                            ; ---------------------------------------------------------------------------
0000A3DC 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000A3DE 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000A3E0 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000A3EC 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000A3F8                            		even
0000A3F8                            		even
0000A3F8                            
0000A3F8                            ; ---------------------------------------------------------------------------
0000A3F8                            ; Sprite mappings - doors (SBZ)
0000A3F8                            ; ---------------------------------------------------------------------------
0000A3F8                            Map_obj2A:
0000A3F8                            	include "_maps\obj2A.asm"
0000A3F8                            ; ---------------------------------------------------------------------------
0000A3F8                            ; Sprite mappings - doors (SBZ)
0000A3F8                            ; ---------------------------------------------------------------------------
0000A3F8 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000A3FC 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000A400 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000A404 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000A408 0000                       		dc.w byte_8A56-Map_obj2A
0000A40A 02                         byte_89FE:	dc.b 2
0000A40B E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000A410 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000A415 02                         byte_8A09:	dc.b 2
0000A416 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000A41B 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000A420 02                         byte_8A14:	dc.b 2
0000A421 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000A426 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000A42B 02                         byte_8A1F:	dc.b 2
0000A42C D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000A431 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000A436 02                         byte_8A2A:	dc.b 2
0000A437 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000A43C 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000A441 02                         byte_8A35:	dc.b 2
0000A442 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000A447 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000A44C 02                         byte_8A40:	dc.b 2
0000A44D C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000A452 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000A457 02                         byte_8A4B:	dc.b 2
0000A458 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000A45D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000A462 02                         byte_8A56:	dc.b 2
0000A463 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000A468 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000A46E 00                         		even
0000A46E 00                         		even
0000A46E                            
0000A46E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A46E                            
0000A46E                            
0000A46E                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000A46E 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A472 6700                       		beq.s	loc_8AA8
0000A474 6B00 0000                  		bmi.w	loc_8AC4
0000A478 4A40                       		tst.w	d0
0000A47A 6700 0000                  		beq.w	loc_8A92
0000A47E 6B00                       		bmi.s	loc_8A7C
0000A480 4A69 0010                  		tst.w	$10(a1)
0000A484 6B00                       		bmi.s	loc_8A92
0000A486 6000                       		bra.s	loc_8A82
0000A488                            ; ===========================================================================
0000A488                            
0000A488                            loc_8A7C:
0000A488 4A69 0010                  		tst.w	$10(a1)
0000A48C 6A00                       		bpl.s	loc_8A92
0000A48E                            
0000A48E                            loc_8A82:
0000A48E 9169 0008                  		sub.w	d0,8(a1)
0000A492 337C 0000 0014             		move.w	#0,$14(a1)
0000A498 337C 0000 0010             		move.w	#0,$10(a1)
0000A49E                            
0000A49E                            loc_8A92:
0000A49E 0829 0001 0022             		btst	#1,$22(a1)
0000A4A4 6600                       		bne.s	loc_8AB6
0000A4A6 08E9 0005 0022             		bset	#5,$22(a1)
0000A4AC 08E8 0005 0022             		bset	#5,$22(a0)
0000A4B2 4E75                       		rts	
0000A4B4                            ; ===========================================================================
0000A4B4                            
0000A4B4                            loc_8AA8:
0000A4B4 0828 0005 0022             		btst	#5,$22(a0)
0000A4BA 6700                       		beq.s	locret_8AC2
0000A4BC 337C 0001 001C             		move.w	#1,$1C(a1)
0000A4C2                            
0000A4C2                            loc_8AB6:
0000A4C2 08A8 0005 0022             		bclr	#5,$22(a0)
0000A4C8 08A9 0005 0022             		bclr	#5,$22(a1)
0000A4CE                            
0000A4CE                            locret_8AC2:
0000A4CE 4E75                       		rts	
0000A4D0                            ; ===========================================================================
0000A4D0                            
0000A4D0                            loc_8AC4:
0000A4D0 4A69 0012                  		tst.w	$12(a1)
0000A4D4 6A00                       		bpl.s	locret_8AD8
0000A4D6 4A43                       		tst.w	d3
0000A4D8 6A00                       		bpl.s	locret_8AD8
0000A4DA 9769 000C                  		sub.w	d3,$C(a1)
0000A4DE 337C 0000 0012             		move.w	#0,$12(a1)
0000A4E4                            
0000A4E4                            locret_8AD8:
0000A4E4 4E75                       		rts	
0000A4E6                            ; End of function Obj44_SolidWall
0000A4E6                            
0000A4E6                            
0000A4E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4E6                            
0000A4E6                            
0000A4E6                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000A4E6 43F8 D000                  		lea	($FFFFD000).w,a1
0000A4EA 3029 0008                  		move.w	8(a1),d0
0000A4EE 9068 0008                  		sub.w	8(a0),d0
0000A4F2 D041                       		add.w	d1,d0
0000A4F4 6B00                       		bmi.s	loc_8B48
0000A4F6 3601                       		move.w	d1,d3
0000A4F8 D643                       		add.w	d3,d3
0000A4FA B043                       		cmp.w	d3,d0
0000A4FC 6200                       		bhi.s	loc_8B48
0000A4FE 1629 0016                  		move.b	$16(a1),d3
0000A502 4883                       		ext.w	d3
0000A504 D443                       		add.w	d3,d2
0000A506 3629 000C                  		move.w	$C(a1),d3
0000A50A 9668 000C                  		sub.w	$C(a0),d3
0000A50E D642                       		add.w	d2,d3
0000A510 6B00                       		bmi.s	loc_8B48
0000A512 3802                       		move.w	d2,d4
0000A514 D844                       		add.w	d4,d4
0000A516 B644                       		cmp.w	d4,d3
0000A518 6400                       		bcc.s	loc_8B48
0000A51A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A51E 6B00                       		bmi.s	loc_8B48
0000A520 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A526 6400                       		bcc.s	loc_8B48
0000A528 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A52C 6600                       		bne.s	loc_8B48
0000A52E 3A00                       		move.w	d0,d5
0000A530 B240                       		cmp.w	d0,d1
0000A532 6400                       		bcc.s	loc_8B30
0000A534 D241                       		add.w	d1,d1
0000A536 9041                       		sub.w	d1,d0
0000A538 3A00                       		move.w	d0,d5
0000A53A 4445                       		neg.w	d5
0000A53C                            
0000A53C                            loc_8B30:
0000A53C 3203                       		move.w	d3,d1
0000A53E B443                       		cmp.w	d3,d2
0000A540 6400                       		bcc.s	loc_8B3C
0000A542 9644                       		sub.w	d4,d3
0000A544 3203                       		move.w	d3,d1
0000A546 4441                       		neg.w	d1
0000A548                            
0000A548                            loc_8B3C:
0000A548 BA41                       		cmp.w	d1,d5
0000A54A 6200                       		bhi.s	loc_8B44
0000A54C 7801                       		moveq	#1,d4
0000A54E 4E75                       		rts	
0000A550                            ; ===========================================================================
0000A550                            
0000A550                            loc_8B44:
0000A550 78FF                       		moveq	#-1,d4
0000A552 4E75                       		rts	
0000A554                            ; ===========================================================================
0000A554                            
0000A554                            loc_8B48:
0000A554 7800                       		moveq	#0,d4
0000A556 4E75                       		rts	
0000A558                            ; End of function Obj44_SolidWall2
0000A558                            
0000A558                            ; ===========================================================================
0000A558                            ; ---------------------------------------------------------------------------
0000A558                            ; Object 1E - Ball Hog enemy (SBZ)
0000A558                            ; ---------------------------------------------------------------------------
0000A558                            
0000A558                            Obj1E:					; XREF: Obj_Index
0000A558 7000                       		moveq	#0,d0
0000A55A 1028 0024                  		move.b	$24(a0),d0
0000A55E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000A562 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000A566                            ; ===========================================================================
0000A566 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000A568 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000A56A                            ; ===========================================================================
0000A56A                            
0000A56A                            Obj1E_Main:				; XREF: Obj1E_Index
0000A56A 117C 0013 0016             		move.b	#$13,$16(a0)
0000A570 117C 0008 0017             		move.b	#8,$17(a0)
0000A576 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A57E 317C 2302 0002             		move.w	#$2302,2(a0)
0000A584 117C 0004 0001             		move.b	#4,1(a0)
0000A58A 117C 0004 0018             		move.b	#4,$18(a0)
0000A590 117C 0005 0020             		move.b	#5,$20(a0)
0000A596 117C 000C 0019             		move.b	#$C,$19(a0)
0000A59C 6100 0000                  		bsr.w	ObjectFall
0000A5A0 4EB9 0000 0000             		jsr	ObjHitFloor
0000A5A6 4A41                       		tst.w	d1
0000A5A8 6A00                       		bpl.s	locret_8BAC
0000A5AA D368 000C                  		add.w	d1,$C(a0)
0000A5AE 317C 0000 0012             		move.w	#0,$12(a0)
0000A5B4 5428 0024                  		addq.b	#2,$24(a0)
0000A5B8                            
0000A5B8                            locret_8BAC:
0000A5B8 4E75                       		rts	
0000A5BA                            ; ===========================================================================
0000A5BA                            
0000A5BA                            Obj1E_Action:				; XREF: Obj1E_Index
0000A5BA 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000A5C0 6100 0000                  		bsr.w	AnimateSprite
0000A5C4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000A5CA 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000A5CC 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000A5D0 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000A5D2 6000                       		bra.s	Obj1E_MarkAsGone
0000A5D4                            ; ===========================================================================
0000A5D4                            
0000A5D4                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000A5D4 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000A5D8                            
0000A5D8                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000A5D8 6000 0000                  		bra.w	MarkObjGone
0000A5DC                            ; ===========================================================================
0000A5DC                            
0000A5DC                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000A5DC 117C 0001 0032             		move.b	#1,$32(a0)
0000A5E2 6100 0000                  		bsr.w	SingleObjLoad
0000A5E6 6600                       		bne.s	loc_8C1A
0000A5E8 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000A5EC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5F8 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000A5FE 337C 0000 0012             		move.w	#0,$12(a1)
0000A604 70FC                       		moveq	#-4,d0
0000A606 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000A60C 6700                       		beq.s	loc_8C0A	; if not, branch
0000A60E 4440                       		neg.w	d0
0000A610 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000A614                            
0000A614                            loc_8C0A:
0000A614 D169 0008                  		add.w	d0,8(a1)
0000A618 0669 000C 000C             		addi.w	#$C,$C(a1)
0000A61E 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000A624                            
0000A624                            loc_8C1A:
0000A624 60B2                       		bra.s	Obj1E_MarkAsGone
0000A626                            ; ===========================================================================
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            
0000A626                            Obj20:					; XREF: Obj_Index
0000A626 7000                       		moveq	#0,d0
0000A628 1028 0024                  		move.b	$24(a0),d0
0000A62C 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000A630 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000A634                            ; ===========================================================================
0000A634 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000A636 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000A638                            ; ===========================================================================
0000A638                            
0000A638                            Obj20_Main:				; XREF: Obj20_Index
0000A638 5428 0024                  		addq.b	#2,$24(a0)
0000A63C 117C 0007 0016             		move.b	#7,$16(a0)
0000A642 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A64A 317C 2302 0002             		move.w	#$2302,2(a0)
0000A650 117C 0004 0001             		move.b	#4,1(a0)
0000A656 117C 0003 0018             		move.b	#3,$18(a0)
0000A65C 117C 0087 0020             		move.b	#$87,$20(a0)
0000A662 117C 0008 0019             		move.b	#8,$19(a0)
0000A668 7000                       		moveq	#0,d0
0000A66A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A66E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A672 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000A676 117C 0004 001A             		move.b	#4,$1A(a0)
0000A67C                            
0000A67C                            Obj20_Bounce:				; XREF: Obj20_Index
0000A67C 4EB9 0000 0000             		jsr	ObjectFall
0000A682 4A68 0012                  		tst.w	$12(a0)
0000A686 6B00                       		bmi.s	Obj20_ChkExplode
0000A688 4EB9 0000 0000             		jsr	ObjHitFloor
0000A68E 4A41                       		tst.w	d1
0000A690 6A00                       		bpl.s	Obj20_ChkExplode
0000A692 D368 000C                  		add.w	d1,$C(a0)
0000A696 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A69C 4A03                       		tst.b	d3
0000A69E 6700                       		beq.s	Obj20_ChkExplode
0000A6A0 6B00                       		bmi.s	loc_8CA4
0000A6A2 4A68 0010                  		tst.w	$10(a0)
0000A6A6 6A00                       		bpl.s	Obj20_ChkExplode
0000A6A8 4468 0010                  		neg.w	$10(a0)
0000A6AC 6000                       		bra.s	Obj20_ChkExplode
0000A6AE                            ; ===========================================================================
0000A6AE                            
0000A6AE                            loc_8CA4:				; XREF: Obj20_Bounce
0000A6AE 4A68 0010                  		tst.w	$10(a0)
0000A6B2 6B00                       		bmi.s	Obj20_ChkExplode
0000A6B4 4468 0010                  		neg.w	$10(a0)
0000A6B8                            
0000A6B8                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A6B8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A6BC 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A6BE 10BC 0024                  		move.b	#$24,0(a0)
0000A6C2 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A6C6 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A6CC 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A6D0                            ; ===========================================================================
0000A6D0                            
0000A6D0                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A6D0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A6D4 6A00                       		bpl.s	Obj20_Display
0000A6D6 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A6DC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A6E2                            
0000A6E2                            Obj20_Display:
0000A6E2 6100 0000                  		bsr.w	DisplaySprite
0000A6E6 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A6EA 0640 00E0                  		addi.w	#$E0,d0
0000A6EE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A6F2 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A6F6 4E75                       		rts	
0000A6F8                            ; ===========================================================================
0000A6F8                            ; ---------------------------------------------------------------------------
0000A6F8                            ; Object 24 - explosion	from a destroyed monitor
0000A6F8                            ; ---------------------------------------------------------------------------
0000A6F8                            
0000A6F8                            Obj24:					; XREF: Obj_Index
0000A6F8 7000                       		moveq	#0,d0
0000A6FA 1028 0024                  		move.b	$24(a0),d0
0000A6FE 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A702 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A706                            ; ===========================================================================
0000A706 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A708 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A70A                            ; ===========================================================================
0000A70A                            
0000A70A                            Obj24_Main:				; XREF: Obj24_Index
0000A70A 5428 0024                  		addq.b	#2,$24(a0)
0000A70E 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A716 317C 041C 0002             		move.w	#$41C,2(a0)
0000A71C 117C 0004 0001             		move.b	#4,1(a0)
0000A722 117C 0001 0018             		move.b	#1,$18(a0)
0000A728 117C 0000 0020             		move.b	#0,$20(a0)
0000A72E 117C 000C 0019             		move.b	#$C,$19(a0)
0000A734 117C 0009 001E             		move.b	#9,$1E(a0)
0000A73A 117C 0000 001A             		move.b	#0,$1A(a0)
0000A740 303C 00A5                  		move.w	#$A5,d0
0000A744 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A74A                            
0000A74A                            Obj24_Animate:				; XREF: Obj24_Index
0000A74A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A74E 6A00                       		bpl.s	Obj24_Display
0000A750 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A756 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A75A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A760 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A764                            
0000A764                            Obj24_Display:
0000A764 6000 0000                  		bra.w	DisplaySprite
0000A768                            ; ===========================================================================
0000A768                            ; ---------------------------------------------------------------------------
0000A768                            ; Object 27 - explosion	from a destroyed enemy
0000A768                            ; ---------------------------------------------------------------------------
0000A768                            
0000A768                            Obj27:					; XREF: Obj_Index
0000A768 7000                       		moveq	#0,d0
0000A76A 1028 0024                  		move.b	$24(a0),d0
0000A76E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A772 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A776                            ; ===========================================================================
0000A776 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A778 0000                       		dc.w Obj27_Main-Obj27_Index
0000A77A 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A77C                            ; ===========================================================================
0000A77C                            
0000A77C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A77C 5428 0024                  		addq.b	#2,$24(a0)
0000A780 6100 0000                  		bsr.w	SingleObjLoad
0000A784 6600                       		bne.s	Obj27_Main
0000A786 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A78A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A790 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A796 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A79C                            
0000A79C                            Obj27_Main:				; XREF: Obj27_Index
0000A79C 5428 0024                  		addq.b	#2,$24(a0)
0000A7A0 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A7A8 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A7AE 117C 0004 0001             		move.b	#4,1(a0)
0000A7B4 117C 0001 0018             		move.b	#1,$18(a0)
0000A7BA 117C 0000 0020             		move.b	#0,$20(a0)
0000A7C0 117C 000C 0019             		move.b	#$C,$19(a0)
0000A7C6 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7CC 117C 0000 001A             		move.b	#0,$1A(a0)
0000A7D2 303C 00C1                  		move.w	#$C1,d0
0000A7D6 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A7DC                            
0000A7DC                            Obj27_Animate:				; XREF: Obj27_Index
0000A7DC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A7E0 6A00                       		bpl.s	Obj27_Display
0000A7E2 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7E8 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A7EC 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A7F2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7F6                            
0000A7F6                            Obj27_Display:
0000A7F6 6000 0000                  		bra.w	DisplaySprite
0000A7FA                            ; ===========================================================================
0000A7FA                            ; ---------------------------------------------------------------------------
0000A7FA                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A7FA                            ; ---------------------------------------------------------------------------
0000A7FA                            
0000A7FA                            Obj3F:					; XREF: Obj_Index
0000A7FA 7000                       		moveq	#0,d0
0000A7FC 1028 0024                  		move.b	$24(a0),d0
0000A800 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A804 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A808                            ; ===========================================================================
0000A808 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A80A FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A80C                            ; ===========================================================================
0000A80C                            
0000A80C                            Obj3F_Main:				; XREF: Obj3F_Index
0000A80C 5428 0024                  		addq.b	#2,$24(a0)
0000A810 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A818 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A81E 117C 0004 0001             		move.b	#4,1(a0)
0000A824 117C 0001 0018             		move.b	#1,$18(a0)
0000A82A 117C 0000 0020             		move.b	#0,$20(a0)
0000A830 117C 000C 0019             		move.b	#$C,$19(a0)
0000A836 117C 0007 001E             		move.b	#7,$1E(a0)
0000A83C 117C 0000 001A             		move.b	#0,$1A(a0)
0000A842 303C 00C4                  		move.w	#$C4,d0
0000A846 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A84C                            ; ===========================================================================
0000A84C                            Ani_obj1E:
0000A84C                            	include "_anim\obj1E.asm"
0000A84C                            ; ---------------------------------------------------------------------------
0000A84C                            ; Animation script - doors (SBZ)
0000A84C                            ; ---------------------------------------------------------------------------
0000A84C 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A84E 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A866 00                         		even
0000A866 00                         		even
0000A866                            
0000A866                            ; ---------------------------------------------------------------------------
0000A866                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A866                            ; ---------------------------------------------------------------------------
0000A866                            Map_obj1E:
0000A866                            	include "_maps\obj1E.asm"
0000A866                            ; ---------------------------------------------------------------------------
0000A866                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A866                            ; ---------------------------------------------------------------------------
0000A866 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A86A 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A86E 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A872 02                         byte_8E6E:	dc.b 2
0000A873 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A878 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A87D 02                         byte_8E79:	dc.b 2
0000A87E EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A883 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A888 02                         byte_8E84:	dc.b 2
0000A889 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A88E 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A893 02                         byte_8E8F:	dc.b 2
0000A894 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A899 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A89E 01                         byte_8E9A:	dc.b 1
0000A89F F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A8A4 01                         byte_8EA0:	dc.b 1
0000A8A5 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A8AA                            		even
0000A8AA                            		even
0000A8AA                            
0000A8AA                            ; ---------------------------------------------------------------------------
0000A8AA                            ; Sprite mappings - explosion
0000A8AA                            ; ---------------------------------------------------------------------------
0000A8AA                            Map_obj24:
0000A8AA                            	include "_maps\obj24.asm"
0000A8AA                            ; ---------------------------------------------------------------------------
0000A8AA                            ; Sprite mappings - explosion
0000A8AA                            ; ---------------------------------------------------------------------------
0000A8AA 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A8AE 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A8B2 01                         byte_8EAE:	dc.b 1
0000A8B3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A8B8 01                         byte_8EB4:	dc.b 1
0000A8B9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A8BE 01                         byte_8EBA:	dc.b 1
0000A8BF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A8C4 01                         byte_8EC0:	dc.b 1
0000A8C5 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A8CA                            		even
0000A8CA                            		even
0000A8CA                            
0000A8CA                            ; ---------------------------------------------------------------------------
0000A8CA                            ; Sprite mappings - explosion
0000A8CA                            ; ---------------------------------------------------------------------------
0000A8CA 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A8CE 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A8D2 0000                       		dc.w byte_8EF7-Map_obj27
0000A8D4 01                         byte_8ED0:	dc.b 1
0000A8D5 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A8DA 01                         byte_8ED6:	dc.b 1
0000A8DB F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A8E0 01                         byte_8EDC:	dc.b 1
0000A8E1 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A8E6 04                         byte_8EE2:	dc.b 4
0000A8E7 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A8EC EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A8F1 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A8F6 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A8FB 04                         byte_8EF7:	dc.b 4
0000A8FC EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A901 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A906 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A90B FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A910                            		even
0000A910                            ; ---------------------------------------------------------------------------
0000A910                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A910                            ; ---------------------------------------------------------------------------
0000A910 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A912 0000                       		dc.w byte_8F16-Map_obj3F
0000A914 0000                       		dc.w byte_8F1C-Map_obj3F
0000A916 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A918 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A91A 01                         byte_8F16:	dc.b 1
0000A91B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A920 01                         byte_8F1C:	dc.b 1
0000A921 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A926                            		even
0000A926                            ; ===========================================================================
0000A926                            ; ---------------------------------------------------------------------------
0000A926                            ; Object 28 - animals
0000A926                            ; ---------------------------------------------------------------------------
0000A926                            
0000A926                            Obj28:					; XREF: Obj_Index
0000A926 7000                       		moveq	#0,d0
0000A928 1028 0024                  		move.b	$24(a0),d0
0000A92C 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A930 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A934                            ; ===========================================================================
0000A934 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A938 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A93C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A940 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A944 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A948 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A94C 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A950 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A954 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A958 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A95C 0000                       		dc.w loc_92D6-Obj28_Index
0000A95E                            
0000A95E 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A96A                            
0000A96A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A96E 0000 0000                  		dc.l Map_obj28
0000A972 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A976 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A97A FE80 FD00                  		dc.w $FE80, $FD00
0000A97E 0000 0000                  		dc.l Map_obj28
0000A982 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A986 0000 0000                  		dc.l Map_obj28a
0000A98A FE40 FD00                  		dc.w $FE40, $FD00
0000A98E 0000 0000                  		dc.l Map_obj28b
0000A992 FD00 FC00                  		dc.w $FD00, $FC00
0000A996 0000 0000                  		dc.l Map_obj28a
0000A99A FD80 FC80                  		dc.w $FD80, $FC80
0000A99E 0000 0000                  		dc.l Map_obj28b
0000A9A2                            
0000A9A2 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A9B2 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A9C2 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A9CE                            
0000A9CE 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A9E2 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A9F6 0000 0000                  		dc.l Map_obj28b
0000A9FA                            
0000A9FA 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AA0C 0565 05B3                  		dc.w $565, $5B3
0000AA10                            ; ===========================================================================
0000AA10                            
0000AA10                            Obj28_Ending:				; XREF: Obj28_Index
0000AA10 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000AA14 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000AA18 7000                       		moveq	#0,d0
0000AA1A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000AA1E D040                       		add.w	d0,d0		; multiply d0 by 2
0000AA20 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000AA24 0440 0014                  		subi.w	#$14,d0
0000AA28 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000AA2E D040                       		add.w	d0,d0
0000AA30 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000AA36 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000AA3A 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA40 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000AA46 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA4C 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000AA52 117C 000C 0016             		move.b	#$C,$16(a0)
0000AA58 117C 0004 0001             		move.b	#4,1(a0)
0000AA5E 08E8 0000 0001             		bset	#0,1(a0)
0000AA64 117C 0006 0018             		move.b	#6,$18(a0)
0000AA6A 117C 0008 0019             		move.b	#8,$19(a0)
0000AA70 117C 0007 001E             		move.b	#7,$1E(a0)
0000AA76 6000 0000                  		bra.w	DisplaySprite
0000AA7A                            ; ===========================================================================
0000AA7A                            
0000AA7A                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000AA7A 5428 0024                  		addq.b	#2,$24(a0)
0000AA7E                            		bsr.w	RandomNumber
0000AA80 0240 0001                  		andi.w	#1,d0
0000AA84 7200                       		moveq	#0,d1
0000AA86 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000AA8A D241                       		add.w	d1,d1
0000AA8C D240                       		add.w	d0,d1
0000AA8E 43FA FECE                  		lea	Obj28_VarIndex(pc),a1
0000AA92 1031 1000                  		move.b	(a1,d1.w),d0
0000AA96 1140 0030                  		move.b	d0,$30(a0)
0000AA9A E748                       		lsl.w	#3,d0
0000AA9C 43FA FECC                  		lea	Obj28_Variables(pc),a1
0000AAA0 D2C0                       		adda.w	d0,a1
0000AAA2 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AAA6 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AAAA 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000AAAE 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000AAB4 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AABA 6700                       		beq.s	loc_90C0	; if yes, branch
0000AABC 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000AAC2                            
0000AAC2                            loc_90C0:
0000AAC2 117C 000C 0016             		move.b	#$C,$16(a0)
0000AAC8 117C 0004 0001             		move.b	#4,1(a0)
0000AACE 08E8 0000 0001             		bset	#0,1(a0)
0000AAD4 117C 0006 0018             		move.b	#6,$18(a0)
0000AADA 117C 0008 0019             		move.b	#8,$19(a0)
0000AAE0 117C 0007 001E             		move.b	#7,$1E(a0)
0000AAE6 117C 0002 001A             		move.b	#2,$1A(a0)
0000AAEC 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AAF2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AAF6 6600                       		bne.s	loc_911C
0000AAF8 6100 0000                  		bsr.w	SingleObjLoad
0000AAFC 6600                       		bne.s	Obj28_Display
0000AAFE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000AB02 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB0E 3028 003E                  		move.w	$3E(a0),d0
0000AB12 E248                       		lsr.w	#1,d0
0000AB14 1340 001A                  		move.b	d0,$1A(a1)
0000AB18                            
0000AB18                            Obj28_Display:
0000AB18 6000 0000                  		bra.w	DisplaySprite
0000AB1C                            ; ===========================================================================
0000AB1C                            
0000AB1C                            loc_911C:
0000AB1C 117C 0012 0024             		move.b	#$12,$24(a0)
0000AB22 4268 0010                  		clr.w	$10(a0)
0000AB26 6000 0000                  		bra.w	DisplaySprite
0000AB2A                            ; ===========================================================================
0000AB2A                            
0000AB2A                            loc_912A:				; XREF: Obj28_Index
0000AB2A 4A28 0001                  		tst.b	1(a0)
0000AB2E 6A00 0000                  		bpl.w	DeleteObject
0000AB32 6100 0000                  		bsr.w	ObjectFall
0000AB36 4A68 0012                  		tst.w	$12(a0)
0000AB3A 6B00                       		bmi.s	loc_9180
0000AB3C 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB42 4A41                       		tst.w	d1
0000AB44 6A00                       		bpl.s	loc_9180
0000AB46 D368 000C                  		add.w	d1,$C(a0)
0000AB4A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AB50 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB56 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB5C 1028 0030                  		move.b	$30(a0),d0
0000AB60 D000                       		add.b	d0,d0
0000AB62 5800                       		addq.b	#4,d0
0000AB64 1140 0024                  		move.b	d0,$24(a0)
0000AB68 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AB6C 6700                       		beq.s	loc_9180
0000AB6E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000AB74 6700                       		beq.s	loc_9180
0000AB76 4468 0010                  		neg.w	$10(a0)
0000AB7A 0868 0000 0001             		bchg	#0,1(a0)
0000AB80                            
0000AB80                            loc_9180:
0000AB80 6000 0000                  		bra.w	DisplaySprite
0000AB84                            ; ===========================================================================
0000AB84                            
0000AB84                            loc_9184:				; XREF: Obj28_Index
0000AB84 6100 0000                  		bsr.w	ObjectFall
0000AB88 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB8E 4A68 0012                  		tst.w	$12(a0)
0000AB92 6B00                       		bmi.s	loc_91AE
0000AB94 117C 0000 001A             		move.b	#0,$1A(a0)
0000AB9A 4EB9 0000 0000             		jsr	ObjHitFloor
0000ABA0 4A41                       		tst.w	d1
0000ABA2 6A00                       		bpl.s	loc_91AE
0000ABA4 D368 000C                  		add.w	d1,$C(a0)
0000ABA8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ABAE                            
0000ABAE                            loc_91AE:
0000ABAE 4A28 0028                  		tst.b	$28(a0)
0000ABB2 6600                       		bne.s	loc_9224
0000ABB4 4A28 0001                  		tst.b	1(a0)
0000ABB8 6A00 0000                  		bpl.w	DeleteObject
0000ABBC 6000 0000                  		bra.w	DisplaySprite
0000ABC0                            ; ===========================================================================
0000ABC0                            
0000ABC0                            loc_91C0:				; XREF: Obj28_Index
0000ABC0 6100 0000                  		bsr.w	SpeedToPos
0000ABC4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000ABCA 4A68 0012                  		tst.w	$12(a0)
0000ABCE 6B00                       		bmi.s	loc_91FC
0000ABD0 4EB9 0000 0000             		jsr	ObjHitFloor
0000ABD6 4A41                       		tst.w	d1
0000ABD8 6A00                       		bpl.s	loc_91FC
0000ABDA D368 000C                  		add.w	d1,$C(a0)
0000ABDE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ABE4 4A28 0028                  		tst.b	$28(a0)
0000ABE8 6700                       		beq.s	loc_91FC
0000ABEA 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000ABF0 6700                       		beq.s	loc_91FC
0000ABF2 4468 0010                  		neg.w	$10(a0)
0000ABF6 0868 0000 0001             		bchg	#0,1(a0)
0000ABFC                            
0000ABFC                            loc_91FC:
0000ABFC 5328 001E                  		subq.b	#1,$1E(a0)
0000AC00 6A00                       		bpl.s	loc_9212
0000AC02 117C 0001 001E             		move.b	#1,$1E(a0)
0000AC08 5228 001A                  		addq.b	#1,$1A(a0)
0000AC0C 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AC12                            
0000AC12                            loc_9212:
0000AC12 4A28 0028                  		tst.b	$28(a0)
0000AC16 6600                       		bne.s	loc_9224
0000AC18 4A28 0001                  		tst.b	1(a0)
0000AC1C 6A00 0000                  		bpl.w	DeleteObject
0000AC20 6000 0000                  		bra.w	DisplaySprite
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            loc_9224:				; XREF: Obj28_Index
0000AC24 3028 0008                  		move.w	8(a0),d0
0000AC28 9078 D008                  		sub.w	($FFFFD008).w,d0
0000AC2C 6500                       		bcs.s	loc_923C
0000AC2E 0440 0180                  		subi.w	#$180,d0
0000AC32 6A00                       		bpl.s	loc_923C
0000AC34 4A28 0001                  		tst.b	1(a0)
0000AC38 6A00 0000                  		bpl.w	DeleteObject
0000AC3C                            
0000AC3C                            loc_923C:
0000AC3C 6000 0000                  		bra.w	DisplaySprite
0000AC40                            ; ===========================================================================
0000AC40                            
0000AC40                            loc_9240:				; XREF: Obj28_Index
0000AC40 4A28 0001                  		tst.b	1(a0)
0000AC44 6A00 0000                  		bpl.w	DeleteObject
0000AC48 5368 0036                  		subq.w	#1,$36(a0)
0000AC4C 6600 0000                  		bne.w	loc_925C
0000AC50 117C 0002 0024             		move.b	#2,$24(a0)
0000AC56 117C 0003 0018             		move.b	#3,$18(a0)
0000AC5C                            
0000AC5C                            loc_925C:
0000AC5C 6000 0000                  		bra.w	DisplaySprite
0000AC60                            ; ===========================================================================
0000AC60                            
0000AC60                            loc_9260:				; XREF: Obj28_Index
0000AC60 6100 0000                  		bsr.w	sub_9404
0000AC64 6400                       		bcc.s	loc_927C
0000AC66 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AC6C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AC72 117C 000E 0024             		move.b	#$E,$24(a0)
0000AC78 6000 FF46                  		bra.w	loc_91C0
0000AC7C                            ; ===========================================================================
0000AC7C                            
0000AC7C                            loc_927C:
0000AC7C 6000 FFA6                  		bra.w	loc_9224
0000AC80                            ; ===========================================================================
0000AC80                            
0000AC80                            loc_9280:				; XREF: Obj28_Index
0000AC80 6100 0000                  		bsr.w	sub_9404
0000AC84 6A00                       		bpl.s	loc_92B6
0000AC86 4268 0010                  		clr.w	$10(a0)
0000AC8A 4268 0032                  		clr.w	$32(a0)
0000AC8E 6100 0000                  		bsr.w	SpeedToPos
0000AC92 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AC98 6100 0000                  		bsr.w	loc_93C4
0000AC9C 6100 0000                  		bsr.w	loc_93EC
0000ACA0 5328 001E                  		subq.b	#1,$1E(a0)
0000ACA4 6A00                       		bpl.s	loc_92B6
0000ACA6 117C 0001 001E             		move.b	#1,$1E(a0)
0000ACAC 5228 001A                  		addq.b	#1,$1A(a0)
0000ACB0 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ACB6                            
0000ACB6                            loc_92B6:
0000ACB6 6000 FF6C                  		bra.w	loc_9224
0000ACBA                            ; ===========================================================================
0000ACBA                            
0000ACBA                            loc_92BA:				; XREF: Obj28_Index
0000ACBA 6100 0000                  		bsr.w	sub_9404
0000ACBE 6A00                       		bpl.s	loc_9310
0000ACC0 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000ACC6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ACCC 117C 0004 0024             		move.b	#4,$24(a0)
0000ACD2 6000 FEB0                  		bra.w	loc_9184
0000ACD6                            ; ===========================================================================
0000ACD6                            
0000ACD6                            loc_92D6:				; XREF: Obj28_Index
0000ACD6 6100 0000                  		bsr.w	ObjectFall
0000ACDA 117C 0001 001A             		move.b	#1,$1A(a0)
0000ACE0 4A68 0012                  		tst.w	$12(a0)
0000ACE4 6B00                       		bmi.s	loc_9310
0000ACE6 117C 0000 001A             		move.b	#0,$1A(a0)
0000ACEC 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACF2 4A41                       		tst.w	d1
0000ACF4 6A00                       		bpl.s	loc_9310
0000ACF6 4628 0029                  		not.b	$29(a0)
0000ACFA 6600                       		bne.s	loc_9306
0000ACFC 4468 0010                  		neg.w	$10(a0)
0000AD00 0868 0000 0001             		bchg	#0,1(a0)
0000AD06                            
0000AD06                            loc_9306:
0000AD06 D368 000C                  		add.w	d1,$C(a0)
0000AD0A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD10                            
0000AD10                            loc_9310:
0000AD10 6000 FF12                  		bra.w	loc_9224
0000AD14                            ; ===========================================================================
0000AD14                            
0000AD14                            loc_9314:				; XREF: Obj28_Index
0000AD14 6100 0000                  		bsr.w	sub_9404
0000AD18 6A00                       		bpl.s	loc_932E
0000AD1A 4268 0010                  		clr.w	$10(a0)
0000AD1E 4268 0032                  		clr.w	$32(a0)
0000AD22 6100 0000                  		bsr.w	ObjectFall
0000AD26 6100 0000                  		bsr.w	loc_93C4
0000AD2A 6100 0000                  		bsr.w	loc_93EC
0000AD2E                            
0000AD2E                            loc_932E:
0000AD2E 6000 FEF4                  		bra.w	loc_9224
0000AD32                            ; ===========================================================================
0000AD32                            
0000AD32                            loc_9332:				; XREF: Obj28_Index
0000AD32 6100 0000                  		bsr.w	sub_9404
0000AD36 6A00                       		bpl.s	loc_936C
0000AD38 6100 0000                  		bsr.w	ObjectFall
0000AD3C 117C 0001 001A             		move.b	#1,$1A(a0)
0000AD42 4A68 0012                  		tst.w	$12(a0)
0000AD46 6B00                       		bmi.s	loc_936C
0000AD48 117C 0000 001A             		move.b	#0,$1A(a0)
0000AD4E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD54 4A41                       		tst.w	d1
0000AD56 6A00                       		bpl.s	loc_936C
0000AD58 4468 0010                  		neg.w	$10(a0)
0000AD5C 0868 0000 0001             		bchg	#0,1(a0)
0000AD62 D368 000C                  		add.w	d1,$C(a0)
0000AD66 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD6C                            
0000AD6C                            loc_936C:
0000AD6C 6000 FEB6                  		bra.w	loc_9224
0000AD70                            ; ===========================================================================
0000AD70                            
0000AD70                            loc_9370:				; XREF: Obj28_Index
0000AD70 6100 0000                  		bsr.w	sub_9404
0000AD74 6A00                       		bpl.s	loc_93C0
0000AD76 6100 0000                  		bsr.w	SpeedToPos
0000AD7A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD80 4A68 0012                  		tst.w	$12(a0)
0000AD84 6B00                       		bmi.s	loc_93AA
0000AD86 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD8C 4A41                       		tst.w	d1
0000AD8E 6A00                       		bpl.s	loc_93AA
0000AD90 4628 0029                  		not.b	$29(a0)
0000AD94 6600                       		bne.s	loc_93A0
0000AD96 4468 0010                  		neg.w	$10(a0)
0000AD9A 0868 0000 0001             		bchg	#0,1(a0)
0000ADA0                            
0000ADA0                            loc_93A0:
0000ADA0 D368 000C                  		add.w	d1,$C(a0)
0000ADA4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ADAA                            
0000ADAA                            loc_93AA:
0000ADAA 5328 001E                  		subq.b	#1,$1E(a0)
0000ADAE 6A00                       		bpl.s	loc_93C0
0000ADB0 117C 0001 001E             		move.b	#1,$1E(a0)
0000ADB6 5228 001A                  		addq.b	#1,$1A(a0)
0000ADBA 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ADC0                            
0000ADC0                            loc_93C0:
0000ADC0 6000 FE62                  		bra.w	loc_9224
0000ADC4                            ; ===========================================================================
0000ADC4                            
0000ADC4                            loc_93C4:
0000ADC4 117C 0001 001A             		move.b	#1,$1A(a0)
0000ADCA 4A68 0012                  		tst.w	$12(a0)
0000ADCE 6B00                       		bmi.s	locret_93EA
0000ADD0 117C 0000 001A             		move.b	#0,$1A(a0)
0000ADD6 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADDC 4A41                       		tst.w	d1
0000ADDE 6A00                       		bpl.s	locret_93EA
0000ADE0 D368 000C                  		add.w	d1,$C(a0)
0000ADE4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ADEA                            
0000ADEA                            locret_93EA:
0000ADEA 4E75                       		rts	
0000ADEC                            ; ===========================================================================
0000ADEC                            
0000ADEC                            loc_93EC:
0000ADEC 08E8 0000 0001             		bset	#0,1(a0)
0000ADF2 3028 0008                  		move.w	8(a0),d0
0000ADF6 9078 D008                  		sub.w	($FFFFD008).w,d0
0000ADFA 6400                       		bcc.s	locret_9402
0000ADFC 08A8 0000 0001             		bclr	#0,1(a0)
0000AE02                            
0000AE02                            locret_9402:
0000AE02 4E75                       		rts	
0000AE04                            
0000AE04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE04                            
0000AE04                            
0000AE04                            sub_9404:
0000AE04 3038 D008                  		move.w	($FFFFD008).w,d0
0000AE08 9068 0008                  		sub.w	8(a0),d0
0000AE0C 0440 00B8                  		subi.w	#$B8,d0
0000AE10 4E75                       		rts	
0000AE12                            ; End of function sub_9404
0000AE12                            
0000AE12                            ; ===========================================================================
0000AE12                            ; ---------------------------------------------------------------------------
0000AE12                            ; Object 29 - points that appear when you destroy something
0000AE12                            ; ---------------------------------------------------------------------------
0000AE12                            
0000AE12                            Obj29:					; XREF: Obj_Index
0000AE12 7000                       		moveq	#0,d0
0000AE14 1028 0024                  		move.b	$24(a0),d0
0000AE18 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000AE1C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000AE20 6000 0000                  		bra.w	DisplaySprite
0000AE24                            ; ===========================================================================
0000AE24 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000AE26 0000                       		dc.w Obj29_Slower-Obj29_Index
0000AE28                            ; ===========================================================================
0000AE28                            
0000AE28                            Obj29_Main:				; XREF: Obj29_Index
0000AE28 5428 0024                  		addq.b	#2,$24(a0)
0000AE2C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000AE34 317C 2797 0002             		move.w	#$2797,2(a0)
0000AE3A 117C 0004 0001             		move.b	#4,1(a0)
0000AE40 117C 0001 0018             		move.b	#1,$18(a0)
0000AE46 117C 0008 0019             		move.b	#8,$19(a0)
0000AE4C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000AE52                            
0000AE52                            Obj29_Slower:				; XREF: Obj29_Index
0000AE52 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE56 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000AE5A 6100 0000                  		bsr.w	SpeedToPos
0000AE5E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE64 4E75                       		rts	
0000AE66                            ; ===========================================================================
0000AE66                            ; ---------------------------------------------------------------------------
0000AE66                            ; Sprite mappings - animals
0000AE66                            ; ---------------------------------------------------------------------------
0000AE66                            Map_obj28:
0000AE66                            	include "_maps\obj28.asm"
0000AE66                            ; ---------------------------------------------------------------------------
0000AE66                            ; Sprite mappings - animals
0000AE66                            ; ---------------------------------------------------------------------------
0000AE66 0000                       		dc.w byte_9472-Map_obj28
0000AE68 0000                       		dc.w byte_9478-Map_obj28
0000AE6A 0000                       		dc.w byte_946C-Map_obj28
0000AE6C 01                         byte_946C:	dc.b 1
0000AE6D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE72 01                         byte_9472:	dc.b 1
0000AE73 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AE78 01                         byte_9478:	dc.b 1
0000AE79 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AE7E                            		even
0000AE7E                            		even
0000AE7E                            
0000AE7E                            Map_obj28a:
0000AE7E                            	include "_maps\obj28a.asm"
0000AE7E                            ; ---------------------------------------------------------------------------
0000AE7E                            ; Sprite mappings - animals
0000AE7E                            ; ---------------------------------------------------------------------------
0000AE7E 0000                       		dc.w byte_948A-Map_obj28a
0000AE80 0000                       		dc.w byte_9490-Map_obj28a
0000AE82 0000                       		dc.w byte_9484-Map_obj28a
0000AE84 01                         byte_9484:	dc.b 1
0000AE85 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE8A 01                         byte_948A:	dc.b 1
0000AE8B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AE90 01                         byte_9490:	dc.b 1
0000AE91 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AE96                            		even
0000AE96                            		even
0000AE96                            
0000AE96                            Map_obj28b:
0000AE96                            	include "_maps\obj28b.asm"
0000AE96                            ; ---------------------------------------------------------------------------
0000AE96                            ; Sprite mappings - animals
0000AE96                            ; ---------------------------------------------------------------------------
0000AE96 0000                       		dc.w byte_94A2-Map_obj28b
0000AE98 0000                       		dc.w byte_94A8-Map_obj28b
0000AE9A 0000                       		dc.w byte_949C-Map_obj28b
0000AE9C 01                         byte_949C:	dc.b 1
0000AE9D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEA2 01                         byte_94A2:	dc.b 1
0000AEA3 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AEA8 01                         byte_94A8:	dc.b 1
0000AEA9 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AEAE                            		even
0000AEAE                            		even
0000AEAE                            
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            ; Sprite mappings - points that	appear when you	destroy	something
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            Map_obj29:
0000AEAE                            	include "_maps\obj29.asm"
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            ; Sprite mappings - points that	appear when you	destroy	something
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000AEB2 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000AEB6 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000AEBA 0000                       		dc.w byte_94E5-Map_obj29
0000AEBC 01                         byte_94BC:	dc.b 1
0000AEBD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000AEC2 01                         byte_94C2:	dc.b 1
0000AEC3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000AEC8 01                         byte_94C8:	dc.b 1
0000AEC9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000AECE 01                         byte_94CE:	dc.b 1
0000AECF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000AED4 01                         byte_94D4:	dc.b 1
0000AED5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000AEDA 02                         byte_94DA:	dc.b 2
0000AEDB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000AEE0 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000AEE5 02                         byte_94E5:	dc.b 2
0000AEE6 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000AEEB FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000AEF0                            		even
0000AEF0                            		even
0000AEF0                            
0000AEF0                            ; ===========================================================================
0000AEF0                            ; ---------------------------------------------------------------------------
0000AEF0                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AEF0                            ; ---------------------------------------------------------------------------
0000AEF0                            
0000AEF0                            Obj1F:					; XREF: Obj_Index
0000AEF0 7000                       		moveq	#0,d0
0000AEF2 1028 0024                  		move.b	$24(a0),d0
0000AEF6 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000AEFA 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000AEFE                            ; ===========================================================================
0000AEFE 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000AF00 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000AF02 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000AF04 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000AF06 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000AF08                            ; ===========================================================================
0000AF08                            
0000AF08                            Obj1F_Main:				; XREF: Obj1F_Index
0000AF08 117C 0010 0016             		move.b	#$10,$16(a0)
0000AF0E 117C 0008 0017             		move.b	#8,$17(a0)
0000AF14 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AF1C 317C 0400 0002             		move.w	#$400,2(a0)
0000AF22 117C 0004 0001             		move.b	#4,1(a0)
0000AF28 117C 0003 0018             		move.b	#3,$18(a0)
0000AF2E 117C 0006 0020             		move.b	#6,$20(a0)
0000AF34 117C 0015 0019             		move.b	#$15,$19(a0)
0000AF3A 6100 0000                  		bsr.w	ObjectFall
0000AF3E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AF44 4A41                       		tst.w	d1
0000AF46 6A00                       		bpl.s	locret_955A
0000AF48 D368 000C                  		add.w	d1,$C(a0)
0000AF4C 1143 0026                  		move.b	d3,$26(a0)
0000AF50 317C 0000 0012             		move.w	#0,$12(a0)
0000AF56 5428 0024                  		addq.b	#2,$24(a0)
0000AF5A                            
0000AF5A                            locret_955A:
0000AF5A 4E75                       		rts	
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            Obj1F_Action:				; XREF: Obj1F_Index
0000AF5C 7000                       		moveq	#0,d0
0000AF5E 1028 0025                  		move.b	$25(a0),d0
0000AF62 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000AF66 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000AF6A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AF70 6100 0000                  		bsr.w	AnimateSprite
0000AF74 6000 0000                  		bra.w	MarkObjGone
0000AF78                            ; ===========================================================================
0000AF78 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000AF7A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000AF7C                            ; ===========================================================================
0000AF7C                            
0000AF7C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000AF7C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000AF80 6A00                       		bpl.s	locret_95B6	; if time remains, branch
0000AF82 4A28 0001                  		tst.b	1(a0)
0000AF86 6A00                       		bpl.s	Obj1F_Move	; if display flag isn't set, branch
0000AF88 0868 0001 0032             		bchg	#1,$32(a0)
0000AF8E 6600                       		bne.s	Obj1F_MakeFire
0000AF90                            
0000AF90                            Obj1F_Move:
0000AF90 5428 0025                  		addq.b	#2,$25(a0)
0000AF94 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000AF9A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000AFA0 6100 0000                  		bsr.w	Obj1F_SetAni
0000AFA4 5600                       		addq.b	#3,d0
0000AFA6 1140 001C                  		move.b	d0,$1C(a0)
0000AFAA 0868 0000 0022             		bchg	#0,$22(a0)
0000AFB0 6600                       		bne.s	locret_95B6
0000AFB2 4468 0010                  		neg.w	$10(a0)		; change direction
0000AFB6                            
0000AFB6                            locret_95B6:
0000AFB6 4E75                       		rts	
0000AFB8                            ; ===========================================================================
0000AFB8                            
0000AFB8                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000AFB8 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AFBE 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000AFC4 6100 0000                  		bsr.w	SingleObjLoad
0000AFC8 6600                       		bne.s	Obj1F_MakeFire2
0000AFCA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000AFCE 137C 0006 0024             		move.b	#6,$24(a1)
0000AFD4 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFDA 0469 0010 0008             		subi.w	#$10,8(a1)
0000AFE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFE6 337C FF00 0010             		move.w	#-$100,$10(a1)
0000AFEC                            
0000AFEC                            Obj1F_MakeFire2:
0000AFEC 6100 0000                  		bsr.w	SingleObjLoad
0000AFF0 6600                       		bne.s	locret_9618
0000AFF2 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000AFF6 137C 0006 0024             		move.b	#6,$24(a1)
0000AFFC 3368 0008 0008             		move.w	8(a0),8(a1)
0000B002 0669 0010 0008             		addi.w	#$10,8(a1)
0000B008 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B00E 337C 0100 0010             		move.w	#$100,$10(a1)
0000B014                            
0000B014                            locret_9618:
0000B014 4E75                       		rts	
0000B016                            ; ===========================================================================
0000B016                            
0000B016                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000B016 5368 0030                  		subq.w	#1,$30(a0)
0000B01A 6B00                       		bmi.s	loc_966E
0000B01C 6100 0000                  		bsr.w	SpeedToPos
0000B020 0868 0000 0032             		bchg	#0,$32(a0)
0000B026 6600                       		bne.s	loc_9654
0000B028 3628 0008                  		move.w	8(a0),d3
0000B02C 0643 0010                  		addi.w	#$10,d3
0000B030 0828 0000 0022             		btst	#0,$22(a0)
0000B036 6700                       		beq.s	loc_9640
0000B038 0443 0020                  		subi.w	#$20,d3
0000B03C                            
0000B03C                            loc_9640:
0000B03C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B042 0C41 FFF8                  		cmpi.w	#-8,d1
0000B046 6D00                       		blt.s	loc_966E
0000B048 0C41 000C                  		cmpi.w	#$C,d1
0000B04C 6C00                       		bge.s	loc_966E
0000B04E 4E75                       		rts	
0000B050                            ; ===========================================================================
0000B050                            
0000B050                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000B050 4EB9 0000 0000             		jsr	ObjHitFloor
0000B056 D368 000C                  		add.w	d1,$C(a0)
0000B05A 1143 0026                  		move.b	d3,$26(a0)
0000B05E 6100 0000                  		bsr.w	Obj1F_SetAni
0000B062 5600                       		addq.b	#3,d0
0000B064 1140 001C                  		move.b	d0,$1C(a0)
0000B068 4E75                       		rts	
0000B06A                            ; ===========================================================================
0000B06A                            
0000B06A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000B06A 5528 0025                  		subq.b	#2,$25(a0)
0000B06E 317C 003B 0030             		move.w	#59,$30(a0)
0000B074 317C 0000 0010             		move.w	#0,$10(a0)
0000B07A 6100 0000                  		bsr.w	Obj1F_SetAni
0000B07E 1140 001C                  		move.b	d0,$1C(a0)
0000B082 4E75                       		rts	
0000B084                            ; ---------------------------------------------------------------------------
0000B084                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B084                            ; ---------------------------------------------------------------------------
0000B084                            
0000B084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B084                            
0000B084                            
0000B084                            Obj1F_SetAni:				; XREF: loc_966E
0000B084 7000                       		moveq	#0,d0
0000B086 1628 0026                  		move.b	$26(a0),d3
0000B08A 6B00                       		bmi.s	loc_96A4
0000B08C 0C03 0006                  		cmpi.b	#6,d3
0000B090 6500                       		bcs.s	locret_96A2
0000B092 7001                       		moveq	#1,d0
0000B094 0828 0000 0022             		btst	#0,$22(a0)
0000B09A 6600                       		bne.s	locret_96A2
0000B09C 7002                       		moveq	#2,d0
0000B09E                            
0000B09E                            locret_96A2:
0000B09E 4E75                       		rts	
0000B0A0                            ; ===========================================================================
0000B0A0                            
0000B0A0                            loc_96A4:				; XREF: Obj1F_SetAni
0000B0A0 0C03 00FA                  		cmpi.b	#-6,d3
0000B0A4 6200                       		bhi.s	locret_96B6
0000B0A6 7002                       		moveq	#2,d0
0000B0A8 0828 0000 0022             		btst	#0,$22(a0)
0000B0AE 6600                       		bne.s	locret_96B6
0000B0B0 7001                       		moveq	#1,d0
0000B0B2                            
0000B0B2                            locret_96B6:
0000B0B2 4E75                       		rts	
0000B0B4                            ; End of function Obj1F_SetAni
0000B0B4                            
0000B0B4                            ; ===========================================================================
0000B0B4                            
0000B0B4                            Obj1F_Delete:				; XREF: Obj1F_Index
0000B0B4 6100 0000                  		bsr.w	DeleteObject
0000B0B8 4E75                       		rts	
0000B0BA                            ; ===========================================================================
0000B0BA                            ; ---------------------------------------------------------------------------
0000B0BA                            ; Sub-object - missile that the	Crabmeat throws
0000B0BA                            ; ---------------------------------------------------------------------------
0000B0BA                            
0000B0BA                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000B0BA 5428 0024                  		addq.b	#2,$24(a0)
0000B0BE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000B0C6 317C 0400 0002             		move.w	#$400,2(a0)
0000B0CC 117C 0004 0001             		move.b	#4,1(a0)
0000B0D2 117C 0003 0018             		move.b	#3,$18(a0)
0000B0D8 117C 0087 0020             		move.b	#$87,$20(a0)
0000B0DE 117C 0008 0019             		move.b	#8,$19(a0)
0000B0E4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B0EA 117C 0007 001C             		move.b	#7,$1C(a0)
0000B0F0                            
0000B0F0                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000B0F0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000B0F6 6100 0000                  		bsr.w	AnimateSprite
0000B0FA 6100 0000                  		bsr.w	ObjectFall
0000B0FE 6100 0000                  		bsr.w	DisplaySprite
0000B102 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B106 0640 00E0                  		addi.w	#$E0,d0
0000B10A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B10E 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000B110 4E75                       		rts	
0000B112                            ; ===========================================================================
0000B112                            
0000B112                            Obj1F_Delete2:
0000B112 6000 0000                  		bra.w	DeleteObject
0000B116                            ; ===========================================================================
0000B116                            Ani_obj1F:
0000B116                            	include "_anim\obj1F.asm"
0000B116                            ; ---------------------------------------------------------------------------
0000B116                            ; Animation script - Crabmeat enemy
0000B116                            ; ---------------------------------------------------------------------------
0000B116 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000B11C 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000B122 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000B126 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000B12A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000B12E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000B132 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000B138 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000B13E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000B144 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000B148 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000B14C                            		even
0000B14C                            		even
0000B14C                            
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            Map_obj1F:
0000B14C                            	include "_maps\obj1F.asm"
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000B150 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000B154 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000B158 0000                       		dc.w byte_97D7-Map_obj1F
0000B15A 04                         byte_975E:	dc.b 4
0000B15B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000B160 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B165 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B16A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B16F 04                         byte_9773:	dc.b 4
0000B170 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000B175 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B17A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B17F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B184 04                         byte_9788:	dc.b 4
0000B185 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000B18A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B18F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B194 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B199 04                         byte_979D:	dc.b 4
0000B19A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000B19F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B1A4 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B1A9 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B1AE 06                         byte_97B2:	dc.b 6
0000B1AF F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000B1B4 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B1B9 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B1BE F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B1C3 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B1C8 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B1CD 01                         byte_97D1:	dc.b 1
0000B1CE F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000B1D3 01                         byte_97D7:	dc.b 1
0000B1D4 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000B1DA 00                         		even
0000B1DA 00                         		even
0000B1DA                            
0000B1DA                            ; ===========================================================================
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA                            
0000B1DA                            Obj22:					; XREF: Obj_Index
0000B1DA 7000                       		moveq	#0,d0
0000B1DC 1028 0024                  		move.b	$24(a0),d0
0000B1E0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000B1E4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000B1E8                            ; ===========================================================================
0000B1E8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000B1EA 0000                       		dc.w Obj22_Action-Obj22_Index
0000B1EC 0000                       		dc.w Obj22_Delete-Obj22_Index
0000B1EE                            ; ===========================================================================
0000B1EE                            
0000B1EE                            Obj22_Main:				; XREF: Obj22_Index
0000B1EE 5428 0024                  		addq.b	#2,$24(a0)
0000B1F2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000B1FA 317C 0444 0002             		move.w	#$444,2(a0)
0000B200 117C 0004 0001             		move.b	#4,1(a0)
0000B206 117C 0003 0018             		move.b	#3,$18(a0)
0000B20C 117C 0008 0020             		move.b	#8,$20(a0)
0000B212 117C 0018 0019             		move.b	#$18,$19(a0)
0000B218                            
0000B218                            Obj22_Action:				; XREF: Obj22_Index
0000B218 7000                       		moveq	#0,d0
0000B21A 1028 0025                  		move.b	$25(a0),d0
0000B21E 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000B222 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000B226 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000B22C 6100 0000                  		bsr.w	AnimateSprite
0000B230 6000 0000                  		bra.w	MarkObjGone
0000B234                            ; ===========================================================================
0000B234 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000B236 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000B238                            ; ===========================================================================
0000B238                            
0000B238                            Obj22_Move:				; XREF: Obj22_Index2
0000B238 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B23C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B23E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B244 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000B246 5428 0025                  		addq.b	#2,$25(a0)
0000B24A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000B250 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000B256 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000B25C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B262 6600                       		bne.s	locret_986C	; if not, branch
0000B264 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B268                            
0000B268                            locret_986C:
0000B268 4E75                       		rts	
0000B26A                            ; ===========================================================================
0000B26A                            
0000B26A                            Obj22_Fire:				; XREF: Obj22_Move
0000B26A 6100 0000                  		bsr.w	SingleObjLoad
0000B26E 6600                       		bne.s	locret_98D0
0000B270 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000B274 3368 0008 0008             		move.w	8(a0),8(a1)
0000B27A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B280 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000B286 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000B28C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000B292 303C 0018                  		move.w	#$18,d0
0000B296 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B29C 6600                       		bne.s	loc_98AA	; if not, branch
0000B29E 4440                       		neg.w	d0
0000B2A0 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000B2A4                            
0000B2A4                            loc_98AA:
0000B2A4 D169 0008                  		add.w	d0,8(a1)
0000B2A8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000B2AE 337C 000E 0032             		move.w	#$E,$32(a1)
0000B2B4 2348 003C                  		move.l	a0,$3C(a1)
0000B2B8 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000B2BE 317C 003B 0032             		move.w	#$3B,$32(a0)
0000B2C4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B2CA                            
0000B2CA                            locret_98D0:
0000B2CA 4E75                       		rts	
0000B2CC                            ; ===========================================================================
0000B2CC                            
0000B2CC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000B2CC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2D0 6B00                       		bmi.s	Obj22_ChgDir
0000B2D2 6100 0000                  		bsr.w	SpeedToPos
0000B2D6 4A28 0034                  		tst.b	$34(a0)
0000B2DA 6600                       		bne.s	locret_992A
0000B2DC 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2E0 9068 0008                  		sub.w	8(a0),d0
0000B2E4 6A00                       		bpl.s	Obj22_SetNrSonic
0000B2E6 4440                       		neg.w	d0
0000B2E8                            
0000B2E8                            Obj22_SetNrSonic:
0000B2E8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B2EC 6400                       		bcc.s	locret_992A	; if not, branch
0000B2EE 4A28 0001                  		tst.b	1(a0)
0000B2F2 6A00                       		bpl.s	locret_992A
0000B2F4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B2FA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B300 6000                       		bra.s	Obj22_Stop
0000B302                            ; ===========================================================================
0000B302                            
0000B302                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000B302 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B308 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B30E 317C 003B 0032             		move.w	#59,$32(a0)
0000B314                            
0000B314                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000B314 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000B318 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B31E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B324                            
0000B324                            locret_992A:
0000B324 4E75                       		rts	
0000B326                            ; ===========================================================================
0000B326                            
0000B326                            Obj22_Delete:				; XREF: Obj22_Index
0000B326 6100 0000                  		bsr.w	DeleteObject
0000B32A 4E75                       		rts	
0000B32C                            ; ===========================================================================
0000B32C                            ; ---------------------------------------------------------------------------
0000B32C                            ; Object 23 - missile that Buzz	Bomber throws
0000B32C                            ; ---------------------------------------------------------------------------
0000B32C                            
0000B32C                            Obj23:					; XREF: Obj_Index
0000B32C 7000                       		moveq	#0,d0
0000B32E 1028 0024                  		move.b	$24(a0),d0
0000B332 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000B336 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000B33A                            ; ===========================================================================
0000B33A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000B33C 0000                       		dc.w Obj23_Animate-Obj23_Index
0000B33E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000B340 0000                       		dc.w Obj23_Delete-Obj23_Index
0000B342 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000B344                            ; ===========================================================================
0000B344                            
0000B344                            Obj23_Main:				; XREF: Obj23_Index
0000B344 5368 0032                  		subq.w	#1,$32(a0)
0000B348 6A00                       		bpl.s	Obj23_ChkCancel
0000B34A 5428 0024                  		addq.b	#2,$24(a0)
0000B34E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000B356 317C 2444 0002             		move.w	#$2444,2(a0)
0000B35C 117C 0004 0001             		move.b	#4,1(a0)
0000B362 117C 0003 0018             		move.b	#3,$18(a0)
0000B368 117C 0008 0019             		move.b	#8,$19(a0)
0000B36E 0228 0003 0022             		andi.b	#3,$22(a0)
0000B374 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000B378 6700                       		beq.s	Obj23_Animate	; if not, branch
0000B37A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000B380 117C 0087 0020             		move.b	#$87,$20(a0)
0000B386 117C 0001 001C             		move.b	#1,$1C(a0)
0000B38C 6000                       		bra.s	Obj23_Animate2
0000B38E                            ; ===========================================================================
0000B38E                            
0000B38E                            Obj23_Animate:				; XREF: Obj23_Index
0000B38E 6100                       		bsr.s	Obj23_ChkCancel
0000B390 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B396 6100 0000                  		bsr.w	AnimateSprite
0000B39A 6000 0000                  		bra.w	DisplaySprite
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B39E                            ; destroyed, and if it has, then cancel	the missile
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E                            
0000B39E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B39E                            
0000B39E                            
0000B39E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000B39E 2268 003C                  		movea.l	$3C(a0),a1
0000B3A2 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000B3A6 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000B3A8 4E75                       		rts	
0000B3AA                            ; End of function Obj23_ChkCancel
0000B3AA                            
0000B3AA                            ; ===========================================================================
0000B3AA                            
0000B3AA                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000B3AA 0828 0007 0022             		btst	#7,$22(a0)
0000B3B0 6600                       		bne.s	Obj23_Explode
0000B3B2 117C 0087 0020             		move.b	#$87,$20(a0)
0000B3B8 117C 0001 001C             		move.b	#1,$1C(a0)
0000B3BE 6100 0000                  		bsr.w	SpeedToPos
0000B3C2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B3C8 6100 0000                  		bsr.w	AnimateSprite
0000B3CC 6100 0000                  		bsr.w	DisplaySprite
0000B3D0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B3D4 0640 00E0                  		addi.w	#$E0,d0
0000B3D8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B3DC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000B3DE 4E75                       		rts	
0000B3E0                            ; ===========================================================================
0000B3E0                            
0000B3E0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000B3E0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000B3E4 117C 0000 0024             		move.b	#0,$24(a0)
0000B3EA 6000 F30C                  		bra.w	Obj24
0000B3EE                            ; ===========================================================================
0000B3EE                            
0000B3EE                            Obj23_Delete:				; XREF: Obj23_Index
0000B3EE 6100 0000                  		bsr.w	DeleteObject
0000B3F2 4E75                       		rts	
0000B3F4                            ; ===========================================================================
0000B3F4                            
0000B3F4                            Obj23_FromNewt:				; XREF: Obj23_Index
0000B3F4 4A28 0001                  		tst.b	1(a0)
0000B3F8 6AF4                       		bpl.s	Obj23_Delete
0000B3FA 6100 0000                  		bsr.w	SpeedToPos
0000B3FE                            
0000B3FE                            Obj23_Animate2:				; XREF: Obj23_Main
0000B3FE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B404 6100 0000                  		bsr.w	AnimateSprite
0000B408 6100 0000                  		bsr.w	DisplaySprite
0000B40C 4E75                       		rts	
0000B40E                            ; ===========================================================================
0000B40E                            Ani_obj22:
0000B40E                            	include "_anim\obj22.asm"
0000B40E                            ; ---------------------------------------------------------------------------
0000B40E                            ; Animation script - Buzz Bomber enemy
0000B40E                            ; ---------------------------------------------------------------------------
0000B40E 0000                       		dc.w byte_9A1E-Ani_obj22
0000B410 0000                       		dc.w byte_9A22-Ani_obj22
0000B412 0000                       		dc.w byte_9A26-Ani_obj22
0000B414 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B418 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B41C 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000B420                            		even
0000B420                            		even
0000B420                            
0000B420                            Ani_obj23:
0000B420                            	include "_anim\obj23.asm"
0000B420                            ; ---------------------------------------------------------------------------
0000B420                            ; Animation script - missile that Buzz Bomber throws
0000B420                            ; ---------------------------------------------------------------------------
0000B420 0000                       		dc.w byte_9A2E-Ani_obj23
0000B422 0000                       		dc.w byte_9A32-Ani_obj23
0000B424 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000B428 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000B42C                            		even
0000B42C                            		even
0000B42C                            
0000B42C                            ; ---------------------------------------------------------------------------
0000B42C                            ; Sprite mappings - Buzz Bomber	enemy
0000B42C                            ; ---------------------------------------------------------------------------
0000B42C                            Map_obj22:
0000B42C                            	include "_maps\obj22.asm"
0000B42C                            ; ---------------------------------------------------------------------------
0000B42C                            ; Sprite mappings - Buzz Bomber	enemy
0000B42C                            ; ---------------------------------------------------------------------------
0000B42C 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000B430 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000B434 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000B438 06                         byte_9A42:	dc.b 6
0000B439 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B43E F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B443 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B448 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B44D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B452 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B457 06                         byte_9A61:	dc.b 6
0000B458 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B45D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B462 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B467 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B46C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B471 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B476 07                         byte_9A80:	dc.b 7
0000B477 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000B47C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B481 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B486 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B48B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B490 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B495 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B49A 07                         byte_9AA4:	dc.b 7
0000B49B 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000B4A0 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B4A5 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B4AA 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B4AF 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B4B4 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B4B9 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B4BE 06                         byte_9AC8:	dc.b 6
0000B4BF F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B4C4 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4C9 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4CE 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4D3 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B4D8 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B4DD 04                         byte_9AE7:	dc.b 4
0000B4DE F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B4E3 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4E8 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4ED 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4F2 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B4F7 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B4FC                            		even
0000B4FC                            		even
0000B4FC                            
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC                            Map_obj23:
0000B4FC                            	include "_maps\obj23.asm"
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000B500 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000B504 01                         byte_9B0E:	dc.b 1
0000B505 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000B50A 01                         byte_9B14:	dc.b 1
0000B50B F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B510 01                         byte_9B1A:	dc.b 1
0000B511 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000B516 01                         byte_9B20:	dc.b 1
0000B517 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B51C                            		even
0000B51C                            		even
0000B51C                            
0000B51C                            ; ===========================================================================
0000B51C                            ; ---------------------------------------------------------------------------
0000B51C                            ; Object 25 - rings
0000B51C                            ; ---------------------------------------------------------------------------
0000B51C                            
0000B51C                            Obj25:					; XREF: Obj_Index
0000B51C 7000                       		moveq	#0,d0
0000B51E 1028 0024                  		move.b	$24(a0),d0
0000B522 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000B526 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000B52A                            ; ===========================================================================
0000B52A 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000B52C 0000                       		dc.w Obj25_Animate-Obj25_Index
0000B52E 0000                       		dc.w Obj25_Collect-Obj25_Index
0000B530 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000B532 0000                       		dc.w Obj25_Delete-Obj25_Index
0000B534                            ; ---------------------------------------------------------------------------
0000B534                            ; Distances between rings (format: horizontal, vertical)
0000B534                            ; ---------------------------------------------------------------------------
0000B534 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000B536 1800                       		dc.b $18, 0		; horizontal normal
0000B538 2000                       		dc.b $20, 0		; horizontal wide
0000B53A 0010                       		dc.b 0,	$10		; vertical tight
0000B53C 0018                       		dc.b 0,	$18		; vertical normal
0000B53E 0020                       		dc.b 0,	$20		; vertical wide
0000B540 1010                       		dc.b $10, $10		; diagonal
0000B542 1818                       		dc.b $18, $18
0000B544 2020                       		dc.b $20, $20
0000B546 F010                       		dc.b $F0, $10
0000B548 E818                       		dc.b $E8, $18
0000B54A E020                       		dc.b $E0, $20
0000B54C 1008                       		dc.b $10, 8
0000B54E 1810                       		dc.b $18, $10
0000B550 F008                       		dc.b $F0, 8
0000B552 E810                       		dc.b $E8, $10
0000B554                            ; ===========================================================================
0000B554                            
0000B554                            Obj25_Main:				; XREF: Obj25_Index
0000B554 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B558 7000                       		moveq	#0,d0
0000B55A 1028 0023                  		move.b	$23(a0),d0
0000B55E 45F2 0002                  		lea	2(a2,d0.w),a2
0000B562 1812                       		move.b	(a2),d4
0000B564 1228 0028                  		move.b	$28(a0),d1
0000B568 1001                       		move.b	d1,d0
0000B56A 0241 0007                  		andi.w	#7,d1
0000B56E 0C41 0007                  		cmpi.w	#7,d1
0000B572 6600                       		bne.s	loc_9B80
0000B574 7206                       		moveq	#6,d1
0000B576                            
0000B576                            loc_9B80:
0000B576 4841                       		swap	d1
0000B578 323C 0000                  		move.w	#0,d1
0000B57C E808                       		lsr.b	#4,d0
0000B57E D040                       		add.w	d0,d0
0000B580 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000B584 4885                       		ext.w	d5
0000B586 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000B58A 4886                       		ext.w	d6
0000B58C 2248                       		movea.l	a0,a1
0000B58E 3428 0008                  		move.w	8(a0),d2
0000B592 3628 000C                  		move.w	$C(a0),d3
0000B596 E20C                       		lsr.b	#1,d4
0000B598 6500                       		bcs.s	loc_9C02
0000B59A 0892 0007                  		bclr	#7,(a2)
0000B59E 6000                       		bra.s	loc_9BBA
0000B5A0                            ; ===========================================================================
0000B5A0                            
0000B5A0                            Obj25_MakeRings:
0000B5A0 4841                       		swap	d1
0000B5A2 E20C                       		lsr.b	#1,d4
0000B5A4 6500                       		bcs.s	loc_9C02
0000B5A6 0892 0007                  		bclr	#7,(a2)
0000B5AA 6100 0000                  		bsr.w	SingleObjLoad
0000B5AE 6600                       		bne.s	loc_9C0E
0000B5B0                            
0000B5B0                            loc_9BBA:				; XREF: Obj25_Main
0000B5B0 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000B5B4 5429 0024                  		addq.b	#2,$24(a1)
0000B5B8 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000B5BC 3368 0008 0032             		move.w	8(a0),$32(a1)
0000B5C2 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000B5C6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B5CE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B5D4 137C 0004 0001             		move.b	#4,1(a1)
0000B5DA 137C 0002 0018             		move.b	#2,$18(a1)
0000B5E0 137C 0047 0020             		move.b	#$47,$20(a1)
0000B5E6 137C 0008 0019             		move.b	#8,$19(a1)
0000B5EC 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000B5F2 1341 0034                  		move.b	d1,$34(a1)
0000B5F6                            
0000B5F6                            loc_9C02:
0000B5F6 5241                       		addq.w	#1,d1
0000B5F8 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B5FA D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B5FC 4841                       		swap	d1
0000B5FE 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000B602                            
0000B602                            loc_9C0E:
0000B602 0812 0000                  		btst	#0,(a2)
0000B606 6600 0000                  		bne.w	DeleteObject
0000B60A                            
0000B60A                            Obj25_Animate:				; XREF: Obj25_Index
0000B60A 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000B610 6100 0000                  		bsr.w	DisplaySprite
0000B614 3028 0032                  		move.w	$32(a0),d0
0000B618 0240 FF80                  		andi.w	#$FF80,d0
0000B61C 3238 F700                  		move.w	($FFFFF700).w,d1
0000B620 0441 0080                  		subi.w	#$80,d1
0000B624 0241 FF80                  		andi.w	#$FF80,d1
0000B628 9041                       		sub.w	d1,d0
0000B62A 0C40 0280                  		cmpi.w	#$280,d0
0000B62E 6200                       		bhi.s	Obj25_Delete
0000B630 4E75                       		rts	
0000B632                            ; ===========================================================================
0000B632                            
0000B632                            Obj25_Collect:				; XREF: Obj25_Index
0000B632 5428 0024                  		addq.b	#2,$24(a0)
0000B636 117C 0000 0020             		move.b	#0,$20(a0)
0000B63C 117C 0001 0018             		move.b	#1,$18(a0)
0000B642 6100 0000                  		bsr.w	CollectRing
0000B646 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B64A 7000                       		moveq	#0,d0
0000B64C 1028 0023                  		move.b	$23(a0),d0
0000B650 1228 0034                  		move.b	$34(a0),d1
0000B654 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B658                            
0000B658                            Obj25_Sparkle:				; XREF: Obj25_Index
0000B658 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B65E 6100 0000                  		bsr.w	AnimateSprite
0000B662 6000 0000                  		bra.w	DisplaySprite
0000B666                            ; ===========================================================================
0000B666                            
0000B666                            Obj25_Delete:				; XREF: Obj25_Index
0000B666 6000 0000                  		bra.w	DeleteObject
0000B66A                            
0000B66A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B66A                            
0000B66A                            
0000B66A                            CollectRing:				; XREF: Obj25_Collect
0000B66A 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000B66E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000B674 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000B678 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000B67E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B680 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000B686 6700                       		beq.s	loc_9CA4
0000B688 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000B68E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B690 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000B696 6600                       		bne.s	Obj25_PlaySnd
0000B698                            
0000B698                            loc_9CA4:
0000B698 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B69C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B6A0 303C 009F                  		move.w	#$9F,d0		; play extra life music
0000B6A4                            
0000B6A4                            Obj25_PlaySnd:
0000B6A4 4EF9 0000 12C8             		jmp	(PlaySound_Special).l
0000B6AA                            ; End of function CollectRing
0000B6AA                            
0000B6AA                            ; ===========================================================================
0000B6AA                            ; ---------------------------------------------------------------------------
0000B6AA                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B6AA                            ; ---------------------------------------------------------------------------
0000B6AA                            
0000B6AA                            Obj37:					; XREF: Obj_Index
0000B6AA 7000                       		moveq	#0,d0
0000B6AC 1028 0024                  		move.b	$24(a0),d0
0000B6B0 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000B6B4 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000B6B8                            ; ===========================================================================
0000B6B8 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000B6BA 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000B6BC 0000                       		dc.w Obj37_Collect-Obj37_Index
0000B6BE 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000B6C0 0000                       		dc.w Obj37_Delete-Obj37_Index
0000B6C2                            ; ===========================================================================
0000B6C2                            
0000B6C2                            Obj37_CountRings:			; XREF: Obj37_Index
0000B6C2 2248                       		movea.l	a0,a1
0000B6C4 7A00                       		moveq	#0,d5
0000B6C6 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000B6CA 7020                       		moveq	#32,d0
0000B6CC BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000B6CE 6500                       		bcs.s	loc_9CDE	; if not, branch
0000B6D0 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000B6D2                            
0000B6D2                            loc_9CDE:
0000B6D2 5345                       		subq.w	#1,d5
0000B6D4 383C 0288                  		move.w	#$288,d4
0000B6D8 6000                       		bra.s	Obj37_MakeRings
0000B6DA                            ; ===========================================================================
0000B6DA                            
0000B6DA                            Obj37_Loop:
0000B6DA 6100 0000                  		bsr.w	SingleObjLoad
0000B6DE 6600 0000                  		bne.w	Obj37_ResetCounter
0000B6E2                            
0000B6E2                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000B6E2 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000B6E6 5429 0024                  		addq.b	#2,$24(a1)
0000B6EA 137C 0008 0016             		move.b	#8,$16(a1)
0000B6F0 137C 0008 0017             		move.b	#8,$17(a1)
0000B6F6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B6FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B702 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B70A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B710 137C 0004 0001             		move.b	#4,1(a1)
0000B716 137C 0003 0018             		move.b	#3,$18(a1)
0000B71C 137C 0047 0020             		move.b	#$47,$20(a1)
0000B722 137C 0008 0019             		move.b	#8,$19(a1)
0000B728 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000B72E 4A44                       		tst.w	d4
0000B730 6B00                       		bmi.s	loc_9D62
0000B732 3004                       		move.w	d4,d0
0000B734                            		bsr.w	CalcSine
0000B736 3404                       		move.w	d4,d2
0000B738 E04A                       		lsr.w	#8,d2
0000B73A E560                       		asl.w	d2,d0
0000B73C E561                       		asl.w	d2,d1
0000B73E 3400                       		move.w	d0,d2
0000B740 3601                       		move.w	d1,d3
0000B742 0604 0010                  		addi.b	#$10,d4
0000B746 6400                       		bcc.s	loc_9D62
0000B748 0444 0080                  		subi.w	#$80,d4
0000B74C 6400                       		bcc.s	loc_9D62
0000B74E 383C 0288                  		move.w	#$288,d4
0000B752                            
0000B752                            loc_9D62:
0000B752 3342 0010                  		move.w	d2,$10(a1)
0000B756 3343 0012                  		move.w	d3,$12(a1)
0000B75A 4442                       		neg.w	d2
0000B75C 4444                       		neg.w	d4
0000B75E 51CD FF7A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B762                            
0000B762                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B762 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B768 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B76E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B774 303C 00C6                  		move.w	#$C6,d0
0000B778 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B77E                            
0000B77E                            Obj37_Bounce:				; XREF: Obj37_Index
0000B77E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B784 6100 0000                  		bsr.w	SpeedToPos
0000B788 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B78E 6B00                       		bmi.s	Obj37_ChkDel
0000B790 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B794 D007                       		add.b	d7,d0
0000B796 0200 0003                  		andi.b	#3,d0
0000B79A 6600                       		bne.s	Obj37_ChkDel
0000B79C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B7A2 4A41                       		tst.w	d1
0000B7A4 6A00                       		bpl.s	Obj37_ChkDel
0000B7A6 D368 000C                  		add.w	d1,$C(a0)
0000B7AA 3028 0012                  		move.w	$12(a0),d0
0000B7AE E440                       		asr.w	#2,d0
0000B7B0 9168 0012                  		sub.w	d0,$12(a0)
0000B7B4 4468 0012                  		neg.w	$12(a0)
0000B7B8                            
0000B7B8                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000B7B8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000B7BC 6700                       		beq.s	Obj37_Delete
0000B7BE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B7C2 0640 00E0                  		addi.w	#$E0,d0
0000B7C6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000B7CA 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000B7CC 6000 0000                  		bra.w	DisplaySprite
0000B7D0                            ; ===========================================================================
0000B7D0                            
0000B7D0                            Obj37_Collect:				; XREF: Obj37_Index
0000B7D0 5428 0024                  		addq.b	#2,$24(a0)
0000B7D4 117C 0000 0020             		move.b	#0,$20(a0)
0000B7DA 117C 0001 0018             		move.b	#1,$18(a0)
0000B7E0 6100 FE88                  		bsr.w	CollectRing
0000B7E4                            
0000B7E4                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B7E4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B7EA 6100 0000                  		bsr.w	AnimateSprite
0000B7EE 6000 0000                  		bra.w	DisplaySprite
0000B7F2                            ; ===========================================================================
0000B7F2                            
0000B7F2                            Obj37_Delete:				; XREF: Obj37_Index
0000B7F2 6000 0000                  		bra.w	DeleteObject
0000B7F6                            ; ===========================================================================
0000B7F6                            ; ---------------------------------------------------------------------------
0000B7F6                            ; Object 4B - giant ring for entry to special stage
0000B7F6                            ; ---------------------------------------------------------------------------
0000B7F6                            
0000B7F6                            Obj4B:					; XREF: Obj_Index
0000B7F6 7000                       		moveq	#0,d0
0000B7F8 1028 0024                  		move.b	$24(a0),d0
0000B7FC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B800 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B804                            ; ===========================================================================
0000B804 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B806 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B808 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B80A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B80C                            ; ===========================================================================
0000B80C                            
0000B80C                            Obj4B_Main:				; XREF: Obj4B_Index
0000B80C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B814 317C 2400 0002             		move.w	#$2400,2(a0)
0000B81A 0028 0004 0001             		ori.b	#4,1(a0)
0000B820 117C 0040 0019             		move.b	#$40,$19(a0)
0000B826 4A28 0001                  		tst.b	1(a0)
0000B82A 6A00                       		bpl.s	Obj4B_Animate
0000B82C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B832 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B836 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B83C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B83E 4E75                       		rts	
0000B840                            ; ===========================================================================
0000B840                            
0000B840                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B840 5428 0024                  		addq.b	#2,$24(a0)
0000B844 117C 0002 0018             		move.b	#2,$18(a0)
0000B84A 117C 0052 0020             		move.b	#$52,$20(a0)
0000B850 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B856                            
0000B856                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B856 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B85C 3028 0008                  		move.w	8(a0),d0
0000B860 0240 FF80                  		andi.w	#$FF80,d0
0000B864 3238 F700                  		move.w	($FFFFF700).w,d1
0000B868 0441 0080                  		subi.w	#$80,d1
0000B86C 0241 FF80                  		andi.w	#$FF80,d1
0000B870 9041                       		sub.w	d1,d0
0000B872 0C40 0280                  		cmpi.w	#$280,d0
0000B876 6200 0000                  		bhi.w	DeleteObject
0000B87A 6000 0000                  		bra.w	DisplaySprite
0000B87E                            ; ===========================================================================
0000B87E                            
0000B87E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B87E 5528 0024                  		subq.b	#2,$24(a0)
0000B882 117C 0000 0020             		move.b	#0,$20(a0)
0000B888 6100 0000                  		bsr.w	SingleObjLoad
0000B88C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B890 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B894 3368 0008 0008             		move.w	8(a0),8(a1)
0000B89A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B8A0 2348 003C                  		move.l	a0,$3C(a1)
0000B8A4 3038 D008                  		move.w	($FFFFD008).w,d0
0000B8A8 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B8AC 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B8AE 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B8B4                            
0000B8B4                            Obj4B_PlaySnd:
0000B8B4 303C 00C3                  		move.w	#$C3,d0
0000B8B8 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B8BE 6096                       		bra.s	Obj4B_Animate
0000B8C0                            ; ===========================================================================
0000B8C0                            
0000B8C0                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B8C0 6000 0000                  		bra.w	DeleteObject
0000B8C4                            ; ===========================================================================
0000B8C4                            ; ---------------------------------------------------------------------------
0000B8C4                            ; Object 7C - flash effect when	you collect the	giant ring
0000B8C4                            ; ---------------------------------------------------------------------------
0000B8C4                            
0000B8C4                            Obj7C:					; XREF: Obj_Index
0000B8C4 7000                       		moveq	#0,d0
0000B8C6 1028 0024                  		move.b	$24(a0),d0
0000B8CA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B8CE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B8D2                            ; ===========================================================================
0000B8D2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B8D4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B8D6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B8D8                            ; ===========================================================================
0000B8D8                            
0000B8D8                            Obj7C_Main:				; XREF: Obj7C_Index
0000B8D8 5428 0024                  		addq.b	#2,$24(a0)
0000B8DC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B8E4 317C 2462 0002             		move.w	#$2462,2(a0)
0000B8EA 0028 0004 0001             		ori.b	#4,1(a0)
0000B8F0 117C 0000 0018             		move.b	#0,$18(a0)
0000B8F6 117C 0020 0019             		move.b	#$20,$19(a0)
0000B8FC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B902                            
0000B902                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B902 6100                       		bsr.s	Obj7C_Collect
0000B904 3028 0008                  		move.w	8(a0),d0
0000B908 0240 FF80                  		andi.w	#$FF80,d0
0000B90C 3238 F700                  		move.w	($FFFFF700).w,d1
0000B910 0441 0080                  		subi.w	#$80,d1
0000B914 0241 FF80                  		andi.w	#$FF80,d1
0000B918 9041                       		sub.w	d1,d0
0000B91A 0C40 0280                  		cmpi.w	#$280,d0
0000B91E 6200 0000                  		bhi.w	DeleteObject
0000B922 6000 0000                  		bra.w	DisplaySprite
0000B926                            
0000B926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B926                            
0000B926                            
0000B926                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B926 5328 001E                  		subq.b	#1,$1E(a0)
0000B92A 6A00                       		bpl.s	locret_9F76
0000B92C 117C 0001 001E             		move.b	#1,$1E(a0)
0000B932 5228 001A                  		addq.b	#1,$1A(a0)
0000B936 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B93C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B93E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B944 6600                       		bne.s	locret_9F76	; if not, branch
0000B946 2268 003C                  		movea.l	$3C(a0),a1
0000B94A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B950 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B956 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B95C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B960 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B964                            
0000B964                            locret_9F76:
0000B964 4E75                       		rts	
0000B966                            ; ===========================================================================
0000B966                            
0000B966                            Obj7C_End:				; XREF: Obj7C_Collect
0000B966 5428 0024                  		addq.b	#2,$24(a0)
0000B96A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B970 588F                       		addq.l	#4,sp
0000B972 4E75                       		rts	
0000B974                            ; End of function Obj7C_Collect
0000B974                            
0000B974                            ; ===========================================================================
0000B974                            
0000B974                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B974 6000 0000                  		bra.w	DeleteObject
0000B978                            ; ===========================================================================
0000B978                            Ani_obj25:
0000B978                            	include "_anim\obj25.asm"
0000B978                            ; ---------------------------------------------------------------------------
0000B978                            ; Animation script - ring
0000B978                            ; ---------------------------------------------------------------------------
0000B978 0000                       		dc.w byte_9F8C-Ani_obj25
0000B97A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B980                            		even
0000B980                            		even
0000B980                            
0000B980                            ; ---------------------------------------------------------------------------
0000B980                            ; Sprite mappings - rings
0000B980                            ; ---------------------------------------------------------------------------
0000B980                            Map_obj25:
0000B980                            	include "_maps\obj25.asm"
0000B980                            ; ---------------------------------------------------------------------------
0000B980                            ; Sprite mappings - rings
0000B980                            ; ---------------------------------------------------------------------------
0000B980 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B984 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B988 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B98C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B990 01                         byte_9FA2:	dc.b 1
0000B991 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B996 01                         byte_9FA8:	dc.b 1
0000B997 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B99C 01                         byte_9FAE:	dc.b 1
0000B99D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B9A2 01                         byte_9FB4:	dc.b 1
0000B9A3 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B9A8 01                         byte_9FBA:	dc.b 1
0000B9A9 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B9AE 01                         byte_9FC0:	dc.b 1
0000B9AF F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B9B4 01                         byte_9FC6:	dc.b 1
0000B9B5 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B9BA 01                         byte_9FCC:	dc.b 1
0000B9BB F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B9C0                            		even
0000B9C0                            		even
0000B9C0                            
0000B9C0                            ; ---------------------------------------------------------------------------
0000B9C0                            ; Sprite mappings - giant ring
0000B9C0                            ; ---------------------------------------------------------------------------
0000B9C0                            Map_obj4B:
0000B9C0                            	include "_maps\obj4B.asm"
0000B9C0                            ; ---------------------------------------------------------------------------
0000B9C0                            ; Sprite mappings - giant ring
0000B9C0                            ; ---------------------------------------------------------------------------
0000B9C0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B9C4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B9C8 0A                         byte_9FDA:	dc.b $A
0000B9C9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B9CE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B9D3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B9D8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B9DD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B9E2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B9E7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B9EC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B9F1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B9F6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B9FB 08                         byte_A00D:	dc.b 8
0000B9FC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000BA01 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BA06 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BA0B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BA10 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BA15 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BA1A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BA1F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BA24 04                         byte_A036:	dc.b 4
0000BA25 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000BA2A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BA2F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BA34 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BA39 08                         byte_A04B:	dc.b 8
0000BA3A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000BA3F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BA44 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BA49 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BA4E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BA53 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BA58 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BA5D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BA62                            		even
0000BA62                            		even
0000BA62                            
0000BA62                            ; ---------------------------------------------------------------------------
0000BA62                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA62                            ; ---------------------------------------------------------------------------
0000BA62                            Map_obj7C:
0000BA62                            	include "_maps\obj7C.asm"
0000BA62                            ; ---------------------------------------------------------------------------
0000BA62                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA62                            ; ---------------------------------------------------------------------------
0000BA62 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000BA66 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000BA6A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000BA6E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000BA72 02                         byte_A084:	dc.b 2
0000BA73 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BA78 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BA7D 04                         byte_A08F:	dc.b 4
0000BA7E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BA83 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BA88 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BA8D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BA92 04                         byte_A0A4:	dc.b 4
0000BA93 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BA98 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BA9D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BAA2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BAA7 04                         byte_A0B9:	dc.b 4
0000BAA8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BAAD E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BAB2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BAB7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BABC 04                         byte_A0CE:	dc.b 4
0000BABD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BAC2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BAC7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BACC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BAD1 04                         byte_A0E3:	dc.b 4
0000BAD2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BAD7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BADC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BAE1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BAE6 02                         byte_A0F8:	dc.b 2
0000BAE7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BAEC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BAF1 04                         byte_A103:	dc.b 4
0000BAF2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BAF7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BAFC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BB01 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BB06                            		even
0000BB06                            		even
0000BB06                            
0000BB06                            ; ===========================================================================
0000BB06                            ; ---------------------------------------------------------------------------
0000BB06                            ; Object 26 - monitors
0000BB06                            ; ---------------------------------------------------------------------------
0000BB06                            
0000BB06                            Obj26:					; XREF: Obj_Index
0000BB06 7000                       		moveq	#0,d0
0000BB08 1028 0024                  		move.b	$24(a0),d0
0000BB0C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000BB10 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000BB14                            ; ===========================================================================
0000BB14 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000BB16 0000                       		dc.w Obj26_Solid-Obj26_Index
0000BB18 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000BB1A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000BB1C 0000                       		dc.w Obj26_Display-Obj26_Index
0000BB1E                            ; ===========================================================================
0000BB1E                            
0000BB1E                            Obj26_Main:				; XREF: Obj26_Index
0000BB1E 5428 0024                  		addq.b	#2,$24(a0)
0000BB22 117C 000E 0016             		move.b	#$E,$16(a0)
0000BB28 117C 000E 0017             		move.b	#$E,$17(a0)
0000BB2E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000BB36 317C 0680 0002             		move.w	#$680,2(a0)
0000BB3C 117C 0004 0001             		move.b	#4,1(a0)
0000BB42 117C 0003 0018             		move.b	#3,$18(a0)
0000BB48 117C 000F 0019             		move.b	#$F,$19(a0)
0000BB4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BB52 7000                       		moveq	#0,d0
0000BB54 1028 0023                  		move.b	$23(a0),d0
0000BB58 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BB5E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BB64 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000BB66 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000BB6C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000BB72 4E75                       		rts	
0000BB74                            ; ===========================================================================
0000BB74                            
0000BB74                            Obj26_NotBroken:			; XREF: Obj26_Main
0000BB74 117C 0046 0020             		move.b	#$46,$20(a0)
0000BB7A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000BB80                            
0000BB80                            Obj26_Solid:				; XREF: Obj26_Index
0000BB80 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000BB84 6700                       		beq.s	loc_A1EC	; if not, branch
0000BB86 5500                       		subq.b	#2,d0
0000BB88 6600                       		bne.s	Obj26_Fall
0000BB8A 7200                       		moveq	#0,d1
0000BB8C 1228 0019                  		move.b	$19(a0),d1
0000BB90 0641 000B                  		addi.w	#$B,d1
0000BB94 6100 D442                  		bsr.w	ExitPlatform
0000BB98 0829 0003 0022             		btst	#3,$22(a1)
0000BB9E 6600 0000                  		bne.w	loc_A1BC
0000BBA2 4228 0025                  		clr.b	$25(a0)
0000BBA6 6000 0000                  		bra.w	Obj26_Animate
0000BBAA                            ; ===========================================================================
0000BBAA                            
0000BBAA                            loc_A1BC:				; XREF: Obj26_Solid
0000BBAA 363C 0010                  		move.w	#$10,d3
0000BBAE 3428 0008                  		move.w	8(a0),d2
0000BBB2 6100 D982                  		bsr.w	MvSonicOnPtfm
0000BBB6 6000 0000                  		bra.w	Obj26_Animate
0000BBBA                            ; ===========================================================================
0000BBBA                            
0000BBBA                            Obj26_Fall:				; XREF: Obj26_Solid
0000BBBA 6100 0000                  		bsr.w	ObjectFall
0000BBBE 4EB9 0000 0000             		jsr	ObjHitFloor
0000BBC4 4A41                       		tst.w	d1		; has monitor landed?
0000BBC6 6A00 0000                  		bpl.w	Obj26_Animate	; if not, branch
0000BBCA D368 000C                  		add.w	d1,$C(a0)	; correct monitor's Y-pos
0000BBCE 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0000BBD2 4228 0025                  		clr.b	$25(a0)
0000BBD6 6000 0000                  		bra.w	Obj26_Animate
0000BBDA                            ; ===========================================================================
0000BBDA                            
0000BBDA                            loc_A1EC:				; XREF: Obj26_Solid
0000BBDA 323C 001A                  		move.w	#$1A,d1
0000BBDE 343C 000F                  		move.w	#$F,d2
0000BBE2 6100 0000                  		bsr.w	Obj26_SolidSides
0000BBE6 6700 0000                  		beq.w	loc_A25C
0000BBEA 4A69 0012                  		tst.w	$12(a1)
0000BBEE 6B00                       		bmi.s	loc_A20A
0000BBF0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000BBF6 6700                       		beq.s	loc_A25C	; if yes, branch
0000BBF8 0C29 001F 001C             		cmp.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000BBFE 6700 0000                  		beq	loc_A25C	; if yes, branch
0000BC02                            
0000BC02                            loc_A20A:
0000BC02 4A41                       		tst.w	d1
0000BC04 6A00                       		bpl.s	loc_A220
0000BC06 9769 000C                  		sub.w	d3,$C(a1)
0000BC0A 6100 D2BA                  		bsr.w	loc_74AE
0000BC0E 117C 0002 0025             		move.b	#2,$25(a0)
0000BC14 6000 0000                  		bra.w	Obj26_Animate
0000BC18                            ; ===========================================================================
0000BC18                            
0000BC18                            loc_A220:
0000BC18 4A40                       		tst.w	d0
0000BC1A 6700 0000                  		beq.w	loc_A246
0000BC1E 6B00                       		bmi.s	loc_A230
0000BC20 4A69 0010                  		tst.w	$10(a1)
0000BC24 6B00                       		bmi.s	loc_A246
0000BC26 6000                       		bra.s	loc_A236
0000BC28                            ; ===========================================================================
0000BC28                            
0000BC28                            loc_A230:
0000BC28 4A69 0010                  		tst.w	$10(a1)
0000BC2C 6A00                       		bpl.s	loc_A246
0000BC2E                            
0000BC2E                            loc_A236:
0000BC2E 9169 0008                  		sub.w	d0,8(a1)
0000BC32 337C 0000 0014             		move.w	#0,$14(a1)
0000BC38 337C 0000 0010             		move.w	#0,$10(a1)
0000BC3E                            
0000BC3E                            loc_A246:
0000BC3E 0829 0001 0022             		btst	#1,$22(a1)
0000BC44 6600                       		bne.s	loc_A26A
0000BC46 08E9 0005 0022             		bset	#5,$22(a1)
0000BC4C 08E8 0005 0022             		bset	#5,$22(a0)
0000BC52 6000                       		bra.s	Obj26_Animate
0000BC54                            ; ===========================================================================
0000BC54                            
0000BC54                            loc_A25C:
0000BC54 0828 0005 0022             		btst	#5,$22(a0)
0000BC5A 6700                       		beq.s	Obj26_Animate
0000BC5C 337C 0001 001C             		move.w	#1,$1C(a1)
0000BC62                            
0000BC62                            loc_A26A:
0000BC62 08A8 0005 0022             		bclr	#5,$22(a0)
0000BC68 08A9 0005 0022             		bclr	#5,$22(a1)
0000BC6E                            
0000BC6E                            Obj26_Animate:				; XREF: Obj26_Index
0000BC6E 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000BC74 6100 0000                  		bsr.w	AnimateSprite
0000BC78                            
0000BC78                            Obj26_Display:				; XREF: Obj26_Index
0000BC78 6100 0000                  		bsr.w	DisplaySprite
0000BC7C 3028 0008                  		move.w	8(a0),d0
0000BC80 0240 FF80                  		andi.w	#$FF80,d0
0000BC84 3238 F700                  		move.w	($FFFFF700).w,d1
0000BC88 0441 0080                  		subi.w	#$80,d1
0000BC8C 0241 FF80                  		andi.w	#$FF80,d1
0000BC90 9041                       		sub.w	d1,d0
0000BC92 0C40 0280                  		cmpi.w	#$280,d0
0000BC96 6200 0000                  		bhi.w	DeleteObject
0000BC9A 4E75                       		rts	
0000BC9C                            ; ===========================================================================
0000BC9C                            
0000BC9C                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000BC9C 5428 0024                  		addq.b	#2,$24(a0)
0000BCA0 117C 0000 0020             		move.b	#0,$20(a0)
0000BCA6 6100 0000                  		bsr.w	SingleObjLoad
0000BCAA 6600                       		bne.s	Obj26_Explode
0000BCAC 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000BCB0 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BCBC 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000BCC2                            
0000BCC2                            Obj26_Explode:
0000BCC2 6100 0000                  		bsr.w	SingleObjLoad
0000BCC6 6600                       		bne.s	Obj26_SetBroken
0000BCC8 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000BCCC 5429 0024                  		addq.b	#2,$24(a1)
0000BCD0 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BCDC                            
0000BCDC                            Obj26_SetBroken:
0000BCDC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BCE0 7000                       		moveq	#0,d0
0000BCE2 1028 0023                  		move.b	$23(a0),d0
0000BCE6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BCEC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000BCF2 6000 0000                  		bra.w	DisplaySprite
0000BCF6                            ; ===========================================================================
0000BCF6                            ; ---------------------------------------------------------------------------
0000BCF6                            ; Object 2E - contents of monitors
0000BCF6                            ; ---------------------------------------------------------------------------
0000BCF6                            
0000BCF6                            Obj2E:					; XREF: Obj_Index
0000BCF6 7000                       		moveq	#0,d0
0000BCF8 1028 0024                  		move.b	$24(a0),d0
0000BCFC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000BD00 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000BD04 6000 0000                  		bra.w	DisplaySprite
0000BD08                            ; ===========================================================================
0000BD08 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000BD0A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000BD0C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000BD0E                            ; ===========================================================================
0000BD0E                            
0000BD0E                            Obj2E_Main:				; XREF: Obj2E_Index
0000BD0E 5428 0024                  		addq.b	#2,$24(a0)
0000BD12 317C 0680 0002             		move.w	#$680,2(a0)
0000BD18 117C 0024 0001             		move.b	#$24,1(a0)
0000BD1E 117C 0003 0018             		move.b	#3,$18(a0)
0000BD24 117C 0008 0019             		move.b	#8,$19(a0)
0000BD2A 317C FD00 0012             		move.w	#-$300,$12(a0)	; make object move up
0000BD30 7000                       		moveq	#0,d0
0000BD32 1028 001C                  		move.b	$1C(a0),d0
0000BD36 5400                       		addq.b	#2,d0
0000BD38 1140 001A                  		move.b	d0,$1A(a0)
0000BD3C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000BD42 D000                       		add.b	d0,d0
0000BD44 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BD48 5249                       		addq.w	#1,a1
0000BD4A 2149 0004                  		move.l	a1,4(a0)
0000BD4E                            
0000BD4E                            Obj2E_Move:				; XREF: Obj2E_Index
0000BD4E 4A68 0012                  		tst.w	$12(a0)		; has object stopped?
0000BD52 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if yes, branch
0000BD56 6100 0000                  		bsr.w	SpeedToPos
0000BD5A 0668 0018 0012             		addi.w	#$18,$12(a0)	; decrease object speed
0000BD60 4E75                       		rts	
0000BD62                            ; ===========================================================================
0000BD62                            
0000BD62                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000BD62 5428 0024                  		addq.b	#2,$24(a0)
0000BD66 317C 001D 001E             		move.w	#29,$1E(a0)	; set timer to #29
0000BD6C 1028 001C                  		move.b	$1C(a0),d0
0000BD70 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000BD74 6600                       		bne.s	Obj2E_ChkSonic	; if not, branch
0000BD76 4E75                       	    rts			; Eggman monitor does nothing
0000BD78                            ; ===========================================================================
0000BD78                            
0000BD78                            Obj2E_ChkSonic:
0000BD78 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BD7C 6600                       		bne.s	Obj2E_ChkShoes	; if not, branch
0000BD7E                            
0000BD7E                            ExtraLife:
0000BD7E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000BD82 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000BD86 303C 009F                  		move.w	#$9F,d0
0000BD8A 4EF9 0000 12C2             		jmp	(PlaySound).l	; play extra life music
0000BD90                            ; ===========================================================================
0000BD90                            
0000BD90                            Obj2E_ChkShoes:
0000BD90 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BD94 6600                       		bne.s	Obj2E_ChkShield	; if not, branch
0000BD96 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; set speed shoes flag
0000BD9C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000BDA2 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000BDA8 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000BDAE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000BDB4 303C 00E2                  		move.w	#$E2,d0
0000BDB8 4EF9 0000 12C2             		jmp	(PlaySound).l	; Speed	up the music
0000BDBE                            ; ===========================================================================
0000BDBE                            
0000BDBE                            Obj2E_ChkShield:
0000BDBE 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000BDC2 6600                       		bne.s	Obj2E_ChkInvinc	; if not, branch
0000BDC4 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000BDCA 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000BDD0 303C 00AF                  		move.w	#$AF,d0
0000BDD4 4EF9 0000 12C2             		jmp	(PlaySound).l	; play shield sound
0000BDDA                            ; ===========================================================================
0000BDDA                            
0000BDDA                            Obj2E_ChkInvinc:
0000BDDA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BDDE 6600                       		bne.s	Obj2E_ChkRings	; if not, branch
0000BDE0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000BDE6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000BDEC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000BDF2 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000BDF8 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000BDFE 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000BE04 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000BE0A 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000BE10 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000BE16 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000BE1C 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000BE20 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000BE22 303C 0098                  		move.w	#$98,d0
0000BE26 4EF9 0000 12C2             		jmp	(PlaySound).l	; play invincibility music
0000BE2C                            ; ===========================================================================
0000BE2C                            
0000BE2C                            Obj2E_NoMusic:
0000BE2C 4E75                       		rts	
0000BE2E                            ; ===========================================================================
0000BE2E                            
0000BE2E                            Obj2E_ChkRings:
0000BE2E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BE32 6600                       		bne.s	Obj2E_ChkS	; if not, branch
0000BE34 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000BE3A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000BE40 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000BE46 6500                       		bcs.s	Obj2E_RingSound
0000BE48 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000BE4E 6700 FF2E                  		beq.w	ExtraLife
0000BE52 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000BE58 6500                       		bcs.s	Obj2E_RingSound
0000BE5A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000BE60 6700 FF1C                  		beq.w	ExtraLife
0000BE64                            
0000BE64                            Obj2E_RingSound:
0000BE64 303C 00B5                  		move.w	#$B5,d0
0000BE68 4EF9 0000 12C2             		jmp	(PlaySound).l	; play ring sound
0000BE6E                            ; ===========================================================================
0000BE6E                            
0000BE6E                            Obj2E_ChkS:
0000BE6E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000BE72 6600                       		bne.s	Obj2E_ChkEnd	; if not, branch
0000BE74 4E71                       		nop	
0000BE76                            
0000BE76                            Obj2E_ChkEnd:
0000BE76 4E75                       		rts			; 'S' and goggles monitors do nothing
0000BE78                            ; ===========================================================================
0000BE78                            
0000BE78                            Obj2E_Delete:				; XREF: Obj2E_Index
0000BE78 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from timer
0000BE7C 6B00 0000                  		bmi.w	DeleteObject	; if time is over, branch
0000BE80 4E75                       		rts	
0000BE82                            ; ---------------------------------------------------------------------------
0000BE82                            ; Subroutine to	make the sides of a monitor solid
0000BE82                            ; ---------------------------------------------------------------------------
0000BE82                            
0000BE82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE82                            
0000BE82                            
0000BE82                            Obj26_SolidSides:			; XREF: loc_A1EC
0000BE82 43F8 D000                  		lea	($FFFFD000).w,a1 ; load Sonic to a1
0000BE86 3029 0008                  		move.w	8(a1),d0
0000BE8A 9068 0008                  		sub.w	8(a0),d0
0000BE8E D041                       		add.w	d1,d0
0000BE90 6B00                       		bmi.s	loc_A4E6
0000BE92 3601                       		move.w	d1,d3
0000BE94 D643                       		add.w	d3,d3
0000BE96 B043                       		cmp.w	d3,d0
0000BE98 6200                       		bhi.s	loc_A4E6
0000BE9A 1629 0016                  		move.b	$16(a1),d3
0000BE9E 4883                       		ext.w	d3
0000BEA0 D443                       		add.w	d3,d2
0000BEA2 3629 000C                  		move.w	$C(a1),d3
0000BEA6 9668 000C                  		sub.w	$C(a0),d3
0000BEAA D642                       		add.w	d2,d3
0000BEAC 6B00                       		bmi.s	loc_A4E6
0000BEAE D442                       		add.w	d2,d2
0000BEB0 B642                       		cmp.w	d2,d3
0000BEB2 6400                       		bcc.s	loc_A4E6
0000BEB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000BEB8 6B00                       		bmi.s	loc_A4E6
0000BEBA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BEC0 6400                       		bcc.s	loc_A4E6
0000BEC2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BEC6 6600                       		bne.s	loc_A4E6
0000BEC8 B240                       		cmp.w	d0,d1
0000BECA 6400                       		bcc.s	loc_A4DC
0000BECC D241                       		add.w	d1,d1
0000BECE 9041                       		sub.w	d1,d0
0000BED0                            
0000BED0                            loc_A4DC:
0000BED0 0C43 0010                  		cmpi.w	#$10,d3
0000BED4 6500                       		bcs.s	loc_A4EA
0000BED6                            
0000BED6                            loc_A4E2:
0000BED6 7201                       		moveq	#1,d1
0000BED8 4E75                       		rts	
0000BEDA                            ; ===========================================================================
0000BEDA                            
0000BEDA                            loc_A4E6:
0000BEDA 7200                       		moveq	#0,d1
0000BEDC 4E75                       		rts	
0000BEDE                            ; ===========================================================================
0000BEDE                            
0000BEDE                            loc_A4EA:
0000BEDE 7200                       		moveq	#0,d1
0000BEE0 1228 0019                  		move.b	$19(a0),d1
0000BEE4 5841                       		addq.w	#4,d1
0000BEE6 3401                       		move.w	d1,d2
0000BEE8 D442                       		add.w	d2,d2
0000BEEA D269 0008                  		add.w	8(a1),d1
0000BEEE 9268 0008                  		sub.w	8(a0),d1
0000BEF2 6BE2                       		bmi.s	loc_A4E2
0000BEF4 B242                       		cmp.w	d2,d1
0000BEF6 64DE                       		bcc.s	loc_A4E2
0000BEF8 72FF                       		moveq	#-1,d1
0000BEFA 4E75                       		rts	
0000BEFC                            ; End of function Obj26_SolidSides
0000BEFC                            
0000BEFC                            ; ===========================================================================
0000BEFC                            Ani_obj26:
0000BEFC                            	include "_anim\obj26.asm"
0000BEFC                            ; ---------------------------------------------------------------------------
0000BEFC                            ; Animation script - monitors
0000BEFC                            ; ---------------------------------------------------------------------------
0000BEFC 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000BF02 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000BF08 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000BF0E 0000                       		dc.w byte_A582-Ani_obj26
0000BF10 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000BF16 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000BF22 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000BF2E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000BF3A 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000BF46 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000BF52 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000BF5E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000BF6A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000BF76 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000BF7E                            		even
0000BF7E                            		even
0000BF7E                            
0000BF7E                            ; ---------------------------------------------------------------------------
0000BF7E                            ; Sprite mappings - monitors
0000BF7E                            ; ---------------------------------------------------------------------------
0000BF7E                            Map_obj26:
0000BF7E                            	include "_maps\obj26.asm"
0000BF7E                            ; ---------------------------------------------------------------------------
0000BF7E                            ; Sprite mappings - monitors
0000BF7E                            ; ---------------------------------------------------------------------------
0000BF7E 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000BF82 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000BF86 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000BF8A 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000BF8E 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000BF92 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000BF96 01                         byte_A5A2:	dc.b 1			; static monitor
0000BF97 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BF9C 02                         byte_A5A8:	dc.b 2			; static monitor
0000BF9D F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000BFA2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFA7 02                         byte_A5B3:	dc.b 2			; static monitor
0000BFA8 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000BFAD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFB2 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000BFB3 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000BFB8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFBD 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000BFBE F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000BFC3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFC8 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000BFC9 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000BFCE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFD3 02                         byte_A5DF:	dc.b 2			; shield monitor
0000BFD4 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000BFD9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFDE 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000BFDF F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000BFE4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFE9 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000BFEA F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000BFEF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFF4 02                         byte_A600:	dc.b 2			; 'S' monitor
0000BFF5 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000BFFA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFFF 02                         byte_A60B:	dc.b 2			; goggles monitor
0000C000 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000C005 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C00A 01                         byte_A616:	dc.b 1			; broken monitor
0000C00B FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000C010                            		even
0000C010                            		even
0000C010                            
0000C010                            ; ===========================================================================
0000C010                            ; ---------------------------------------------------------------------------
0000C010                            ; Object 0E - Sonic on the title screen
0000C010                            ; ---------------------------------------------------------------------------
0000C010                            
0000C010                            Obj0E:					; XREF: Obj_Index
0000C010 7000                       		moveq	#0,d0
0000C012 1028 0024                  		move.b	$24(a0),d0
0000C016 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000C01A 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000C01E                            ; ===========================================================================
0000C01E 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000C020 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000C022 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000C024 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000C026                            ; ===========================================================================
0000C026                            
0000C026                            Obj0E_Main:				; XREF: Obj0E_Index
0000C026 5428 0024                  		addq.b	#2,$24(a0)
0000C02A 317C 00F0 0008             		move.w	#$F0,8(a0)
0000C030 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000C036 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000C03E 317C 2300 0002             		move.w	#$2300,2(a0)
0000C044 117C 0001 0018             		move.b	#1,$18(a0)
0000C04A 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000C050 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C056 6100 0000                  		bsr.w	AnimateSprite
0000C05A                            
0000C05A                            Obj0E_Delay:				; XREF: Obj0E_Index
0000C05A 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000C05E 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000C060 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000C064 6000 0000                  		bra.w	DisplaySprite
0000C068                            ; ===========================================================================
0000C068                            
0000C068                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000C068 4E75                       		rts	
0000C06A                            ; ===========================================================================
0000C06A                            
0000C06A                            Obj0E_Move:				; XREF: Obj0E_Index
0000C06A 5168 000A                  		subq.w	#8,$A(a0)
0000C06E 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000C074 6600                       		bne.s	Obj0E_Display
0000C076 5428 0024                  		addq.b	#2,$24(a0)
0000C07A                            
0000C07A                            Obj0E_Display:
0000C07A 6000 0000                  		bra.w	DisplaySprite
0000C07E                            ; ===========================================================================
0000C07E 4E75                       		rts	
0000C080                            ; ===========================================================================
0000C080                            
0000C080                            Obj0E_Animate:				; XREF: Obj0E_Index
0000C080 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C086 6100 0000                  		bsr.w	AnimateSprite
0000C08A 6000 0000                  		bra.w	DisplaySprite
0000C08E                            ; ===========================================================================
0000C08E 4E75                       		rts	
0000C090                            ; ===========================================================================
0000C090                            ; ---------------------------------------------------------------------------
0000C090                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C090                            ; ---------------------------------------------------------------------------
0000C090                            
0000C090                            Obj0F:					; XREF: Obj_Index
0000C090 7000                       		moveq	#0,d0
0000C092 1028 0024                  		move.b	$24(a0),d0
0000C096 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C09A 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C09E 6000 0000                  		bra.w	DisplaySprite
0000C0A2                            ; ===========================================================================
0000C0A2 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000C0A4 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000C0A6 0000                       		dc.w locret_A6F8-Obj0F_Index
0000C0A8                            ; ===========================================================================
0000C0A8                            
0000C0A8                            Obj0F_Main:				; XREF: Obj0F_Index
0000C0A8 5428 0024                  		addq.b	#2,$24(a0)
0000C0AC 317C 00D0 0008             		move.w	#$D0,8(a0)
0000C0B2 317C 0130 000A             		move.w	#$130,$A(a0)
0000C0B8 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000C0C0 317C 0200 0002             		move.w	#$200,2(a0)
0000C0C6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000C0CC 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000C0CE 5428 0024                  		addq.b	#2,$24(a0)
0000C0D2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000C0D8 6600                       		bne.s	locret_A6F8	; if not, branch
0000C0DA 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000C0E0 317C 0170 0008             		move.w	#$170,8(a0)
0000C0E6 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000C0EC                            
0000C0EC                            locret_A6F8:				; XREF: Obj0F_Index
0000C0EC 4E75                       		rts	
0000C0EE                            ; ===========================================================================
0000C0EE                            
0000C0EE                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000C0EE 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000C0F4 6000 0000                  		bra.w	AnimateSprite
0000C0F8                            ; ===========================================================================
0000C0F8                            Ani_obj0E:
0000C0F8                            	include "_anim\obj0E.asm"
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8                            ; Animation script - Sonic on the title screen
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8 0000                       		dc.w byte_A706-Ani_obj0E
0000C0FA 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000C106                            		even
0000C106                            		even
0000C106                            
0000C106                            Ani_obj0F:
0000C106                            	include "_anim\obj0F.asm"
0000C106                            ; ---------------------------------------------------------------------------
0000C106                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C106                            ; ---------------------------------------------------------------------------
0000C106 0000                       		dc.w byte_A714-Ani_obj0F
0000C108 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000C10C                            		even
0000C10C                            		even
0000C10C                            
0000C10C                            ; ---------------------------------------------------------------------------
0000C10C                            ; Subroutine to	animate	a sprite using an animation script
0000C10C                            ; ---------------------------------------------------------------------------
0000C10C                            
0000C10C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C10C                            
0000C10C                            
0000C10C                            AnimateSprite:
0000C10C 7000                       		moveq	#0,d0
0000C10E 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000C112 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000C116 6700                       		beq.s	Anim_Run	; if not, branch
0000C118 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000C11C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C122 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000C128                            
0000C128                            Anim_Run:
0000C128 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000C12C 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C12E D040                       		add.w	d0,d0
0000C130 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C134 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000C138 7200                       		moveq	#0,d1
0000C13A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000C13E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C142 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C144                            
0000C144                            Anim_Next:
0000C144 1200                       		move.b	d0,d1
0000C146 0200 001F                  		andi.b	#$1F,d0
0000C14A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000C14E 1028 0022                  		move.b	$22(a0),d0
0000C152 E719                       		rol.b	#3,d1
0000C154 B101                       		eor.b	d0,d1
0000C156 0201 0003                  		andi.b	#3,d1
0000C15A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000C160 8328 0001                  		or.b	d1,1(a0)
0000C164 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000C168                            
0000C168                            Anim_Wait:
0000C168 4E75                       		rts	
0000C16A                            ; ===========================================================================
0000C16A                            
0000C16A                            Anim_End_FF:
0000C16A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C16C 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C16E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000C174 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C178 60CA                       		bra.s	Anim_Next
0000C17A                            ; ===========================================================================
0000C17A                            
0000C17A                            Anim_End_FE:
0000C17A 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C17C 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C17E 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C182 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000C186 9200                       		sub.b	d0,d1
0000C188 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C18C 60B6                       		bra.s	Anim_Next
0000C18E                            ; ===========================================================================
0000C18E                            
0000C18E                            Anim_End_FD:
0000C18E 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C190 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C192 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000C198                            
0000C198                            Anim_End_FC:
0000C198 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C19A 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C19C 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000C1A0                            
0000C1A0                            Anim_End_FB:
0000C1A0 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C1A2 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C1A4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C1AA 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000C1AE                            
0000C1AE                            Anim_End_FA:
0000C1AE 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C1B0 6600                       		bne.s	Anim_End	; if not, branch
0000C1B2 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000C1B6                            
0000C1B6                            Anim_End:
0000C1B6 4E75                       		rts	
0000C1B8                            ; End of function AnimateSprite
0000C1B8                            
0000C1B8                            ; ===========================================================================
0000C1B8                            ; ---------------------------------------------------------------------------
0000C1B8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1B8                            ; ---------------------------------------------------------------------------
0000C1B8                            Map_obj0F:
0000C1B8                            	include "_maps\obj0F.asm"
0000C1B8                            ; ---------------------------------------------------------------------------
0000C1B8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1B8                            ; ---------------------------------------------------------------------------
0000C1B8 0000                       		dc.w byte_A7CD-Map_obj0F
0000C1BA 0000                       		dc.w byte_A7CC-Map_obj0F
0000C1BC 0000                       		dc.w byte_A7EB-Map_obj0F
0000C1BE 0000                       		dc.w byte_A882-Map_obj0F
0000C1C0 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000C1C1 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C1C6 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C1CB 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C1D0 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C1D5 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C1DA 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C1DF 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000C1E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C1E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C1EA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C1EF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C1F4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C1F9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C1FE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C203 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C208 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C20D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C212 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C217 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C21C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C221 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C226 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C22B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C230 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C235 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C23A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C23F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C244 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C249 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C24E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C253 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C258 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C25D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C262 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C267 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C26C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C271 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C276 01                         byte_A882:	dc.b 1			; "TM"
0000C277 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C27C                            		even
0000C27C                            		even
0000C27C                            
0000C27C                            ; ---------------------------------------------------------------------------
0000C27C                            ; Sprite mappings - Sonic on the title screen
0000C27C                            ; ---------------------------------------------------------------------------
0000C27C                            Map_obj0E:
0000C27C                            	include "_maps\obj0E.asm"
0000C27C                            ; ---------------------------------------------------------------------------
0000C27C                            ; Sprite mappings - Sonic on the title screen
0000C27C                            ; ---------------------------------------------------------------------------
0000C27C 0000                       		dc.w byte_A898-Map_obj0E
0000C27E 0000                       		dc.w byte_A8CB-Map_obj0E
0000C280 0000                       		dc.w byte_A917-Map_obj0E
0000C282 0000                       		dc.w byte_A96D-Map_obj0E
0000C284 0000                       		dc.w byte_A9AF-Map_obj0E
0000C286 0000                       		dc.w byte_A9E7-Map_obj0E
0000C288 0000                       		dc.w byte_AA47-Map_obj0E
0000C28A 0000                       		dc.w byte_AAB1-Map_obj0E
0000C28C 0A                         byte_A898:	dc.b $A
0000C28D 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C292 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C297 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C29C 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C2A1 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C2A6 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C2AB 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C2B0 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C2B5 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C2BA 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C2BF 0F                         byte_A8CB:	dc.b $F
0000C2C0 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C2C5 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C2CA 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C2CF 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C2D4 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C2D9 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C2DE 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C2E3 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C2E8 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C2ED 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C2F2 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C2F7 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C2FC 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C301 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C306 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C30B 11                         byte_A917:	dc.b $11
0000C30C 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C311 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C316 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C31B 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C320 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C325 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C32A 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C32F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C334 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C339 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C33E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C343 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C348 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C34D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C352 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C357 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C35C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C361 0D                         byte_A96D:	dc.b $D
0000C362 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C367 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C36C 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C371 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C376 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C37B 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C380 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C385 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C38A 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C38F 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C394 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C399 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C39E 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C3A3 0B                         byte_A9AF:	dc.b $B
0000C3A4 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C3A9 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C3AE 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C3B3 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C3B8 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C3BD 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C3C2 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C3C7 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C3CC 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C3D1 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C3D6 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C3DB 13                         byte_A9E7:	dc.b $13
0000C3DC 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C3E1 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C3E6 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C3EB 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C3F0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C3F5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C3FA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C3FF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C404 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C409 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C40E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C413 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C418 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C41D 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C422 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C427 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C42C 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C431 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C436 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C43B 15                         byte_AA47:	dc.b $15
0000C43C 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C441 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C446 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C44B 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C450 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C455 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C45A 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C45F 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C464 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C469 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C46E 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C473 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C478 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C47D 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C482 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C487 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C48C 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C491 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C496 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C49B 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C4A0 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C4A5 16                         byte_AAB1:	dc.b $16
0000C4A6 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C4AB 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C4B0 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C4B5 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C4BA 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C4BF 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C4C4 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C4C9 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C4CE 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C4D3 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C4D8 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C4DD 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C4E2 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C4E7 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C4EC 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C4F1 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C4F6 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C4FB 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C500 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C505 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C50A 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C50F 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C514                            		even
0000C514                            		even
0000C514                            
0000C514                            ; ===========================================================================
0000C514                            ; ---------------------------------------------------------------------------
0000C514                            ; Object 2B - Chopper enemy (GHZ)
0000C514                            ; ---------------------------------------------------------------------------
0000C514                            
0000C514                            Obj2B:					; XREF: Obj_Index
0000C514 7000                       		moveq	#0,d0
0000C516 1028 0024                  		move.b	$24(a0),d0
0000C51A 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000C51E 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000C522 6000 0000                  		bra.w	MarkObjGone
0000C526                            ; ===========================================================================
0000C526 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000C528 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000C52A                            ; ===========================================================================
0000C52A                            
0000C52A                            Obj2B_Main:				; XREF: Obj2B_Index
0000C52A 5428 0024                  		addq.b	#2,$24(a0)
0000C52E 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000C536 317C 047B 0002             		move.w	#$47B,2(a0)
0000C53C 117C 0004 0001             		move.b	#4,1(a0)
0000C542 117C 0004 0018             		move.b	#4,$18(a0)
0000C548 117C 0009 0020             		move.b	#9,$20(a0)
0000C54E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C554 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C55A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C560                            
0000C560                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000C560 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000C566 6100 FBA4                  		bsr.w	AnimateSprite
0000C56A 6100 0000                  		bsr.w	SpeedToPos
0000C56E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000C574 3028 0030                  		move.w	$30(a0),d0
0000C578 B068 000C                  		cmp.w	$C(a0),d0
0000C57C 6400                       		bcc.s	Obj2B_ChgAni
0000C57E 3140 000C                  		move.w	d0,$C(a0)
0000C582 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C588                            
0000C588                            Obj2B_ChgAni:
0000C588 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000C58E 0440 00C0                  		subi.w	#$C0,d0
0000C592 B068 000C                  		cmp.w	$C(a0),d0
0000C596 6400                       		bcc.s	locret_ABB6
0000C598 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000C59E 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000C5A2 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000C5A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000C5AA                            
0000C5AA                            locret_ABB6:
0000C5AA 4E75                       		rts	
0000C5AC                            ; ===========================================================================
0000C5AC                            Ani_obj2B:
0000C5AC                            	include "_anim\obj2B.asm"
0000C5AC                            ; ---------------------------------------------------------------------------
0000C5AC                            ; Animation script - Chopper enemy
0000C5AC                            ; ---------------------------------------------------------------------------
0000C5AC 0000                       		dc.w byte_ABBE-Ani_obj2B
0000C5AE 0000                       		dc.w byte_ABC2-Ani_obj2B
0000C5B0 0000                       		dc.w byte_ABC6-Ani_obj2B
0000C5B2 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000C5B6 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000C5BA 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000C5BE 00                         		even
0000C5BE 00                         		even
0000C5BE                            
0000C5BE                            ; ---------------------------------------------------------------------------
0000C5BE                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5BE                            ; ---------------------------------------------------------------------------
0000C5BE                            Map_obj2B:
0000C5BE                            	include "_maps\obj2B.asm"
0000C5BE                            ; ---------------------------------------------------------------------------
0000C5BE                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5BE                            ; ---------------------------------------------------------------------------
0000C5BE 0000                       		dc.w byte_ABCE-Map_obj2B
0000C5C0 0000                       		dc.w byte_ABD4-Map_obj2B
0000C5C2 01                         byte_ABCE:	dc.b 1
0000C5C3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C5C8 01                         byte_ABD4:	dc.b 1
0000C5C9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C5CE                            		even
0000C5CE                            		even
0000C5CE                            
0000C5CE                            ; ===========================================================================
0000C5CE                            ; ---------------------------------------------------------------------------
0000C5CE                            ; Object 2C - Jaws enemy (LZ)
0000C5CE                            ; ---------------------------------------------------------------------------
0000C5CE                            
0000C5CE                            Obj2C:					; XREF: Obj_Index
0000C5CE 7000                       		moveq	#0,d0
0000C5D0 1028 0024                  		move.b	$24(a0),d0
0000C5D4 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000C5D8 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000C5DC                            ; ===========================================================================
0000C5DC 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000C5DE 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000C5E0                            ; ===========================================================================
0000C5E0                            
0000C5E0                            Obj2C_Main:				; XREF: Obj2C_Index
0000C5E0 5428 0024                  		addq.b	#2,$24(a0)
0000C5E4 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000C5EC 317C 2486 0002             		move.w	#$2486,2(a0)
0000C5F2 0028 0004 0001             		ori.b	#4,1(a0)
0000C5F8 117C 000A 0020             		move.b	#$A,$20(a0)
0000C5FE 117C 0004 0018             		move.b	#4,$18(a0)
0000C604 117C 0010 0019             		move.b	#$10,$19(a0)
0000C60A 7000                       		moveq	#0,d0
0000C60C 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000C610 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C612 5340                       		subq.w	#1,d0
0000C614 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000C618 3140 0032                  		move.w	d0,$32(a0)
0000C61C 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000C622 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000C628 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000C62A 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000C62E                            
0000C62E                            Obj2C_Turn:				; XREF: Obj2C_Index
0000C62E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000C632 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000C634 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000C63A 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000C63E 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000C644 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000C64A                            
0000C64A                            Obj2C_Animate:
0000C64A 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000C650 6100 FABA                  		bsr.w	AnimateSprite
0000C654 6100 0000                  		bsr.w	SpeedToPos
0000C658 6000 0000                  		bra.w	MarkObjGone
0000C65C                            ; ===========================================================================
0000C65C                            Ani_obj2C:
0000C65C                            	include "_anim\obj2C.asm"
0000C65C                            ; ---------------------------------------------------------------------------
0000C65C                            ; Animation script - Jaws enemy
0000C65C                            ; ---------------------------------------------------------------------------
0000C65C 0000                       		dc.w byte_AC6A-Ani_obj2C
0000C65E 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000C664                            		even
0000C664                            		even
0000C664                            
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            ; Sprite mappings - Jaws enemy (LZ)
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            Map_obj2C:
0000C664                            	include "_maps\obj2C.asm"
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            ; Sprite mappings - Jaws enemy (LZ)
0000C664                            ; ---------------------------------------------------------------------------
0000C664 0000                       		dc.w byte_AC78-Map_obj2C
0000C666 0000                       		dc.w byte_AC83-Map_obj2C
0000C668 0000                       		dc.w byte_AC8E-Map_obj2C
0000C66A 0000                       		dc.w byte_AC99-Map_obj2C
0000C66C 02                         byte_AC78:	dc.b 2
0000C66D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C672 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000C677 02                         byte_AC83:	dc.b 2
0000C678 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C67D F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000C682 02                         byte_AC8E:	dc.b 2
0000C683 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C688 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000C68D 02                         byte_AC99:	dc.b 2
0000C68E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C693 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000C698                            		even
0000C698                            		even
0000C698                            
0000C698                            ; ===========================================================================
0000C698                            ; ---------------------------------------------------------------------------
0000C698                            ; Object 2D - Burrobot enemy (LZ)
0000C698                            ; ---------------------------------------------------------------------------
0000C698                            
0000C698                            Obj2D:					; XREF: Obj_Index
0000C698 7000                       		moveq	#0,d0
0000C69A 1028 0024                  		move.b	$24(a0),d0
0000C69E 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000C6A2 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000C6A6                            ; ===========================================================================
0000C6A6 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000C6A8 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000C6AA                            ; ===========================================================================
0000C6AA                            
0000C6AA                            Obj2D_Main:				; XREF: Obj2D_Index
0000C6AA 5428 0024                  		addq.b	#2,$24(a0)
0000C6AE 117C 0013 0016             		move.b	#$13,$16(a0)
0000C6B4 117C 0008 0017             		move.b	#8,$17(a0)
0000C6BA 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000C6C2 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000C6C8 0028 0004 0001             		ori.b	#4,1(a0)
0000C6CE 117C 0004 0018             		move.b	#4,$18(a0)
0000C6D4 117C 0005 0020             		move.b	#5,$20(a0)
0000C6DA 117C 000C 0019             		move.b	#$C,$19(a0)
0000C6E0 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000C6E4 117C 0002 001C             		move.b	#2,$1C(a0)
0000C6EA                            
0000C6EA                            Obj2D_Action:				; XREF: Obj2D_Index
0000C6EA 7000                       		moveq	#0,d0
0000C6EC 1028 0025                  		move.b	$25(a0),d0
0000C6F0 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000C6F4 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000C6F8 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000C6FE 6100 FA0C                  		bsr.w	AnimateSprite
0000C702 6000 0000                  		bra.w	MarkObjGone
0000C706                            ; ===========================================================================
0000C706 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000C708 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000C70A 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000C70C 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000C70E                            ; ===========================================================================
0000C70E                            
0000C70E                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000C70E 5368 0030                  		subq.w	#1,$30(a0)
0000C712 6A00                       		bpl.s	locret_AD42
0000C714 5428 0025                  		addq.b	#2,$25(a0)
0000C718 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C71E 317C 0080 0010             		move.w	#$80,$10(a0)
0000C724 117C 0001 001C             		move.b	#1,$1C(a0)
0000C72A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000C730 6700                       		beq.s	locret_AD42
0000C732 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000C736                            
0000C736                            locret_AD42:
0000C736 4E75                       		rts	
0000C738                            ; ===========================================================================
0000C738                            
0000C738                            Obj2D_Move:				; XREF: Obj2D_Index2
0000C738 5368 0030                  		subq.w	#1,$30(a0)
0000C73C 6B00                       		bmi.s	loc_AD84
0000C73E 6100 0000                  		bsr.w	SpeedToPos
0000C742 0868 0000 0032             		bchg	#0,$32(a0)
0000C748 6600                       		bne.s	loc_AD78
0000C74A 3628 0008                  		move.w	8(a0),d3
0000C74E 0643 000C                  		addi.w	#$C,d3
0000C752 0828 0000 0022             		btst	#0,$22(a0)
0000C758 6600                       		bne.s	loc_AD6A
0000C75A 0443 0018                  		subi.w	#$18,d3
0000C75E                            
0000C75E                            loc_AD6A:
0000C75E 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C764 0C41 000C                  		cmpi.w	#$C,d1
0000C768 6C00                       		bge.s	loc_AD84
0000C76A 4E75                       		rts	
0000C76C                            ; ===========================================================================
0000C76C                            
0000C76C                            loc_AD78:				; XREF: Obj2D_Move
0000C76C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C772 D368 000C                  		add.w	d1,$C(a0)
0000C776 4E75                       		rts	
0000C778                            ; ===========================================================================
0000C778                            
0000C778                            loc_AD84:				; XREF: Obj2D_Move
0000C778 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C77E 6700                       		beq.s	loc_ADA4
0000C780 5528 0025                  		subq.b	#2,$25(a0)
0000C784 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C78A 317C 0000 0010             		move.w	#0,$10(a0)
0000C790 117C 0000 001C             		move.b	#0,$1C(a0)
0000C796 4E75                       		rts	
0000C798                            ; ===========================================================================
0000C798                            
0000C798                            loc_ADA4:
0000C798 5428 0025                  		addq.b	#2,$25(a0)
0000C79C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C7A2 117C 0002 001C             		move.b	#2,$1C(a0)
0000C7A8 4E75                       		rts	
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C7AA 6100 0000                  		bsr.w	SpeedToPos
0000C7AE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7B4 6B00                       		bmi.s	locret_ADF0
0000C7B6 117C 0003 001C             		move.b	#3,$1C(a0)
0000C7BC 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7C2 4A41                       		tst.w	d1
0000C7C4 6A00                       		bpl.s	locret_ADF0
0000C7C6 D368 000C                  		add.w	d1,$C(a0)
0000C7CA 317C 0000 0012             		move.w	#0,$12(a0)
0000C7D0 117C 0001 001C             		move.b	#1,$1C(a0)
0000C7D6 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C7DC 5528 0025                  		subq.b	#2,$25(a0)
0000C7E0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C7E4                            
0000C7E4                            locret_ADF0:
0000C7E4 4E75                       		rts	
0000C7E6                            ; ===========================================================================
0000C7E6                            
0000C7E6                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C7E6 343C 0060                  		move.w	#$60,d2
0000C7EA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C7EE 6400                       		bcc.s	locret_AE20
0000C7F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C7F4 9068 000C                  		sub.w	$C(a0),d0
0000C7F8 6400                       		bcc.s	locret_AE20
0000C7FA 0C40 FF80                  		cmpi.w	#-$80,d0
0000C7FE 6500                       		bcs.s	locret_AE20
0000C800 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C804 6600                       		bne.s	locret_AE20
0000C806 5528 0025                  		subq.b	#2,$25(a0)
0000C80A 3141 0010                  		move.w	d1,$10(a0)
0000C80E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C814                            
0000C814                            locret_AE20:
0000C814 4E75                       		rts	
0000C816                            
0000C816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C816                            
0000C816                            
0000C816                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C816 323C 0080                  		move.w	#$80,d1
0000C81A 08E8 0000 0022             		bset	#0,$22(a0)
0000C820 3038 D008                  		move.w	($FFFFD008).w,d0
0000C824 9068 0008                  		sub.w	8(a0),d0
0000C828 6400                       		bcc.s	loc_AE40
0000C82A 4440                       		neg.w	d0
0000C82C 4441                       		neg.w	d1
0000C82E 08A8 0000 0022             		bclr	#0,$22(a0)
0000C834                            
0000C834                            loc_AE40:
0000C834 B042                       		cmp.w	d2,d0
0000C836 4E75                       		rts	
0000C838                            ; End of function Obj2D_ChkSonic2
0000C838                            
0000C838                            ; ===========================================================================
0000C838                            Ani_obj2D:
0000C838                            	include "_anim\obj2D.asm"
0000C838                            ; ---------------------------------------------------------------------------
0000C838                            ; Animation script - Burrobot enemy
0000C838                            ; ---------------------------------------------------------------------------
0000C838 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C83A 0000                       		dc.w byte_AE50-Ani_obj2D
0000C83C 0000                       		dc.w byte_AE54-Ani_obj2D
0000C83E 0000                       		dc.w byte_AE58-Ani_obj2D
0000C840 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C844 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C848 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C84C 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C850 00                         		even
0000C850 00                         		even
0000C850                            
0000C850                            ; ---------------------------------------------------------------------------
0000C850                            ; Sprite mappings - Burrobot enemy (LZ)
0000C850                            ; ---------------------------------------------------------------------------
0000C850                            Map_obj2D:
0000C850                            	include "_maps\obj2D.asm"
0000C850                            ; ---------------------------------------------------------------------------
0000C850                            ; Sprite mappings - Burrobot enemy (LZ)
0000C850                            ; ---------------------------------------------------------------------------
0000C850 0000                       		dc.w byte_AE6A-Map_obj2D
0000C852 0000                       		dc.w byte_AE75-Map_obj2D
0000C854 0000                       		dc.w byte_AE80-Map_obj2D
0000C856 0000                       		dc.w byte_AE8B-Map_obj2D
0000C858 0000                       		dc.w byte_AE96-Map_obj2D
0000C85A 0000                       		dc.w byte_AEA1-Map_obj2D
0000C85C 0000                       		dc.w byte_AEAC-Map_obj2D
0000C85E 02                         byte_AE6A:	dc.b 2
0000C85F EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000C864 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C869 02                         byte_AE75:	dc.b 2
0000C86A EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C86F 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000C874 02                         byte_AE80:	dc.b 2
0000C875 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000C87A 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000C87F 02                         byte_AE8B:	dc.b 2
0000C880 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000C885 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000C88A 02                         byte_AE96:	dc.b 2
0000C88B E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000C890 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000C895 02                         byte_AEA1:	dc.b 2
0000C896 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000C89B F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000C8A0 02                         byte_AEAC:	dc.b 2
0000C8A1 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C8A6 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C8AC 00                         		even
0000C8AC 00                         		even
0000C8AC                            
0000C8AC                            ; ===========================================================================
0000C8AC                            ; ---------------------------------------------------------------------------
0000C8AC                            ; Object 2F - large moving platforms (MZ)
0000C8AC                            ; ---------------------------------------------------------------------------
0000C8AC                            
0000C8AC                            Obj2F:					; XREF: Obj_Index
0000C8AC 7000                       		moveq	#0,d0
0000C8AE 1028 0024                  		move.b	$24(a0),d0
0000C8B2 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C8B6 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C8BA                            ; ===========================================================================
0000C8BA 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C8BC 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C8BE                            
0000C8BE 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C8C0 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C8C2 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C8C4 0140                       		dc.b 1,	$40
0000C8C6 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C8C8 0220                       		dc.b 2,	$20
0000C8CA                            ; ===========================================================================
0000C8CA                            
0000C8CA                            Obj2F_Main:				; XREF: Obj2F_Index
0000C8CA 5428 0024                  		addq.b	#2,$24(a0)
0000C8CE 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C8D6 317C C000 0002             		move.w	#$C000,2(a0)
0000C8DC 117C 0004 0001             		move.b	#4,1(a0)
0000C8E2 117C 0005 0018             		move.b	#5,$18(a0)
0000C8E8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C8EE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C8F4 7000                       		moveq	#0,d0
0000C8F6 1028 0028                  		move.b	$28(a0),d0
0000C8FA E448                       		lsr.w	#2,d0
0000C8FC 0240 001C                  		andi.w	#$1C,d0
0000C900 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C904 3019                       		move.w	(a1)+,d0
0000C906 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C90A 214A 0030                  		move.l	a2,$30(a0)
0000C90E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C912 1151 0019                  		move.b	(a1),$19(a0)
0000C916 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C91C 117C 0040 0016             		move.b	#$40,$16(a0)
0000C922 08E8 0004 0001             		bset	#4,1(a0)
0000C928                            
0000C928                            Obj2F_Action:				; XREF: Obj2F_Index
0000C928 6100 0000                  		bsr.w	Obj2F_Types
0000C92C 4A28 0025                  		tst.b	$25(a0)
0000C930 6700                       		beq.s	Obj2F_Solid
0000C932 7200                       		moveq	#0,d1
0000C934 1228 0019                  		move.b	$19(a0),d1
0000C938 0641 000B                  		addi.w	#$B,d1
0000C93C 6100 C69A                  		bsr.w	ExitPlatform
0000C940 0829 0003 0022             		btst	#3,$22(a1)
0000C946 6600 0000                  		bne.w	Obj2F_Slope
0000C94A 4228 0025                  		clr.b	$25(a0)
0000C94E 6000                       		bra.s	Obj2F_Display
0000C950                            ; ===========================================================================
0000C950                            
0000C950                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C950 7200                       		moveq	#0,d1
0000C952 1228 0019                  		move.b	$19(a0),d1
0000C956 0641 000B                  		addi.w	#$B,d1
0000C95A 2468 0030                  		movea.l	$30(a0),a2
0000C95E 3428 0008                  		move.w	8(a0),d2
0000C962 6100 D5D2                  		bsr.w	SlopeObject2
0000C966 6000                       		bra.s	Obj2F_Display
0000C968                            ; ===========================================================================
0000C968                            
0000C968                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C968 7200                       		moveq	#0,d1
0000C96A 1228 0019                  		move.b	$19(a0),d1
0000C96E 0641 000B                  		addi.w	#$B,d1
0000C972 343C 0020                  		move.w	#$20,d2
0000C976 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C97C 6600                       		bne.s	loc_AF8E
0000C97E 343C 0030                  		move.w	#$30,d2
0000C982                            
0000C982                            loc_AF8E:
0000C982 2468 0030                  		movea.l	$30(a0),a2
0000C986 6100 0000                  		bsr.w	SolidObject2F
0000C98A                            
0000C98A                            Obj2F_Display:				; XREF: Obj2F_Action
0000C98A 6100 0000                  		bsr.w	DisplaySprite
0000C98E 6000 0000                  		bra.w	Obj2F_ChkDel
0000C992                            
0000C992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C992                            
0000C992                            
0000C992                            Obj2F_Types:				; XREF: Obj2F_Action
0000C992 7000                       		moveq	#0,d0
0000C994 1028 0028                  		move.b	$28(a0),d0
0000C998 0240 0007                  		andi.w	#7,d0
0000C99C D040                       		add.w	d0,d0
0000C99E 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C9A2 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C9A6                            ; End of function Obj2F_Types
0000C9A6                            
0000C9A6                            ; ===========================================================================
0000C9A6 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C9A8 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C9AA 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C9AC 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C9AE 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C9B0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C9B2                            ; ===========================================================================
0000C9B2                            
0000C9B2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C9B2 4E75                       		rts			; type 00 platform doesn't move
0000C9B4                            ; ===========================================================================
0000C9B4                            
0000C9B4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C9B4 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C9B8 323C 0020                  		move.w	#$20,d1
0000C9BC 6000                       		bra.s	Obj2F_Move
0000C9BE                            ; ===========================================================================
0000C9BE                            
0000C9BE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C9BE 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C9C2 323C 0030                  		move.w	#$30,d1
0000C9C6 6000                       		bra.s	Obj2F_Move
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C9C8 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C9CC 323C 0040                  		move.w	#$40,d1
0000C9D0 6000                       		bra.s	Obj2F_Move
0000C9D2                            ; ===========================================================================
0000C9D2                            
0000C9D2                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C9D2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C9D6 323C 0060                  		move.w	#$60,d1
0000C9DA                            
0000C9DA                            Obj2F_Move:
0000C9DA 0828 0003 0028             		btst	#3,$28(a0)
0000C9E0 6700                       		beq.s	loc_AFF2
0000C9E2 4440                       		neg.w	d0
0000C9E4 D041                       		add.w	d1,d0
0000C9E6                            
0000C9E6                            loc_AFF2:
0000C9E6 3228 002C                  		move.w	$2C(a0),d1
0000C9EA 9240                       		sub.w	d0,d1
0000C9EC 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C9F0 4E75                       		rts	
0000C9F2                            ; ===========================================================================
0000C9F2                            
0000C9F2                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C9F2 1028 0034                  		move.b	$34(a0),d0
0000C9F6 4A28 0025                  		tst.b	$25(a0)
0000C9FA 6600                       		bne.s	loc_B010
0000C9FC 5500                       		subq.b	#2,d0
0000C9FE 6400                       		bcc.s	loc_B01C
0000CA00 7000                       		moveq	#0,d0
0000CA02 6000                       		bra.s	loc_B01C
0000CA04                            ; ===========================================================================
0000CA04                            
0000CA04                            loc_B010:
0000CA04 5800                       		addq.b	#4,d0
0000CA06 0C00 0040                  		cmpi.b	#$40,d0
0000CA0A 6500                       		bcs.s	loc_B01C
0000CA0C 103C 0040                  		move.b	#$40,d0
0000CA10                            
0000CA10                            loc_B01C:
0000CA10 1140 0034                  		move.b	d0,$34(a0)
0000CA14 4EB9 0000 29AE             		jsr	(CalcSine).l
0000CA1A E848                       		lsr.w	#4,d0
0000CA1C 3200                       		move.w	d0,d1
0000CA1E D068 002C                  		add.w	$2C(a0),d0
0000CA22 3140 000C                  		move.w	d0,$C(a0)
0000CA26 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CA2C 6600                       		bne.s	loc_B07A
0000CA2E 4A28 0035                  		tst.b	$35(a0)
0000CA32 6600                       		bne.s	loc_B07A
0000CA34 117C 0001 0035             		move.b	#1,$35(a0)
0000CA3A 6100 0000                  		bsr.w	SingleObjLoad2
0000CA3E 6600                       		bne.s	loc_B07A
0000CA40 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000CA44 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA4A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000CA50 5069 002C                  		addq.w	#8,$2C(a1)
0000CA54 5769 002C                  		subq.w	#3,$2C(a1)
0000CA58 0469 0040 0008             		subi.w	#$40,8(a1)
0000CA5E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CA64 2348 0038                  		move.l	a0,$38(a1)
0000CA68 2448                       		movea.l	a0,a2
0000CA6A 6100                       		bsr.s	sub_B09C
0000CA6C                            
0000CA6C                            loc_B07A:
0000CA6C 7400                       		moveq	#0,d2
0000CA6E 45E8 0036                  		lea	$36(a0),a2
0000CA72 141A                       		move.b	(a2)+,d2
0000CA74 5302                       		subq.b	#1,d2
0000CA76 6500                       		bcs.s	locret_B09A
0000CA78                            
0000CA78                            loc_B086:
0000CA78 7000                       		moveq	#0,d0
0000CA7A 101A                       		move.b	(a2)+,d0
0000CA7C ED48                       		lsl.w	#6,d0
0000CA7E 0640 D000                  		addi.w	#-$3000,d0
0000CA82 3240                       		movea.w	d0,a1
0000CA84 3341 003C                  		move.w	d1,$3C(a1)
0000CA88 51CA FFEE                  		dbf	d2,loc_B086
0000CA8C                            
0000CA8C                            locret_B09A:
0000CA8C 4E75                       		rts	
0000CA8E                            
0000CA8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CA8E                            
0000CA8E                            
0000CA8E                            sub_B09C:
0000CA8E 45EA 0036                  		lea	$36(a2),a2
0000CA92 7000                       		moveq	#0,d0
0000CA94 1012                       		move.b	(a2),d0
0000CA96 5212                       		addq.b	#1,(a2)
0000CA98 45F2 0001                  		lea	1(a2,d0.w),a2
0000CA9C 3009                       		move.w	a1,d0
0000CA9E 0440 D000                  		subi.w	#-$3000,d0
0000CAA2 EC48                       		lsr.w	#6,d0
0000CAA4 0240 007F                  		andi.w	#$7F,d0
0000CAA8 1480                       		move.b	d0,(a2)
0000CAAA 4E75                       		rts	
0000CAAC                            ; End of function sub_B09C
0000CAAC                            
0000CAAC                            ; ===========================================================================
0000CAAC                            
0000CAAC                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000CAAC 4A28 0035                  		tst.b	$35(a0)
0000CAB0 6700                       		beq.s	loc_B0C6
0000CAB2 4A28 0001                  		tst.b	1(a0)
0000CAB6 6A00                       		bpl.s	Obj2F_DelFlames
0000CAB8                            
0000CAB8                            loc_B0C6:
0000CAB8 3028 002A                  		move.w	$2A(a0),d0
0000CABC 0240 FF80                  		andi.w	#$FF80,d0
0000CAC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAC4 0441 0080                  		subi.w	#$80,d1
0000CAC8 0241 FF80                  		andi.w	#$FF80,d1
0000CACC 9041                       		sub.w	d1,d0
0000CACE 0C40 0280                  		cmpi.w	#$280,d0
0000CAD2 6200 0000                  		bhi.w	DeleteObject
0000CAD6 4E75                       		rts	
0000CAD8                            ; ===========================================================================
0000CAD8                            
0000CAD8                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000CAD8 7400                       		moveq	#0,d2
0000CADA                            
0000CADA                            loc_B0E8:
0000CADA 45E8 0036                  		lea	$36(a0),a2
0000CADE 1412                       		move.b	(a2),d2
0000CAE0 421A                       		clr.b	(a2)+
0000CAE2 5302                       		subq.b	#1,d2
0000CAE4 6500                       		bcs.s	locret_B116
0000CAE6                            
0000CAE6                            loc_B0F4:
0000CAE6 7000                       		moveq	#0,d0
0000CAE8 1012                       		move.b	(a2),d0
0000CAEA 421A                       		clr.b	(a2)+
0000CAEC ED48                       		lsl.w	#6,d0
0000CAEE 0640 D000                  		addi.w	#-$3000,d0
0000CAF2 3240                       		movea.w	d0,a1
0000CAF4 6100 0000                  		bsr.w	DeleteObject2
0000CAF8 51CA FFEC                  		dbf	d2,loc_B0F4
0000CAFC 117C 0000 0035             		move.b	#0,$35(a0)
0000CB02 117C 0000 0034             		move.b	#0,$34(a0)
0000CB08                            
0000CB08                            locret_B116:
0000CB08 4E75                       		rts	
0000CB0A                            ; ===========================================================================
0000CB0A                            ; ---------------------------------------------------------------------------
0000CB0A                            ; Collision data for large moving platforms (MZ)
0000CB0A                            ; ---------------------------------------------------------------------------
0000CB0A                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000CB56                            		even
0000CB56                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000CB82                            		even
0000CB82                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000CBCE                            		even
0000CBCE                            ; ===========================================================================
0000CBCE                            ; ---------------------------------------------------------------------------
0000CBCE                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CBCE                            ; (appears when	you walk on sinking platforms)
0000CBCE                            ; ---------------------------------------------------------------------------
0000CBCE                            
0000CBCE                            Obj35:					; XREF: Obj_Index
0000CBCE 7000                       		moveq	#0,d0
0000CBD0 1028 0024                  		move.b	$24(a0),d0
0000CBD4 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000CBD8 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000CBDC                            ; ===========================================================================
0000CBDC 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000CBDE 0000                       		dc.w loc_B238-Obj35_Index
0000CBE0 0000                       		dc.w Obj35_Move-Obj35_Index
0000CBE2                            ; ===========================================================================
0000CBE2                            
0000CBE2                            Obj35_Main:				; XREF: Obj35_Index
0000CBE2 5428 0024                  		addq.b	#2,$24(a0)
0000CBE6 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000CBEE 317C 0345 0002             		move.w	#$345,2(a0)
0000CBF4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000CBFA 117C 0004 0001             		move.b	#4,1(a0)
0000CC00 117C 0001 0018             		move.b	#1,$18(a0)
0000CC06 117C 008B 0020             		move.b	#$8B,$20(a0)
0000CC0C 117C 0008 0019             		move.b	#8,$19(a0)
0000CC12 303C 00C8                  		move.w	#$C8,d0
0000CC16 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play flame sound
0000CC1C 4A28 0028                  		tst.b	$28(a0)
0000CC20 6700                       		beq.s	loc_B238
0000CC22 5428 0024                  		addq.b	#2,$24(a0)
0000CC26 6000 0000                  		bra.w	Obj35_Move
0000CC2A                            ; ===========================================================================
0000CC2A                            
0000CC2A                            loc_B238:				; XREF: Obj35_Index
0000CC2A 2268 0030                  		movea.l	$30(a0),a1
0000CC2E 3228 0008                  		move.w	8(a0),d1
0000CC32 9268 002A                  		sub.w	$2A(a0),d1
0000CC36 0641 000C                  		addi.w	#$C,d1
0000CC3A 3001                       		move.w	d1,d0
0000CC3C E248                       		lsr.w	#1,d0
0000CC3E 1031 0000                  		move.b	(a1,d0.w),d0
0000CC42 4440                       		neg.w	d0
0000CC44 D068 002C                  		add.w	$2C(a0),d0
0000CC48 3400                       		move.w	d0,d2
0000CC4A D068 003C                  		add.w	$3C(a0),d0
0000CC4E 3140 000C                  		move.w	d0,$C(a0)
0000CC52 0C41 0084                  		cmpi.w	#$84,d1
0000CC56 6400                       		bcc.s	loc_B2B0
0000CC58 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CC60 0C41 0080                  		cmpi.w	#$80,d1
0000CC64 6400                       		bcc.s	loc_B2B0
0000CC66 2028 0008                  		move.l	8(a0),d0
0000CC6A 0680 0008 0000             		addi.l	#$80000,d0
0000CC70 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000CC76 6600                       		bne.s	loc_B2B0
0000CC78 6100 0000                  		bsr.w	SingleObjLoad2
0000CC7C 6600                       		bne.s	loc_B2B0
0000CC7E 12BC 0035                  		move.b	#$35,0(a1)
0000CC82 3368 0008 0008             		move.w	8(a0),8(a1)
0000CC88 3342 002C                  		move.w	d2,$2C(a1)
0000CC8C 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000CC92 137C 0001 0028             		move.b	#1,$28(a1)
0000CC98 2468 0038                  		movea.l	$38(a0),a2
0000CC9C 6100 FDF0                  		bsr.w	sub_B09C
0000CCA0                            
0000CCA0                            loc_B2B0:
0000CCA0 6000                       		bra.s	Obj35_Animate
0000CCA2                            ; ===========================================================================
0000CCA2                            
0000CCA2                            Obj35_Move:				; XREF: Obj35_Index
0000CCA2 3028 002C                  		move.w	$2C(a0),d0
0000CCA6 D068 003C                  		add.w	$3C(a0),d0
0000CCAA 3140 000C                  		move.w	d0,$C(a0)
0000CCAE                            
0000CCAE                            Obj35_Animate:				; XREF: loc_B238
0000CCAE 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000CCB4 6100 F456                  		bsr.w	AnimateSprite
0000CCB8 6000 0000                  		bra.w	DisplaySprite
0000CCBC                            ; ===========================================================================
0000CCBC                            Ani_obj35:
0000CCBC                            	include "_anim\obj35.asm"
0000CCBC                            ; ---------------------------------------------------------------------------
0000CCBC                            ; Animation script - fireball that sits on the	floor (MZ)
0000CCBC                            ; ---------------------------------------------------------------------------
0000CCBC 0000                       		dc.w byte_B2CE-Ani_obj35
0000CCBE 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000CCC4                            		even
0000CCC4                            		even
0000CCC4                            
0000CCC4                            ; ---------------------------------------------------------------------------
0000CCC4                            ; Sprite mappings - large moving platforms (MZ)
0000CCC4                            ; ---------------------------------------------------------------------------
0000CCC4                            Map_obj2F:
0000CCC4                            	include "_maps\obj2F.asm"
0000CCC4                            ; ---------------------------------------------------------------------------
0000CCC4                            ; Sprite mappings - large moving platforms (MZ)
0000CCC4                            ; ---------------------------------------------------------------------------
0000CCC4 0000                       		dc.w byte_B2DA-Map_obj2F
0000CCC6 0000                       		dc.w byte_B31C-Map_obj2F
0000CCC8 0000                       		dc.w byte_B34F-Map_obj2F
0000CCCA 0D                         byte_B2DA:	dc.b $D
0000CCCB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000CCD0 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000CCD5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CCDA D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000CCDF F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000CCE4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CCE9 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000CCEE D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000CCF3 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000CCF8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CCFD 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000CD02 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000CD07 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000CD0C 0A                         byte_B31C:	dc.b $A
0000CD0D D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000CD12 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000CD17 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CD1C C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000CD21 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000CD26 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD2B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000CD30 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000CD35 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000CD3A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000CD3F 06                         byte_B34F:	dc.b 6
0000CD40 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000CD45 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD4A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000CD4F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000CD54 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CD59 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000CD5E                            		even
0000CD5E                            		even
0000CD5E                            
0000CD5E                            ; ---------------------------------------------------------------------------
0000CD5E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD5E                            ; ---------------------------------------------------------------------------
0000CD5E                            Map_obj14:
0000CD5E                            	include "_maps\obj14.asm"
0000CD5E                            ; ---------------------------------------------------------------------------
0000CD5E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD5E                            ; ---------------------------------------------------------------------------
0000CD5E 0000                       		dc.w byte_B37A-Map_obj14
0000CD60 0000                       		dc.w byte_B380-Map_obj14
0000CD62 0000                       		dc.w byte_B386-Map_obj14
0000CD64 0000                       		dc.w byte_B38C-Map_obj14
0000CD66 0000                       		dc.w byte_B392-Map_obj14
0000CD68 0000                       		dc.w byte_B398-Map_obj14
0000CD6A 01                         byte_B37A:	dc.b 1
0000CD6B E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000CD70 01                         byte_B380:	dc.b 1
0000CD71 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000CD76 01                         byte_B386:	dc.b 1
0000CD77 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000CD7C 01                         byte_B38C:	dc.b 1
0000CD7D F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000CD82 01                         byte_B392:	dc.b 1
0000CD83 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000CD88 01                         byte_B398:	dc.b 1
0000CD89 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000CD8E                            		even
0000CD8E                            		even
0000CD8E                            
0000CD8E                            ; ===========================================================================
0000CD8E                            ; ---------------------------------------------------------------------------
0000CD8E                            ; Object 30 - large green glassy blocks	(MZ)
0000CD8E                            ; ---------------------------------------------------------------------------
0000CD8E                            
0000CD8E                            Obj30:					; XREF: Obj_Index
0000CD8E 7000                       		moveq	#0,d0
0000CD90 1028 0024                  		move.b	$24(a0),d0
0000CD94 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000CD98 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000CD9C 3028 0008                  		move.w	8(a0),d0
0000CDA0 0240 FF80                  		andi.w	#$FF80,d0
0000CDA4 3238 F700                  		move.w	($FFFFF700).w,d1
0000CDA8 0441 0080                  		subi.w	#$80,d1
0000CDAC 0241 FF80                  		andi.w	#$FF80,d1
0000CDB0 9041                       		sub.w	d1,d0
0000CDB2 0C40 0280                  		cmpi.w	#$280,d0
0000CDB6 6200 0000                  		bhi.w	Obj30_Delete
0000CDBA 6000 0000                  		bra.w	DisplaySprite
0000CDBE                            ; ===========================================================================
0000CDBE                            
0000CDBE                            Obj30_Delete:
0000CDBE 6000 0000                  		bra.w	DeleteObject
0000CDC2                            ; ===========================================================================
0000CDC2 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000CDC4 0000                       		dc.w Obj30_Block012-Obj30_Index
0000CDC6 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000CDC8 0000                       		dc.w Obj30_Block34-Obj30_Index
0000CDCA 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000CDCC                            
0000CDCC 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000CDCF 0400 01                    		dc.b 4,	0, 1
0000CDD2 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000CDD5 0800 01                    		dc.b 8,	0, 1
0000CDD8                            ; ===========================================================================
0000CDD8                            
0000CDD8                            Obj30_Main:				; XREF: Obj30_Index
0000CDD8 45F9 0000 CDCC             		lea	(Obj30_Vars1).l,a2
0000CDDE 7201                       		moveq	#1,d1
0000CDE0 117C 0048 0016             		move.b	#$48,$16(a0)
0000CDE6 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000CDEC 6500                       		bcs.s	loc_B40C	; if yes, branch
0000CDEE 45F9 0000 CDD2             		lea	(Obj30_Vars2).l,a2
0000CDF4 7201                       		moveq	#1,d1
0000CDF6 117C 0038 0016             		move.b	#$38,$16(a0)
0000CDFC                            
0000CDFC                            loc_B40C:
0000CDFC 2248                       		movea.l	a0,a1
0000CDFE 6000                       		bra.s	Obj30_Load	; load main object
0000CE00                            ; ===========================================================================
0000CE00                            
0000CE00                            Obj30_Loop:
0000CE00 6100 0000                  		bsr.w	SingleObjLoad2
0000CE04 6600                       		bne.s	loc_B480
0000CE06                            
0000CE06                            Obj30_Load:				; XREF: Obj30_Main
0000CE06 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE0A 12BC 0030                  		move.b	#$30,0(a1)
0000CE0E 3368 0008 0008             		move.w	8(a0),8(a1)
0000CE14 101A                       		move.b	(a2)+,d0
0000CE16 4880                       		ext.w	d0
0000CE18 D068 000C                  		add.w	$C(a0),d0
0000CE1C 3340 000C                  		move.w	d0,$C(a1)
0000CE20 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000CE28 337C C38E 0002             		move.w	#$C38E,2(a1)
0000CE2E 137C 0004 0001             		move.b	#4,1(a1)
0000CE34 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CE3A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CE40 137C 0020 0019             		move.b	#$20,$19(a1)
0000CE46 137C 0004 0018             		move.b	#4,$18(a1)
0000CE4C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CE50 2348 003C                  		move.l	a0,$3C(a1)
0000CE54 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000CE58                            
0000CE58 137C 0010 0019             		move.b	#$10,$19(a1)
0000CE5E 137C 0003 0018             		move.b	#3,$18(a1)
0000CE64 5029 0028                  		addq.b	#8,$28(a1)
0000CE68 0229 000F 0028             		andi.b	#$F,$28(a1)
0000CE6E                            
0000CE6E                            loc_B480:
0000CE6E 317C 0090 0032             		move.w	#$90,$32(a0)
0000CE74 08E8 0004 0001             		bset	#4,1(a0)
0000CE7A                            
0000CE7A                            Obj30_Block012:				; XREF: Obj30_Index
0000CE7A 6100 0000                  		bsr.w	Obj30_Types
0000CE7E 323C 002B                  		move.w	#$2B,d1
0000CE82 343C 0048                  		move.w	#$48,d2
0000CE86 363C 0049                  		move.w	#$49,d3
0000CE8A 3828 0008                  		move.w	8(a0),d4
0000CE8E 6000 0000                  		bra.w	SolidObject
0000CE92                            ; ===========================================================================
0000CE92                            
0000CE92                            Obj30_Reflect012:			; XREF: Obj30_Index
0000CE92 2268 003C                  		movea.l	$3C(a0),a1
0000CE96 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CE9C 6000 0000                  		bra.w	Obj30_Types
0000CEA0                            ; ===========================================================================
0000CEA0                            
0000CEA0                            Obj30_Block34:				; XREF: Obj30_Index
0000CEA0 6100 0000                  		bsr.w	Obj30_Types
0000CEA4 323C 002B                  		move.w	#$2B,d1
0000CEA8 343C 0038                  		move.w	#$38,d2
0000CEAC 363C 0039                  		move.w	#$39,d3
0000CEB0 3828 0008                  		move.w	8(a0),d4
0000CEB4 6000 0000                  		bra.w	SolidObject
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            Obj30_Reflect34:			; XREF: Obj30_Index
0000CEB8 2268 003C                  		movea.l	$3C(a0),a1
0000CEBC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CEC2 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000CEC8 6000 0002                  		bra.w	*+4
0000CECC                            
0000CECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CECC                            
0000CECC                            
0000CECC                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000CECC 7000                       		moveq	#0,d0
0000CECE 1028 0028                  		move.b	$28(a0),d0
0000CED2 0240 0007                  		andi.w	#7,d0
0000CED6 D040                       		add.w	d0,d0
0000CED8 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000CEDC 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000CEE0                            ; End of function Obj30_Types
0000CEE0                            
0000CEE0                            ; ===========================================================================
0000CEE0 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000CEE2 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000CEE4 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000CEE6 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000CEE8 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000CEEA                            ; ===========================================================================
0000CEEA                            
0000CEEA                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000CEEA 4E75                       		rts	
0000CEEC                            ; ===========================================================================
0000CEEC                            
0000CEEC                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000CEEC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CEF0 323C 0040                  		move.w	#$40,d1
0000CEF4 6000                       		bra.s	loc_B514
0000CEF6                            ; ===========================================================================
0000CEF6                            
0000CEF6                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000CEF6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CEFA 323C 0040                  		move.w	#$40,d1
0000CEFE 4440                       		neg.w	d0
0000CF00 D041                       		add.w	d1,d0
0000CF02                            
0000CF02                            loc_B514:				; XREF: Obj30_Type01
0000CF02 0828 0003 0028             		btst	#3,$28(a0)
0000CF08 6700                       		beq.s	loc_B526
0000CF0A 4440                       		neg.w	d0
0000CF0C D041                       		add.w	d1,d0
0000CF0E E208                       		lsr.b	#1,d0
0000CF10 0640 0020                  		addi.w	#$20,d0
0000CF14                            
0000CF14                            loc_B526:
0000CF14 6000 0000                  		bra.w	loc_B5EE
0000CF18                            ; ===========================================================================
0000CF18                            
0000CF18                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000CF18 0828 0003 0028             		btst	#3,$28(a0)
0000CF1E 6700                       		beq.s	loc_B53E
0000CF20 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF24 0440 0010                  		subi.w	#$10,d0
0000CF28 6000 0000                  		bra.w	loc_B5EE
0000CF2C                            ; ===========================================================================
0000CF2C                            
0000CF2C                            loc_B53E:
0000CF2C 0828 0003 0022             		btst	#3,$22(a0)
0000CF32 6600                       		bne.s	loc_B54E
0000CF34 08A8 0000 0034             		bclr	#0,$34(a0)
0000CF3A 6000                       		bra.s	loc_B582
0000CF3C                            ; ===========================================================================
0000CF3C                            
0000CF3C                            loc_B54E:
0000CF3C 4A28 0034                  		tst.b	$34(a0)
0000CF40 6600                       		bne.s	loc_B582
0000CF42 117C 0001 0034             		move.b	#1,$34(a0)
0000CF48 08E8 0000 0035             		bset	#0,$35(a0)
0000CF4E 6700                       		beq.s	loc_B582
0000CF50 08E8 0007 0034             		bset	#7,$34(a0)
0000CF56 317C 0010 0036             		move.w	#$10,$36(a0)
0000CF5C 117C 000A 0038             		move.b	#$A,$38(a0)
0000CF62 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000CF68 6600                       		bne.s	loc_B582
0000CF6A 317C 0040 0036             		move.w	#$40,$36(a0)
0000CF70                            
0000CF70                            loc_B582:
0000CF70 4A28 0034                  		tst.b	$34(a0)
0000CF74 6A00                       		bpl.s	loc_B5AA
0000CF76 4A28 0038                  		tst.b	$38(a0)
0000CF7A 6700                       		beq.s	loc_B594
0000CF7C 5328 0038                  		subq.b	#1,$38(a0)
0000CF80 6600                       		bne.s	loc_B5AA
0000CF82                            
0000CF82                            loc_B594:
0000CF82 4A68 0032                  		tst.w	$32(a0)
0000CF86 6700                       		beq.s	loc_B5A4
0000CF88 5368 0032                  		subq.w	#1,$32(a0)
0000CF8C 5368 0036                  		subq.w	#1,$36(a0)
0000CF90 6600                       		bne.s	loc_B5AA
0000CF92                            
0000CF92                            loc_B5A4:
0000CF92 08A8 0007 0034             		bclr	#7,$34(a0)
0000CF98                            
0000CF98                            loc_B5AA:
0000CF98 3028 0032                  		move.w	$32(a0),d0
0000CF9C 6000                       		bra.s	loc_B5EE
0000CF9E                            ; ===========================================================================
0000CF9E                            
0000CF9E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000CF9E 0828 0003 0028             		btst	#3,$28(a0)
0000CFA4 6700                       		beq.s	Obj30_ChkSwitch
0000CFA6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CFAA 0440 0010                  		subi.w	#$10,d0
0000CFAE 6000                       		bra.s	loc_B5EE
0000CFB0                            ; ===========================================================================
0000CFB0                            
0000CFB0                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000CFB0 4A28 0034                  		tst.b	$34(a0)
0000CFB4 6600                       		bne.s	loc_B5E0
0000CFB6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000CFBA 7000                       		moveq	#0,d0
0000CFBC 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000CFC0 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000CFC2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000CFC6 6700                       		beq.s	loc_B5EA	; if not, branch
0000CFC8 117C 0001 0034             		move.b	#1,$34(a0)
0000CFCE                            
0000CFCE                            loc_B5E0:
0000CFCE 4A68 0032                  		tst.w	$32(a0)
0000CFD2 6700                       		beq.s	loc_B5EA
0000CFD4 5568 0032                  		subq.w	#2,$32(a0)
0000CFD8                            
0000CFD8                            loc_B5EA:
0000CFD8 3028 0032                  		move.w	$32(a0),d0
0000CFDC                            
0000CFDC                            loc_B5EE:
0000CFDC 3228 0030                  		move.w	$30(a0),d1
0000CFE0 9240                       		sub.w	d0,d1
0000CFE2 3141 000C                  		move.w	d1,$C(a0)
0000CFE6 4E75                       		rts	
0000CFE8                            ; ===========================================================================
0000CFE8                            ; ---------------------------------------------------------------------------
0000CFE8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000CFE8                            ; ---------------------------------------------------------------------------
0000CFE8                            Map_obj30:
0000CFE8                            	include "_maps\obj30.asm"
0000CFE8                            ; ---------------------------------------------------------------------------
0000CFE8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000CFE8                            ; ---------------------------------------------------------------------------
0000CFE8 0000                       		dc.w byte_B600-Map_obj30
0000CFEA 0000                       		dc.w byte_B63D-Map_obj30
0000CFEC 0000                       		dc.w byte_B648-Map_obj30
0000CFEE 0C                         byte_B600:	dc.b $C
0000CFEF B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000CFF4 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000CFF9 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000CFFE C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000D003 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000D008 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000D00D 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000D012 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000D017 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000D01C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000D021 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000D026 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000D02B 02                         byte_B63D:	dc.b 2
0000D02C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000D031 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000D036 0A                         byte_B648:	dc.b $A
0000D037 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000D03C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000D041 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000D046 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000D04B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000D050 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000D055 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000D05A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000D05F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000D064 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000D06A 00                         		even
0000D06A 00                         		even
0000D06A                            
0000D06A                            ; ===========================================================================
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            
0000D06A                            Obj31:					; XREF: Obj_Index
0000D06A 7000                       		moveq	#0,d0
0000D06C 1028 0024                  		move.b	$24(a0),d0
0000D070 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000D074 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000D078                            ; ===========================================================================
0000D078 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000D07A 0000                       		dc.w loc_B798-Obj31_Index
0000D07C 0000                       		dc.w loc_B7FE-Obj31_Index
0000D07E 0000                       		dc.w Obj31_Display2-Obj31_Index
0000D080 0000                       		dc.w loc_B7E2-Obj31_Index
0000D082                            
0000D082 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D084 0100                       		dc.b 1,	0
0000D086                            
0000D086 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000D089 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000D08C 08CC 03                    		dc.b 8,	$CC, 3
0000D08F 06F0 02                    		dc.b 6,	$F0, 2
0000D092                            
0000D092 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D096 5000 7800                  		dc.w $5000, $7800
0000D09A 3800 5800                  		dc.w $3800, $5800
0000D09E B800                       		dc.w $B800
0000D0A0                            ; ===========================================================================
0000D0A0                            
0000D0A0                            Obj31_Main:				; XREF: Obj31_Index
0000D0A0 7000                       		moveq	#0,d0
0000D0A2 1028 0028                  		move.b	$28(a0),d0
0000D0A6 6A00                       		bpl.s	loc_B6CE
0000D0A8 0240 007F                  		andi.w	#$7F,d0
0000D0AC D040                       		add.w	d0,d0
0000D0AE 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000D0B2 115A 003A                  		move.b	(a2)+,$3A(a0)
0000D0B6 101A                       		move.b	(a2)+,d0
0000D0B8 1140 0028                  		move.b	d0,$28(a0)
0000D0BC                            
0000D0BC                            loc_B6CE:
0000D0BC 0200 000F                  		andi.b	#$F,d0
0000D0C0 D040                       		add.w	d0,d0
0000D0C2 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D0C6 4A40                       		tst.w	d0
0000D0C8 6600                       		bne.s	loc_B6E0
0000D0CA 3142 0032                  		move.w	d2,$32(a0)
0000D0CE                            
0000D0CE                            loc_B6E0:
0000D0CE 45F9 0000 D086             		lea	(Obj31_Var).l,a2
0000D0D4 2248                       		movea.l	a0,a1
0000D0D6 7203                       		moveq	#3,d1
0000D0D8 6000                       		bra.s	Obj31_MakeStomper
0000D0DA                            ; ===========================================================================
0000D0DA                            
0000D0DA                            Obj31_Loop:
0000D0DA 6100 0000                  		bsr.w	SingleObjLoad2
0000D0DE 6600 0000                  		bne.w	Obj31_SetSize
0000D0E2                            
0000D0E2                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000D0E2 135A 0024                  		move.b	(a2)+,$24(a1)
0000D0E6 12BC 0031                  		move.b	#$31,0(a1)
0000D0EA 3368 0008 0008             		move.w	8(a0),8(a1)
0000D0F0 101A                       		move.b	(a2)+,d0
0000D0F2 4880                       		ext.w	d0
0000D0F4 D068 000C                  		add.w	$C(a0),d0
0000D0F8 3340 000C                  		move.w	d0,$C(a1)
0000D0FC 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000D104 337C 0300 0002             		move.w	#$300,2(a1)
0000D10A 137C 0004 0001             		move.b	#4,1(a1)
0000D110 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000D116 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D11C 137C 0010 0019             		move.b	#$10,$19(a1)
0000D122 3342 0034                  		move.w	d2,$34(a1)
0000D126 137C 0004 0018             		move.b	#4,$18(a1)
0000D12C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D130 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000D136 6600                       		bne.s	loc_B76A
0000D138 5341                       		subq.w	#1,d1
0000D13A 1028 0028                  		move.b	$28(a0),d0
0000D13E 0240 00F0                  		andi.w	#$F0,d0
0000D142 0C40 0020                  		cmpi.w	#$20,d0
0000D146 679A                       		beq.s	Obj31_MakeStomper
0000D148 137C 0038 0019             		move.b	#$38,$19(a1)
0000D14E 137C 0090 0020             		move.b	#$90,$20(a1)
0000D154 5241                       		addq.w	#1,d1
0000D156                            
0000D156                            loc_B76A:
0000D156 2348 003C                  		move.l	a0,$3C(a1)
0000D15A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000D15E                            
0000D15E 137C 0003 0018             		move.b	#3,$18(a1)
0000D164                            
0000D164                            Obj31_SetSize:
0000D164 7000                       		moveq	#0,d0
0000D166 1028 0028                  		move.b	$28(a0),d0
0000D16A E648                       		lsr.w	#3,d0
0000D16C 0200 000E                  		andi.b	#$E,d0
0000D170 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000D174 115A 0019                  		move.b	(a2)+,$19(a0)
0000D178 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D17C 6000                       		bra.s	loc_B798
0000D17E                            ; ===========================================================================
0000D17E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000D180 3009                       		dc.b $30, 9
0000D182 100A                       		dc.b $10, $A
0000D184                            ; ===========================================================================
0000D184                            
0000D184                            loc_B798:				; XREF: Obj31_Index
0000D184 6100 0000                  		bsr.w	Obj31_Types
0000D188 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000D18E 7200                       		moveq	#0,d1
0000D190 1228 0019                  		move.b	$19(a0),d1
0000D194 0641 000B                  		addi.w	#$B,d1
0000D198 343C 000C                  		move.w	#$C,d2
0000D19C 363C 000D                  		move.w	#$D,d3
0000D1A0 3828 0008                  		move.w	8(a0),d4
0000D1A4 6100 0000                  		bsr.w	SolidObject
0000D1A8 0828 0003 0022             		btst	#3,$22(a0)
0000D1AE 6700                       		beq.s	Obj31_Display
0000D1B0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D1B6 6400                       		bcc.s	Obj31_Display
0000D1B8 2448                       		movea.l	a0,a2
0000D1BA 41F8 D000                  		lea	($FFFFD000).w,a0
0000D1BE 4EB9 0000 0000             		jsr	KillSonic
0000D1C4 204A                       		movea.l	a2,a0
0000D1C6                            
0000D1C6                            Obj31_Display:
0000D1C6 6100 0000                  		bsr.w	DisplaySprite
0000D1CA 6000 0000                  		bra.w	Obj31_ChkDel
0000D1CE                            ; ===========================================================================
0000D1CE                            
0000D1CE                            loc_B7E2:				; XREF: Obj31_Index
0000D1CE 117C 0080 0016             		move.b	#$80,$16(a0)
0000D1D4 08E8 0004 0001             		bset	#4,1(a0)
0000D1DA 2268 003C                  		movea.l	$3C(a0),a1
0000D1DE 1029 0032                  		move.b	$32(a1),d0
0000D1E2 EA08                       		lsr.b	#5,d0
0000D1E4 5600                       		addq.b	#3,d0
0000D1E6 1140 001A                  		move.b	d0,$1A(a0)
0000D1EA                            
0000D1EA                            loc_B7FE:				; XREF: Obj31_Index
0000D1EA 2268 003C                  		movea.l	$3C(a0),a1
0000D1EE 7000                       		moveq	#0,d0
0000D1F0 1029 0032                  		move.b	$32(a1),d0
0000D1F4 D068 0030                  		add.w	$30(a0),d0
0000D1F8 3140 000C                  		move.w	d0,$C(a0)
0000D1FC                            
0000D1FC                            Obj31_Display2:				; XREF: Obj31_Index
0000D1FC 6100 0000                  		bsr.w	DisplaySprite
0000D200                            
0000D200                            Obj31_ChkDel:				; XREF: Obj31_Display
0000D200 3028 0008                  		move.w	8(a0),d0
0000D204 0240 FF80                  		andi.w	#$FF80,d0
0000D208 3238 F700                  		move.w	($FFFFF700).w,d1
0000D20C 0441 0080                  		subi.w	#$80,d1
0000D210 0241 FF80                  		andi.w	#$FF80,d1
0000D214 9041                       		sub.w	d1,d0
0000D216 0C40 0280                  		cmpi.w	#$280,d0
0000D21A 6200 0000                  		bhi.w	DeleteObject
0000D21E 4E75                       		rts	
0000D220                            ; ===========================================================================
0000D220                            
0000D220                            Obj31_Types:				; XREF: loc_B798
0000D220 1028 0028                  		move.b	$28(a0),d0
0000D224 0240 000F                  		andi.w	#$F,d0
0000D228 D040                       		add.w	d0,d0
0000D22A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000D22E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000D232                            ; ===========================================================================
0000D232 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000D234 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D236 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D238 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D23A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D23C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D23E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D240                            ; ===========================================================================
0000D240                            
0000D240                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000D240 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000D244 7000                       		moveq	#0,d0
0000D246 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000D24A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D24E 6700                       		beq.s	loc_B8A8	; if not, branch
0000D250 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000D254 6A00                       		bpl.s	loc_B872
0000D256 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D25C 6700                       		beq.s	loc_B8A0
0000D25E                            
0000D25E                            loc_B872:
0000D25E 4A68 0032                  		tst.w	$32(a0)
0000D262 6700                       		beq.s	loc_B8A0
0000D264 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D268 0200 000F                  		andi.b	#$F,d0
0000D26C 6600                       		bne.s	loc_B892
0000D26E 4A28 0001                  		tst.b	1(a0)
0000D272 6A00                       		bpl.s	loc_B892
0000D274 303C 00C7                  		move.w	#$C7,d0
0000D278 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D27E                            
0000D27E                            loc_B892:
0000D27E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D284 6400                       		bcc.s	Obj31_Restart
0000D286 317C 0000 0032             		move.w	#0,$32(a0)
0000D28C                            
0000D28C                            loc_B8A0:
0000D28C 317C 0000 0012             		move.w	#0,$12(a0)
0000D292 6000                       		bra.s	Obj31_Restart
0000D294                            ; ===========================================================================
0000D294                            
0000D294                            loc_B8A8:				; XREF: Obj31_Type00
0000D294 3228 0034                  		move.w	$34(a0),d1
0000D298 B268 0032                  		cmp.w	$32(a0),d1
0000D29C 6700                       		beq.s	Obj31_Restart
0000D29E 3028 0012                  		move.w	$12(a0),d0
0000D2A2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D2A8 D168 0032                  		add.w	d0,$32(a0)
0000D2AC B268 0032                  		cmp.w	$32(a0),d1
0000D2B0 6200                       		bhi.s	Obj31_Restart
0000D2B2 3141 0032                  		move.w	d1,$32(a0)
0000D2B6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D2BC 4A28 0001                  		tst.b	1(a0)
0000D2C0 6A00                       		bpl.s	Obj31_Restart
0000D2C2 303C 00BD                  		move.w	#$BD,d0
0000D2C6 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D2CC                            
0000D2CC                            Obj31_Restart:
0000D2CC 7000                       		moveq	#0,d0
0000D2CE 1028 0032                  		move.b	$32(a0),d0
0000D2D2 D068 0030                  		add.w	$30(a0),d0
0000D2D6 3140 000C                  		move.w	d0,$C(a0)
0000D2DA 4E75                       		rts	
0000D2DC                            ; ===========================================================================
0000D2DC                            
0000D2DC                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000D2DC 4A68 0036                  		tst.w	$36(a0)
0000D2E0 6700                       		beq.s	loc_B938
0000D2E2 4A68 0038                  		tst.w	$38(a0)
0000D2E6 6700                       		beq.s	loc_B902
0000D2E8 5368 0038                  		subq.w	#1,$38(a0)
0000D2EC 6000                       		bra.s	loc_B97C
0000D2EE                            ; ===========================================================================
0000D2EE                            
0000D2EE                            loc_B902:
0000D2EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D2F2 0200 000F                  		andi.b	#$F,d0
0000D2F6 6600                       		bne.s	loc_B91C
0000D2F8 4A28 0001                  		tst.b	1(a0)
0000D2FC 6A00                       		bpl.s	loc_B91C
0000D2FE 303C 00C7                  		move.w	#$C7,d0
0000D302 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D308                            
0000D308                            loc_B91C:
0000D308 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D30E 6400                       		bcc.s	loc_B97C
0000D310 317C 0000 0032             		move.w	#0,$32(a0)
0000D316 317C 0000 0012             		move.w	#0,$12(a0)
0000D31C 317C 0000 0036             		move.w	#0,$36(a0)
0000D322 6000                       		bra.s	loc_B97C
0000D324                            ; ===========================================================================
0000D324                            
0000D324                            loc_B938:				; XREF: Obj31_Type01
0000D324 3228 0034                  		move.w	$34(a0),d1
0000D328 B268 0032                  		cmp.w	$32(a0),d1
0000D32C 6700                       		beq.s	loc_B97C
0000D32E 3028 0012                  		move.w	$12(a0),d0
0000D332 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D338 D168 0032                  		add.w	d0,$32(a0)
0000D33C B268 0032                  		cmp.w	$32(a0),d1
0000D340 6200                       		bhi.s	loc_B97C
0000D342 3141 0032                  		move.w	d1,$32(a0)
0000D346 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D34C 317C 0001 0036             		move.w	#1,$36(a0)
0000D352 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D358 4A28 0001                  		tst.b	1(a0)
0000D35C 6A00                       		bpl.s	loc_B97C
0000D35E 303C 00BD                  		move.w	#$BD,d0
0000D362 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D368                            
0000D368                            loc_B97C:
0000D368 6000 FF62                  		bra.w	Obj31_Restart
0000D36C                            ; ===========================================================================
0000D36C                            
0000D36C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000D36C 3038 D008                  		move.w	($FFFFD008).w,d0
0000D370 9068 0008                  		sub.w	8(a0),d0
0000D374 6400                       		bcc.s	loc_B98C
0000D376 4440                       		neg.w	d0
0000D378                            
0000D378                            loc_B98C:
0000D378 0C40 0090                  		cmpi.w	#$90,d0
0000D37C 6400                       		bcc.s	loc_B996
0000D37E 5228 0028                  		addq.b	#1,$28(a0)
0000D382                            
0000D382                            loc_B996:
0000D382 6000 FF48                  		bra.w	Obj31_Restart
0000D386                            ; ===========================================================================
0000D386                            ; ---------------------------------------------------------------------------
0000D386                            ; Object 45 - spiked metal block from beta version (MZ)
0000D386                            ; ---------------------------------------------------------------------------
0000D386                            
0000D386                            Obj45:					; XREF: Obj_Index
0000D386 7000                       		moveq	#0,d0
0000D388 1028 0024                  		move.b	$24(a0),d0
0000D38C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000D390 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000D394                            ; ===========================================================================
0000D394 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000D396 0000                       		dc.w Obj45_Solid-Obj45_Index
0000D398 0000                       		dc.w loc_BA8E-Obj45_Index
0000D39A 0000                       		dc.w Obj45_Display-Obj45_Index
0000D39C 0000                       		dc.w loc_BA7A-Obj45_Index
0000D39E                            
0000D39E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000D3A1 04E4 01                    		dc.b	4, $E4,	  1
0000D3A4 0834 03                    		dc.b	8, $34,	  3
0000D3A7 0628 02                    		dc.b	6, $28,	  2
0000D3AA                            
0000D3AA 3800                       word_B9BE:	dc.w $3800
0000D3AC A000                       		dc.w -$6000
0000D3AE 5000                       		dc.w $5000
0000D3B0                            ; ===========================================================================
0000D3B0                            
0000D3B0                            Obj45_Main:				; XREF: Obj45_Index
0000D3B0 7000                       		moveq	#0,d0
0000D3B2 1028 0028                  		move.b	$28(a0),d0
0000D3B6 D040                       		add.w	d0,d0
0000D3B8 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000D3BC 45F9 0000 D39E             		lea	(Obj45_Var).l,a2
0000D3C2 2248                       		movea.l	a0,a1
0000D3C4 7203                       		moveq	#3,d1
0000D3C6 6000                       		bra.s	Obj45_Load
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            Obj45_Loop:
0000D3C8 6100 0000                  		bsr.w	SingleObjLoad2
0000D3CC 6600                       		bne.s	loc_BA52
0000D3CE                            
0000D3CE                            Obj45_Load:				; XREF: Obj45_Main
0000D3CE 135A 0024                  		move.b	(a2)+,$24(a1)
0000D3D2 12BC 0045                  		move.b	#$45,0(a1)
0000D3D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D3DC 101A                       		move.b	(a2)+,d0
0000D3DE 4880                       		ext.w	d0
0000D3E0 D068 0008                  		add.w	8(a0),d0
0000D3E4 3340 0008                  		move.w	d0,8(a1)
0000D3E8 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000D3F0 337C 0300 0002             		move.w	#$300,2(a1)
0000D3F6 137C 0004 0001             		move.b	#4,1(a1)
0000D3FC 3369 0008 0030             		move.w	8(a1),$30(a1)
0000D402 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000D408 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D40E 137C 0020 0019             		move.b	#$20,$19(a1)
0000D414 3342 0034                  		move.w	d2,$34(a1)
0000D418 137C 0004 0018             		move.b	#4,$18(a1)
0000D41E 0C12 0001                  		cmpi.b	#1,(a2)
0000D422 6600                       		bne.s	loc_BA40
0000D424 137C 0091 0020             		move.b	#$91,$20(a1)
0000D42A                            
0000D42A                            loc_BA40:
0000D42A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D42E 2348 003C                  		move.l	a0,$3C(a1)
0000D432 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000D436                            
0000D436 137C 0003 0018             		move.b	#3,$18(a1)
0000D43C                            
0000D43C                            loc_BA52:
0000D43C 117C 0010 0019             		move.b	#$10,$19(a0)
0000D442                            
0000D442                            Obj45_Solid:				; XREF: Obj45_Index
0000D442 3F28 0008                  		move.w	8(a0),-(sp)
0000D446 6100 0000                  		bsr.w	Obj45_Move
0000D44A 323C 0017                  		move.w	#$17,d1
0000D44E 343C 0020                  		move.w	#$20,d2
0000D452 363C 0020                  		move.w	#$20,d3
0000D456 381F                       		move.w	(sp)+,d4
0000D458 6100 0000                  		bsr.w	SolidObject
0000D45C 6100 0000                  		bsr.w	DisplaySprite
0000D460 6000 0000                  		bra.w	Obj45_ChkDel
0000D464                            ; ===========================================================================
0000D464                            
0000D464                            loc_BA7A:				; XREF: Obj45_Index
0000D464 2268 003C                  		movea.l	$3C(a0),a1
0000D468 1029 0032                  		move.b	$32(a1),d0
0000D46C 0600 0010                  		addi.b	#$10,d0
0000D470 EA08                       		lsr.b	#5,d0
0000D472 5600                       		addq.b	#3,d0
0000D474 1140 001A                  		move.b	d0,$1A(a0)
0000D478                            
0000D478                            loc_BA8E:				; XREF: Obj45_Index
0000D478 2268 003C                  		movea.l	$3C(a0),a1
0000D47C 7000                       		moveq	#0,d0
0000D47E 1029 0032                  		move.b	$32(a1),d0
0000D482 4440                       		neg.w	d0
0000D484 D068 0030                  		add.w	$30(a0),d0
0000D488 3140 0008                  		move.w	d0,8(a0)
0000D48C                            
0000D48C                            Obj45_Display:				; XREF: Obj45_Index
0000D48C 6100 0000                  		bsr.w	DisplaySprite
0000D490                            
0000D490                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000D490 3028 003A                  		move.w	$3A(a0),d0
0000D494 0240 FF80                  		andi.w	#$FF80,d0
0000D498 3238 F700                  		move.w	($FFFFF700).w,d1
0000D49C 0441 0080                  		subi.w	#$80,d1
0000D4A0 0241 FF80                  		andi.w	#$FF80,d1
0000D4A4 9041                       		sub.w	d1,d0
0000D4A6 0C40 0280                  		cmpi.w	#$280,d0
0000D4AA 6200 0000                  		bhi.w	DeleteObject
0000D4AE 4E75                       		rts	
0000D4B0                            
0000D4B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D4B0                            
0000D4B0                            
0000D4B0                            Obj45_Move:				; XREF: Obj45_Solid
0000D4B0 7000                       		moveq	#0,d0
0000D4B2 1028 0028                  		move.b	$28(a0),d0
0000D4B6 D040                       		add.w	d0,d0
0000D4B8 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D4BC 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D4C0                            ; End of function Obj45_Move
0000D4C0                            
0000D4C0                            ; ===========================================================================
0000D4C0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D4C2 0000                       		dc.w loc_BADA-off_BAD6
0000D4C4                            ; ===========================================================================
0000D4C4                            
0000D4C4                            loc_BADA:				; XREF: off_BAD6
0000D4C4 4A68 0036                  		tst.w	$36(a0)
0000D4C8 6700                       		beq.s	loc_BB08
0000D4CA 4A68 0038                  		tst.w	$38(a0)
0000D4CE 6700                       		beq.s	loc_BAEC
0000D4D0 5368 0038                  		subq.w	#1,$38(a0)
0000D4D4 6000                       		bra.s	loc_BB3C
0000D4D6                            ; ===========================================================================
0000D4D6                            
0000D4D6                            loc_BAEC:
0000D4D6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D4DC 6400                       		bcc.s	loc_BB3C
0000D4DE 317C 0000 0032             		move.w	#0,$32(a0)
0000D4E4 317C 0000 0010             		move.w	#0,$10(a0)
0000D4EA 317C 0000 0036             		move.w	#0,$36(a0)
0000D4F0 6000                       		bra.s	loc_BB3C
0000D4F2                            ; ===========================================================================
0000D4F2                            
0000D4F2                            loc_BB08:				; XREF: loc_BADA
0000D4F2 3228 0034                  		move.w	$34(a0),d1
0000D4F6 B268 0032                  		cmp.w	$32(a0),d1
0000D4FA 6700                       		beq.s	loc_BB3C
0000D4FC 3028 0010                  		move.w	$10(a0),d0
0000D500 0668 0070 0010             		addi.w	#$70,$10(a0)
0000D506 D168 0032                  		add.w	d0,$32(a0)
0000D50A B268 0032                  		cmp.w	$32(a0),d1
0000D50E 6200                       		bhi.s	loc_BB3C
0000D510 3141 0032                  		move.w	d1,$32(a0)
0000D514 317C 0000 0010             		move.w	#0,$10(a0)
0000D51A 317C 0001 0036             		move.w	#1,$36(a0)
0000D520 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D526                            
0000D526                            loc_BB3C:
0000D526 7000                       		moveq	#0,d0
0000D528 1028 0032                  		move.b	$32(a0),d0
0000D52C 4440                       		neg.w	d0
0000D52E D068 0030                  		add.w	$30(a0),d0
0000D532 3140 0008                  		move.w	d0,8(a0)
0000D536 4E75                       		rts	
0000D538                            ; ===========================================================================
0000D538                            ; ---------------------------------------------------------------------------
0000D538                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D538                            ; ---------------------------------------------------------------------------
0000D538                            Map_obj31:
0000D538                            	include "_maps\obj31.asm"
0000D538                            ; ---------------------------------------------------------------------------
0000D538                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D538                            ; ---------------------------------------------------------------------------
0000D538 0000                       		dc.w byte_BB64-Map_obj31
0000D53A 0000                       		dc.w byte_BB7E-Map_obj31
0000D53C 0000                       		dc.w byte_BB98-Map_obj31
0000D53E 0000                       		dc.w byte_BB9E-Map_obj31
0000D540 0000                       		dc.w byte_BBA9-Map_obj31
0000D542 0000                       		dc.w byte_BBBE-Map_obj31
0000D544 0000                       		dc.w byte_BBDD-Map_obj31
0000D546 0000                       		dc.w byte_BC06-Map_obj31
0000D548 0000                       		dc.w byte_BC06-Map_obj31
0000D54A 0000                       		dc.w byte_BC39-Map_obj31
0000D54C 0000                       		dc.w byte_BC53-Map_obj31
0000D54E 05                         byte_BB64:	dc.b 5
0000D54F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D554 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D559 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D55E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D563 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D568 05                         byte_BB7E:	dc.b 5
0000D569 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D56E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D573 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D578 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D57D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D582 01                         byte_BB98:	dc.b 1
0000D583 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D588 02                         byte_BB9E:	dc.b 2
0000D589 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D58E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D593 04                         byte_BBA9:	dc.b 4
0000D594 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D599 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D59E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5A3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5A8 06                         byte_BBBE:	dc.b 6
0000D5A9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D5AE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D5B3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5B8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5BD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5C2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5C7 08                         byte_BBDD:	dc.b 8
0000D5C8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D5CD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D5D2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D5D7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D5DC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5E1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5E6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5EB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5F0 0A                         byte_BC06:	dc.b $A
0000D5F1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D5F6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D5FB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D600 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D605 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D60A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D60F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D614 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D619 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D61E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D623 05                         byte_BC39:	dc.b 5
0000D624 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D629 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000D62E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000D633 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000D638 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D63D 01                         byte_BC53:	dc.b 1
0000D63E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000D644 00                         		even
0000D644 00                         		even
0000D644                            
0000D644                            ; ---------------------------------------------------------------------------
0000D644                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D644                            ; ---------------------------------------------------------------------------
0000D644                            Map_obj45:
0000D644                            	include "_maps\obj45.asm"
0000D644                            ; ---------------------------------------------------------------------------
0000D644                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D644                            ; ---------------------------------------------------------------------------
0000D644 0000                       		dc.w byte_BC6C-Map_obj45
0000D646 0000                       		dc.w byte_BC7C-Map_obj45
0000D648 0000                       		dc.w byte_BC8C-Map_obj45
0000D64A 0000                       		dc.w byte_BC92-Map_obj45
0000D64C 0000                       		dc.w byte_BC9D-Map_obj45
0000D64E 0000                       		dc.w byte_BCB2-Map_obj45
0000D650 0000                       		dc.w byte_BCD1-Map_obj45
0000D652 0000                       		dc.w byte_BCFA-Map_obj45
0000D654 0000                       		dc.w byte_BCFA-Map_obj45
0000D656 03                         byte_BC6C:	dc.b 3
0000D657 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000D65C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000D661 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000D666 03                         byte_BC7C:	dc.b 3
0000D667 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000D66C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000D671 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000D676 01                         byte_BC8C:	dc.b 1
0000D677 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000D67C 02                         byte_BC92:	dc.b 2
0000D67D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D682 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D687 04                         byte_BC9D:	dc.b 4
0000D688 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D68D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D692 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D697 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D69C 06                         byte_BCB2:	dc.b 6
0000D69D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6A2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6A7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6AC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6B1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D6B6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D6BB 08                         byte_BCD1:	dc.b 8
0000D6BC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6C1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6C6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6CB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6D0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D6D5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D6DA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D6DF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D6E4 08                         byte_BCFA:	dc.b 8
0000D6E5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6EA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6EF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6F4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6F9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D6FE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D703 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D708 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D70D F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D712 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D718 00                         		even
0000D718 00                         		even
0000D718                            
0000D718                            ; ===========================================================================
0000D718                            ; ---------------------------------------------------------------------------
0000D718                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D718                            ; ---------------------------------------------------------------------------
0000D718                            
0000D718                            Obj32:					; XREF: Obj_Index
0000D718 7000                       		moveq	#0,d0
0000D71A 1028 0024                  		move.b	$24(a0),d0
0000D71E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D722 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D726                            ; ===========================================================================
0000D726 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D728 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D72A                            ; ===========================================================================
0000D72A                            
0000D72A                            Obj32_Main:				; XREF: Obj32_Index
0000D72A 5428 0024                  		addq.b	#2,$24(a0)
0000D72E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D736 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D73C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D742 6700                       		beq.s	loc_BD60
0000D744 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D74A                            
0000D74A                            loc_BD60:
0000D74A 117C 0004 0001             		move.b	#4,1(a0)
0000D750 117C 0010 0019             		move.b	#$10,$19(a0)
0000D756 117C 0004 0018             		move.b	#4,$18(a0)
0000D75C 5668 000C                  		addq.w	#3,$C(a0)
0000D760                            
0000D760                            Obj32_Pressed:				; XREF: Obj32_Index
0000D760 4A28 0001                  		tst.b	1(a0)
0000D764 6A00                       		bpl.s	Obj32_Display
0000D766 323C 001B                  		move.w	#$1B,d1
0000D76A 343C 0005                  		move.w	#5,d2
0000D76E 363C 0005                  		move.w	#5,d3
0000D772 3828 0008                  		move.w	8(a0),d4
0000D776 6100 0000                  		bsr.w	SolidObject
0000D77A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D780 1028 0028                  		move.b	$28(a0),d0
0000D784 0240 000F                  		andi.w	#$F,d0
0000D788 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D78C 47F3 0000                  		lea	(a3,d0.w),a3
0000D790 7600                       		moveq	#0,d3
0000D792 0828 0006 0028             		btst	#6,$28(a0)
0000D798 6700                       		beq.s	loc_BDB2
0000D79A 7607                       		moveq	#7,d3
0000D79C                            
0000D79C                            loc_BDB2:
0000D79C 4A28 0028                  		tst.b	$28(a0)
0000D7A0 6A00                       		bpl.s	loc_BDBE
0000D7A2 6100 0000                  		bsr.w	Obj32_MZBlock
0000D7A6 6600                       		bne.s	loc_BDC8
0000D7A8                            
0000D7A8                            loc_BDBE:
0000D7A8 4A28 0025                  		tst.b	$25(a0)
0000D7AC 6600                       		bne.s	loc_BDC8
0000D7AE 0793                       		bclr	d3,(a3)
0000D7B0 6000                       		bra.s	loc_BDDE
0000D7B2                            ; ===========================================================================
0000D7B2                            
0000D7B2                            loc_BDC8:
0000D7B2 4A13                       		tst.b	(a3)
0000D7B4 6600                       		bne.s	loc_BDD6
0000D7B6 303C 00CD                  		move.w	#$CD,d0
0000D7BA 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play switch sound
0000D7C0                            
0000D7C0                            loc_BDD6:
0000D7C0 07D3                       		bset	d3,(a3)
0000D7C2 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D7C8                            
0000D7C8                            loc_BDDE:
0000D7C8 0828 0005 0028             		btst	#5,$28(a0)
0000D7CE 6700                       		beq.s	Obj32_Display
0000D7D0 5328 001E                  		subq.b	#1,$1E(a0)
0000D7D4 6A00                       		bpl.s	Obj32_Display
0000D7D6 117C 0007 001E             		move.b	#7,$1E(a0)
0000D7DC 0868 0001 001A             		bchg	#1,$1A(a0)
0000D7E2                            
0000D7E2                            Obj32_Display:
0000D7E2 6100 0000                  		bsr.w	DisplaySprite
0000D7E6 3028 0008                  		move.w	8(a0),d0
0000D7EA 0240 FF80                  		andi.w	#$FF80,d0
0000D7EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D7F2 0441 0080                  		subi.w	#$80,d1
0000D7F6 0241 FF80                  		andi.w	#$FF80,d1
0000D7FA 9041                       		sub.w	d1,d0
0000D7FC 0C40 0280                  		cmpi.w	#$280,d0
0000D800 6200 0000                  		bhi.w	Obj32_Delete
0000D804 4E75                       		rts	
0000D806                            ; ===========================================================================
0000D806                            
0000D806                            Obj32_Delete:
0000D806 6100 0000                  		bsr.w	DeleteObject
0000D80A 4E75                       		rts	
0000D80C                            
0000D80C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D80C                            
0000D80C                            
0000D80C                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D80C 3F03                       		move.w	d3,-(sp)
0000D80E 3428 0008                  		move.w	8(a0),d2
0000D812 3628 000C                  		move.w	$C(a0),d3
0000D816 0442 0010                  		subi.w	#$10,d2
0000D81A 5143                       		subq.w	#8,d3
0000D81C 383C 0020                  		move.w	#$20,d4
0000D820 3A3C 0010                  		move.w	#$10,d5
0000D824 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D828 3C3C 005F                  		move.w	#$5F,d6
0000D82C                            
0000D82C                            Obj32_MZLoop:
0000D82C 4A29 0001                  		tst.b	1(a1)
0000D830 6A00                       		bpl.s	loc_BE4E
0000D832 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D836 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D838                            
0000D838                            loc_BE4E:
0000D838 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D83C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D840                            
0000D840 361F                       		move.w	(sp)+,d3
0000D842 7000                       		moveq	#0,d0
0000D844                            
0000D844                            locret_BE5A:
0000D844 4E75                       		rts	
0000D846                            ; ===========================================================================
0000D846 1010                       Obj32_MZData:	dc.b $10, $10
0000D848                            ; ===========================================================================
0000D848                            
0000D848                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D848 7001                       		moveq	#1,d0
0000D84A 0240 003F                  		andi.w	#$3F,d0
0000D84E D040                       		add.w	d0,d0
0000D850 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D854 121A                       		move.b	(a2)+,d1
0000D856 4881                       		ext.w	d1
0000D858 3029 0008                  		move.w	8(a1),d0
0000D85C 9041                       		sub.w	d1,d0
0000D85E 9042                       		sub.w	d2,d0
0000D860 6400                       		bcc.s	loc_BE80
0000D862 D241                       		add.w	d1,d1
0000D864 D041                       		add.w	d1,d0
0000D866 6500                       		bcs.s	loc_BE84
0000D868 60CE                       		bra.s	loc_BE4E
0000D86A                            ; ===========================================================================
0000D86A                            
0000D86A                            loc_BE80:
0000D86A B044                       		cmp.w	d4,d0
0000D86C 62CA                       		bhi.s	loc_BE4E
0000D86E                            
0000D86E                            loc_BE84:
0000D86E 121A                       		move.b	(a2)+,d1
0000D870 4881                       		ext.w	d1
0000D872 3029 000C                  		move.w	$C(a1),d0
0000D876 9041                       		sub.w	d1,d0
0000D878 9043                       		sub.w	d3,d0
0000D87A 6400                       		bcc.s	loc_BE9A
0000D87C D241                       		add.w	d1,d1
0000D87E D041                       		add.w	d1,d0
0000D880 6500                       		bcs.s	loc_BE9E
0000D882 60B4                       		bra.s	loc_BE4E
0000D884                            ; ===========================================================================
0000D884                            
0000D884                            loc_BE9A:
0000D884 B045                       		cmp.w	d5,d0
0000D886 62B0                       		bhi.s	loc_BE4E
0000D888                            
0000D888                            loc_BE9E:
0000D888 361F                       		move.w	(sp)+,d3
0000D88A 7001                       		moveq	#1,d0
0000D88C 4E75                       		rts	
0000D88E                            ; End of function Obj32_MZBlock
0000D88E                            
0000D88E                            ; ===========================================================================
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E                            Map_obj32:
0000D88E                            	include "_maps\obj32.asm"
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E 0000                       		dc.w byte_BEAC-Map_obj32
0000D890 0000                       		dc.w byte_BEB7-Map_obj32
0000D892 0000                       		dc.w byte_BEC2-Map_obj32
0000D894 0000                       		dc.w byte_BEB7-Map_obj32
0000D896 02                         byte_BEAC:	dc.b 2
0000D897 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D89C F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D8A1 02                         byte_BEB7:	dc.b 2
0000D8A2 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D8A7 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D8AC 02                         byte_BEC2:	dc.b 2
0000D8AD F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D8B2 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D8B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D8BC                            		even
0000D8BC                            		even
0000D8BC                            
0000D8BC                            ; ===========================================================================
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC                            ; Object 33 - pushable blocks (MZ, LZ)
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC                            
0000D8BC                            Obj33:					; XREF: Obj_Index
0000D8BC 7000                       		moveq	#0,d0
0000D8BE 1028 0024                  		move.b	$24(a0),d0
0000D8C2 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D8C6 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D8CA                            ; ===========================================================================
0000D8CA 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D8CC 0000                       		dc.w loc_BF6E-Obj33_Index
0000D8CE 0000                       		dc.w loc_C02C-Obj33_Index
0000D8D0                            
0000D8D0 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D8D2 4001                       		dc.b $40, 1
0000D8D4                            ; ===========================================================================
0000D8D4                            
0000D8D4                            Obj33_Main:				; XREF: Obj33_Index
0000D8D4 5428 0024                  		addq.b	#2,$24(a0)
0000D8D8 117C 000F 0016             		move.b	#$F,$16(a0)
0000D8DE 117C 000F 0017             		move.b	#$F,$17(a0)
0000D8E4 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D8EC 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D8F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D8F8 6600                       		bne.s	loc_BF16
0000D8FA 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D900                            
0000D900                            loc_BF16:
0000D900 117C 0004 0001             		move.b	#4,1(a0)
0000D906 117C 0003 0018             		move.b	#3,$18(a0)
0000D90C 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D912 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D918 7000                       		moveq	#0,d0
0000D91A 1028 0028                  		move.b	$28(a0),d0
0000D91E D040                       		add.w	d0,d0
0000D920 0240 000E                  		andi.w	#$E,d0
0000D924 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D928 115A 0019                  		move.b	(a2)+,$19(a0)
0000D92C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D930 4A28 0028                  		tst.b	$28(a0)
0000D934 6700                       		beq.s	Obj33_ChkGone
0000D936 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D93C                            
0000D93C                            Obj33_ChkGone:
0000D93C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D940 7000                       		moveq	#0,d0
0000D942 1028 0023                  		move.b	$23(a0),d0
0000D946 6700                       		beq.s	loc_BF6E
0000D948 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D94E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D954 6600 0000                  		bne.w	DeleteObject
0000D958                            
0000D958                            loc_BF6E:				; XREF: Obj33_Index
0000D958 4A28 0032                  		tst.b	$32(a0)
0000D95C 6600 0000                  		bne.w	loc_C046
0000D960 7200                       		moveq	#0,d1
0000D962 1228 0019                  		move.b	$19(a0),d1
0000D966 0641 000B                  		addi.w	#$B,d1
0000D96A 343C 0010                  		move.w	#$10,d2
0000D96E 363C 0011                  		move.w	#$11,d3
0000D972 3828 0008                  		move.w	8(a0),d4
0000D976 6100 0000                  		bsr.w	loc_C186
0000D97A 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D980 6600                       		bne.s	loc_BFC6	; if not, branch
0000D982 08A8 0007 0028             		bclr	#7,$28(a0)
0000D988 3028 0008                  		move.w	8(a0),d0
0000D98C 0C40 0A20                  		cmpi.w	#$A20,d0
0000D990 6500                       		bcs.s	loc_BFC6
0000D992 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D996 6400                       		bcc.s	loc_BFC6
0000D998 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D99C 0440 001C                  		subi.w	#$1C,d0
0000D9A0 3140 000C                  		move.w	d0,$C(a0)
0000D9A4 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D9AA 08E8 0007 0028             		bset	#7,$28(a0)
0000D9B0                            
0000D9B0                            loc_BFC6:
0000D9B0 3028 0008                  		move.w	8(a0),d0
0000D9B4 0240 FF80                  		andi.w	#$FF80,d0
0000D9B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D9BC 0441 0080                  		subi.w	#$80,d1
0000D9C0 0241 FF80                  		andi.w	#$FF80,d1
0000D9C4 9041                       		sub.w	d1,d0
0000D9C6 0C40 0280                  		cmpi.w	#$280,d0
0000D9CA 6200                       		bhi.s	loc_BFE6
0000D9CC 6000 0000                  		bra.w	DisplaySprite
0000D9D0                            ; ===========================================================================
0000D9D0                            
0000D9D0                            loc_BFE6:
0000D9D0 3028 0034                  		move.w	$34(a0),d0
0000D9D4 0240 FF80                  		andi.w	#$FF80,d0
0000D9D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D9DC 0441 0080                  		subi.w	#$80,d1
0000D9E0 0241 FF80                  		andi.w	#$FF80,d1
0000D9E4 9041                       		sub.w	d1,d0
0000D9E6 0C40 0280                  		cmpi.w	#$280,d0
0000D9EA 6200                       		bhi.s	loc_C016
0000D9EC 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D9F2 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D9F8 117C 0004 0024             		move.b	#4,$24(a0)
0000D9FE 6000                       		bra.s	loc_C02C
0000DA00                            ; ===========================================================================
0000DA00                            
0000DA00                            loc_C016:
0000DA00 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA04 7000                       		moveq	#0,d0
0000DA06 1028 0023                  		move.b	$23(a0),d0
0000DA0A 6700                       		beq.s	loc_C028
0000DA0C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DA12                            
0000DA12                            loc_C028:
0000DA12 6000 0000                  		bra.w	DeleteObject
0000DA16                            ; ===========================================================================
0000DA16                            
0000DA16                            loc_C02C:				; XREF: Obj33_Index
0000DA16 6100 0000                  		bsr.w	ChkObjOnScreen2
0000DA1A 6700                       		beq.s	locret_C044
0000DA1C 117C 0002 0024             		move.b	#2,$24(a0)
0000DA22 4228 0032                  		clr.b	$32(a0)
0000DA26 4268 0010                  		clr.w	$10(a0)
0000DA2A 4268 0012                  		clr.w	$12(a0)
0000DA2E                            
0000DA2E                            locret_C044:
0000DA2E 4E75                       		rts	
0000DA30                            ; ===========================================================================
0000DA30                            
0000DA30                            loc_C046:				; XREF: loc_BF6E
0000DA30 3F28 0008                  		move.w	8(a0),-(sp)
0000DA34 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000DA3A 6400                       		bcc.s	loc_C056
0000DA3C 6100 0000                  		bsr.w	SpeedToPos
0000DA40                            
0000DA40                            loc_C056:
0000DA40 0828 0001 0022             		btst	#1,$22(a0)
0000DA46 6700                       		beq.s	loc_C0A0
0000DA48 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DA4E 4EB9 0000 0000             		jsr	ObjHitFloor
0000DA54 4A41                       		tst.w	d1
0000DA56 6A00 0000                  		bpl.w	loc_C09E
0000DA5A D368 000C                  		add.w	d1,$C(a0)
0000DA5E 4268 0012                  		clr.w	$12(a0)
0000DA62 08A8 0001 0022             		bclr	#1,$22(a0)
0000DA68 3011                       		move.w	(a1),d0
0000DA6A 0240 03FF                  		andi.w	#$3FF,d0
0000DA6E 0C40 016A                  		cmpi.w	#$16A,d0
0000DA72 6500                       		bcs.s	loc_C09E
0000DA74 3028 0030                  		move.w	$30(a0),d0
0000DA78 E640                       		asr.w	#3,d0
0000DA7A 3140 0010                  		move.w	d0,$10(a0)
0000DA7E 117C 0001 0032             		move.b	#1,$32(a0)
0000DA84 4268 000E                  		clr.w	$E(a0)
0000DA88                            
0000DA88                            loc_C09E:
0000DA88 6000                       		bra.s	loc_C0E6
0000DA8A                            ; ===========================================================================
0000DA8A                            
0000DA8A                            loc_C0A0:
0000DA8A 4A68 0010                  		tst.w	$10(a0)
0000DA8E 6700 0000                  		beq.w	loc_C0D6
0000DA92 6B00                       		bmi.s	loc_C0BC
0000DA94 7600                       		moveq	#0,d3
0000DA96 1628 0019                  		move.b	$19(a0),d3
0000DA9A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DAA0 4A41                       		tst.w	d1		; has block touched a wall?
0000DAA2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DAA4 6000                       		bra.s	loc_C0E6
0000DAA6                            ; ===========================================================================
0000DAA6                            
0000DAA6                            loc_C0BC:
0000DAA6 7600                       		moveq	#0,d3
0000DAA8 1628 0019                  		move.b	$19(a0),d3
0000DAAC 4643                       		not.w	d3
0000DAAE 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DAB4 4A41                       		tst.w	d1		; has block touched a wall?
0000DAB6 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DAB8 6000                       		bra.s	loc_C0E6
0000DABA                            ; ===========================================================================
0000DABA                            
0000DABA                            Obj33_StopPush:
0000DABA 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000DABE 6000                       		bra.s	loc_C0E6
0000DAC0                            ; ===========================================================================
0000DAC0                            
0000DAC0                            loc_C0D6:
0000DAC0 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000DAC8 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000DACE 6400                       		bcc.s	loc_C104
0000DAD0                            
0000DAD0                            loc_C0E6:
0000DAD0 7200                       		moveq	#0,d1
0000DAD2 1228 0019                  		move.b	$19(a0),d1
0000DAD6 0641 000B                  		addi.w	#$B,d1
0000DADA 343C 0010                  		move.w	#$10,d2
0000DADE 363C 0011                  		move.w	#$11,d3
0000DAE2 381F                       		move.w	(sp)+,d4
0000DAE4 6100 0000                  		bsr.w	loc_C186
0000DAE8 6100                       		bsr.s	Obj33_ChkLava
0000DAEA 6000 FEC4                  		bra.w	loc_BFC6
0000DAEE                            ; ===========================================================================
0000DAEE                            
0000DAEE                            loc_C104:
0000DAEE 381F                       		move.w	(sp)+,d4
0000DAF0 43F8 D000                  		lea	($FFFFD000).w,a1
0000DAF4 08A9 0003 0022             		bclr	#3,$22(a1)
0000DAFA 08A8 0003 0022             		bclr	#3,$22(a0)
0000DB00 6000 FECE                  		bra.w	loc_BFE6
0000DB04                            ; ===========================================================================
0000DB04                            
0000DB04                            Obj33_ChkLava:
0000DB04 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000DB0A 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000DB0C 343C FFE0                  		move.w	#-$20,d2
0000DB10 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000DB16 6700                       		beq.s	Obj33_LoadLava
0000DB18 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000DB1E 6700                       		beq.s	Obj33_LoadLava
0000DB20 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000DB26 6700                       		beq.s	Obj33_LoadLava
0000DB28 4E75                       		rts	
0000DB2A                            ; ===========================================================================
0000DB2A                            
0000DB2A                            Obj33_ChkLava2:
0000DB2A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000DB30 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000DB32 343C 0020                  		move.w	#$20,d2
0000DB36 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000DB3C 6700                       		beq.s	Obj33_LoadLava
0000DB3E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000DB44 6700                       		beq.s	Obj33_LoadLava
0000DB46                            
0000DB46                            Obj33_NoLava:
0000DB46 4E75                       		rts	
0000DB48                            ; ===========================================================================
0000DB48                            
0000DB48                            Obj33_LoadLava:
0000DB48 6100 0000                  		bsr.w	SingleObjLoad
0000DB4C 6600                       		bne.s	locret_C184
0000DB4E 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000DB52 3368 0008 0008             		move.w	8(a0),8(a1)
0000DB58 D569 0008                  		add.w	d2,8(a1)
0000DB5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DB62 0669 0010 000C             		addi.w	#$10,$C(a1)
0000DB68 2348 003C                  		move.l	a0,$3C(a1)
0000DB6C                            
0000DB6C                            locret_C184:
0000DB6C 4E75                       		rts	
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            loc_C186:				; XREF: loc_BF6E
0000DB6E 1028 0025                  		move.b	$25(a0),d0
0000DB72 6700 0000                  		beq.w	loc_C218
0000DB76 5500                       		subq.b	#2,d0
0000DB78 6600                       		bne.s	loc_C1AA
0000DB7A 6100 B45C                  		bsr.w	ExitPlatform
0000DB7E 0829 0003 0022             		btst	#3,$22(a1)
0000DB84 6600                       		bne.s	loc_C1A4
0000DB86 4228 0025                  		clr.b	$25(a0)
0000DB8A 4E75                       		rts	
0000DB8C                            ; ===========================================================================
0000DB8C                            
0000DB8C                            loc_C1A4:
0000DB8C 3404                       		move.w	d4,d2
0000DB8E 6000 B9A6                  		bra.w	MvSonicOnPtfm
0000DB92                            ; ===========================================================================
0000DB92                            
0000DB92                            loc_C1AA:
0000DB92 5500                       		subq.b	#2,d0
0000DB94 6600                       		bne.s	loc_C1F2
0000DB96 6100 0000                  		bsr.w	SpeedToPos
0000DB9A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DBA0 4EB9 0000 0000             		jsr	ObjHitFloor
0000DBA6 4A41                       		tst.w	d1
0000DBA8 6A00 0000                  		bpl.w	locret_C1F0
0000DBAC D368 000C                  		add.w	d1,$C(a0)
0000DBB0 4268 0012                  		clr.w	$12(a0)
0000DBB4 4228 0025                  		clr.b	$25(a0)
0000DBB8 3011                       		move.w	(a1),d0
0000DBBA 0240 03FF                  		andi.w	#$3FF,d0
0000DBBE 0C40 016A                  		cmpi.w	#$16A,d0
0000DBC2 6500                       		bcs.s	locret_C1F0
0000DBC4 3028 0030                  		move.w	$30(a0),d0
0000DBC8 E640                       		asr.w	#3,d0
0000DBCA 3140 0010                  		move.w	d0,$10(a0)
0000DBCE 117C 0001 0032             		move.b	#1,$32(a0)
0000DBD4 4268 000E                  		clr.w	$E(a0)
0000DBD8                            
0000DBD8                            locret_C1F0:
0000DBD8 4E75                       		rts	
0000DBDA                            ; ===========================================================================
0000DBDA                            
0000DBDA                            loc_C1F2:
0000DBDA 6100 0000                  		bsr.w	SpeedToPos
0000DBDE 3028 0008                  		move.w	8(a0),d0
0000DBE2 0240 000C                  		andi.w	#$C,d0
0000DBE6 6600 0000                  		bne.w	locret_C2E4
0000DBEA 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000DBF0 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000DBF6 4268 0010                  		clr.w	$10(a0)
0000DBFA 5528 0025                  		subq.b	#2,$25(a0)
0000DBFE 4E75                       		rts	
0000DC00                            ; ===========================================================================
0000DC00                            
0000DC00                            loc_C218:
0000DC00 6100 0000                  		bsr.w	loc_FAC8
0000DC04 4A44                       		tst.w	d4
0000DC06 6700 0000                  		beq.w	locret_C2E4
0000DC0A 6B00 0000                  		bmi.w	locret_C2E4
0000DC0E 4A28 0032                  		tst.b	$32(a0)
0000DC12 6700                       		beq.s	loc_C230
0000DC14 6000 0000                  		bra.w	locret_C2E4
0000DC18                            ; ===========================================================================
0000DC18                            
0000DC18                            loc_C230:
0000DC18 4A40                       		tst.w	d0
0000DC1A 6700 0000                  		beq.w	locret_C2E4
0000DC1E 6B00                       		bmi.s	loc_C268
0000DC20 0829 0000 0022             		btst	#0,$22(a1)
0000DC26 6600 0000                  		bne.w	locret_C2E4
0000DC2A 3F00                       		move.w	d0,-(sp)
0000DC2C 7600                       		moveq	#0,d3
0000DC2E 1628 0019                  		move.b	$19(a0),d3
0000DC32 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DC38 301F                       		move.w	(sp)+,d0
0000DC3A 4A41                       		tst.w	d1
0000DC3C 6B00 0000                  		bmi.w	locret_C2E4
0000DC40 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000DC48 7001                       		moveq	#1,d0
0000DC4A 323C 0040                  		move.w	#$40,d1
0000DC4E 6000                       		bra.s	loc_C294
0000DC50                            ; ===========================================================================
0000DC50                            
0000DC50                            loc_C268:
0000DC50 0829 0000 0022             		btst	#0,$22(a1)
0000DC56 6700                       		beq.s	locret_C2E4
0000DC58 3F00                       		move.w	d0,-(sp)
0000DC5A 7600                       		moveq	#0,d3
0000DC5C 1628 0019                  		move.b	$19(a0),d3
0000DC60 4643                       		not.w	d3
0000DC62 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DC68 301F                       		move.w	(sp)+,d0
0000DC6A 4A41                       		tst.w	d1
0000DC6C 6B00                       		bmi.s	locret_C2E4
0000DC6E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000DC76 70FF                       		moveq	#-1,d0
0000DC78 323C FFC0                  		move.w	#-$40,d1
0000DC7C                            
0000DC7C                            loc_C294:
0000DC7C 43F8 D000                  		lea	($FFFFD000).w,a1
0000DC80 D169 0008                  		add.w	d0,8(a1)
0000DC84 3341 0014                  		move.w	d1,$14(a1)
0000DC88 337C 0000 0010             		move.w	#0,$10(a1)
0000DC8E 3F00                       		move.w	d0,-(sp)
0000DC90 303C 00A7                  		move.w	#$A7,d0
0000DC94 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play pushing sound
0000DC9A 301F                       		move.w	(sp)+,d0
0000DC9C 4A28 0028                  		tst.b	$28(a0)
0000DCA0 6B00                       		bmi.s	locret_C2E4
0000DCA2 3F00                       		move.w	d0,-(sp)
0000DCA4 4EB9 0000 0000             		jsr	ObjHitFloor
0000DCAA 301F                       		move.w	(sp)+,d0
0000DCAC 0C41 0004                  		cmpi.w	#4,d1
0000DCB0 6F00                       		ble.s	loc_C2E0
0000DCB2 317C 0400 0010             		move.w	#$400,$10(a0)
0000DCB8 4A40                       		tst.w	d0
0000DCBA 6A00                       		bpl.s	loc_C2D8
0000DCBC 4468 0010                  		neg.w	$10(a0)
0000DCC0                            
0000DCC0                            loc_C2D8:
0000DCC0 117C 0006 0025             		move.b	#6,$25(a0)
0000DCC6 6000                       		bra.s	locret_C2E4
0000DCC8                            ; ===========================================================================
0000DCC8                            
0000DCC8                            loc_C2E0:
0000DCC8 D368 000C                  		add.w	d1,$C(a0)
0000DCCC                            
0000DCCC                            locret_C2E4:
0000DCCC 4E75                       		rts	
0000DCCE                            ; ===========================================================================
0000DCCE                            ; ---------------------------------------------------------------------------
0000DCCE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCCE                            ; ---------------------------------------------------------------------------
0000DCCE                            Map_obj33:
0000DCCE                            	include "_maps\obj33.asm"
0000DCCE                            ; ---------------------------------------------------------------------------
0000DCCE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCCE                            ; ---------------------------------------------------------------------------
0000DCCE 0000                       		dc.w byte_C2EA-Map_obj33
0000DCD0 0000                       		dc.w byte_C2F0-Map_obj33
0000DCD2 01                         byte_C2EA:	dc.b 1
0000DCD3 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000DCD8 04                         byte_C2F0:	dc.b 4
0000DCD9 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000DCDE F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000DCE3 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000DCE8 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000DCEE 00                         		even
0000DCEE 00                         		even
0000DCEE                            
0000DCEE                            ; ===========================================================================
0000DCEE                            ; ---------------------------------------------------------------------------
0000DCEE                            ; Object 34 - zone title cards
0000DCEE                            ; ---------------------------------------------------------------------------
0000DCEE                            
0000DCEE                            Obj34:					; XREF: Obj_Index
0000DCEE 7000                       		moveq	#0,d0
0000DCF0 1028 0024                  		move.b	$24(a0),d0
0000DCF4 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000DCF8 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000DCFC                            ; ===========================================================================
0000DCFC 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000DCFE 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000DD00 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD02 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD04                            ; ===========================================================================
0000DD04                            
0000DD04                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000DD04 2248                       		movea.l	a0,a1
0000DD06 7000                       		moveq	#0,d0
0000DD08 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DD0C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000DD12 6600                       		bne.s	Obj34_CheckFZ
0000DD14 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000DD16                            
0000DD16                            Obj34_CheckFZ:
0000DD16 3400                       		move.w	d0,d2
0000DD18 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000DD1E 6600                       		bne.s	Obj34_LoadConfig
0000DD20 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000DD22 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000DD24                            
0000DD24                            Obj34_LoadConfig:
0000DD24 47F9 0000 0000             		lea	(Obj34_ConData).l,a3	; load pos data
0000DD2A E948                       		lsl.w	#4,d0
0000DD2C D6C0                       		adda.w	d0,a3
0000DD2E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000DD34 7203                       		moveq	#3,d1
0000DD36                            
0000DD36                            Obj34_Loop:
0000DD36 12BC 0034                  		move.b	#$34,0(a1)
0000DD3A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000DD3E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000DD42 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000DD46 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DD4A 135A 0024                  		move.b	(a2)+,$24(a1)
0000DD4E 101A                       		move.b	(a2)+,d0
0000DD50 6600                       		bne.s	Obj34_ActNumber
0000DD52 1002                       		move.b	d2,d0
0000DD54                            
0000DD54                            Obj34_ActNumber:
0000DD54 0C00 0007                  		cmpi.b	#7,d0
0000DD58 6600                       		bne.s	Obj34_MakeSprite
0000DD5A D038 FE11                  		add.b	($FFFFFE11).w,d0
0000DD5E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000DD64 6600                       		bne.s	Obj34_MakeSprite
0000DD66 5300                       		subq.b	#1,d0
0000DD68                            
0000DD68                            Obj34_MakeSprite:
0000DD68 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000DD6C 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000DD74 337C 8580 0002             		move.w	#$8580,2(a1)
0000DD7A 137C 0078 0019             		move.b	#$78,$19(a1)
0000DD80 137C 0000 0001             		move.b	#0,1(a1)
0000DD86 137C 0000 0018             		move.b	#0,$18(a1)
0000DD8C 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000DD92 43E9 0040                  		lea	$40(a1),a1	; next object
0000DD96 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000DD9A                            
0000DD9A                            Obj34_ChkPos:				; XREF: Obj34_Index
0000DD9A 7210                       		moveq	#$10,d1		; set horizontal speed
0000DD9C 3028 0030                  		move.w	$30(a0),d0
0000DDA0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000DDA4 6700                       		beq.s	loc_C3C8	; if yes, branch
0000DDA6 6C00                       		bge.s	Obj34_Move
0000DDA8 4441                       		neg.w	d1
0000DDAA                            
0000DDAA                            Obj34_Move:
0000DDAA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DDAE                            
0000DDAE                            loc_C3C8:
0000DDAE 3028 0008                  		move.w	8(a0),d0
0000DDB2 6B00                       		bmi.s	locret_C3D8
0000DDB4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DDB8 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000DDBA 6000 0000                  		bra.w	DisplaySprite
0000DDBE                            ; ===========================================================================
0000DDBE                            
0000DDBE                            locret_C3D8:
0000DDBE 4E75                       		rts	
0000DDC0                            ; ===========================================================================
0000DDC0                            
0000DDC0                            Obj34_Wait:				; XREF: Obj34_Index
0000DDC0 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000DDC4 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000DDC6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000DDCA 6000 0000                  		bra.w	DisplaySprite
0000DDCE                            ; ===========================================================================
0000DDCE                            
0000DDCE                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000DDCE 4A28 0001                  		tst.b	1(a0)
0000DDD2 6A00                       		bpl.s	Obj34_ChangeArt
0000DDD4 7220                       		moveq	#$20,d1
0000DDD6 3028 0032                  		move.w	$32(a0),d0
0000DDDA B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000DDDE 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000DDE0 6C00                       		bge.s	Obj34_Move2
0000DDE2 4441                       		neg.w	d1
0000DDE4                            
0000DDE4                            Obj34_Move2:
0000DDE4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DDE8 3028 0008                  		move.w	8(a0),d0
0000DDEC 6B00                       		bmi.s	locret_C412
0000DDEE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DDF2 6400                       		bcc.s	locret_C412	; if yes, branch
0000DDF4 6000 0000                  		bra.w	DisplaySprite
0000DDF8                            ; ===========================================================================
0000DDF8                            
0000DDF8                            locret_C412:
0000DDF8 4E75                       		rts	
0000DDFA                            ; ===========================================================================
0000DDFA                            
0000DDFA                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000DDFA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DE00 6600                       		bne.s	Obj34_Delete
0000DE02 7002                       		moveq	#2,d0
0000DE04 4EB9 0000 1536             		jsr	(LoadPLC).l	; load explosion patterns
0000DE0A 7000                       		moveq	#0,d0
0000DE0C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DE10 0640 0015                  		addi.w	#$15,d0
0000DE14 4EB9 0000 1536             		jsr	(LoadPLC).l	; load animal patterns
0000DE1A                            
0000DE1A                            Obj34_Delete:
0000DE1A 6000 0000                  		bra.w	DeleteObject
0000DE1E                            ; ===========================================================================
0000DE1E                            ; Data for Title Card Objects
0000DE1E                            ; Format:
0000DE1E                            ; Y-axis position, routine number, frame number (changes)
0000DE1E 00D0                       Obj34_ItemData:	dc.w $D0	; Zone Name
0000DE20 0200                       		dc.b 2,	0	;
0000DE22 00E4                       		dc.w $E4	; "ZONE"
0000DE24 0206                       		dc.b 2,	6	;
0000DE26 00EA                       		dc.w $EA	; "ACT X"
0000DE28 0207                       		dc.b 2,	7	;
0000DE2A 00E0                       		dc.w $E0	; Oval
0000DE2C 020A                       		dc.b 2,	$A      ;
0000DE2E                            ; ---------------------------------------------------------------------------
0000DE2E                            ; Title	card configuration data
0000DE2E                            ; Format:
0000DE2E                            ; 4 bytes per item (SSSS FFFF), where SSSS is start pos and FFFF is end pos
0000DE2E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000DE2E                            ; ---------------------------------------------------------------------------
0000DE2E                            ; Vladikcomper: this data was moved to BIN-files, which are updated by S1HS
0000DE2E                            Obj34_ConData:	incbin	"mapbin\ttlcards_cfg_0.bin"
0000DE3E                            		incbin	"mapbin\ttlcards_cfg_1.bin"
0000DE4E                            		incbin	"mapbin\ttlcards_cfg_2.bin"
0000DE5E                            		incbin	"mapbin\ttlcards_cfg_3.bin"
0000DE6E                            		incbin	"mapbin\ttlcards_cfg_4.bin"
0000DE7E                            		incbin	"mapbin\ttlcards_cfg_5.bin"
0000DE8E                            		incbin	"mapbin\ttlcards_cfg_6.bin"
0000DE9E                            ; ===========================================================================
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            
0000DE9E                            Obj39:					; XREF: Obj_Index
0000DE9E 7000                       		moveq	#0,d0
0000DEA0 1028 0024                  		move.b	$24(a0),d0
0000DEA4 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000DEA8 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000DEAC                            ; ===========================================================================
0000DEAC 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000DEAE 0000                       		dc.w loc_C50C-Obj39_Index
0000DEB0 0000                       		dc.w Obj39_Wait-Obj39_Index
0000DEB2                            ; ===========================================================================
0000DEB2                            
0000DEB2                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000DEB2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DEB6 6700                       		beq.s	Obj39_Main	; if yes, branch
0000DEB8 4E75                       		rts	
0000DEBA                            ; ===========================================================================
0000DEBA                            
0000DEBA                            Obj39_Main:
0000DEBA 5428 0024                  		addq.b	#2,$24(a0)
0000DEBE 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000DEC4 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000DECA 6700                       		beq.s	loc_C4EC	; if not, branch
0000DECC 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000DED2                            
0000DED2                            loc_C4EC:
0000DED2 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000DED8 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000DEE0 317C 855E 0002             		move.w	#$855E,2(a0)
0000DEE6 117C 0000 0001             		move.b	#0,1(a0)
0000DEEC 117C 0000 0018             		move.b	#0,$18(a0)
0000DEF2                            
0000DEF2                            loc_C50C:				; XREF: Obj39_Index
0000DEF2 7210                       		moveq	#$10,d1		; set horizontal speed
0000DEF4 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000DEFA 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000DEFC 6500                       		bcs.s	Obj39_Move
0000DEFE 4441                       		neg.w	d1
0000DF00                            
0000DF00                            Obj39_Move:
0000DF00 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DF04 6000 0000                  		bra.w	DisplaySprite
0000DF08                            ; ===========================================================================
0000DF08                            
0000DF08                            Obj39_SetWait:				; XREF: Obj39_Main
0000DF08 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000DF0E 5428 0024                  		addq.b	#2,$24(a0)
0000DF12 4E75                       		rts	
0000DF14                            ; ===========================================================================
0000DF14                            
0000DF14                            Obj39_Wait:				; XREF: Obj39_Index
0000DF14 1038 F605 0200 0070        		tpress	A+B+C,(Joypad)
0000DF1C 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000DF1E 0828 0000 001A             		btst	#0,$1A(a0)
0000DF24 6600                       		bne.s	Obj39_Display
0000DF26 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000DF2A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000DF2C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DF30 6000 0000                  		bra.w	DisplaySprite
0000DF34                            ; ===========================================================================
0000DF34                            
0000DF34                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000DF34 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000DF38 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000DF3A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000DF40 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000DF44 6600                       		bne.s	Obj39_Display	; if yes, branch
0000DF46 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000DF4C 6000                       		bra.s	Obj39_Display
0000DF4E                            ; ===========================================================================
0000DF4E                            
0000DF4E                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000DF4E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DF54                            
0000DF54                            Obj39_Display:				; XREF: Obj39_ChgMode
0000DF54 6000 0000                  		bra.w	DisplaySprite
0000DF58                            ; ===========================================================================
0000DF58                            ; ---------------------------------------------------------------------------
0000DF58                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000DF58                            ; ---------------------------------------------------------------------------
0000DF58                            
0000DF58                            Obj3A:					; XREF: Obj_Index
0000DF58 7000                       		moveq	#0,d0
0000DF5A 1028 0024                  		move.b	$24(a0),d0
0000DF5E 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000DF62 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000DF66                            ; ===========================================================================
0000DF66 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000DF68 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000DF6A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF6C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000DF6E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF70 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000DF72 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF74 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000DF76 0000                       		dc.w loc_C766-Obj3A_Index
0000DF78                            ; ===========================================================================
0000DF78                            
0000DF78                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000DF78 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DF7C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000DF7E 4E75                       		rts	
0000DF80                            ; ===========================================================================
0000DF80                            
0000DF80                            Obj3A_Main:
0000DF80 2248                       		movea.l	a0,a1
0000DF82 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000DF88 7206                       		moveq	#6,d1
0000DF8A                            
0000DF8A                            Obj3A_Loop:
0000DF8A 12BC 003A                  		move.b	#$3A,0(a1)
0000DF8E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000DF92 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000DF96 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DF9A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DF9E 135A 0024                  		move.b	(a2)+,$24(a1)
0000DFA2 101A                       		move.b	(a2)+,d0
0000DFA4 0C00 0006                  		cmpi.b	#6,d0
0000DFA8 6600                       		bne.s	loc_C5CA
0000DFAA D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000DFAE                            
0000DFAE                            loc_C5CA:
0000DFAE 1340 001A                  		move.b	d0,$1A(a1)
0000DFB2 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000DFBA 337C 8580 0002             		move.w	#$8580,2(a1)
0000DFC0 137C 0000 0001             		move.b	#0,1(a1)
0000DFC6 43E9 0040                  		lea	$40(a1),a1
0000DFCA 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000DFCE                            
0000DFCE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000DFCE 7210                       		moveq	#$10,d1		; set horizontal speed
0000DFD0 3028 0030                  		move.w	$30(a0),d0
0000DFD4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DFD8 6700                       		beq.s	loc_C61A	; if yes, branch
0000DFDA 6C00                       		bge.s	Obj3A_Move
0000DFDC 4441                       		neg.w	d1
0000DFDE                            
0000DFDE                            Obj3A_Move:
0000DFDE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DFE2                            
0000DFE2                            loc_C5FE:				; XREF: loc_C61A
0000DFE2 3028 0008                  		move.w	8(a0),d0
0000DFE6 6B00                       		bmi.s	locret_C60E
0000DFE8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DFEC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000DFEE 6000 0000                  		bra.w	DisplaySprite
0000DFF2                            ; ===========================================================================
0000DFF2                            
0000DFF2                            locret_C60E:
0000DFF2 4E75                       		rts	
0000DFF4                            ; ===========================================================================
0000DFF4                            
0000DFF4                            loc_C610:				; XREF: loc_C61A
0000DFF4 117C 000E 0024             		move.b	#$E,$24(a0)
0000DFFA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000DFFE                            ; ===========================================================================
0000DFFE                            
0000DFFE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000DFFE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E004 67EE                       		beq.s	loc_C610
0000E006 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E00C 66D4                       		bne.s	loc_C5FE
0000E00E 5428 0024                  		addq.b	#2,$24(a0)
0000E012 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E018                            
0000E018                            Obj3A_Wait:				; XREF: Obj3A_Index
0000E018 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E01C 6600                       		bne.s	Obj3A_Display
0000E01E 5428 0024                  		addq.b	#2,$24(a0)
0000E022                            
0000E022                            Obj3A_Display:
0000E022 6000 0000                  		bra.w	DisplaySprite
0000E026                            ; ===========================================================================
0000E026                            
0000E026                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000E026 6100 0000                  		bsr.w	DisplaySprite
0000E02A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000E030 7000                       		moveq	#0,d0
0000E032 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000E036 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000E038 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E03C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000E042                            
0000E042                            Obj3A_RingBonus:
0000E042 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E046 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000E048 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E04C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E052                            
0000E052                            Obj3A_ChkBonus:
0000E052 4A40                       		tst.w	d0		; is there any bonus?
0000E054 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000E056 303C 00C5                  		move.w	#$C5,d0
0000E05A 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E060 5428 0024                  		addq.b	#2,$24(a0)
0000E064 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000E06A 6600                       		bne.s	Obj3A_SetDelay
0000E06C 5828 0024                  		addq.b	#4,$24(a0)
0000E070                            
0000E070                            Obj3A_SetDelay:
0000E070 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E076                            
0000E076                            locret_C692:
0000E076 4E75                       		rts	
0000E078                            ; ===========================================================================
0000E078                            
0000E078                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000E078 4EB9 0000 0000             		jsr	AddPoints
0000E07E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E082 0200 0003                  		andi.b	#3,d0
0000E086 66EE                       		bne.s	locret_C692
0000E088 303C 00CD                  		move.w	#$CD,d0
0000E08C 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E092                            ; ===========================================================================
0000E092                            
0000E092                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000E092 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; move zone number to d0
0000E096 0240 0007                  		andi.w	#7,d0
0000E09A E748                       		lsl.w	#3,d0		; multiply by 8
0000E09C 1238 FE11                  		move.b	($FFFFFE11).w,d1 ; move act number to d1
0000E0A0 0241 0003                  		andi.w	#3,d1
0000E0A4 D241                       		add.w	d1,d1		; double it
0000E0A6 D041                       		add.w	d1,d0
0000E0A8 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E0AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000E0B0 4A40                       		tst.w	d0
0000E0B2 6600                       		bne.s	Obj3A_ChkSS
0000E0B4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000E0BA 6000                       		bra.s	Obj3A_Display2
0000E0BC                            ; ===========================================================================
0000E0BC                            
0000E0BC                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000E0BC 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000E0C0 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000E0C4 6700                       		beq.s	VBlank_Sub08A	; if not, branch
0000E0C6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000E0CC 6000                       		bra.s	Obj3A_Display2
0000E0CE                            ; ===========================================================================
0000E0CE                            
0000E0CE                            VBlank_Sub08A:				; XREF: Obj3A_ChkSS
0000E0CE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E0D4                            
0000E0D4                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000E0D4 6000 0000                  		bra.w	DisplaySprite
0000E0D8                            ; ===========================================================================
0000E0D8                            ; ---------------------------------------------------------------------------
0000E0D8                            ; Level	order array
0000E0D8                            ; ---------------------------------------------------------------------------
0000E0D8                            LevelOrder:	incbin	misc\lvl_ord.bin
0000E108                            		even
0000E108                            ; ===========================================================================
0000E108                            
0000E108                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000E108 7220                       		moveq	#$20,d1		; set horizontal speed
0000E10A 3028 0032                  		move.w	$32(a0),d0
0000E10E B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000E112 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000E114 6C00                       		bge.s	Obj3A_Move2
0000E116 4441                       		neg.w	d1
0000E118                            
0000E118                            Obj3A_Move2:
0000E118 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E11C 3028 0008                  		move.w	8(a0),d0
0000E120 6B00                       		bmi.s	locret_C748
0000E122 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E126 6400                       		bcc.s	locret_C748	; if yes, branch
0000E128 6000 0000                  		bra.w	DisplaySprite
0000E12C                            ; ===========================================================================
0000E12C                            
0000E12C                            locret_C748:
0000E12C 4E75                       		rts	
0000E12E                            ; ===========================================================================
0000E12E                            
0000E12E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000E12E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E134 6600 0000                  		bne.w	DeleteObject
0000E138 5428 0024                  		addq.b	#2,$24(a0)
0000E13C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000E140 303C 0093                  		move.w	#$93,d0
0000E144 4EF9 0000 12C2             		jmp	(PlaySound).l	; play FZ music
0000E14A                            ; ===========================================================================
0000E14A                            
0000E14A                            loc_C766:				; XREF: Obj3A_Index
0000E14A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000E14E 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000E154 6700 0000                  		beq.w	DeleteObject
0000E158 4E75                       		rts	
0000E15A                            ; ===========================================================================
0000E15A 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000E160 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000E162 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000E168 0201                       		dc.b 2,	1
0000E16A                            		incbin "mapbin\sonichaspassed_actconf.bin"	; act
0000E170 0206                       		dc.b 2,	6
0000E172 0520 0120 00EC             		dc.w $520, $120, $EC
0000E178 0202                       		dc.b 2,	2
0000E17A 0540 0120 00FC             		dc.w $540, $120, $FC
0000E180 0203                       		dc.b 2,	3
0000E182 0560 0120 010C             		dc.w $560, $120, $10C
0000E188 0204                       		dc.b 2,	4
0000E18A 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000E190 0205                       		dc.b 2,	5
0000E192                            ; ===========================================================================
0000E192                            ; ---------------------------------------------------------------------------
0000E192                            ; Object 7E - special stage results screen
0000E192                            ; ---------------------------------------------------------------------------
0000E192                            
0000E192                            Obj7E:					; XREF: Obj_Index
0000E192 7000                       		moveq	#0,d0
0000E194 1028 0024                  		move.b	$24(a0),d0
0000E198 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000E19C 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000E1A0                            ; ===========================================================================
0000E1A0 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000E1A2 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000E1A4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1A6 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000E1A8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1AA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1AC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1AE 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000E1B0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1B2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1B4 0000                       		dc.w loc_C91A-Obj7E_Index
0000E1B6                            ; ===========================================================================
0000E1B6                            
0000E1B6                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000E1B6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E1BA 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000E1BC 4E75                       		rts	
0000E1BE                            ; ===========================================================================
0000E1BE                            
0000E1BE                            Obj7E_Main:
0000E1BE 2248                       		movea.l	a0,a1
0000E1C0 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000E1C6 7203                       		moveq	#3,d1
0000E1C8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000E1CE 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000E1D0 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E1D2                            
0000E1D2                            Obj7E_Loop:
0000E1D2 12BC 007E                  		move.b	#$7E,0(a1)
0000E1D6 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000E1DA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E1DE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E1E2 135A 0024                  		move.b	(a2)+,$24(a1)
0000E1E6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E1EA 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000E1F2 337C 8580 0002             		move.w	#$8580,2(a1)
0000E1F8 137C 0000 0001             		move.b	#0,1(a1)
0000E1FE 43E9 0040                  		lea	$40(a1),a1
0000E202 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000E206                            
0000E206 7007                       		moveq	#7,d0
0000E208 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000E20C 6700                       		beq.s	loc_C842
0000E20E 7000                       		moveq	#0,d0
0000E210 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E214 6600                       		bne.s	loc_C842	; if not, branch
0000E216 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E218 317C 0018 0008             		move.w	#$18,8(a0)
0000E21E 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000E224                            
0000E224                            loc_C842:
0000E224 1140 001A                  		move.b	d0,$1A(a0)
0000E228                            
0000E228                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000E228 7210                       		moveq	#$10,d1		; set horizontal speed
0000E22A 3028 0030                  		move.w	$30(a0),d0
0000E22E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E232 6700                       		beq.s	loc_C86C	; if yes, branch
0000E234 6C00                       		bge.s	Obj7E_Move
0000E236 4441                       		neg.w	d1
0000E238                            
0000E238                            Obj7E_Move:
0000E238 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E23C                            
0000E23C                            loc_C85A:				; XREF: loc_C86C
0000E23C 3028 0008                  		move.w	8(a0),d0
0000E240 6B00                       		bmi.s	locret_C86A
0000E242 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E246 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E248 6000 0000                  		bra.w	DisplaySprite
0000E24C                            ; ===========================================================================
0000E24C                            
0000E24C                            locret_C86A:
0000E24C 4E75                       		rts	
0000E24E                            ; ===========================================================================
0000E24E                            
0000E24E                            loc_C86C:				; XREF: Obj7E_ChkPos
0000E24E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E254 66E6                       		bne.s	loc_C85A
0000E256 5428 0024                  		addq.b	#2,$24(a0)
0000E25A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E260 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000E266                            
0000E266                            Obj7E_Wait:				; XREF: Obj7E_Index
0000E266 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E26A 6600                       		bne.s	Obj7E_Display
0000E26C 5428 0024                  		addq.b	#2,$24(a0)
0000E270                            
0000E270                            Obj7E_Display:
0000E270 6000 0000                  		bra.w	DisplaySprite
0000E274                            ; ===========================================================================
0000E274                            
0000E274                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000E274 6100 0000                  		bsr.w	DisplaySprite
0000E278 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000E27E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E282 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E284 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E28A 700A                       		moveq	#10,d0		; add 10 to score
0000E28C 4EB9 0000 0000             		jsr	AddPoints
0000E292 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E296 0200 0003                  		andi.b	#3,d0
0000E29A 6600                       		bne.s	locret_C8EA
0000E29C 303C 00CD                  		move.w	#$CD,d0
0000E2A0 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E2A6                            ; ===========================================================================
0000E2A6                            
0000E2A6                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000E2A6 303C 00C5                  		move.w	#$C5,d0
0000E2AA 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E2B0 5428 0024                  		addq.b	#2,$24(a0)
0000E2B4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E2BA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000E2C0 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E2C2 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000E2C8 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000E2CC                            
0000E2CC                            locret_C8EA:
0000E2CC 4E75                       		rts	
0000E2CE                            ; ===========================================================================
0000E2CE                            
0000E2CE                            Obj7E_Exit:				; XREF: Obj7E_Index
0000E2CE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E2D4 6000 0000                  		bra.w	DisplaySprite
0000E2D8                            ; ===========================================================================
0000E2D8                            
0000E2D8                            Obj7E_Continue:				; XREF: Obj7E_Index
0000E2D8 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000E2DE 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000E2E4 303C 00BF                  		move.w	#$BF,d0
0000E2E8 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play continues music
0000E2EE 5428 0024                  		addq.b	#2,$24(a0)
0000E2F2 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000E2F8 6000 0000                  		bra.w	DisplaySprite
0000E2FC                            ; ===========================================================================
0000E2FC                            
0000E2FC                            loc_C91A:				; XREF: Obj7E_Index
0000E2FC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E300 0200 000F                  		andi.b	#$F,d0
0000E304 6600                       		bne.s	Obj7E_Display2
0000E306 0868 0000 001A             		bchg	#0,$1A(a0)
0000E30C                            
0000E30C                            Obj7E_Display2:
0000E30C 6000 0000                  		bra.w	DisplaySprite
0000E310                            ; ===========================================================================
0000E310 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E316 0200                       		dc.b 2,	0		; rountine number, frame number
0000E318 0320 0120 0118             		dc.w $320, $120, $118
0000E31E 0201                       		dc.b 2,	1
0000E320 0360 0120 0128             		dc.w $360, $120, $128
0000E326 0202                       		dc.b 2,	2
0000E328 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E32E 0203                       		dc.b 2,	3
0000E330 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E336 0206                       		dc.b 2,	6
0000E338                            ; ===========================================================================
0000E338                            ; ---------------------------------------------------------------------------
0000E338                            ; Object 7F - chaos emeralds from the special stage results screen
0000E338                            ; ---------------------------------------------------------------------------
0000E338                            
0000E338                            Obj7F:					; XREF: Obj_Index
0000E338 7000                       		moveq	#0,d0
0000E33A 1028 0024                  		move.b	$24(a0),d0
0000E33E 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000E342 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000E346                            ; ===========================================================================
0000E346 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000E348 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000E34A                            
0000E34A                            ; ---------------------------------------------------------------------------
0000E34A                            ; X-axis positions for chaos emeralds
0000E34A                            ; ---------------------------------------------------------------------------
0000E34A 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E356                            ; ===========================================================================
0000E356                            
0000E356                            Obj7F_Main:				; XREF: Obj7F_Index
0000E356 2248                       		movea.l	a0,a1
0000E358 45F9 0000 E34A             		lea	(Obj7F_PosData).l,a2
0000E35E 7400                       		moveq	#0,d2
0000E360 7200                       		moveq	#0,d1
0000E362 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000E366 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E368 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E36C                            
0000E36C                            Obj7F_Loop:
0000E36C 12BC 007F                  		move.b	#$7F,0(a1)
0000E370 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000E374 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000E37A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000E37E 1633 2000                  		move.b	(a3,d2.w),d3
0000E382 1343 001A                  		move.b	d3,$1A(a1)
0000E386 1343 001C                  		move.b	d3,$1C(a1)
0000E38A 5202                       		addq.b	#1,d2
0000E38C 5429 0024                  		addq.b	#2,$24(a1)
0000E390 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000E398 337C 8541 0002             		move.w	#$8541,2(a1)
0000E39E 137C 0000 0001             		move.b	#0,1(a1)
0000E3A4 43E9 0040                  		lea	$40(a1),a1	; next object
0000E3A8 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000E3AC                            
0000E3AC                            Obj7F_Flash:				; XREF: Obj7F_Index
0000E3AC 1028 001A                  		move.b	$1A(a0),d0
0000E3B0 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000E3B6 0C00 0006                  		cmpi.b	#6,d0
0000E3BA 6600                       		bne.s	Obj7F_Display
0000E3BC 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000E3C2                            
0000E3C2                            Obj7F_Display:
0000E3C2 6000 0000                  		bra.w	DisplaySprite
0000E3C6                            ; ===========================================================================
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6                            ; Sprite mappings - zone title cards
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000E3C8 0000                       		dc.w byte_CA2C-Map_obj34
0000E3CA 0000                       		dc.w byte_CA5A-Map_obj34
0000E3CC 0000                       		dc.w byte_CA7A-Map_obj34
0000E3CE 0000                       		dc.w byte_CAA8-Map_obj34
0000E3D0 0000                       		dc.w byte_CADC-Map_obj34
0000E3D2 0000                       		dc.w byte_CB10-Map_obj34
0000E3D4 0000                       		dc.w byte_CB26-Map_obj34
0000E3D6 0000                       		dc.w byte_CB31-Map_obj34
0000E3D8 0000                       		dc.w byte_CB3C-Map_obj34
0000E3DA 0000                       		dc.w byte_CB47-Map_obj34
0000E3DC 0000                       		dc.w byte_CB8A-Map_obj34
0000E3DE                            
0000E3DE                            ; Vladikcomper: Title Cards mappins were converted to binary data to be 
0000E3DE                            ;		easily edited in S1HS.
0000E3DE                            byte_C9FE:      incbin   "mapbin\ttlcards_map_0.bin"
0000E40C                            		even
0000E40C                            byte_CA2C:      incbin   "mapbin\ttlcards_map_1.bin"
0000E444                            		even
0000E444                            byte_CA5A:	incbin   "mapbin\ttlcards_map_2.bin"
0000E482 00                         		even
0000E482                            byte_CA7A:	incbin   "mapbin\ttlcards_map_3.bin"
0000E4B0                            		even
0000E4B0                            byte_CAA8:	incbin   "mapbin\ttlcards_map_4.bin"
0000E4EE 00                         		even
0000E4EE                            byte_CADC:	incbin   "mapbin\ttlcards_map_5.bin"
0000E512                            		even
0000E512 04                         byte_CB10:	dc.b 4			; ZONE
0000E513 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000E518 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000E51D F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000E522 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E527 00                         		dc.b 0
0000E528 02                         byte_CB26:	dc.b 2			; ACT 1
0000E529 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E52E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000E533 02                         byte_CB31:	dc.b 2			; ACT 2
0000E534 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E539 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000E53E 02                         byte_CB3C:	dc.b 2			; ACT 3
0000E53F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E544 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000E549 0D                         byte_CB47:	dc.b $D			; Oval
0000E54A E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E54F E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E554 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E559 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E55E 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E563 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E568 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E56D FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E572 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E577 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E57C FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E581 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E586 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E58B 00                         		dc.b 0
0000E58C                            byte_CB8A:	incbin   "mapbin\ttlcards_map_6.bin"
0000E5AC 00                         		even
0000E5AC                            ; ---------------------------------------------------------------------------
0000E5AC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E5AC                            ; ---------------------------------------------------------------------------
0000E5AC                            Map_obj39:
0000E5AC                            	include "_maps\obj39.asm"
0000E5AC                            ; ---------------------------------------------------------------------------
0000E5AC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E5AC                            ; ---------------------------------------------------------------------------
0000E5AC 0000                       		dc.w byte_CBAC-Map_obj39
0000E5AE 0000                       		dc.w byte_CBB7-Map_obj39
0000E5B0 0000                       		dc.w byte_CBC2-Map_obj39
0000E5B2 0000                       		dc.w byte_CBCD-Map_obj39
0000E5B4 02                         byte_CBAC:	dc.b 2
0000E5B5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000E5BA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000E5BF 02                         byte_CBB7:	dc.b 2
0000E5C0 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000E5C5 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000E5CA 02                         byte_CBC2:	dc.b 2
0000E5CB F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000E5D0 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000E5D5 02                         byte_CBCD:	dc.b 2
0000E5D6 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000E5DB F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000E5E0                            		even
0000E5E0                            		even
0000E5E0                            
0000E5E0                            ; ---------------------------------------------------------------------------
0000E5E0                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E5E0                            ; ---------------------------------------------------------------------------
0000E5E0 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000E5E2 0000                       		dc.w byte_CC13-Map_obj3A
0000E5E4 0000                       		dc.w byte_CC32-Map_obj3A
0000E5E6 0000                       		dc.w byte_CC51-Map_obj3A
0000E5E8 0000                       		dc.w byte_CC75-Map_obj3A
0000E5EA FF69                       		dc.w byte_CB47-Map_obj3A
0000E5EC FF48                       		dc.w byte_CB26-Map_obj3A
0000E5EE FF53                       		dc.w byte_CB31-Map_obj3A
0000E5F0 FF5E                       		dc.w byte_CB3C-Map_obj3A
0000E5F2                            byte_CBEA:	incbin "mapbin\sonichaspassed_map_0.bin"
0000E61C 00                         		even
0000E61C                            byte_CC13:	incbin "mapbin\sonichaspassed_map_1.bin"
0000E63C 00                         		even
0000E63C 06                         byte_CC32:	dc.b 6			; SCORE
0000E63D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E642 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E647 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E64C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E651 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E656 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E65B 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000E65C F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000E661 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E666 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E66B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E670 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E675 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000E67A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E67F 07                         byte_CC75:	dc.b 7			; RING BONUS
0000E680 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E685 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E68A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E68F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E694 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E699 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E69E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E6A4 00                         		even
0000E6A4                            ; ---------------------------------------------------------------------------
0000E6A4                            ; Sprite mappings - special stage results screen
0000E6A4                            ; ---------------------------------------------------------------------------
0000E6A4 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000E6A6 0000                       		dc.w byte_CCEE-Map_obj7E
0000E6A8 0000                       		dc.w byte_CD0D-Map_obj7E
0000E6AA FEA5                       		dc.w byte_CB47-Map_obj7E
0000E6AC 0000                       		dc.w byte_CD31-Map_obj7E
0000E6AE 0000                       		dc.w byte_CD46-Map_obj7E
0000E6B0 0000                       		dc.w byte_CD5B-Map_obj7E
0000E6B2 0000                       		dc.w byte_CD6B-Map_obj7E
0000E6B4 0000                       		dc.w byte_CDA8-Map_obj7E
0000E6B6 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000E6B7 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000E6BC F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000E6C1 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000E6C6 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000E6CB F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000E6D0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000E6D5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E6DA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E6DF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E6E4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E6E9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E6EE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E6F3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E6F8 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E6F9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E6FE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E703 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E708 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E70D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E712 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E717 07                         byte_CD0D:	dc.b 7
0000E718 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E71D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E722 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E727 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E72C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E731 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E736 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E73B 04                         byte_CD31:	dc.b 4
0000E73C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E741 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E746 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E74B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E750 04                         byte_CD46:	dc.b 4
0000E751 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E756 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E75B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E760 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E765 03                         byte_CD5B:	dc.b 3
0000E766 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E76B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E770 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E775 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E776 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E77B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E780 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E785 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E78A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E78F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E794 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E799 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E79E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E7A3 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E7A8 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E7AD F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E7B2 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E7B3 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E7B8 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E7BD F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E7C2 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E7C7 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E7CC F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E7D1 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E7D6 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E7DB F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E7E0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E7E5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E7EA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E7EF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E7F4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E7F9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E7FE                            		even
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE                            Map_obj7F:
0000E7FE                            	include "_maps\obj7F.asm"
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE 0000                       		dc.w byte_CE02-Map_obj7F
0000E800 0000                       		dc.w byte_CE08-Map_obj7F
0000E802 0000                       		dc.w byte_CE0E-Map_obj7F
0000E804 0000                       		dc.w byte_CE14-Map_obj7F
0000E806 0000                       		dc.w byte_CE1A-Map_obj7F
0000E808 0000                       		dc.w byte_CE20-Map_obj7F
0000E80A 0000                       		dc.w byte_CE26-Map_obj7F
0000E80C 01                         byte_CE02:	dc.b 1
0000E80D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000E812 01                         byte_CE08:	dc.b 1
0000E813 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E818 01                         byte_CE0E:	dc.b 1
0000E819 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E81E 01                         byte_CE14:	dc.b 1
0000E81F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E824 01                         byte_CE1A:	dc.b 1
0000E825 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000E82A 01                         byte_CE20:	dc.b 1
0000E82B F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000E830 00                         byte_CE26:	dc.b 0			; Blank frame
0000E832 00                         		even
0000E832 00                         		even
0000E832                            
0000E832                            ; ===========================================================================
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            ; Object 36 - spikes
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            
0000E832                            Obj36:					; XREF: Obj_Index
0000E832 7000                       		moveq	#0,d0
0000E834 1028 0024                  		move.b	$24(a0),d0
0000E838 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E83C 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E840                            ; ===========================================================================
0000E840 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E842 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E844                            
0000E844 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E846 0110                       		dc.b 1,	$10
0000E848 0204                       		dc.b 2,	4
0000E84A 031C                       		dc.b 3,	$1C
0000E84C 0440                       		dc.b 4,	$40
0000E84E 0510                       		dc.b 5,	$10
0000E850                            ; ===========================================================================
0000E850                            
0000E850                            Obj36_Main:				; XREF: Obj36_Index
0000E850 5428 0024                  		addq.b	#2,$24(a0)
0000E854 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E85C 317C 051B 0002             		move.w	#$51B,2(a0)
0000E862 0028 0004 0001             		ori.b	#4,1(a0)
0000E868 117C 0004 0018             		move.b	#4,$18(a0)
0000E86E 1028 0028                  		move.b	$28(a0),d0
0000E872 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E878 0240 00F0                  		andi.w	#$F0,d0
0000E87C 43F9 0000 E844             		lea	(Obj36_Var).l,a1
0000E882 E648                       		lsr.w	#3,d0
0000E884 D2C0                       		adda.w	d0,a1
0000E886 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E88A 1159 0019                  		move.b	(a1)+,$19(a0)
0000E88E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E894 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E89A                            
0000E89A                            Obj36_Solid:				; XREF: Obj36_Index
0000E89A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E89E 343C 0004                  		move.w	#4,d2
0000E8A2 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E8A8 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E8AA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E8B0 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E8B2 343C 0014                  		move.w	#$14,d2
0000E8B6                            
0000E8B6                            ; Spikes types $1x and $5x face	sideways
0000E8B6                            
0000E8B6                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E8B6 323C 001B                  		move.w	#$1B,d1
0000E8BA 3602                       		move.w	d2,d3
0000E8BC 5243                       		addq.w	#1,d3
0000E8BE 3828 0008                  		move.w	8(a0),d4
0000E8C2 6100 0000                  		bsr.w	SolidObject
0000E8C6 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on spikes?
0000E8CC 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E8CE 0C44 0001                  		cmpi.w	#1,d4
0000E8D2 6700                       		beq.s	Obj36_Hurt
0000E8D4 6000                       		bra.s	Obj36_Display
0000E8D6                            ; ===========================================================================
0000E8D6                            
0000E8D6                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E8D6                            
0000E8D6                            Obj36_Upright:				; XREF: Obj36_Solid
0000E8D6 7200                       		moveq	#0,d1
0000E8D8 1228 0019                  		move.b	$19(a0),d1
0000E8DC 0641 000B                  		addi.w	#$B,d1
0000E8E0 343C 0010                  		move.w	#$10,d2
0000E8E4 363C 0011                  		move.w	#$11,d3
0000E8E8 3828 0008                  		move.w	8(a0),d4
0000E8EC 6100 0000                  		bsr.w	SolidObject
0000E8F0 0828 0003 0022             		btst	#3,$22(a0) ; is Sonic standing on spikes?
0000E8F6 6600                       		bne.s	Obj36_Hurt ; if yes, branch
0000E8F8 4A44                       		tst.w	d4
0000E8FA 6A00                       		bpl.s	Obj36_Display
0000E8FC                            
0000E8FC                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E8FC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E900 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E902 4A78 D030                  		tst.w   ($FFFFD030).w	; is Sonic invulnerable?
0000E906 6600                       		bne.s   Obj36_Display	; if yes, branch
0000E908 2F08                       		move.l	a0,-(sp)	; save a0
0000E90A 2448                       		movea.l	a0,a2
0000E90C 41F8 D000                  		lea	($FFFFD000).w,a0; load Sonic object
0000E910 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E916 6400                       		bcc.s	loc_CF20
0000E918 2628 000C                  		move.l	$C(a0),d3
0000E91C 3028 0012                  		move.w	$12(a0),d0
0000E920 48C0                       		ext.l	d0
0000E922 E180                       		asl.l	#8,d0
0000E924 9680                       		sub.l	d0,d3
0000E926 2143 000C                  		move.l	d3,$C(a0)
0000E92A 4EB9 0000 0000             		jsr	HurtSonic
0000E930                            
0000E930                            loc_CF20:
0000E930 205F                       		movea.l	(sp)+,a0	; load saved a0
0000E932                            
0000E932                            Obj36_Display:
0000E932 6100 0000                  		bsr.w	DisplaySprite
0000E936 3028 0030                  		move.w	$30(a0),d0
0000E93A 0240 FF80                  		andi.w	#$FF80,d0
0000E93E 3238 F700                  		move.w	($FFFFF700).w,d1; move camera X-pos to d1
0000E942 0441 0080                  		subi.w	#$80,d1
0000E946 0241 FF80                  		andi.w	#$FF80,d1
0000E94A 9041                       		sub.w	d1,d0
0000E94C 0C40 0280                  		cmpi.w	#$280,d0        ; is object far enough?
0000E950 6200 0000                  		bhi.w	DeleteObject	; if so, delete it
0000E954 4E75                       		rts	
0000E956                            ; ===========================================================================
0000E956                            
0000E956                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E956 7000                       		moveq	#0,d0
0000E958 1028 0028                  		move.b	$28(a0),d0
0000E95C D040                       		add.w	d0,d0
0000E95E 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E962 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E966                            ; ===========================================================================
0000E966 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E968 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E96A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E96C                            ; ===========================================================================
0000E96C                            
0000E96C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E96C 4E75                       		rts			; don't move the object
0000E96E                            ; ===========================================================================
0000E96E                            
0000E96E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E96E 6100 0000                  		bsr.w	Obj36_Wait
0000E972 7000                       		moveq	#0,d0
0000E974 1028 0034                  		move.b	$34(a0),d0
0000E978 D068 0032                  		add.w	$32(a0),d0
0000E97C 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E980 4E75                       		rts	
0000E982                            ; ===========================================================================
0000E982                            
0000E982                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E982 6100 0000                  		bsr.w	Obj36_Wait
0000E986 7000                       		moveq	#0,d0
0000E988 1028 0034                  		move.b	$34(a0),d0
0000E98C D068 0030                  		add.w	$30(a0),d0
0000E990 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E994 4E75                       		rts	
0000E996                            ; ===========================================================================
0000E996                            
0000E996                            Obj36_Wait:
0000E996 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E99A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E99C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E9A0 6600                       		bne.s	locret_CFE6
0000E9A2 4A28 0001                  		tst.b	1(a0)
0000E9A6 6A00                       		bpl.s	locret_CFE6
0000E9A8 303C 00B6                  		move.w	#$B6,d0
0000E9AC 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E9B2 6000                       		bra.s	locret_CFE6
0000E9B4                            ; ===========================================================================
0000E9B4                            
0000E9B4                            loc_CFA4:
0000E9B4 4A68 0036                  		tst.w	$36(a0)
0000E9B8 6700                       		beq.s	loc_CFC6
0000E9BA 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E9C0 6400                       		bcc.s	locret_CFE6
0000E9C2 317C 0000 0034             		move.w	#0,$34(a0)
0000E9C8 317C 0000 0036             		move.w	#0,$36(a0)
0000E9CE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E9D4 6000                       		bra.s	locret_CFE6
0000E9D6                            ; ===========================================================================
0000E9D6                            
0000E9D6                            loc_CFC6:
0000E9D6 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E9DC 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E9E2 6500                       		bcs.s	locret_CFE6
0000E9E4 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E9EA 317C 0001 0036             		move.w	#1,$36(a0)
0000E9F0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E9F6                            
0000E9F6                            locret_CFE6:
0000E9F6 4E75                       		rts	
0000E9F8                            ; ===========================================================================
0000E9F8                            ; ---------------------------------------------------------------------------
0000E9F8                            ; Sprite mappings - spikes
0000E9F8                            ; ---------------------------------------------------------------------------
0000E9F8                            Map_obj36:
0000E9F8                            	include "_maps\obj36.asm"
0000E9F8                            ; ---------------------------------------------------------------------------
0000E9F8                            ; Sprite mappings - spikes
0000E9F8                            ; ---------------------------------------------------------------------------
0000E9F8 0000                       		dc.w byte_CFF4-Map_obj36
0000E9FA 0000                       		dc.w byte_D004-Map_obj36
0000E9FC 0000                       		dc.w byte_D014-Map_obj36
0000E9FE 0000                       		dc.w byte_D01A-Map_obj36
0000EA00 0000                       		dc.w byte_D02A-Map_obj36
0000EA02 0000                       		dc.w byte_D049-Map_obj36
0000EA04 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000EA05 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000EA0A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EA0F F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000EA14 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000EA15 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000EA1A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EA1F 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000EA24 01                         byte_D014:	dc.b 1			; 1 spike
0000EA25 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EA2A 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000EA2B F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000EA30 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EA35 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000EA3A 06                         byte_D02A:	dc.b 6			; 6 spikes
0000EA3B F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000EA40 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000EA45 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000EA4A F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000EA4F F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000EA54 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000EA59 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000EA5A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EA60 00                         		even
0000EA60 00                         		even
0000EA60                            
0000EA60                            ; ===========================================================================
0000EA60                            ; ---------------------------------------------------------------------------
0000EA60                            ; Object 3B - purple rock (GHZ)
0000EA60                            ; ---------------------------------------------------------------------------
0000EA60                            
0000EA60                            Obj3B:					; XREF: Obj_Index
0000EA60 7000                       		moveq	#0,d0
0000EA62 1028 0024                  		move.b	$24(a0),d0
0000EA66 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000EA6A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000EA6E                            ; ===========================================================================
0000EA6E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000EA70 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000EA72                            ; ===========================================================================
0000EA72                            
0000EA72                            Obj3B_Main:				; XREF: Obj3B_Index
0000EA72 5428 0024                  		addq.b	#2,$24(a0)
0000EA76 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000EA7E 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000EA84 117C 0004 0001             		move.b	#4,1(a0)
0000EA8A 117C 0013 0019             		move.b	#$13,$19(a0)
0000EA90 117C 0004 0018             		move.b	#4,$18(a0)
0000EA96                            
0000EA96                            Obj3B_Solid:				; XREF: Obj3B_Index
0000EA96 323C 001B                  		move.w	#$1B,d1
0000EA9A 343C 0010                  		move.w	#$10,d2
0000EA9E 363C 0010                  		move.w	#$10,d3
0000EAA2 3828 0008                  		move.w	8(a0),d4
0000EAA6 6100 0000                  		bsr.w	SolidObject
0000EAAA 6100 0000                  		bsr.w	DisplaySprite
0000EAAE 3028 0008                  		move.w	8(a0),d0
0000EAB2 0240 FF80                  		andi.w	#$FF80,d0
0000EAB6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EABA 0441 0080                  		subi.w	#$80,d1
0000EABE 0241 FF80                  		andi.w	#$FF80,d1
0000EAC2 9041                       		sub.w	d1,d0
0000EAC4 0C40 0280                  		cmpi.w	#$280,d0
0000EAC8 6200 0000                  		bhi.w	DeleteObject
0000EACC 4E75                       		rts	
0000EACE                            ; ===========================================================================
0000EACE                            ; ---------------------------------------------------------------------------
0000EACE                            ; Object 49 - waterfall	sound effect (GHZ)
0000EACE                            ; ---------------------------------------------------------------------------
0000EACE                            
0000EACE                            Obj49:					; XREF: Obj_Index
0000EACE 7000                       		moveq	#0,d0
0000EAD0 1028 0024                  		move.b	$24(a0),d0
0000EAD4 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000EAD8 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000EADC                            ; ===========================================================================
0000EADC 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000EADE 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000EAE0                            ; ===========================================================================
0000EAE0                            
0000EAE0                            Obj49_Main:				; XREF: Obj49_Index
0000EAE0 5428 0024                  		addq.b	#2,$24(a0)
0000EAE4 117C 0004 0001             		move.b	#4,1(a0)
0000EAEA                            
0000EAEA                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000EAEA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000EAEE 0200 003F                  		andi.b	#$3F,d0
0000EAF2 6600                       		bne.s	Obj49_ChkDel
0000EAF4 303C 00D0                  		move.w	#$D0,d0
0000EAF8 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000EAFE                            
0000EAFE                            Obj49_ChkDel:
0000EAFE 3028 0008                  		move.w	8(a0),d0
0000EB02 0240 FF80                  		andi.w	#$FF80,d0
0000EB06 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB0A 0441 0080                  		subi.w	#$80,d1
0000EB0E 0241 FF80                  		andi.w	#$FF80,d1
0000EB12 9041                       		sub.w	d1,d0
0000EB14 0C40 0280                  		cmpi.w	#$280,d0
0000EB18 6200 0000                  		bhi.w	DeleteObject
0000EB1C 4E75                       		rts	
0000EB1E                            ; ===========================================================================
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            ; Sprite mappings - purple rock	(GHZ)
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            Map_obj3B:
0000EB1E                            	include "_maps\obj3B.asm"
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            ; Sprite mappings - purple rock	(GHZ)
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E 0000                       		dc.w byte_D110-Map_obj3B
0000EB20 02                         byte_D110:	dc.b 2
0000EB21 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EB26 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EB2C 00                         		even
0000EB2C 00                         		even
0000EB2C                            
0000EB2C                            ; ===========================================================================
0000EB2C                            ; ---------------------------------------------------------------------------
0000EB2C                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EB2C                            ; ---------------------------------------------------------------------------
0000EB2C                            
0000EB2C                            Obj3C:					; XREF: Obj_Index
0000EB2C 7000                       		moveq	#0,d0
0000EB2E 1028 0024                  		move.b	$24(a0),d0
0000EB32 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000EB36 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000EB3A 6000 0000                  		bra.w	MarkObjGone
0000EB3E                            ; ===========================================================================
0000EB3E 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000EB40 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000EB42 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000EB44                            ; ===========================================================================
0000EB44                            
0000EB44                            Obj3C_Main:				; XREF: Obj3C_Index
0000EB44 5428 0024                  		addq.b	#2,$24(a0)
0000EB48 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000EB50 317C 450F 0002             		move.w	#$450F,2(a0)
0000EB56 117C 0004 0001             		move.b	#4,1(a0)
0000EB5C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB62 117C 0004 0018             		move.b	#4,$18(a0)
0000EB68 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000EB6E                            
0000EB6E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000EB6E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000EB74 323C 001B                  		move.w	#$1B,d1
0000EB78 343C 0020                  		move.w	#$20,d2
0000EB7C 363C 0020                  		move.w	#$20,d3
0000EB80 3828 0008                  		move.w	8(a0),d4
0000EB84 6100 0000                  		bsr.w	SolidObject
0000EB88 0828 0005 0022             		btst	#5,$22(a0)
0000EB8E 6600                       		bne.s	Obj3C_ChkRoll
0000EB90                            
0000EB90                            locret_D180:
0000EB90 4E75                       		rts	
0000EB92                            ; ===========================================================================
0000EB92                            
0000EB92                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000EB92 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000EB98 66F6                       		bne.s	locret_D180	; if not, branch
0000EB9A 3028 0030                  		move.w	$30(a0),d0
0000EB9E 6A00                       		bpl.s	Obj3C_ChkSpeed
0000EBA0 4440                       		neg.w	d0
0000EBA2                            
0000EBA2                            Obj3C_ChkSpeed:
0000EBA2 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000EBA6 65E8                       		bcs.s	locret_D180	; if not, branch
0000EBA8 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000EBAE 5869 0008                  		addq.w	#4,8(a1)
0000EBB2 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000EBB8 3028 0008                  		move.w	8(a0),d0
0000EBBC B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000EBC0 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000EBC2 5169 0008                  		subq.w	#8,8(a1)
0000EBC6 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000EBCC                            
0000EBCC                            Obj3C_Smash:
0000EBCC 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000EBD2 08A8 0005 0022             		bclr	#5,$22(a0)
0000EBD8 08A9 0005 0022             		bclr	#5,$22(a1)
0000EBDE 7207                       		moveq	#7,d1		; load 8 fragments
0000EBE0 343C 0070                  		move.w	#$70,d2
0000EBE4 6100                       		bsr.s	SmashObject
0000EBE6                            
0000EBE6                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000EBE6 6100 0000                  		bsr.w	SpeedToPos
0000EBEA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000EBF0 6100 0000                  		bsr.w	DisplaySprite
0000EBF4 4A28 0001                  		tst.b	1(a0)
0000EBF8 6A00 0000                  		bpl.w	DeleteObject
0000EBFC 4E75                       		rts	
0000EBFE                            
0000EBFE                            ; ---------------------------------------------------------------------------
0000EBFE                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000EBFE                            ; ---------------------------------------------------------------------------
0000EBFE                            
0000EBFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBFE                            
0000EBFE                            
0000EBFE                            SmashObject:				; XREF: Obj3C_Smash
0000EBFE 7000                       		moveq	#0,d0
0000EC00 1028 001A                  		move.b	$1A(a0),d0
0000EC04 D040                       		add.w	d0,d0
0000EC06 2668 0004                  		movea.l	4(a0),a3
0000EC0A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000EC0E 524B                       		addq.w	#1,a3
0000EC10 08E8 0005 0001             		bset	#5,1(a0)
0000EC16 1810                       		move.b	0(a0),d4
0000EC18 1A28 0001                  		move.b	1(a0),d5
0000EC1C 2248                       		movea.l	a0,a1
0000EC1E 6000                       		bra.s	Smash_LoadFrag
0000EC20                            ; ===========================================================================
0000EC20                            
0000EC20                            Smash_Loop:
0000EC20 6100 0000                  		bsr.w	SingleObjLoad
0000EC24 6600                       		bne.s	Smash_PlaySnd
0000EC26 5A4B                       		addq.w	#5,a3
0000EC28                            
0000EC28                            Smash_LoadFrag:				; XREF: SmashObject
0000EC28 137C 0004 0024             		move.b	#4,$24(a1)
0000EC2E 1284                       		move.b	d4,0(a1)
0000EC30 234B 0004                  		move.l	a3,4(a1)
0000EC34 1345 0001                  		move.b	d5,1(a1)
0000EC38 3368 0008 0008             		move.w	8(a0),8(a1)
0000EC3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EC44 3368 0002 0002             		move.w	2(a0),2(a1)
0000EC4A 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000EC50 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000EC56 335C 0010                  		move.w	(a4)+,$10(a1)
0000EC5A 335C 0012                  		move.w	(a4)+,$12(a1)
0000EC5E B3C8                       		cmpa.l	a0,a1
0000EC60 6400                       		bcc.s	loc_D268
0000EC62 2F08                       		move.l	a0,-(sp)
0000EC64 2049                       		movea.l	a1,a0
0000EC66 6100 0000                  		bsr.w	SpeedToPos
0000EC6A D568 0012                  		add.w	d2,$12(a0)
0000EC6E 205F                       		movea.l	(sp)+,a0
0000EC70 6100 0000                  		bsr.w	DisplaySprite2
0000EC74                            
0000EC74                            loc_D268:
0000EC74 51C9 FFAA                  		dbf	d1,Smash_Loop
0000EC78                            
0000EC78                            Smash_PlaySnd:
0000EC78 303C 00CB                  		move.w	#$CB,d0
0000EC7C 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play smashing sound
0000EC82                            ; End of function SmashObject
0000EC82                            
0000EC82                            ; ===========================================================================
0000EC82                            ; Smashed block	fragment speeds
0000EC82                            ;
0000EC82 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000EC86 0600 FF00                  		dc.w $600, $FF00
0000EC8A 0600 0100                  		dc.w $600, $100
0000EC8E 0400 0500                  		dc.w $400, $500
0000EC92 0600 FA00                  		dc.w $600, $FA00
0000EC96 0800 FE00                  		dc.w $800, $FE00
0000EC9A 0800 0200                  		dc.w $800, $200
0000EC9E 0600 0600                  		dc.w $600, $600
0000ECA2                            
0000ECA2 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000ECA6 F800 FE00                  		dc.w $F800, $FE00
0000ECAA F800 0200                  		dc.w $F800, $200
0000ECAE FA00 0600                  		dc.w $FA00, $600
0000ECB2 FC00 FB00                  		dc.w $FC00, $FB00
0000ECB6 FA00 FF00                  		dc.w $FA00, $FF00
0000ECBA FA00 0100                  		dc.w $FA00, $100
0000ECBE FC00 0500                  		dc.w $FC00, $500
0000ECC2                            ; ---------------------------------------------------------------------------
0000ECC2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000ECC2                            ; ---------------------------------------------------------------------------
0000ECC2                            Map_obj3C:
0000ECC2                            	include "_maps\obj3C.asm"
0000ECC2                            ; ---------------------------------------------------------------------------
0000ECC2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000ECC2                            ; ---------------------------------------------------------------------------
0000ECC2 0000                       		dc.w byte_D2BC-Map_obj3C
0000ECC4 0000                       		dc.w byte_D2E5-Map_obj3C
0000ECC6 0000                       		dc.w byte_D30E-Map_obj3C
0000ECC8 08                         byte_D2BC:	dc.b 8
0000ECC9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000ECCE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000ECD3 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000ECD8 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000ECDD E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000ECE2 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000ECE7 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000ECEC 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000ECF1 08                         byte_D2E5:	dc.b 8
0000ECF2 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000ECF7 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000ECFC 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000ED01 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000ED06 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000ED0B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000ED10 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000ED15 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000ED1A 08                         byte_D30E:	dc.b 8
0000ED1B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000ED20 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000ED25 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000ED2A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000ED2F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000ED34 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000ED39 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000ED3E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000ED44 00                         		even
0000ED44 00                         		even
0000ED44                            
0000ED44                            ; ---------------------------------------------------------------------------
0000ED44                            ; Object code loading subroutine
0000ED44                            ; ---------------------------------------------------------------------------
0000ED44                            
0000ED44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED44                            
0000ED44                            
0000ED44                            ObjectsLoad:				; XREF: TitleScreen; et al
0000ED44 41F8 D000                  		lea	($FFFFD000).w,a0 ; load object RAM
0000ED48 7E7F                       		moveq	#$7F,d7
0000ED4A 7000                       		moveq	#0,d0
0000ED4C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w ; is Sonic Dying (primary routine >= 6)?
0000ED52 6400                       		bcc.s	ObjectsFreeze	; if yes, branch
0000ED54                            
0000ED54                            ExecuteObjects:
0000ED54 1010                       		move.b	(a0),d0		; load object's id
0000ED56 6700                       		beq.s	@NextObject	; if it's zero, skip
0000ED58 D040                       		add.w	d0,d0
0000ED5A D040                       		add.w	d0,d0
0000ED5C 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000ED60 4E91                       		jsr	(a1)		; run the object's code
0000ED62 7000                       		moveq	#0,d0
0000ED64                            
0000ED64                            @NextObject:
0000ED64 41E8 0040                  		lea	$40(a0),a0	; next object
0000ED68 51CF FFEA                  		dbf	d7,ExecuteObjects
0000ED6C 4E75                       		rts
0000ED6E                            
0000ED6E                            ; ===========================================================================
0000ED6E                            ; ---------------------------------------------------------------------------
0000ED6E                            ; Just displays objects without running their code
0000ED6E                            ; Runs if Sonic is in dying state
0000ED6E                            ; ---------------------------------------------------------------------------
0000ED6E                            
0000ED6E                            ;loc_D362:
0000ED6E                            ObjectsFreeze:
0000ED6E 7E1F                       		moveq	#$1F,d7
0000ED70 61E2                       		bsr.s	ExecuteObjects	; run code only for reserved object SST
0000ED72 7E5F                       		moveq	#$5F,d7
0000ED74                            
0000ED74                            DisplayObjects:
0000ED74 7000                       		moveq	#0,d0
0000ED76 1010                       		move.b	(a0),d0		; load object's id
0000ED78 6700                       		beq.s	@NextObject	; if it's zero, branch
0000ED7A 4A28 0001                  		tst.b	1(a0)		; test render flag
0000ED7E 6A00                       		bpl.s	@NextObject	; if bit #7 isn't set, branch
0000ED80 6100 0000                  		bsr.w	DisplaySprite
0000ED84                            
0000ED84                            @NextObject:
0000ED84 41E8 0040                  		lea	$40(a0),a0	; next object
0000ED88 51CF FFEA                  		dbf	d7,DisplayObjects
0000ED8C 4E75                       		rts
0000ED8E                            ; End of function ObjectsLoad
0000ED8E                            
0000ED8E                            ; ===========================================================================
0000ED8E                            ; ---------------------------------------------------------------------------
0000ED8E                            ; Object pointers
0000ED8E                            ; ---------------------------------------------------------------------------
0000ED8E                            Obj_Index:
0000ED8E                            	include "_inc\Object pointers.asm"
0000ED8E                            ; ---------------------------------------------------------------------------
0000ED8E                            ; Object pointers
0000ED8E                            ; ---------------------------------------------------------------------------
0000ED8E 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000ED9E 0000 0000 0000 0000 0000+  	dc.l Obj05, ObjectFall, ObjectFall, Obj08
0000EDAE 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000EDBE 0000 0000 0000 C010 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000EDCE 0000 8D44 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000EDDE 0000 936A 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000EDEE 0000 9BB8 0000 9C20 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000EDFE 0000 A26A 0000 A558 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000EE0E 0000 0000 0000 B1DA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000EE1E 0000 B51C 0000 BB06 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000EE2E 0000 AE12 0000 A340 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000EE3E 0000 C698 0000 BCF6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000EE4E 0000 D06A 0000 D718 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000EE5E 0000 CBCE 0000 E832 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000EE6E 0000 DE9E 0000 DF58 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000EE7E 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000EE8E 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000EE9E 0000 D386 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000EEAE 0000 EACE 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000EEBE 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000EECE 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000EEDE 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000EEEE 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000EEFE 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000EF0E 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000EF1E 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000EF2E 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000EF3E 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000EF4E 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000EF5E 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000EF6E 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000EF7E 0000 0000 0000 E192 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000EF8E 0000 6968 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000EF9E 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000EFAE 0000 7022 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000EFAE 0000 7022 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000EFBE                            
0000EFBE                            ; ---------------------------------------------------------------------------
0000EFBE                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000EFBE                            ; ---------------------------------------------------------------------------
0000EFBE                            
0000EFBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFBE                            
0000EFBE                            
0000EFBE                            ObjectFall:
0000EFBE 2428 0008                  		move.l	8(a0),d2
0000EFC2 2628 000C                  		move.l	$C(a0),d3
0000EFC6 3028 0010                  		move.w	$10(a0),d0	; load X-velocity
0000EFCA 48C0                       		ext.l	d0
0000EFCC E180                       		asl.l	#8,d0		; multiply speed by $100
0000EFCE D480                       		add.l	d0,d2		; add to x-axis	position
0000EFD0 3028 0012                  		move.w	$12(a0),d0	; load Y-velocity
0000EFD4 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase Y-velocity
0000EFDA 48C0                       		ext.l	d0
0000EFDC E180                       		asl.l	#8,d0		; multiply speed by $100
0000EFDE D680                       		add.l	d0,d3		; add to y-axis	position
0000EFE0 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000EFE4 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000EFE8 4E75                       		rts	
0000EFEA                            ; End of function ObjectFall
0000EFEA                            
0000EFEA                            ; ---------------------------------------------------------------------------
0000EFEA                            ; Subroutine translating object	speed to update	object position
0000EFEA                            ; ---------------------------------------------------------------------------
0000EFEA                            
0000EFEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFEA                            
0000EFEA                            
0000EFEA                            SpeedToPos:
0000EFEA 2428 0008                  		move.l	8(a0),d2
0000EFEE 2628 000C                  		move.l	$C(a0),d3
0000EFF2 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000EFF6 48C0                       		ext.l	d0
0000EFF8 E180                       		asl.l	#8,d0		; multiply speed by $100
0000EFFA D480                       		add.l	d0,d2		; add to x-axis	position
0000EFFC 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000F000 48C0                       		ext.l	d0
0000F002 E180                       		asl.l	#8,d0		; multiply speed by $100
0000F004 D680                       		add.l	d0,d3		; add to y-axis	position
0000F006 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000F00A 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000F00E 4E75                       		rts	
0000F010                            ; End of function SpeedToPos
0000F010                            
0000F010                            ; ---------------------------------------------------------------------------
0000F010                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000F010                            ; ---------------------------------------------------------------------------
0000F010                            
0000F010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F010                            
0000F010                            
0000F010                            DisplaySprite:
0000F010 43F8 AC00                  		lea	($FFFFAC00).w,a1 ; load sprite table
0000F014 3028 0018                  		move.w	$18(a0),d0	; load object's prioity and horizontal radius
0000F018 E248                       		lsr.w	#1,d0		; shift 1 bit right
0000F01A 0240 0380                  		andi.w	#$380,d0	; apply bit mask to erase obj radius value
0000F01E D2C0                       		adda.w	d0,a1		; set sprite table destination, depending on priority
0000F020 0C51 007E                  		cmpi.w	#$7E,(a1)	; is sprite table overflowed?
0000F024 6400                       		bcc.s	DisplaySprite_Rts ; if yes, branch
0000F026 5451                       		addq.w	#2,(a1)
0000F028 D2D1                       		adda.w	(a1),a1		; load free slot in sprite table
0000F02A 3288                       		move.w	a0,(a1)		; write obj address to that slot
0000F02C                            
0000F02C                            DisplaySprite_Rts:
0000F02C 4E75                       		rts	
0000F02E                            ; End of function DisplaySprite
0000F02E                            
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            
0000F02E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F02E                            
0000F02E                            
0000F02E                            DisplaySprite2:
0000F02E 45F8 AC00                  		lea	($FFFFAC00).w,a2 ; load sprite table
0000F032 3029 0018                  		move.w	$18(a1),d0	; load object's prioity and horizontal radius
0000F036 E248                       		lsr.w	#1,d0		; shift 1 bit right
0000F038 0240 0380                  		andi.w	#$380,d0	; apply bit mask to erase obj radius value
0000F03C D4C0                       		adda.w	d0,a2		; set sprite table destination, depending on priority
0000F03E 0C52 007E                  		cmpi.w	#$7E,(a2)	; is sprite table overflowed?
0000F042 6400                       		bcc.s	DisplaySprite2_Rts ; if yes, branch
0000F044 5452                       		addq.w	#2,(a2)
0000F046 D4D2                       		adda.w	(a2),a2		; load free slot in sprite table
0000F048 3489                       		move.w	a1,(a2)		; write obj address to that slot
0000F04A                            
0000F04A                            DisplaySprite2_Rts:
0000F04A 4E75                       		rts
0000F04C                            ; End of function DisplaySprite2
0000F04C                            
0000F04C                            ; ---------------------------------------------------------------------------
0000F04C                            ; Subroutine to	delete an object
0000F04C                            ; ---------------------------------------------------------------------------
0000F04C                            
0000F04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F04C                            
0000F04C                            
0000F04C                            DeleteObject:
0000F04C 2248                       		movea.l	a0,a1		; load object to a1
0000F04E                            
0000F04E                            DeleteObject2:
0000F04E 7200                       		moveq	#0,d1
0000F050 700F                       		moveq	#$F,d0
0000F052                            
0000F052                            loc_D646:
0000F052 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F054 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000F058 4E75                       		rts	
0000F05A                            ; End of function DeleteObject
0000F05A                            
0000F05A                            ; ===========================================================================
0000F05A 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000F05E 00FF F700                  		dc.l $FFF700		; main screen x-position
0000F062 00FF F708                  		dc.l $FFF708		; background x-position	1
0000F066 00FF F718                  		dc.l $FFF718		; background x-position	2
0000F06A                            
0000F06A                            ; ---------------------------------------------------------------------------
0000F06A                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F06A                            ; ---------------------------------------------------------------------------
0000F06A                            
0000F06A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F06A                            
0000F06A                            
0000F06A                            BuildSprites:				; XREF: TitleScreen; et al
0000F06A 45F8 F800                  		lea	($FFFFF800).w,a2 ; RAM-space, where sprites in SMD format will be
0000F06E 7A00                       		moveq	#0,d5		 ; d5 will be sprite counter
0000F070 49F8 AC00                  		lea	($FFFFAC00).w,a4 ; load sprite table
0000F074 7E07                       		moveq	#7,d7
0000F076                            
0000F076                            BS_Layer:
0000F076 4A54                       		tst.w	(a4)		; is priority layer empty?
0000F078 6700 0000                  		beq.w	BS_NextLayer	; if yes, branch
0000F07C 7C02                       		moveq	#2,d6
0000F07E                            
0000F07E                            BS_Object:
0000F07E 3074 6000                  		movea.w	(a4,d6.w),a0	; load an object to display
0000F082 4A10                       		tst.b	(a0)		; is object empty?
0000F084 6700 0000                  		beq.w	BS_NextObject	; if yes, branch
0000F088 08A8 0007 0001             		bclr	#7,1(a0)	; clear display flag
0000F08E 1028 0001                  		move.b	1(a0),d0
0000F092 1800                       		move.b	d0,d4
0000F094 0240 000C                  		andi.w	#%1100,d0	; test coordinate system flags
0000F098 6700                       		beq.s	@OnScreenCoords ; if on-screen coordinate system used, branch
0000F09A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F09E 7000                       		moveq	#0,d0
0000F0A0 1028 0019                  		move.b	$19(a0),d0	; move H-radius to d0
0000F0A4 3628 0008                  		move.w	8(a0),d3	; move X-axis to d3
0000F0A8 9651                       		sub.w	(a1),d3
0000F0AA 3203                       		move.w	d3,d1
0000F0AC D240                       		add.w	d0,d1
0000F0AE 6B00 0000                  		bmi.w	BS_NextObject	; if object is out of screen, branch
0000F0B2 3203                       		move.w	d3,d1
0000F0B4 9240                       		sub.w	d0,d1
0000F0B6 0C41 0140                  		cmpi.w	#$140,d1
0000F0BA 6C00                       		bge.s	BS_NextObject	; if object is out of screen, branch
0000F0BC 0643 0080                  		addi.w	#$80,d3
0000F0C0 0804 0004                  		btst	#4,d4
0000F0C4 6700                       		beq.s	loc_D6E8
0000F0C6 7000                       		moveq	#0,d0
0000F0C8 1028 0016                  		move.b	$16(a0),d0	; move V-radius to d0
0000F0CC 3428 000C                  		move.w	$C(a0),d2	; move Y-axis to d2
0000F0D0 9469 0004                  		sub.w	4(a1),d2
0000F0D4 3202                       		move.w	d2,d1
0000F0D6 D240                       		add.w	d0,d1
0000F0D8 6B00                       		bmi.s	BS_NextObject	; if object is out of screen, branch
0000F0DA 3202                       		move.w	d2,d1
0000F0DC 9240                       		sub.w	d0,d1
0000F0DE 0C41 00E0                  		cmpi.w	#$E0,d1
0000F0E2 6C00                       		bge.s	BS_NextObject	; if object is out of screen, branch
0000F0E4 0642 0080                  		addi.w	#$80,d2
0000F0E8 6000                       		bra.s	BS_DisplaySprite
0000F0EA                            ; ---------------------------------------------------------------------------
0000F0EA                            
0000F0EA                            @OnScreenCoords:
0000F0EA 3428 000A                  		move.w	$A(a0),d2
0000F0EE 3628 0008                  		move.w	8(a0),d3
0000F0F2 6000                       		bra.s	BS_DisplaySprite
0000F0F4                            
0000F0F4                            ; ===========================================================================
0000F0F4                            
0000F0F4                            loc_D6E8:
0000F0F4 3428 000C                  		move.w	$C(a0),d2
0000F0F8 9469 0004                  		sub.w	4(a1),d2
0000F0FC 0642 0080                  		addi.w	#$80,d2
0000F100 0C42 0060                  		cmpi.w	#$60,d2
0000F104 6500                       		bcs.s	BS_NextObject	; if object is out of screen, branch
0000F106 0C42 0180                  		cmpi.w	#$180,d2
0000F10A 6400                       		bcc.s	BS_NextObject	; if object is out of screen, branch
0000F10C                            
0000F10C                            ; ===========================================================================
0000F10C                            
0000F10C                            ;loc_D700:
0000F10C                            BS_DisplaySprite:
0000F10C 2268 0004                  		movea.l	4(a0),a1	; load mappings addr
0000F110 7200                       		moveq	#0,d1
0000F112 0804 0005                  		btst	#5,d4		; is raw mappings bit set?
0000F116 6600                       		bne.s	@DisplayMapFrame; if yes, branch
0000F118 1228 001A                  		move.b	$1A(a0),d1	; get mapping frame
0000F11C D201                       		add.b	d1,d1
0000F11E D2F1 1000                  		adda.w	(a1,d1.w),a1	; load mappings for this frame
0000F122 1219                       		move.b	(a1)+,d1	; get item count in mappings data
0000F124 5301                       		subq.b	#1,d1		; sub 1 from it
0000F126 6B00                       		bmi.s	@QuitDisplay	; if there mapping frame is empty, branch
0000F128                            
0000F128                            @DisplayMapFrame:
0000F128 6100 0000                  		bsr.w	sub_D750
0000F12C                            
0000F12C                            @QuitDisplay:	
0000F12C 08E8 0007 0001             		bset	#7,1(a0)	; set display flag
0000F132                            
0000F132                            BS_NextObject:
0000F132 5446                       		addq.w	#2,d6
0000F134 5554                       		subq.w	#2,(a4)		; next object in priority layer
0000F136 6600 FF46                  		bne.w	BS_Object
0000F13A                            
0000F13A                            BS_NextLayer:
0000F13A 49EC 0080                  		lea	$80(a4),a4	; next priority layer
0000F13E 51CF FF36                  		dbf	d7,BS_Layer	; repeat 7 more times
0000F142                            
0000F142 11C5 F62C                  		move.b	d5,($FFFFF62C).w ; save sprite counter
0000F146 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
0000F14A 6700                       		beq.s	loc_D748	; if yes, branch
0000F14C 24BC 0000 0000             		move.l	#0,(a2)
0000F152 4E75                       		rts	
0000F154                            ; ===========================================================================
0000F154                            
0000F154                            loc_D748:
0000F154 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F15A 4E75                       		rts	
0000F15C                            ; End of function BuildSprites
0000F15C                            
0000F15C                            
0000F15C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F15C                            
0000F15C                            
0000F15C                            sub_D750:				; XREF: BuildSprites
0000F15C 3668 0002                  		movea.w	2(a0),a3
0000F160 0804 0000                  		btst	#0,d4
0000F164 6600                       		bne.s	loc_D796
0000F166 0804 0001                  		btst	#1,d4
0000F16A 6600 0000                  		bne.w	loc_D7E4
0000F16E                            ; End of function sub_D750
0000F16E                            
0000F16E                            
0000F16E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F16E                            
0000F16E                            
0000F16E                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F16E 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
0000F172 6700                       		beq.s	locret_D794	; if yes, branch
0000F174 1019                       		move.b	(a1)+,d0
0000F176 4880                       		ext.w	d0
0000F178 D042                       		add.w	d2,d0
0000F17A 34C0                       		move.w	d0,(a2)+
0000F17C 14D9                       		move.b	(a1)+,(a2)+
0000F17E 5205                       		addq.b	#1,d5
0000F180 14C5                       		move.b	d5,(a2)+
0000F182 1019                       		move.b	(a1)+,d0
0000F184 E148                       		lsl.w	#8,d0
0000F186 1019                       		move.b	(a1)+,d0
0000F188 D04B                       		add.w	a3,d0
0000F18A 34C0                       		move.w	d0,(a2)+
0000F18C 1019                       		move.b	(a1)+,d0
0000F18E 4880                       		ext.w	d0
0000F190 D043                       		add.w	d3,d0
0000F192 0240 01FF                  		andi.w	#$1FF,d0
0000F196 6600                       		bne.s	loc_D78E
0000F198 5240                       		addq.w	#1,d0
0000F19A                            
0000F19A                            loc_D78E:
0000F19A 34C0                       		move.w	d0,(a2)+
0000F19C 51C9 FFD0                  		dbf	d1,sub_D762
0000F1A0                            
0000F1A0                            locret_D794:
0000F1A0 4E75                       		rts	
0000F1A2                            ; End of function sub_D762
0000F1A2                            
0000F1A2                            ; ===========================================================================
0000F1A2                            
0000F1A2                            loc_D796:
0000F1A2 0804 0001                  		btst	#1,d4
0000F1A6 6600 0000                  		bne.w	loc_D82A
0000F1AA                            
0000F1AA                            loc_D79E:
0000F1AA 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
0000F1AE 6700                       		beq.s	locret_D7E2	; if yes, branch
0000F1B0 1019                       		move.b	(a1)+,d0
0000F1B2 4880                       		ext.w	d0
0000F1B4 D042                       		add.w	d2,d0
0000F1B6 34C0                       		move.w	d0,(a2)+
0000F1B8 1819                       		move.b	(a1)+,d4
0000F1BA 14C4                       		move.b	d4,(a2)+
0000F1BC 5205                       		addq.b	#1,d5
0000F1BE 14C5                       		move.b	d5,(a2)+
0000F1C0 1019                       		move.b	(a1)+,d0
0000F1C2 E148                       		lsl.w	#8,d0
0000F1C4 1019                       		move.b	(a1)+,d0
0000F1C6 D04B                       		add.w	a3,d0
0000F1C8 0A40 0800                  		eori.w	#$800,d0
0000F1CC 34C0                       		move.w	d0,(a2)+
0000F1CE 1019                       		move.b	(a1)+,d0
0000F1D0 4880                       		ext.w	d0
0000F1D2 4440                       		neg.w	d0
0000F1D4 D804                       		add.b	d4,d4
0000F1D6 0244 0018                  		andi.w	#$18,d4
0000F1DA 5044                       		addq.w	#8,d4
0000F1DC 9044                       		sub.w	d4,d0
0000F1DE D043                       		add.w	d3,d0
0000F1E0 0240 01FF                  		andi.w	#$1FF,d0
0000F1E4 6600                       		bne.s	loc_D7DC
0000F1E6 5240                       		addq.w	#1,d0
0000F1E8                            
0000F1E8                            loc_D7DC:
0000F1E8 34C0                       		move.w	d0,(a2)+
0000F1EA 51C9 FFBE                  		dbf	d1,loc_D79E
0000F1EE                            
0000F1EE                            locret_D7E2:
0000F1EE 4E75                       		rts	
0000F1F0                            ; ===========================================================================
0000F1F0                            
0000F1F0                            loc_D7E4:				; XREF: sub_D750
0000F1F0 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
0000F1F4 6700                       		beq.s	locret_D828	; if yes, branch
0000F1F6 1019                       		move.b	(a1)+,d0
0000F1F8 1811                       		move.b	(a1),d4
0000F1FA 4880                       		ext.w	d0
0000F1FC 4440                       		neg.w	d0
0000F1FE E70C                       		lsl.b	#3,d4
0000F200 0244 0018                  		andi.w	#$18,d4
0000F204 5044                       		addq.w	#8,d4
0000F206 9044                       		sub.w	d4,d0
0000F208 D042                       		add.w	d2,d0
0000F20A 34C0                       		move.w	d0,(a2)+
0000F20C 14D9                       		move.b	(a1)+,(a2)+
0000F20E 5205                       		addq.b	#1,d5
0000F210 14C5                       		move.b	d5,(a2)+
0000F212 1019                       		move.b	(a1)+,d0
0000F214 E148                       		lsl.w	#8,d0
0000F216 1019                       		move.b	(a1)+,d0
0000F218 D04B                       		add.w	a3,d0
0000F21A 0A40 1000                  		eori.w	#$1000,d0
0000F21E 34C0                       		move.w	d0,(a2)+
0000F220 1019                       		move.b	(a1)+,d0
0000F222 4880                       		ext.w	d0
0000F224 D043                       		add.w	d3,d0
0000F226 0240 01FF                  		andi.w	#$1FF,d0
0000F22A 6600                       		bne.s	loc_D822
0000F22C 5240                       		addq.w	#1,d0
0000F22E                            
0000F22E                            loc_D822:
0000F22E 34C0                       		move.w	d0,(a2)+
0000F230 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F234                            
0000F234                            locret_D828:
0000F234 4E75                       		rts	
0000F236                            ; ===========================================================================
0000F236                            
0000F236                            loc_D82A:
0000F236 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
0000F23A 6700                       		beq.s	locret_D87C	; if yes, branch
0000F23C 1019                       		move.b	(a1)+,d0
0000F23E 1811                       		move.b	(a1),d4
0000F240 4880                       		ext.w	d0
0000F242 4440                       		neg.w	d0
0000F244 E70C                       		lsl.b	#3,d4
0000F246 0244 0018                  		andi.w	#$18,d4
0000F24A 5044                       		addq.w	#8,d4
0000F24C 9044                       		sub.w	d4,d0
0000F24E D042                       		add.w	d2,d0
0000F250 34C0                       		move.w	d0,(a2)+
0000F252 1819                       		move.b	(a1)+,d4
0000F254 14C4                       		move.b	d4,(a2)+
0000F256 5205                       		addq.b	#1,d5
0000F258 14C5                       		move.b	d5,(a2)+
0000F25A 1019                       		move.b	(a1)+,d0
0000F25C E148                       		lsl.w	#8,d0
0000F25E 1019                       		move.b	(a1)+,d0
0000F260 D04B                       		add.w	a3,d0
0000F262 0A40 1800                  		eori.w	#$1800,d0
0000F266 34C0                       		move.w	d0,(a2)+
0000F268 1019                       		move.b	(a1)+,d0
0000F26A 4880                       		ext.w	d0
0000F26C 4440                       		neg.w	d0
0000F26E D804                       		add.b	d4,d4
0000F270 0244 0018                  		andi.w	#$18,d4
0000F274 5044                       		addq.w	#8,d4
0000F276 9044                       		sub.w	d4,d0
0000F278 D043                       		add.w	d3,d0
0000F27A 0240 01FF                  		andi.w	#$1FF,d0
0000F27E 6600                       		bne.s	loc_D876
0000F280 5240                       		addq.w	#1,d0
0000F282                            
0000F282                            loc_D876:
0000F282 34C0                       		move.w	d0,(a2)+
0000F284 51C9 FFB0                  		dbf	d1,loc_D82A
0000F288                            
0000F288                            locret_D87C:
0000F288 4E75                       		rts	
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            ; Subroutine to	check if an object is on the screen
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            
0000F28A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F28A                            
0000F28A                            
0000F28A                            ChkObjOnScreen:
0000F28A 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000F28E 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000F292 6B00                       		bmi.s	NotOnScreen
0000F294 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F298 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F29A                            
0000F29A 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000F29E 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000F2A2 6B00                       		bmi.s	NotOnScreen
0000F2A4 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F2A8 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F2AA                            
0000F2AA 7000                       		moveq	#0,d0		; set flag to 0
0000F2AC 4E75                       		rts	
0000F2AE                            ; ===========================================================================
0000F2AE                            
0000F2AE                            NotOnScreen:				; XREF: ChkObjOnScreen
0000F2AE 7001                       		moveq	#1,d0		; set flag to 1
0000F2B0 4E75                       		rts	
0000F2B2                            ; End of function ChkObjOnScreen
0000F2B2                            
0000F2B2                            
0000F2B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2B2                            
0000F2B2                            
0000F2B2                            ChkObjOnScreen2:
0000F2B2 7200                       		moveq	#0,d1
0000F2B4 1228 0019                  		move.b	$19(a0),d1
0000F2B8 3028 0008                  		move.w	8(a0),d0
0000F2BC 9078 F700                  		sub.w	($FFFFF700).w,d0
0000F2C0 D041                       		add.w	d1,d0
0000F2C2 6B00                       		bmi.s	NotOnScreen2
0000F2C4 D241                       		add.w	d1,d1
0000F2C6 9041                       		sub.w	d1,d0
0000F2C8 0C40 0140                  		cmpi.w	#320,d0
0000F2CC 6C00                       		bge.s	NotOnScreen2
0000F2CE                            
0000F2CE 3228 000C                  		move.w	$C(a0),d1
0000F2D2 9278 F704                  		sub.w	($FFFFF704).w,d1
0000F2D6 6B00                       		bmi.s	NotOnScreen2
0000F2D8 0C41 00E0                  		cmpi.w	#224,d1
0000F2DC 6C00                       		bge.s	NotOnScreen2
0000F2DE                            
0000F2DE 7000                       		moveq	#0,d0
0000F2E0 4E75                       		rts	
0000F2E2                            ; ===========================================================================
0000F2E2                            
0000F2E2                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000F2E2 7001                       		moveq	#1,d0
0000F2E4 4E75                       		rts	
0000F2E6                            ; End of function ChkObjOnScreen2
0000F2E6                            
0000F2E6                            ; ---------------------------------------------------------------------------
0000F2E6                            ; Subroutine to	load a level's objects
0000F2E6                            ; ---------------------------------------------------------------------------
0000F2E6                            
0000F2E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2E6                            
0000F2E6                            
0000F2E6                            ObjPosLoad:				; XREF: Level; et al
0000F2E6 7000                       		moveq	#0,d0
0000F2E8 1038 F76C                  		move.b	($FFFFF76C).w,d0 ; load OPL routine counter
0000F2EC 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F2F0 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F2F4                            ; End of function ObjPosLoad
0000F2F4                            
0000F2F4                            ; ===========================================================================
0000F2F4 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F2F6 0000                       		dc.w OPL_Next-OPL_Index
0000F2F8                            ; ===========================================================================
0000F2F8                            
0000F2F8                            OPL_Main:				; XREF: OPL_Index
0000F2F8 5438 F76C                  		addq.b	#2,($FFFFF76C).w ; increase OPL routine counter
0000F2FC 3038 FE10                  		move.w	($FFFFFE10).w,d0 ; load zone number
0000F300 ED08                       		lsl.b	#6,d0
0000F302 E848                       		lsr.w	#4,d0
0000F304 41F9 0000 0000             		lea	(ObjPos_Index).l,a0 ; load object list pointers
0000F30A 2248                       		movea.l	a0,a1
0000F30C D0F0 0000                  		adda.w	(a0,d0.w),a0	; load object list for the level
0000F310 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F314 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F318 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F31C 21C9 F778                  		move.l	a1,($FFFFF778).w
0000F320 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000F324 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F328 34FC 0101                  		move.w	#$101,(a2)+
0000F32C 303C 005E                  		move.w	#$5E,d0
0000F330                            
0000F330                            OPL_ClrList:
0000F330 429A                       		clr.l	(a2)+
0000F332 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F336                            
0000F336 45F8 FC00                  		lea	($FFFFFC00).w,a2 ; load pre-destroyed object list
0000F33A 7400                       		moveq	#0,d2
0000F33C 3C38 F700                  		move.w	($FFFFF700).w,d6 ; load camera X-pos
0000F340 0446 0080                  		subi.w	#$80,d6
0000F344 6400                       		bcc.s	loc_D93C
0000F346 7C00                       		moveq	#0,d6
0000F348                            
0000F348                            loc_D93C:
0000F348 0246 FF80                  		andi.w	#$FF80,d6
0000F34C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F350                            
0000F350                            loc_D944:
0000F350 BC50                       		cmp.w	(a0),d6
0000F352 6300                       		bls.s	loc_D956
0000F354 4A28 0004                  		tst.b	4(a0)
0000F358 6A00                       		bpl.s	loc_D952
0000F35A 1412                       		move.b	(a2),d2
0000F35C 5212                       		addq.b	#1,(a2)
0000F35E                            
0000F35E                            loc_D952:
0000F35E 5C48                       		addq.w	#6,a0
0000F360 60EE                       		bra.s	loc_D944
0000F362                            ; ===========================================================================
0000F362                            
0000F362                            loc_D956:
0000F362 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F366 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F36A 0446 0080                  		subi.w	#$80,d6
0000F36E 6500                       		bcs.s	loc_D976
0000F370                            
0000F370                            loc_D964:
0000F370 BC50                       		cmp.w	(a0),d6
0000F372 6300                       		bls.s	loc_D976
0000F374 4A28 0004                  		tst.b	4(a0)
0000F378 6A00                       		bpl.s	loc_D972
0000F37A 522A 0001                  		addq.b	#1,1(a2)
0000F37E                            
0000F37E                            loc_D972:
0000F37E 5C48                       		addq.w	#6,a0
0000F380 60EE                       		bra.s	loc_D964
0000F382                            ; ===========================================================================
0000F382                            
0000F382                            loc_D976:
0000F382 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F386 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000F38C                            
0000F38C                            OPL_Next:				; XREF: OPL_Index
0000F38C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F390 7400                       		moveq	#0,d2
0000F392 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F396 0246 FF80                  		andi.w	#$FF80,d6
0000F39A BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000F39E 6700 0000                  		beq.w	locret_DA3A
0000F3A2 6C00                       		bge.s	loc_D9F6
0000F3A4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F3A8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F3AC 0446 0080                  		subi.w	#$80,d6
0000F3B0 6500                       		bcs.s	loc_D9D2
0000F3B2                            
0000F3B2                            loc_D9A6:
0000F3B2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F3B6 6C00                       		bge.s	loc_D9D2
0000F3B8 5D48                       		subq.w	#6,a0
0000F3BA 4A28 0004                  		tst.b	4(a0)
0000F3BE 6A00                       		bpl.s	loc_D9BC
0000F3C0 532A 0001                  		subq.b	#1,1(a2)
0000F3C4 142A 0001                  		move.b	1(a2),d2
0000F3C8                            
0000F3C8                            loc_D9BC:
0000F3C8 6100 0000                  		bsr.w	loc_DA3C
0000F3CC 6600                       		bne.s	loc_D9C6
0000F3CE 5D48                       		subq.w	#6,a0
0000F3D0 60E0                       		bra.s	loc_D9A6
0000F3D2                            ; ===========================================================================
0000F3D2                            
0000F3D2                            loc_D9C6:
0000F3D2 4A28 0004                  		tst.b	4(a0)
0000F3D6 6A00                       		bpl.s	loc_D9D0
0000F3D8 522A 0001                  		addq.b	#1,1(a2)
0000F3DC                            
0000F3DC                            loc_D9D0:
0000F3DC 5C48                       		addq.w	#6,a0
0000F3DE                            
0000F3DE                            loc_D9D2:
0000F3DE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F3E2 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F3E6 0646 0300                  		addi.w	#$300,d6
0000F3EA                            
0000F3EA                            loc_D9DE:
0000F3EA BC68 FFFA                  		cmp.w	-6(a0),d6
0000F3EE 6E00                       		bgt.s	loc_D9F0
0000F3F0 4A28 FFFE                  		tst.b	-2(a0)
0000F3F4 6A00                       		bpl.s	loc_D9EC
0000F3F6 5312                       		subq.b	#1,(a2)
0000F3F8                            
0000F3F8                            loc_D9EC:
0000F3F8 5D48                       		subq.w	#6,a0
0000F3FA 60EE                       		bra.s	loc_D9DE
0000F3FC                            ; ===========================================================================
0000F3FC                            
0000F3FC                            loc_D9F0:
0000F3FC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F400 4E75                       		rts	
0000F402                            ; ===========================================================================
0000F402                            
0000F402                            loc_D9F6:
0000F402 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F406 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F40A 0646 0280                  		addi.w	#$280,d6
0000F40E                            
0000F40E                            loc_DA02:
0000F40E BC50                       		cmp.w	(a0),d6
0000F410 6300                       		bls.s	loc_DA16
0000F412 4A28 0004                  		tst.b	4(a0)
0000F416 6A00                       		bpl.s	loc_DA10
0000F418 1412                       		move.b	(a2),d2
0000F41A 5212                       		addq.b	#1,(a2)
0000F41C                            
0000F41C                            loc_DA10:
0000F41C 6100 0000                  		bsr.w	loc_DA3C
0000F420 67EC                       		beq.s	loc_DA02
0000F422                            
0000F422                            loc_DA16:
0000F422 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F426 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F42A 0446 0300                  		subi.w	#$300,d6
0000F42E 6500                       		bcs.s	loc_DA36
0000F430                            
0000F430                            loc_DA24:
0000F430 BC50                       		cmp.w	(a0),d6
0000F432 6300                       		bls.s	loc_DA36
0000F434 4A28 0004                  		tst.b	4(a0)
0000F438 6A00                       		bpl.s	loc_DA32
0000F43A 522A 0001                  		addq.b	#1,1(a2)
0000F43E                            
0000F43E                            loc_DA32:
0000F43E 5C48                       		addq.w	#6,a0
0000F440 60EE                       		bra.s	loc_DA24
0000F442                            ; ===========================================================================
0000F442                            
0000F442                            loc_DA36:
0000F442 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F446                            
0000F446                            locret_DA3A:
0000F446 4E75                       		rts	
0000F448                            ; ===========================================================================
0000F448                            
0000F448                            loc_DA3C:
0000F448 4A28 0004                  		tst.b	4(a0)
0000F44C 6A00                       		bpl.s	OPL_MakeItem
0000F44E 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000F454 6700                       		beq.s	OPL_MakeItem
0000F456 5C48                       		addq.w	#6,a0
0000F458 7000                       		moveq	#0,d0
0000F45A 4E75                       		rts	
0000F45C                            ; ===========================================================================
0000F45C                            
0000F45C                            OPL_MakeItem:
0000F45C 6100 0000                  		bsr.w	SingleObjLoad
0000F460 6600                       		bne.s	locret_DA8A	; if creating object failed, branch
0000F462 3358 0008                  		move.w	(a0)+,8(a1)
0000F466 3018                       		move.w	(a0)+,d0
0000F468 3200                       		move.w	d0,d1
0000F46A 0240 0FFF                  		andi.w	#$FFF,d0
0000F46E 3340 000C                  		move.w	d0,$C(a1)
0000F472 E559                       		rol.w	#2,d1
0000F474 0201 0003                  		andi.b	#3,d1
0000F478 1341 0001                  		move.b	d1,1(a1)
0000F47C 1341 0022                  		move.b	d1,$22(a1)
0000F480 1018                       		move.b	(a0)+,d0
0000F482 6A00                       		bpl.s	loc_DA80
0000F484 0200 007F                  		andi.b	#$7F,d0
0000F488 1342 0023                  		move.b	d2,$23(a1)
0000F48C                            
0000F48C                            loc_DA80:
0000F48C 1280                       		move.b	d0,0(a1)
0000F48E 1358 0028                  		move.b	(a0)+,$28(a1)
0000F492 7000                       		moveq	#0,d0
0000F494                            
0000F494                            locret_DA8A:
0000F494 4E75                       		rts	
0000F496                            ; ---------------------------------------------------------------------------
0000F496                            ; Single object	loading	subroutine
0000F496                            ; ---------------------------------------------------------------------------
0000F496                            
0000F496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F496                            
0000F496                            
0000F496                            SingleObjLoad:
0000F496 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F49A 303C 005F                  		move.w	#$5F,d0
0000F49E                            
0000F49E                            loc_DA94:
0000F49E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F4A0 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F4A2 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F4A6 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F4AA                            
0000F4AA                            locret_DAA0:
0000F4AA 4E75                       		rts	
0000F4AC                            ; End of function SingleObjLoad
0000F4AC                            
0000F4AC                            
0000F4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4AC                            
0000F4AC                            
0000F4AC                            SingleObjLoad2:
0000F4AC 2248                       		movea.l	a0,a1
0000F4AE 303C F000                  		move.w	#-$1000,d0
0000F4B2 9048                       		sub.w	a0,d0
0000F4B4 EC48                       		lsr.w	#6,d0
0000F4B6 5340                       		subq.w	#1,d0
0000F4B8 6500                       		bcs.s	locret_DABC
0000F4BA                            
0000F4BA                            loc_DAB0:
0000F4BA 4A11                       		tst.b	(a1)
0000F4BC 6700                       		beq.s	locret_DABC
0000F4BE 43E9 0040                  		lea	$40(a1),a1
0000F4C2 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F4C6                            
0000F4C6                            locret_DABC:
0000F4C6 4E75                       		rts	
0000F4C8                            ; End of function SingleObjLoad2
0000F4C8                            
0000F4C8                            ; ===========================================================================
0000F4C8                            ; ---------------------------------------------------------------------------
0000F4C8                            ; Object 41 - springs
0000F4C8                            ; ---------------------------------------------------------------------------
0000F4C8                            
0000F4C8                            Obj41:					; XREF: Obj_Index
0000F4C8 7000                       		moveq	#0,d0
0000F4CA 1028 0024                  		move.b	$24(a0),d0
0000F4CE 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F4D2 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F4D6 6100 FB38                  		bsr.w	DisplaySprite
0000F4DA 3028 0008                  		move.w	8(a0),d0
0000F4DE 0240 FF80                  		andi.w	#$FF80,d0
0000F4E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4E6 0441 0080                  		subi.w	#$80,d1
0000F4EA 0241 FF80                  		andi.w	#$FF80,d1
0000F4EE 9041                       		sub.w	d1,d0
0000F4F0 0C40 0280                  		cmpi.w	#$280,d0
0000F4F4 6200 FB56                  		bhi.w	DeleteObject
0000F4F8 4E75                       		rts	
0000F4FA                            ; ===========================================================================
0000F4FA 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F4FC 0000                       		dc.w Obj41_Up-Obj41_Index
0000F4FE 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F500 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F502 0000                       		dc.w Obj41_LR-Obj41_Index
0000F504 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F506 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F508 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F50A 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F50C 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F50E                            
0000F50E F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F510 F600                       		dc.w -$A00		; power	of yellow spring
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            Obj41_Main:				; XREF: Obj41_Index
0000F512 5428 0024                  		addq.b	#2,$24(a0)
0000F516 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F51E 317C 0523 0002             		move.w	#$523,2(a0)
0000F524 0028 0004 0001             		ori.b	#4,1(a0)
0000F52A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F530 117C 0004 0018             		move.b	#4,$18(a0)
0000F536 1028 0028                  		move.b	$28(a0),d0
0000F53A 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F53E 6700                       		beq.s	loc_DB54	; if not, branch
0000F540 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F546 117C 0001 001C             		move.b	#1,$1C(a0)
0000F54C 117C 0003 001A             		move.b	#3,$1A(a0)
0000F552 317C 0533 0002             		move.w	#$533,2(a0)
0000F558 117C 0008 0019             		move.b	#8,$19(a0)
0000F55E                            
0000F55E                            loc_DB54:
0000F55E 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F562 6700                       		beq.s	loc_DB66	; if not, branch
0000F564 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F56A 08E8 0001 0022             		bset	#1,$22(a0)
0000F570                            
0000F570                            loc_DB66:
0000F570 0800 0001                  		btst	#1,d0
0000F574 6700                       		beq.s	loc_DB72
0000F576 08E8 0005 0002             		bset	#5,2(a0)
0000F57C                            
0000F57C                            loc_DB72:
0000F57C 0240 000F                  		andi.w	#$F,d0
0000F580 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F586 4E75                       		rts	
0000F588                            ; ===========================================================================
0000F588                            
0000F588                            Obj41_Up:				; XREF: Obj41_Index
0000F588 323C 001B                  		move.w	#$1B,d1
0000F58C 343C 0008                  		move.w	#8,d2
0000F590 363C 0010                  		move.w	#$10,d3
0000F594 3828 0008                  		move.w	8(a0),d4
0000F598 6100 0000                  		bsr.w	SolidObject
0000F59C 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F5A0 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F5A2 4E75                       		rts	
0000F5A4                            ; ===========================================================================
0000F5A4                            
0000F5A4                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F5A4 5428 0024                  		addq.b	#2,$24(a0)
0000F5A8 5069 000C                  		addq.w	#8,$C(a1)
0000F5AC 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F5B2 08E9 0001 0022             		bset	#1,$22(a1)
0000F5B8 08A9 0003 0022             		bclr	#3,$22(a1)
0000F5BE 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F5C4 137C 0002 0024             		move.b	#2,$24(a1)
0000F5CA 08A8 0003 0022             		bclr	#3,$22(a0)
0000F5D0 4228 0025                  		clr.b	$25(a0)
0000F5D4 303C 00CC                  		move.w	#$CC,d0
0000F5D8 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play spring sound
0000F5DE                            
0000F5DE                            Obj41_AniUp:				; XREF: Obj41_Index
0000F5DE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F5E4 6000 CB26                  		bra.w	AnimateSprite
0000F5E8                            ; ===========================================================================
0000F5E8                            
0000F5E8                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F5E8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F5EE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F5F2 4E75                       		rts	
0000F5F4                            ; ===========================================================================
0000F5F4                            
0000F5F4                            Obj41_LR:				; XREF: Obj41_Index
0000F5F4 323C 0013                  		move.w	#$13,d1
0000F5F8 343C 000E                  		move.w	#$E,d2
0000F5FC 363C 000F                  		move.w	#$F,d3
0000F600 3828 0008                  		move.w	8(a0),d4
0000F604 6100 0000                  		bsr.w	SolidObject
0000F608 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F60E 6600                       		bne.s	loc_DC0C
0000F610 117C 0008 0024             		move.b	#8,$24(a0)
0000F616                            
0000F616                            loc_DC0C:
0000F616 0828 0005 0022             		btst	#5,$22(a0)
0000F61C 6600                       		bne.s	Obj41_BounceLR
0000F61E 4E75                       		rts	
0000F620                            ; ===========================================================================
0000F620                            
0000F620                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F620 5428 0024                  		addq.b	#2,$24(a0)
0000F624 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F62A 5069 0008                  		addq.w	#8,8(a1)
0000F62E 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F634 6600                       		bne.s	loc_DC36	; if yes, branch
0000F636 0469 0010 0008             		subi.w	#$10,8(a1)
0000F63C 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F640                            
0000F640                            loc_DC36:
0000F640 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F646 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000F64C 0869 0000 0022             		bchg	#0,$22(a1)
0000F652 0829 0002 0022             		btst	#2,$22(a1)
0000F658 6600                       		bne.s	loc_DC56
0000F65A 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F660                            
0000F660                            loc_DC56:
0000F660 08A8 0005 0022             		bclr	#5,$22(a0)
0000F666 08A9 0005 0022             		bclr	#5,$22(a1)
0000F66C 303C 00CC                  		move.w	#$CC,d0
0000F670 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play spring sound
0000F676                            
0000F676                            Obj41_AniLR:				; XREF: Obj41_Index
0000F676 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F67C 6000 CA8E                  		bra.w	AnimateSprite
0000F680                            ; ===========================================================================
0000F680                            
0000F680                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F680 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F686 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F68A 4E75                       		rts	
0000F68C                            ; ===========================================================================
0000F68C                            
0000F68C                            Obj41_Dwn:				; XREF: Obj41_Index
0000F68C 323C 001B                  		move.w	#$1B,d1
0000F690 343C 0008                  		move.w	#8,d2
0000F694 363C 0010                  		move.w	#$10,d3
0000F698 3828 0008                  		move.w	8(a0),d4
0000F69C 6100 0000                  		bsr.w	SolidObject
0000F6A0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F6A6 6600                       		bne.s	loc_DCA4
0000F6A8 117C 000E 0024             		move.b	#$E,$24(a0)
0000F6AE                            
0000F6AE                            loc_DCA4:
0000F6AE 4A28 0025                  		tst.b	$25(a0)
0000F6B2 6600                       		bne.s	locret_DCAE
0000F6B4 4A44                       		tst.w	d4
0000F6B6 6B00                       		bmi.s	Obj41_BounceDwn
0000F6B8                            
0000F6B8                            locret_DCAE:
0000F6B8 4E75                       		rts	
0000F6BA                            ; ===========================================================================
0000F6BA                            
0000F6BA                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F6BA 5428 0024                  		addq.b	#2,$24(a0)
0000F6BE 5169 000C                  		subq.w	#8,$C(a1)
0000F6C2 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F6C8 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F6CC 08E9 0001 0022             		bset	#1,$22(a1)	; set Sonic's in air flag
0000F6D2 08A9 0003 0022             		bclr	#3,$22(a1)
0000F6D8 137C 0002 0024             		move.b	#2,$24(a1)
0000F6DE 08A8 0003 0022             		bclr	#3,$22(a0)
0000F6E4 4228 0025                  		clr.b	$25(a0)
0000F6E8 303C 00CC                  		move.w	#$CC,d0
0000F6EC 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play spring sound
0000F6F2                            
0000F6F2                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F6F2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F6F8 6000 CA12                  		bra.w	AnimateSprite
0000F6FC                            ; ===========================================================================
0000F6FC                            
0000F6FC                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F6FC 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F702 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F706 4E75                       		rts	
0000F708                            ; ===========================================================================
0000F708                            Ani_obj41:
0000F708                            	include "_anim\obj41.asm"
0000F708                            ; ---------------------------------------------------------------------------
0000F708                            ; Animation script - springs
0000F708                            ; ---------------------------------------------------------------------------
0000F708 0000                       		dc.w byte_DD02-Ani_obj41
0000F70A 0000                       		dc.w byte_DD0E-Ani_obj41
0000F70C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F718 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F724                            		even
0000F724                            		even
0000F724                            
0000F724                            ; ---------------------------------------------------------------------------
0000F724                            ; Sprite mappings - springs
0000F724                            ; ---------------------------------------------------------------------------
0000F724                            Map_obj41:
0000F724                            	include "_maps\obj41.asm"
0000F724                            ; ---------------------------------------------------------------------------
0000F724                            ; Sprite mappings - springs
0000F724                            ; ---------------------------------------------------------------------------
0000F724 0000                       		dc.w byte_DD26-Map_obj41
0000F726 0000                       		dc.w byte_DD31-Map_obj41
0000F728 0000                       		dc.w byte_DD37-Map_obj41
0000F72A 0000                       		dc.w byte_DD47-Map_obj41
0000F72C 0000                       		dc.w byte_DD4D-Map_obj41
0000F72E 0000                       		dc.w byte_DD53-Map_obj41
0000F730 02                         byte_DD26:	dc.b 2
0000F731 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F736 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F73B 01                         byte_DD31:	dc.b 1
0000F73C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F741 03                         byte_DD37:	dc.b 3
0000F742 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F747 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F74C 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F751 01                         byte_DD47:	dc.b 1
0000F752 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F757 01                         byte_DD4D:	dc.b 1
0000F758 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F75D 04                         byte_DD53:	dc.b 4
0000F75E F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F763 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F768 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F76D 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F772                            		even
0000F772                            		even
0000F772                            
0000F772                            ; ===========================================================================
0000F772                            ; ---------------------------------------------------------------------------
0000F772                            ; Object 42 - Newtron enemy (GHZ)
0000F772                            ; ---------------------------------------------------------------------------
0000F772                            
0000F772                            Obj42:					; XREF: Obj_Index
0000F772 7000                       		moveq	#0,d0
0000F774 1028 0024                  		move.b	$24(a0),d0
0000F778 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F77C 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F780                            ; ===========================================================================
0000F780 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F782 0000                       		dc.w Obj42_Action-Obj42_Index
0000F784 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F786                            ; ===========================================================================
0000F786                            
0000F786                            Obj42_Main:				; XREF: Obj42_Index
0000F786 5428 0024                  		addq.b	#2,$24(a0)
0000F78A 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F792 317C 049B 0002             		move.w	#$49B,2(a0)
0000F798 117C 0004 0001             		move.b	#4,1(a0)
0000F79E 117C 0004 0018             		move.b	#4,$18(a0)
0000F7A4 117C 0014 0019             		move.b	#$14,$19(a0)
0000F7AA 117C 0010 0016             		move.b	#$10,$16(a0)
0000F7B0 117C 0008 0017             		move.b	#8,$17(a0)
0000F7B6                            
0000F7B6                            Obj42_Action:				; XREF: Obj42_Index
0000F7B6 7000                       		moveq	#0,d0
0000F7B8 1028 0025                  		move.b	$25(a0),d0
0000F7BC 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F7C0 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F7C4 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F7CA 6100 C940                  		bsr.w	AnimateSprite
0000F7CE 6000 0000                  		bra.w	MarkObjGone
0000F7D2                            ; ===========================================================================
0000F7D2 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F7D4 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F7D6 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F7D8 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F7DA 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F7DC                            ; ===========================================================================
0000F7DC                            
0000F7DC                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F7DC 08E8 0000 0022             		bset	#0,$22(a0)
0000F7E2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F7E6 9068 0008                  		sub.w	8(a0),d0
0000F7EA 6400                       		bcc.s	loc_DDEA
0000F7EC 4440                       		neg.w	d0
0000F7EE 08A8 0000 0022             		bclr	#0,$22(a0)
0000F7F4                            
0000F7F4                            loc_DDEA:
0000F7F4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F7F8 6400                       		bcc.s	locret_DE12	; if not, branch
0000F7FA 5428 0025                  		addq.b	#2,$25(a0)
0000F7FE 117C 0001 001C             		move.b	#1,$1C(a0)
0000F804 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F808 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F80A 317C 249B 0002             		move.w	#$249B,2(a0)
0000F810 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F816 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F81C                            
0000F81C                            locret_DE12:
0000F81C 4E75                       		rts	
0000F81E                            ; ===========================================================================
0000F81E                            
0000F81E                            Obj42_Type00:				; XREF: Obj42_Index2
0000F81E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F824 6400                       		bcc.s	Obj42_Fall	; if yes, branch
0000F826 08E8 0000 0022             		bset	#0,$22(a0)
0000F82C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F830 9068 0008                  		sub.w	8(a0),d0
0000F834 6400                       		bcc.s	locret_DE32
0000F836 08A8 0000 0022             		bclr	#0,$22(a0)
0000F83C                            
0000F83C                            locret_DE32:
0000F83C 4E75                       		rts	
0000F83E                            ; ===========================================================================
0000F83E                            
0000F83E                            Obj42_Fall:				; XREF: Obj42_Type00
0000F83E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F844 6600                       		bne.s	loc_DE42
0000F846 117C 000C 0020             		move.b	#$C,$20(a0)
0000F84C                            
0000F84C                            loc_DE42:
0000F84C 6100 F770                  		bsr.w	ObjectFall
0000F850 6100 0000                  		bsr.w	ObjHitFloor
0000F854 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F856 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F858 D368 000C                  		add.w	d1,$C(a0)
0000F85C 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F862 5428 0025                  		addq.b	#2,$25(a0)
0000F866 117C 0002 001C             		move.b	#2,$1C(a0)
0000F86C 0828 0005 0002             		btst	#5,2(a0)
0000F872 6700                       		beq.s	Obj42_Move
0000F874 5228 001C                  		addq.b	#1,$1C(a0)
0000F878                            
0000F878                            Obj42_Move:
0000F878 117C 000D 0020             		move.b	#$D,$20(a0)
0000F87E 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F884 0828 0000 0022             		btst	#0,$22(a0)
0000F88A 6600                       		bne.s	locret_DE86
0000F88C 4468 0010                  		neg.w	$10(a0)
0000F890                            
0000F890                            locret_DE86:
0000F890 4E75                       		rts	
0000F892                            ; ===========================================================================
0000F892                            
0000F892                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F892 6100 F756                  		bsr.w	SpeedToPos
0000F896 6100 0000                  		bsr.w	ObjHitFloor
0000F89A 0C41 FFF8                  		cmpi.w	#-8,d1
0000F89E 6D00                       		blt.s	loc_DEA2
0000F8A0 0C41 000C                  		cmpi.w	#$C,d1
0000F8A4 6C00                       		bge.s	loc_DEA2
0000F8A6 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F8AA 4E75                       		rts	
0000F8AC                            ; ===========================================================================
0000F8AC                            
0000F8AC                            loc_DEA2:
0000F8AC 5428 0025                  		addq.b	#2,$25(a0)
0000F8B0 4E75                       		rts	
0000F8B2                            ; ===========================================================================
0000F8B2                            
0000F8B2                            Obj42_Speed:				; XREF: Obj42_Index2
0000F8B2 6100 F736                  		bsr.w	SpeedToPos
0000F8B6 4E75                       		rts	
0000F8B8                            ; ===========================================================================
0000F8B8                            
0000F8B8                            Obj42_Type01:				; XREF: Obj42_Index2
0000F8B8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F8BE 6600                       		bne.s	Obj42_FireMissile
0000F8C0 117C 000C 0020             		move.b	#$C,$20(a0)
0000F8C6                            
0000F8C6                            Obj42_FireMissile:
0000F8C6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F8CC 6600                       		bne.s	locret_DF14
0000F8CE 4A28 0032                  		tst.b	$32(a0)
0000F8D2 6600                       		bne.s	locret_DF14
0000F8D4 117C 0001 0032             		move.b	#1,$32(a0)
0000F8DA 6100 FBBA                  		bsr.w	SingleObjLoad
0000F8DE 6600                       		bne.s	locret_DF14
0000F8E0 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F8E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8F0 5169 000C                  		subq.w	#8,$C(a1)
0000F8F4 337C 0200 0010             		move.w	#$200,$10(a1)
0000F8FA 303C 0014                  		move.w	#$14,d0
0000F8FE 0828 0000 0022             		btst	#0,$22(a0)
0000F904 6600                       		bne.s	loc_DF04
0000F906 4440                       		neg.w	d0
0000F908 4469 0010                  		neg.w	$10(a1)
0000F90C                            
0000F90C                            loc_DF04:
0000F90C D169 0008                  		add.w	d0,8(a1)
0000F910 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F916 137C 0001 0028             		move.b	#1,$28(a1)
0000F91C                            
0000F91C                            locret_DF14:
0000F91C 4E75                       		rts	
0000F91E                            ; ===========================================================================
0000F91E                            
0000F91E                            Obj42_Delete:				; XREF: Obj42_Index
0000F91E 6000 F72C                  		bra.w	DeleteObject
0000F922                            ; ===========================================================================
0000F922                            Ani_obj42:
0000F922                            	include "_anim\obj42.asm"
0000F922                            ; ---------------------------------------------------------------------------
0000F922                            ; Animation script - Newtron enemy
0000F922                            ; ---------------------------------------------------------------------------
0000F922 0000                       		dc.w byte_DF24-Ani_obj42
0000F924 0000                       		dc.w byte_DF28-Ani_obj42
0000F926 0000                       		dc.w byte_DF30-Ani_obj42
0000F928 0000                       		dc.w byte_DF34-Ani_obj42
0000F92A 0000                       		dc.w byte_DF38-Ani_obj42
0000F92C 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F930 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F938 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F93C 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F940 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F94A                            		even
0000F94A                            		even
0000F94A                            
0000F94A                            ; ---------------------------------------------------------------------------
0000F94A                            ; Sprite mappings - Newtron enemy (GHZ)
0000F94A                            ; ---------------------------------------------------------------------------
0000F94A                            Map_obj42:
0000F94A                            	include "_maps\obj42.asm"
0000F94A                            ; ---------------------------------------------------------------------------
0000F94A                            ; Sprite mappings - Newtron enemy (GHZ)
0000F94A                            ; ---------------------------------------------------------------------------
0000F94A 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F94E 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F952 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F956 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F95A 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F95E 0000                       		dc.w byte_DFF8-Map_obj42
0000F960 03                         byte_DF58:	dc.b 3
0000F961 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F966 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F96B FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F970 03                         byte_DF68:	dc.b 3
0000F971 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F976 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F97B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F980 03                         byte_DF78:	dc.b 3
0000F981 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F986 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F98B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F990 04                         byte_DF88:	dc.b 4
0000F991 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F996 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F99B FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F9A0 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F9A5 03                         byte_DF9D:	dc.b 3
0000F9A6 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F9AB FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F9B0 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F9B5 02                         byte_DFAD:	dc.b 2
0000F9B6 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9BB F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9C0 03                         byte_DFB8:	dc.b 3
0000F9C1 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9C6 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9CB FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F9D0 03                         byte_DFC8:	dc.b 3
0000F9D1 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9D6 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9DB FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F9E0 03                         byte_DFD8:	dc.b 3
0000F9E1 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9E6 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9EB FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F9F0 03                         byte_DFE8:	dc.b 3
0000F9F1 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9F6 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9FB FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FA00 00                         byte_DFF8:	dc.b 0
0000FA02 00                         		even
0000FA02 00                         		even
0000FA02                            
0000FA02                            ; ===========================================================================
0000FA02                            ; ---------------------------------------------------------------------------
0000FA02                            ; Object 43 - Roller enemy (SYZ)
0000FA02                            ; ---------------------------------------------------------------------------
0000FA02                            
0000FA02                            Obj43:					; XREF: Obj_Index
0000FA02 7000                       		moveq	#0,d0
0000FA04 1028 0024                  		move.b	$24(a0),d0
0000FA08 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000FA0C 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000FA10                            ; ===========================================================================
0000FA10 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000FA12 0000                       		dc.w Obj43_Action-Obj43_Index
0000FA14                            ; ===========================================================================
0000FA14                            
0000FA14                            Obj43_Main:				; XREF: Obj43_Index
0000FA14 117C 000E 0016             		move.b	#$E,$16(a0)
0000FA1A 117C 0008 0017             		move.b	#8,$17(a0)
0000FA20 6100 F59C                  		bsr.w	ObjectFall
0000FA24 6100 0000                  		bsr.w	ObjHitFloor
0000FA28 4A41                       		tst.w	d1
0000FA2A 6A00                       		bpl.s	locret_E052
0000FA2C D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000FA30 317C 0000 0012             		move.w	#0,$12(a0)
0000FA36 5428 0024                  		addq.b	#2,$24(a0)
0000FA3A 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000FA42 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000FA48 117C 0004 0001             		move.b	#4,1(a0)
0000FA4E 117C 0004 0018             		move.b	#4,$18(a0)
0000FA54 117C 0010 0019             		move.b	#$10,$19(a0)
0000FA5A                            
0000FA5A                            locret_E052:
0000FA5A 4E75                       		rts	
0000FA5C                            ; ===========================================================================
0000FA5C                            
0000FA5C                            Obj43_Action:				; XREF: Obj43_Index
0000FA5C 7000                       		moveq	#0,d0
0000FA5E 1028 0025                  		move.b	$25(a0),d0
0000FA62 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000FA66 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000FA6A 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000FA70 6100 C69A                  		bsr.w	AnimateSprite
0000FA74 3028 0008                  		move.w	8(a0),d0
0000FA78 0240 FF80                  		andi.w	#$FF80,d0
0000FA7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA80 0441 0080                  		subi.w	#$80,d1
0000FA84 0241 FF80                  		andi.w	#$FF80,d1
0000FA88 9041                       		sub.w	d1,d0
0000FA8A 0C40 0280                  		cmpi.w	#$280,d0
0000FA8E 6E00 0000                  		bgt.w	Obj43_ChkGone
0000FA92 6000 F57C                  		bra.w	DisplaySprite
0000FA96                            ; ===========================================================================
0000FA96                            
0000FA96                            Obj43_ChkGone:				; XREF: Obj43_Action
0000FA96 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FA9A 7000                       		moveq	#0,d0
0000FA9C 1028 0023                  		move.b	$23(a0),d0
0000FAA0 6700                       		beq.s	Obj43_Delete
0000FAA2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FAA8                            
0000FAA8                            Obj43_Delete:
0000FAA8 6000 F5A2                  		bra.w	DeleteObject
0000FAAC                            ; ===========================================================================
0000FAAC 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000FAAE 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000FAB0 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000FAB2 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000FAB4                            ; ===========================================================================
0000FAB4                            
0000FAB4                            Obj43_RollChk:				; XREF: Obj43_Index2
0000FAB4 3038 D008                  		move.w	($FFFFD008).w,d0
0000FAB8 0440 0100                  		subi.w	#$100,d0
0000FABC 6500                       		bcs.s	loc_E0D2
0000FABE 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000FAC2 6500                       		bcs.s	loc_E0D2
0000FAC4 5828 0025                  		addq.b	#4,$25(a0)
0000FAC8 117C 0002 001C             		move.b	#2,$1C(a0)
0000FACE 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000FAD4 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000FADA                            
0000FADA                            loc_E0D2:
0000FADA 588F                       		addq.l	#4,sp
0000FADC 4E75                       		rts	
0000FADE                            ; ===========================================================================
0000FADE                            
0000FADE                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000FADE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000FAE4 6700                       		beq.s	loc_E0F8
0000FAE6 5368 0030                  		subq.w	#1,$30(a0)
0000FAEA 6A00                       		bpl.s	locret_E0F6
0000FAEC 117C 0001 001C             		move.b	#1,$1C(a0)
0000FAF2 317C 0700 0010             		move.w	#$700,$10(a0)
0000FAF8 117C 008E 0020             		move.b	#$8E,$20(a0)
0000FAFE                            
0000FAFE                            locret_E0F6:
0000FAFE 4E75                       		rts	
0000FB00                            ; ===========================================================================
0000FB00                            
0000FB00                            loc_E0F8:
0000FB00 5428 0025                  		addq.b	#2,$25(a0)
0000FB04 4E75                       		rts	
0000FB06                            ; ===========================================================================
0000FB06                            
0000FB06                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000FB06 6100 0000                  		bsr.w	Obj43_Stop
0000FB0A 6100 F4DE                  		bsr.w	SpeedToPos
0000FB0E 6100 0000                  		bsr.w	ObjHitFloor
0000FB12 0C41 FFF8                  		cmpi.w	#-8,d1
0000FB16 6D00                       		blt.s	Obj43_Jump
0000FB18 0C41 000C                  		cmpi.w	#$C,d1
0000FB1C 6C00                       		bge.s	Obj43_Jump
0000FB1E D368 000C                  		add.w	d1,$C(a0)
0000FB22 4E75                       		rts	
0000FB24                            ; ===========================================================================
0000FB24                            
0000FB24                            Obj43_Jump:
0000FB24 5428 0025                  		addq.b	#2,$25(a0)
0000FB28 08E8 0000 0032             		bset	#0,$32(a0)
0000FB2E 6700                       		beq.s	locret_E12E
0000FB30 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000FB36                            
0000FB36                            locret_E12E:
0000FB36 4E75                       		rts	
0000FB38                            ; ===========================================================================
0000FB38                            
0000FB38                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000FB38 6100 F484                  		bsr.w	ObjectFall
0000FB3C 4A68 0012                  		tst.w	$12(a0)
0000FB40 6B00                       		bmi.s	locret_E150
0000FB42 6100 0000                  		bsr.w	ObjHitFloor
0000FB46 4A41                       		tst.w	d1
0000FB48 6A00                       		bpl.s	locret_E150
0000FB4A D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000FB4E 5528 0025                  		subq.b	#2,$25(a0)
0000FB52 317C 0000 0012             		move.w	#0,$12(a0)
0000FB58                            
0000FB58                            locret_E150:
0000FB58 4E75                       		rts	
0000FB5A                            
0000FB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB5A                            
0000FB5A                            
0000FB5A                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000FB5A 4A28 0032                  		tst.b	$32(a0)
0000FB5E 6B00                       		bmi.s	locret_E188
0000FB60 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB64 0440 0030                  		subi.w	#$30,d0
0000FB68 9068 0008                  		sub.w	8(a0),d0
0000FB6C 6400                       		bcc.s	locret_E188
0000FB6E 117C 0000 001C             		move.b	#0,$1C(a0)
0000FB74 117C 000E 0020             		move.b	#$E,$20(a0)
0000FB7A 4268 0010                  		clr.w	$10(a0)
0000FB7E 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FB84 117C 0002 0025             		move.b	#2,$25(a0)
0000FB8A 08E8 0007 0032             		bset	#7,$32(a0)
0000FB90                            
0000FB90                            locret_E188:
0000FB90 4E75                       		rts	
0000FB92                            ; End of function Obj43_Stop
0000FB92                            
0000FB92                            ; ===========================================================================
0000FB92                            Ani_obj43:
0000FB92                            	include "_anim\obj43.asm"
0000FB92                            ; ---------------------------------------------------------------------------
0000FB92                            ; Animation script - Roller enemy
0000FB92                            ; ---------------------------------------------------------------------------
0000FB92 0000                       		dc.w byte_E190-Ani_obj43
0000FB94 0000                       		dc.w byte_E196-Ani_obj43
0000FB96 0000                       		dc.w byte_E19C-Ani_obj43
0000FB98 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FB9E 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FBA4 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FBAA 00                         		even
0000FBAA 00                         		even
0000FBAA                            
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            ; Sprite mappings - Roller enemy (SYZ)
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            Map_obj43:
0000FBAA                            	include "_maps\obj43.asm"
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            ; Sprite mappings - Roller enemy (SYZ)
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FBAE 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FBB2 0000                       		dc.w byte_E1CE-Map_obj43
0000FBB4 02                         byte_E1AC:	dc.b 2
0000FBB5 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FBBA F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FBBF 02                         byte_E1B7:	dc.b 2
0000FBC0 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FBC5 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FBCA 01                         byte_E1C2:	dc.b 1
0000FBCB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FBD0 01                         byte_E1C8:	dc.b 1
0000FBD1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FBD6 01                         byte_E1CE:	dc.b 1
0000FBD7 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FBDC                            		even
0000FBDC                            		even
0000FBDC                            
0000FBDC                            ; ===========================================================================
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC                            ; Object 44 - walls (GHZ)
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC                            
0000FBDC                            Obj44:					; XREF: Obj_Index
0000FBDC 7000                       		moveq	#0,d0
0000FBDE 1028 0024                  		move.b	$24(a0),d0
0000FBE2 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FBE6 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FBEA                            ; ===========================================================================
0000FBEA 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FBEC 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FBEE 0000                       		dc.w Obj44_Display-Obj44_Index
0000FBF0                            ; ===========================================================================
0000FBF0                            
0000FBF0                            Obj44_Main:				; XREF: Obj44_Index
0000FBF0 5428 0024                  		addq.b	#2,$24(a0)
0000FBF4 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FBFC 317C 434C 0002             		move.w	#$434C,2(a0)
0000FC02 0028 0004 0001             		ori.b	#4,1(a0)
0000FC08 117C 0008 0019             		move.b	#8,$19(a0)
0000FC0E 117C 0006 0018             		move.b	#6,$18(a0)
0000FC14 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FC1A 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FC20 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FC22 5428 0024                  		addq.b	#2,$24(a0)
0000FC26 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FC28                            ; ===========================================================================
0000FC28                            
0000FC28                            Obj44_Solid:				; XREF: Obj44_Index
0000FC28 323C 0013                  		move.w	#$13,d1
0000FC2C 343C 0028                  		move.w	#$28,d2
0000FC30 6100 A83C                  		bsr.w	Obj44_SolidWall
0000FC34                            
0000FC34                            Obj44_Display:				; XREF: Obj44_Index
0000FC34 6100 F3DA                  		bsr.w	DisplaySprite
0000FC38 3028 0008                  		move.w	8(a0),d0
0000FC3C 0240 FF80                  		andi.w	#$FF80,d0
0000FC40 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC44 0441 0080                  		subi.w	#$80,d1
0000FC48 0241 FF80                  		andi.w	#$FF80,d1
0000FC4C 9041                       		sub.w	d1,d0
0000FC4E 0C40 0280                  		cmpi.w	#$280,d0
0000FC52 6200 F3F8                  		bhi.w	DeleteObject
0000FC56 4E75                       		rts	
0000FC58                            ; ===========================================================================
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            ; Sprite mappings - walls (GHZ)
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            Map_obj44:
0000FC58                            	include "_maps\obj44.asm"
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            ; Sprite mappings - walls (GHZ)
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58 0000                       		dc.w byte_E256-Map_obj44
0000FC5A 0000                       		dc.w byte_E26B-Map_obj44
0000FC5C 0000                       		dc.w byte_E280-Map_obj44
0000FC5E 04                         byte_E256:	dc.b 4
0000FC5F E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FC64 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FC69 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FC6E 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FC73 04                         byte_E26B:	dc.b 4
0000FC74 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FC79 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FC7E 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FC83 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FC88 04                         byte_E280:	dc.b 4
0000FC89 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FC8E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FC93 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FC98 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FC9E 00                         		even
0000FC9E 00                         		even
0000FC9E                            
0000FC9E                            ; ===========================================================================
0000FC9E                            ; ---------------------------------------------------------------------------
0000FC9E                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FC9E                            ; ---------------------------------------------------------------------------
0000FC9E                            
0000FC9E                            Obj13:					; XREF: Obj_Index
0000FC9E 7000                       		moveq	#0,d0
0000FCA0 1028 0024                  		move.b	$24(a0),d0
0000FCA4 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FCA8 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FCAC 6000 0000                  		bra.w	Obj14_ChkDel
0000FCB0                            ; ===========================================================================
0000FCB0 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FCB2 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FCB4                            ; ---------------------------------------------------------------------------
0000FCB4                            ;
0000FCB4                            ; Lava ball production rates
0000FCB4                            ;
0000FCB4 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FCBA                            ; ===========================================================================
0000FCBA                            
0000FCBA                            Obj13_Main:				; XREF: Obj13_Index
0000FCBA 5428 0024                  		addq.b	#2,$24(a0)
0000FCBE 1028 0028                  		move.b	$28(a0),d0
0000FCC2 E848                       		lsr.w	#4,d0
0000FCC4 0240 000F                  		andi.w	#$F,d0
0000FCC8 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FCCE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FCD4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FCDA                            
0000FCDA                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FCDA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FCDE 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FCE0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FCE6 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000FCEA 6600                       		bne.s	locret_E302
0000FCEC 6100 F7A8                  		bsr.w	SingleObjLoad
0000FCF0 6600                       		bne.s	locret_E302
0000FCF2 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FCF6 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD02 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FD08                            
0000FD08                            locret_E302:
0000FD08 4E75                       		rts	
0000FD0A                            ; ===========================================================================
0000FD0A                            ; ---------------------------------------------------------------------------
0000FD0A                            ; Object 14 - lava balls (MZ, SLZ)
0000FD0A                            ; ---------------------------------------------------------------------------
0000FD0A                            
0000FD0A                            Obj14:					; XREF: Obj_Index
0000FD0A 7000                       		moveq	#0,d0
0000FD0C 1028 0024                  		move.b	$24(a0),d0
0000FD10 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FD14 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FD18 6000 F2F6                  		bra.w	DisplaySprite
0000FD1C                            ; ===========================================================================
0000FD1C 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FD1E 0000                       		dc.w Obj14_Action-Obj14_Index
0000FD20 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FD22                            
0000FD22 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FD2C 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FD34                            ; ===========================================================================
0000FD34                            
0000FD34                            Obj14_Main:				; XREF: Obj14_Index
0000FD34 5428 0024                  		addq.b	#2,$24(a0)
0000FD38 117C 0008 0016             		move.b	#8,$16(a0)
0000FD3E 117C 0008 0017             		move.b	#8,$17(a0)
0000FD44 217C 0000 CD5E 0004        		move.l	#Map_obj14,4(a0)
0000FD4C 317C 0345 0002             		move.w	#$345,2(a0)
0000FD52 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FD58 6600                       		bne.s	loc_E35A
0000FD5A 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FD60                            
0000FD60                            loc_E35A:
0000FD60 117C 0004 0001             		move.b	#4,1(a0)
0000FD66 117C 0003 0018             		move.b	#3,$18(a0)
0000FD6C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FD72 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FD78 4A28 0029                  		tst.b	$29(a0)
0000FD7C 6700                       		beq.s	Obj14_SetSpeed
0000FD7E 5428 0018                  		addq.b	#2,$18(a0)
0000FD82                            
0000FD82                            Obj14_SetSpeed:
0000FD82 7000                       		moveq	#0,d0
0000FD84 1028 0028                  		move.b	$28(a0),d0
0000FD88 D040                       		add.w	d0,d0
0000FD8A 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FD90 117C 0008 0019             		move.b	#8,$19(a0)
0000FD96 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FD9C 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FD9E 117C 0010 0019             		move.b	#$10,$19(a0)
0000FDA4 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FDAA 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FDB0 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FDB6                            
0000FDB6                            Obj14_PlaySnd:
0000FDB6 303C 00AE                  		move.w	#$AE,d0
0000FDBA 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FDC0                            
0000FDC0                            Obj14_Action:				; XREF: Obj14_Index
0000FDC0 7000                       		moveq	#0,d0
0000FDC2 1028 0028                  		move.b	$28(a0),d0
0000FDC6 D040                       		add.w	d0,d0
0000FDC8 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FDCC 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FDD0 6100 F218                  		bsr.w	SpeedToPos
0000FDD4 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FDDA 6100 C330                  		bsr.w	AnimateSprite
0000FDDE                            
0000FDDE                            Obj14_ChkDel:				; XREF: Obj13
0000FDDE 3028 0008                  		move.w	8(a0),d0
0000FDE2 0240 FF80                  		andi.w	#$FF80,d0
0000FDE6 3238 F700                  		move.w	($FFFFF700).w,d1
0000FDEA 0441 0080                  		subi.w	#$80,d1
0000FDEE 0241 FF80                  		andi.w	#$FF80,d1
0000FDF2 9041                       		sub.w	d1,d0
0000FDF4 0C40 0280                  		cmpi.w	#$280,d0
0000FDF8 6200 F252                  		bhi.w	DeleteObject
0000FDFC 4E75                       		rts	
0000FDFE                            ; ===========================================================================
0000FDFE 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FE02 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FE06 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FE0A 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FE0E 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FE10                            ; ===========================================================================
0000FE10                            ; lavaball types 00-03 fly up and fall back down
0000FE10                            
0000FE10                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FE10 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FE16 3028 0030                  		move.w	$30(a0),d0
0000FE1A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FE1E 6400                       		bcc.s	loc_E41E	; if not, branch
0000FE20 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FE24                            
0000FE24                            loc_E41E:
0000FE24 08A8 0001 0022             		bclr	#1,$22(a0)
0000FE2A 4A68 0012                  		tst.w	$12(a0)
0000FE2E 6A00                       		bpl.s	locret_E430
0000FE30 08E8 0001 0022             		bset	#1,$22(a0)
0000FE36                            
0000FE36                            locret_E430:
0000FE36 4E75                       		rts	
0000FE38                            ; ===========================================================================
0000FE38                            ; lavaball type	04 flies up until it hits the ceiling
0000FE38                            
0000FE38                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FE38 08E8 0001 0022             		bset	#1,$22(a0)
0000FE3E 6100 0000                  		bsr.w	ObjHitCeiling
0000FE42 4A41                       		tst.w	d1
0000FE44 6A00                       		bpl.s	locret_E452
0000FE46 117C 0008 0028             		move.b	#8,$28(a0)
0000FE4C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE52 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FE58                            
0000FE58                            locret_E452:
0000FE58 4E75                       		rts	
0000FE5A                            ; ===========================================================================
0000FE5A                            ; lavaball type	05 falls down until it hits the	floor
0000FE5A                            
0000FE5A                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FE5A 08A8 0001 0022             		bclr	#1,$22(a0)
0000FE60 6100 0000                  		bsr.w	ObjHitFloor
0000FE64 4A41                       		tst.w	d1
0000FE66 6A00                       		bpl.s	locret_E474
0000FE68 117C 0008 0028             		move.b	#8,$28(a0)
0000FE6E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE74 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FE7A                            
0000FE7A                            locret_E474:
0000FE7A 4E75                       		rts	
0000FE7C                            ; ===========================================================================
0000FE7C                            ; lavaball types 06-07 move sideways
0000FE7C                            
0000FE7C                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FE7C 08E8 0000 0022             		bset	#0,$22(a0)
0000FE82 76F8                       		moveq	#-8,d3
0000FE84 6100 0000                  		bsr.w	ObjHitWallLeft
0000FE88 4A41                       		tst.w	d1
0000FE8A 6A00                       		bpl.s	locret_E498
0000FE8C 117C 0008 0028             		move.b	#8,$28(a0)
0000FE92 117C 0003 001C             		move.b	#3,$1C(a0)
0000FE98 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FE9E                            
0000FE9E                            locret_E498:
0000FE9E 4E75                       		rts	
0000FEA0                            ; ===========================================================================
0000FEA0                            
0000FEA0                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FEA0 08A8 0000 0022             		bclr	#0,$22(a0)
0000FEA6 7608                       		moveq	#8,d3
0000FEA8 6100 0000                  		bsr.w	ObjHitWallRight
0000FEAC 4A41                       		tst.w	d1
0000FEAE 6A00                       		bpl.s	locret_E4BC
0000FEB0 117C 0008 0028             		move.b	#8,$28(a0)
0000FEB6 117C 0003 001C             		move.b	#3,$1C(a0)
0000FEBC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FEC2                            
0000FEC2                            locret_E4BC:
0000FEC2 4E75                       		rts	
0000FEC4                            ; ===========================================================================
0000FEC4                            
0000FEC4                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FEC4 4E75                       		rts	
0000FEC6                            ; ===========================================================================
0000FEC6                            
0000FEC6                            Obj14_Delete:				; XREF: Obj14_Index
0000FEC6 6000 F184                  		bra.w	DeleteObject
0000FECA                            ; ===========================================================================
0000FECA                            Ani_obj14:
0000FECA                            	include "_anim\obj14.asm"
0000FECA                            ; ---------------------------------------------------------------------------
0000FECA                            ; Animation script - lava balls
0000FECA                            ; ---------------------------------------------------------------------------
0000FECA 0000                       		dc.w byte_E4CC-Ani_obj14
0000FECC 0000                       		dc.w byte_E4D2-Ani_obj14
0000FECE 0000                       		dc.w byte_E4D6-Ani_obj14
0000FED0 0000                       		dc.w byte_E4DC-Ani_obj14
0000FED2 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FED8 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FEDC 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FEE2 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FEE6                            		even
0000FEE6                            		even
0000FEE6                            
0000FEE6                            ; ===========================================================================
0000FEE6                            ; ---------------------------------------------------------------------------
0000FEE6                            ; Object 6D - flame thrower (SBZ)
0000FEE6                            ; ---------------------------------------------------------------------------
0000FEE6                            
0000FEE6                            Obj6D:					; XREF: Obj_Index
0000FEE6 7000                       		moveq	#0,d0
0000FEE8 1028 0024                  		move.b	$24(a0),d0
0000FEEC 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FEF0 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FEF4                            ; ===========================================================================
0000FEF4 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FEF6 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FEF8                            ; ===========================================================================
0000FEF8                            
0000FEF8                            Obj6D_Main:				; XREF: Obj6D_Index
0000FEF8 5428 0024                  		addq.b	#2,$24(a0)
0000FEFC 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FF04 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FF0A 0028 0004 0001             		ori.b	#4,1(a0)
0000FF10 117C 0001 0018             		move.b	#1,$18(a0)
0000FF16 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FF1C 117C 000C 0019             		move.b	#$C,$19(a0)
0000FF22 1028 0028                  		move.b	$28(a0),d0
0000FF26 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FF2A D040                       		add.w	d0,d0		; multiply by 2
0000FF2C 3140 0030                  		move.w	d0,$30(a0)
0000FF30 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FF34 1028 0028                  		move.b	$28(a0),d0
0000FF38 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FF3C EB48                       		lsl.w	#5,d0		; multiply by $20
0000FF3E 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FF42 117C 000A 0036             		move.b	#$A,$36(a0)
0000FF48 0828 0001 0022             		btst	#1,$22(a0)
0000FF4E 6700                       		beq.s	Obj6D_Action
0000FF50 117C 0002 001C             		move.b	#2,$1C(a0)
0000FF56 117C 0015 0036             		move.b	#$15,$36(a0)
0000FF5C                            
0000FF5C                            Obj6D_Action:				; XREF: Obj6D_Index
0000FF5C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FF60 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FF62 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FF68 0868 0000 001C             		bchg	#0,$1C(a0)
0000FF6E 6700                       		beq.s	loc_E57A
0000FF70 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FF76 303C 00B3                  		move.w	#$B3,d0
0000FF7A 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play flame sound
0000FF80                            
0000FF80                            loc_E57A:
0000FF80 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FF86 6100 C184                  		bsr.w	AnimateSprite
0000FF8A 117C 0000 0020             		move.b	#0,$20(a0)
0000FF90 1028 0036                  		move.b	$36(a0),d0
0000FF94 B028 001A                  		cmp.b	$1A(a0),d0
0000FF98 6600                       		bne.s	Obj6D_ChkDel
0000FF9A 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FFA0                            
0000FFA0                            Obj6D_ChkDel:
0000FFA0 3028 0008                  		move.w	8(a0),d0
0000FFA4 0240 FF80                  		andi.w	#$FF80,d0
0000FFA8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FFAC 0441 0080                  		subi.w	#$80,d1
0000FFB0 0241 FF80                  		andi.w	#$FF80,d1
0000FFB4 9041                       		sub.w	d1,d0
0000FFB6 0C40 0280                  		cmpi.w	#$280,d0
0000FFBA 6200 F090                  		bhi.w	DeleteObject
0000FFBE 6000 F050                  		bra.w	DisplaySprite
0000FFC2                            ; ===========================================================================
0000FFC2                            Ani_obj6D:
0000FFC2                            	include "_anim\obj6D.asm"
0000FFC2                            ; ---------------------------------------------------------------------------
0000FFC2                            ; Animation script - flamethrower (SBZ)
0000FFC2                            ; ---------------------------------------------------------------------------
0000FFC2 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FFC4 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FFC6 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FFC8 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FFCA 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FFD8 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FFE2 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FFF0 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FFFA                            		even
0000FFFA                            		even
0000FFFA                            
0000FFFA                            ; ---------------------------------------------------------------------------
0000FFFA                            ; Sprite mappings - flame thrower (SBZ)
0000FFFA                            ; ---------------------------------------------------------------------------
0000FFFA                            Map_obj6D:
0000FFFA                            	include "_maps\obj6D.asm"
0000FFFA                            ; ---------------------------------------------------------------------------
0000FFFA                            ; Sprite mappings - flame thrower (SBZ)
0000FFFA                            ; ---------------------------------------------------------------------------
0000FFFA 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FFFE 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00010002 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
00010006 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0001000A 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0001000E 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00010012 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
00010016 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0001001A 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0001001E 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
00010022 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
00010026 01                         byte_E620:	dc.b 1
00010027 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001002C 02                         byte_E626:	dc.b 2
0001002D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010032 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010037 02                         byte_E631:	dc.b 2
00010038 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001003D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010042 03                         byte_E63C:	dc.b 3
00010043 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010048 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001004D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010052 03                         byte_E64C:	dc.b 3
00010053 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010058 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001005D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010062 04                         byte_E65C:	dc.b 4
00010063 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010068 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001006D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010072 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010077 04                         byte_E671:	dc.b 4
00010078 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001007D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010082 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010087 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001008C 05                         byte_E686:	dc.b 5
0001008D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010092 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010097 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001009C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100A1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100A6 05                         byte_E6A0:	dc.b 5
000100A7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000100AC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000100B1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000100B6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000100BB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100C0 06                         byte_E6BA:	dc.b 6
000100C1 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000100C6 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000100CB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000100D0 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000100D5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100DA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100DF 06                         byte_E6D9:	dc.b 6
000100E0 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000100E5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000100EA 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000100EF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000100F4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000100F9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100FE 01                         byte_E6F8:	dc.b 1
000100FF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010104 02                         byte_E6FE:	dc.b 2
00010105 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001010A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001010F 02                         byte_E709:	dc.b 2
00010110 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010115 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001011A 03                         byte_E714:	dc.b 3
0001011B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010120 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010125 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001012A 03                         byte_E724:	dc.b 3
0001012B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010130 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010135 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001013A 04                         byte_E734:	dc.b 4
0001013B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010140 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010145 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001014A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001014F 04                         byte_E749:	dc.b 4
00010150 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010155 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001015A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001015F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010164 05                         byte_E75E:	dc.b 5
00010165 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001016A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001016F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010174 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010179 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001017E 05                         byte_E778:	dc.b 5
0001017F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010184 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010189 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001018E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010193 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010198 06                         byte_E792:	dc.b 6
00010199 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001019E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000101A3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000101A8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000101AD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101B2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101B7 06                         byte_E7B1:	dc.b 6
000101B8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000101BD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000101C2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000101C7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101CC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101D1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101D6                            		even
000101D6                            		even
000101D6                            
000101D6                            ; ===========================================================================
000101D6                            ; ---------------------------------------------------------------------------
000101D6                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000101D6                            ; ---------------------------------------------------------------------------
000101D6                            
000101D6                            Obj46:					; XREF: Obj_Index
000101D6 7000                       		moveq	#0,d0
000101D8 1028 0024                  		move.b	$24(a0),d0
000101DC 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
000101E0 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
000101E4                            ; ===========================================================================
000101E4 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
000101E6 0000                       		dc.w Obj46_Action-Obj46_Index
000101E8                            ; ===========================================================================
000101E8                            
000101E8                            Obj46_Main:				; XREF: Obj46_Index
000101E8 5428 0024                  		addq.b	#2,$24(a0)
000101EC 117C 000F 0016             		move.b	#$F,$16(a0)
000101F2 117C 000F 0017             		move.b	#$F,$17(a0)
000101F8 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00010200 317C 4000 0002             		move.w	#$4000,2(a0)
00010206 117C 0004 0001             		move.b	#4,1(a0)
0001020C 117C 0003 0018             		move.b	#3,$18(a0)
00010212 117C 0010 0019             		move.b	#$10,$19(a0)
00010218 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001021E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010224                            
00010224                            Obj46_Action:				; XREF: Obj46_Index
00010224 4A28 0001                  		tst.b	1(a0)
00010228 6A00                       		bpl.s	Obj46_ChkDel
0001022A 7000                       		moveq	#0,d0
0001022C 1028 0028                  		move.b	$28(a0),d0	; get object type
00010230 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010234 D040                       		add.w	d0,d0
00010236 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0001023A 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0001023E 323C 001B                  		move.w	#$1B,d1
00010242 343C 0010                  		move.w	#$10,d2
00010246 363C 0011                  		move.w	#$11,d3
0001024A 3828 0008                  		move.w	8(a0),d4
0001024E 6100 0000                  		bsr.w	SolidObject
00010252                            
00010252                            Obj46_ChkDel:
00010252 6100 EDBC                  		bsr.w	DisplaySprite
00010256 3028 0008                  		move.w	8(a0),d0
0001025A 0240 FF80                  		andi.w	#$FF80,d0
0001025E 3238 F700                  		move.w	($FFFFF700).w,d1
00010262 0441 0080                  		subi.w	#$80,d1
00010266 0241 FF80                  		andi.w	#$FF80,d1
0001026A 9041                       		sub.w	d1,d0
0001026C 0C40 0280                  		cmpi.w	#$280,d0
00010270 6200 EDDA                  		bhi.w	DeleteObject
00010274 4E75                       		rts	
00010276                            ; ===========================================================================
00010276 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00010278 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0001027A 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0001027C 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0001027E 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00010280                            ; ===========================================================================
00010280                            
00010280                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00010280 4E75                       		rts	
00010282                            ; ===========================================================================
00010282                            
00010282                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010282 3038 D008                  		move.w	($FFFFD008).w,d0
00010286 9068 0008                  		sub.w	8(a0),d0
0001028A 6400                       		bcc.s	loc_E888
0001028C 4440                       		neg.w	d0
0001028E                            
0001028E                            loc_E888:
0001028E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010292 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010294 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001029A                            
0001029A                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001029A 7000                       		moveq	#0,d0
0001029C 1038 FE74                  		move.b	($FFFFFE74).w,d0
000102A0 0828 0003 0028             		btst	#3,$28(a0)
000102A6 6700                       		beq.s	loc_E8A8
000102A8 4440                       		neg.w	d0
000102AA 0640 0010                  		addi.w	#$10,d0
000102AE                            
000102AE                            loc_E8A8:
000102AE 3228 0030                  		move.w	$30(a0),d1
000102B2 9240                       		sub.w	d0,d1
000102B4 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
000102B8 4E75                       		rts	
000102BA                            ; ===========================================================================
000102BA                            
000102BA                            Obj46_Type03:				; XREF: Obj46_TypeIndex
000102BA 6100 ED2E                  		bsr.w	SpeedToPos
000102BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
000102C4 6100 0000                  		bsr.w	ObjHitFloor
000102C8 4A41                       		tst.w	d1		; has the block	hit the	floor?
000102CA 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000102CE D368 000C                  		add.w	d1,$C(a0)
000102D2 4268 0012                  		clr.w	$12(a0)		; stop the block falling
000102D6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000102DC 117C 0004 0028             		move.b	#4,$28(a0)
000102E2 3011                       		move.w	(a1),d0
000102E4 0240 03FF                  		andi.w	#$3FF,d0
000102E8 0C40 02E8                  		cmpi.w	#$2E8,d0
000102EC 6400                       		bcc.s	locret_E8EE
000102EE 117C 0000 0028             		move.b	#0,$28(a0)
000102F4                            
000102F4                            locret_E8EE:
000102F4 4E75                       		rts	
000102F6                            ; ===========================================================================
000102F6                            
000102F6                            Obj46_Type04:				; XREF: Obj46_TypeIndex
000102F6 7000                       		moveq	#0,d0
000102F8 1038 FE70                  		move.b	($FFFFFE70).w,d0
000102FC E648                       		lsr.w	#3,d0
000102FE 3228 0030                  		move.w	$30(a0),d1
00010302 9240                       		sub.w	d0,d1
00010304 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
00010308 4E75                       		rts	
0001030A                            ; ===========================================================================
0001030A                            ; ---------------------------------------------------------------------------
0001030A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001030A                            ; ---------------------------------------------------------------------------
0001030A                            Map_obj46:
0001030A                            	include "_maps\obj46.asm"
0001030A                            ; ---------------------------------------------------------------------------
0001030A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001030A                            ; ---------------------------------------------------------------------------
0001030A 0000                       		dc.w byte_E906-Map_obj46
0001030C 01                         byte_E906:	dc.b 1
0001030D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010312                            		even
00010312                            		even
00010312                            
00010312                            ; ===========================================================================
00010312                            ; ---------------------------------------------------------------------------
00010312                            ; Object 12 - lamp (SYZ)
00010312                            ; ---------------------------------------------------------------------------
00010312                            
00010312                            Obj12:					; XREF: Obj_Index
00010312 7000                       		moveq	#0,d0
00010314 1028 0024                  		move.b	$24(a0),d0
00010318 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0001031C 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00010320                            ; ===========================================================================
00010320 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00010322 0000                       		dc.w Obj12_Animate-Obj12_Index
00010324                            ; ===========================================================================
00010324                            
00010324                            Obj12_Main:				; XREF: Obj12_Index
00010324 5428 0024                  		addq.b	#2,$24(a0)
00010328 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00010330 317C 0000 0002             		move.w	#0,2(a0)
00010336 117C 0004 0001             		move.b	#4,1(a0)
0001033C 117C 0010 0019             		move.b	#$10,$19(a0)
00010342 117C 0006 0018             		move.b	#6,$18(a0)
00010348                            
00010348                            Obj12_Animate:				; XREF: Obj12_Index
00010348 5328 001E                  		subq.b	#1,$1E(a0)
0001034C 6A00                       		bpl.s	Obj12_ChkDel
0001034E 117C 0007 001E             		move.b	#7,$1E(a0)
00010354 5228 001A                  		addq.b	#1,$1A(a0)
00010358 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001035E 6500                       		bcs.s	Obj12_ChkDel
00010360 117C 0000 001A             		move.b	#0,$1A(a0)
00010366                            
00010366                            Obj12_ChkDel:
00010366 3028 0008                  		move.w	8(a0),d0
0001036A 0240 FF80                  		andi.w	#$FF80,d0
0001036E 3238 F700                  		move.w	($FFFFF700).w,d1
00010372 0441 0080                  		subi.w	#$80,d1
00010376 0241 FF80                  		andi.w	#$FF80,d1
0001037A 9041                       		sub.w	d1,d0
0001037C 0C40 0280                  		cmpi.w	#$280,d0
00010380 6200 ECCA                  		bhi.w	DeleteObject
00010384 6000 EC8A                  		bra.w	DisplaySprite
00010388                            ; ===========================================================================
00010388                            ; ---------------------------------------------------------------------------
00010388                            ; Sprite mappings - lamp (SYZ)
00010388                            ; ---------------------------------------------------------------------------
00010388                            Map_obj12:
00010388                            	include "_maps\obj12.asm"
00010388                            ; ---------------------------------------------------------------------------
00010388                            ; Sprite mappings - lamp (SYZ)
00010388                            ; ---------------------------------------------------------------------------
00010388 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0001038C 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010390 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010394 02                         byte_E98E:	dc.b 2
00010395 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001039A 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0001039F 02                         byte_E999:	dc.b 2
000103A0 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
000103A5 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
000103AA 02                         byte_E9A4:	dc.b 2
000103AB F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
000103B0 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
000103B5 02                         byte_E9AF:	dc.b 2
000103B6 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
000103BB 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
000103C0 02                         byte_E9BA:	dc.b 2
000103C1 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
000103C6 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
000103CB 02                         byte_E9C5:	dc.b 2
000103CC F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
000103D1 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
000103D6                            		even
000103D6                            		even
000103D6                            
000103D6                            ; ===========================================================================
000103D6                            ; ---------------------------------------------------------------------------
000103D6                            ; Object 47 - pinball bumper (SYZ)
000103D6                            ; ---------------------------------------------------------------------------
000103D6                            
000103D6                            Obj47:					; XREF: Obj_Index
000103D6 7000                       		moveq	#0,d0
000103D8 1028 0024                  		move.b	$24(a0),d0
000103DC 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
000103E0 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000103E4                            ; ===========================================================================
000103E4 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000103E6 0000                       		dc.w Obj47_Hit-Obj47_Index
000103E8                            ; ===========================================================================
000103E8                            
000103E8                            Obj47_Main:				; XREF: Obj47_Index
000103E8 5428 0024                  		addq.b	#2,$24(a0)
000103EC 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000103F4 317C 0380 0002             		move.w	#$380,2(a0)
000103FA 117C 0004 0001             		move.b	#4,1(a0)
00010400 117C 0010 0019             		move.b	#$10,$19(a0)
00010406 117C 0001 0018             		move.b	#1,$18(a0)
0001040C 117C 00D7 0020             		move.b	#$D7,$20(a0)
00010412                            
00010412                            Obj47_Hit:				; XREF: Obj47_Index
00010412 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
00010416 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0001041A 4228 0021                  		clr.b	$21(a0)
0001041E 43F8 D000                  		lea	($FFFFD000).w,a1
00010422 3228 0008                  		move.w	8(a0),d1
00010426 3428 000C                  		move.w	$C(a0),d2
0001042A 9269 0008                  		sub.w	8(a1),d1
0001042E 9469 000C                  		sub.w	$C(a1),d2
00010432 4EB9 0000 2C7C             		jsr	(CalcAngle).l
00010438 4EB9 0000 29AE             		jsr	(CalcSine).l
0001043E C3FC F900                  		muls.w	#-$700,d1
00010442 E081                       		asr.l	#8,d1
00010444 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
00010448 C1FC F900                  		muls.w	#-$700,d0
0001044C E080                       		asr.l	#8,d0
0001044E 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
00010452 08E9 0001 0022             		bset	#1,$22(a1)
00010458 08A9 0004 0022             		bclr	#4,$22(a1)
0001045E 08A9 0005 0022             		bclr	#5,$22(a1)
00010464 4229 003C                  		clr.b	$3C(a1)
00010468 117C 0001 001C             		move.b	#1,$1C(a0)
0001046E 303C 00B4                  		move.w	#$B4,d0
00010472 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play bumper sound
00010478 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001047C 7000                       		moveq	#0,d0
0001047E 1028 0023                  		move.b	$23(a0),d0
00010482 6700                       		beq.s	Obj47_Score
00010484 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0001048A 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0001048C 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010490                            
00010490                            Obj47_Score:
00010490 7001                       		moveq	#1,d0
00010492 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00010498 6100 EFFC                  		bsr.w	SingleObjLoad
0001049C 6600                       		bne.s	Obj47_Display
0001049E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000104A2 3368 0008 0008             		move.w	8(a0),8(a1)
000104A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000104AE 137C 0004 001A             		move.b	#4,$1A(a1)
000104B4                            
000104B4                            Obj47_Display:
000104B4 43F9 0000 0000             		lea	(Ani_obj47).l,a1
000104BA 6100 BC50                  		bsr.w	AnimateSprite
000104BE 3028 0008                  		move.w	8(a0),d0
000104C2 0240 FF80                  		andi.w	#$FF80,d0
000104C6 3238 F700                  		move.w	($FFFFF700).w,d1
000104CA 0441 0080                  		subi.w	#$80,d1
000104CE 0241 FF80                  		andi.w	#$FF80,d1
000104D2 9041                       		sub.w	d1,d0
000104D4 0C40 0280                  		cmpi.w	#$280,d0
000104D8 6200                       		bhi.s	Obj47_ChkHit
000104DA 6000 EB34                  		bra.w	DisplaySprite
000104DE                            ; ===========================================================================
000104DE                            
000104DE                            Obj47_ChkHit:				; XREF: Obj47_Display
000104DE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000104E2 7000                       		moveq	#0,d0
000104E4 1028 0023                  		move.b	$23(a0),d0
000104E8 6700                       		beq.s	Obj47_Delete
000104EA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000104F0                            
000104F0                            Obj47_Delete:
000104F0 6000 EB5A                  		bra.w	DeleteObject
000104F4                            ; ===========================================================================
000104F4                            Ani_obj47:
000104F4                            	include "_anim\obj47.asm"
000104F4                            ; ---------------------------------------------------------------------------
000104F4                            ; Animation script - flamethrower (SBZ)
000104F4                            ; ---------------------------------------------------------------------------
000104F4 0000                       		dc.w byte_EAF4-Ani_obj47
000104F6 0000                       		dc.w byte_EAF8-Ani_obj47
000104F8 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
000104FC 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00010504                            		even
00010504                            		even
00010504                            
00010504                            ; ---------------------------------------------------------------------------
00010504                            ; Sprite mappings - pinball bumper (SYZ)
00010504                            ; ---------------------------------------------------------------------------
00010504                            Map_obj47:
00010504                            	include "_maps\obj47.asm"
00010504                            ; ---------------------------------------------------------------------------
00010504                            ; Sprite mappings - pinball bumper (SYZ)
00010504                            ; ---------------------------------------------------------------------------
00010504 0000                       		dc.w byte_EB06-Map_obj47
00010506 0000                       		dc.w byte_EB11-Map_obj47
00010508 0000                       		dc.w byte_EB1C-Map_obj47
0001050A 02                         byte_EB06:	dc.b 2
0001050B F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010510 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010515 02                         byte_EB11:	dc.b 2
00010516 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0001051B F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010520 02                         byte_EB1C:	dc.b 2
00010521 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010526 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0001052C 00                         		even
0001052C 00                         		even
0001052C                            
0001052C                            ; ===========================================================================
0001052C                            ; ---------------------------------------------------------------------------
0001052C                            ; Object 0D - signpost at the end of a level
0001052C                            ; ---------------------------------------------------------------------------
0001052C                            
0001052C                            Obj0D:					; XREF: Obj_Index
0001052C 7000                       		moveq	#0,d0
0001052E 1028 0024                  		move.b	$24(a0),d0
00010532 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00010536 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0001053A 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00010540 6100 BBCA                  		bsr.w	AnimateSprite
00010544 6100 EACA                  		bsr.w	DisplaySprite
00010548 3028 0008                  		move.w	8(a0),d0
0001054C 0240 FF80                  		andi.w	#$FF80,d0
00010550 3238 F700                  		move.w	($FFFFF700).w,d1
00010554 0441 0080                  		subi.w	#$80,d1
00010558 0241 FF80                  		andi.w	#$FF80,d1
0001055C 9041                       		sub.w	d1,d0
0001055E 0C40 0280                  		cmpi.w	#$280,d0
00010562 6200 EAE8                  		bhi.w	DeleteObject
00010566 4E75                       		rts	
00010568                            ; ===========================================================================
00010568 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0001056A 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0001056C 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0001056E 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00010570 0000                       		dc.w locret_ED1A-Obj0D_Index
00010572                            ; ===========================================================================
00010572                            
00010572                            Obj0D_Main:				; XREF: Obj0D_Index
00010572 5428 0024                  		addq.b	#2,$24(a0)
00010576 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0001057E 317C 0680 0002             		move.w	#$680,2(a0)
00010584 117C 0004 0001             		move.b	#4,1(a0)
0001058A 117C 0018 0019             		move.b	#$18,$19(a0)
00010590 117C 0004 0018             		move.b	#4,$18(a0)
00010596                            
00010596                            Obj0D_Touch:				; XREF: Obj0D_Index
00010596 3038 D008                  		move.w	($FFFFD008).w,d0
0001059A 9068 0008                  		sub.w	8(a0),d0
0001059E 6500                       		bcs.s	locret_EBBA
000105A0 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
000105A4 6400                       		bcc.s	locret_EBBA	; if not, branch
000105A6 303C 00CF                  		move.w	#$CF,d0
000105AA 4EB9 0000 12C2             		jsr	(PlaySound).l	; play signpost	sound
000105B0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000105B4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
000105BA 5428 0024                  		addq.b	#2,$24(a0)
000105BE                            
000105BE                            locret_EBBA:
000105BE 4E75                       		rts	
000105C0                            ; ===========================================================================
000105C0                            
000105C0                            Obj0D_Spin:				; XREF: Obj0D_Index
000105C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
000105C4 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
000105C6 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
000105CC 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
000105D0 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
000105D6 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
000105D8 5428 0024                  		addq.b	#2,$24(a0)
000105DC                            
000105DC                            Obj0D_Sparkle:
000105DC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000105E0 6A00                       		bpl.s	locret_EC42	; if time remains, branch
000105E2 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
000105E8 7000                       		moveq	#0,d0
000105EA 1028 0034                  		move.b	$34(a0),d0
000105EE 5428 0034                  		addq.b	#2,$34(a0)
000105F2 0228 000E 0034             		andi.b	#$E,$34(a0)
000105F8 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000105FC 6100 EE98                  		bsr.w	SingleObjLoad
00010600 6600                       		bne.s	locret_EC42
00010602 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00010606 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0001060C 101A                       		move.b	(a2)+,d0
0001060E 4880                       		ext.w	d0
00010610 D068 0008                  		add.w	8(a0),d0
00010614 3340 0008                  		move.w	d0,8(a1)
00010618 101A                       		move.b	(a2)+,d0
0001061A 4880                       		ext.w	d0
0001061C D068 000C                  		add.w	$C(a0),d0
00010620 3340 000C                  		move.w	d0,$C(a1)
00010624 237C 0000 B980 0004        		move.l	#Map_obj25,4(a1)
0001062C 337C 27B2 0002             		move.w	#$27B2,2(a1)
00010632 137C 0004 0001             		move.b	#4,1(a1)
00010638 137C 0002 0018             		move.b	#2,$18(a1)
0001063E 137C 0008 0019             		move.b	#8,$19(a1)
00010644                            
00010644                            locret_EC42:
00010644 4E75                       		rts	
00010646                            ; ===========================================================================
00010646 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010648 0808                       		dc.b	8,   8
0001064A F000                       		dc.b -$10,   0
0001064C 18F8                       		dc.b  $18,  -8
0001064E 00F8                       		dc.b	0,  -8
00010650 1000                       		dc.b  $10,   0
00010652 E808                       		dc.b -$18,   8
00010654 1810                       		dc.b  $18, $10
00010656                            ; ===========================================================================
00010656                            
00010656                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00010656 4A78 FE08                  		tst.w	($FFFFFE08).w		; is debug mode	on?
0001065A 6600 0000                  		bne.w	locret_ECEE		; if yes, branch
0001065E 0838 0001 D022             		btst	#1,($FFFFD022).w	; is Sonic in the air?
00010664 6600                       		bne.s	loc_EC70		; if yes, branch
00010666 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w	; lock	controls
0001066C 31FC 0800 F602             		move.w	#(Right)<<8,(SonicControl) ; make Sonic run to the right
00010672                            
00010672                            loc_EC70:
00010672 4A38 D000                  		tst.b	($FFFFD000).w
00010676 6700                       		beq.s	loc_EC86
00010678 3038 D008                  		move.w	($FFFFD008).w,d0
0001067C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010680 0641 0128                  		addi.w	#$128,d1
00010684 B041                       		cmp.w	d1,d0
00010686 6500                       		bcs.s	locret_ECEE
00010688                            
00010688                            loc_EC86:
00010688 5428 0024                  		addq.b	#2,$24(a0)
0001068C                            
0001068C                            ; ---------------------------------------------------------------------------
0001068C                            ; Subroutine to	set up bonuses at the end of an	act
0001068C                            ; ---------------------------------------------------------------------------
0001068C                            
0001068C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001068C                            
0001068C                            
0001068C                            GotThroughAct:				; XREF: Obj3E_EndAct
0001068C 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010690 6600                       		bne.s	locret_ECEE
00010692 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010698 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001069C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000106A0 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
000106A6 7010                       		moveq	#$10,d0
000106A8 4EB9 0000 1568             		jsr	(LoadPLC2).l	; load title card patterns
000106AE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
000106B4 7000                       		moveq	#0,d0
000106B6 1038 FE23                  		move.b	($FFFFFE23).w,d0
000106BA C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000106BE 7200                       		moveq	#0,d1
000106C0 1238 FE24                  		move.b	($FFFFFE24).w,d1
000106C4 D041                       		add.w	d1,d0		; add up your time
000106C6 80FC 000F                  		divu.w	#15,d0		; divide by 15
000106CA 7214                       		moveq	#$14,d1
000106CC B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000106CE 6500                       		bcs.s	loc_ECD0	; if not, branch
000106D0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000106D2                            
000106D2                            loc_ECD0:
000106D2 D040                       		add.w	d0,d0
000106D4 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000106DA 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000106DE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000106E2 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000106E6 303C 0099                  		move.w	#$99,d0
000106EA 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000106F0                            
000106F0                            locret_ECEE:
000106F0 4E75                       		rts	
000106F2                            ; End of function GotThroughAct
000106F2                            
000106F2                            ; ===========================================================================
000106F2 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010706 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001071C                            ; ===========================================================================
0001071C                            
0001071C                            locret_ED1A:				; XREF: Obj0D_Index
0001071C 4E75                       		rts	
0001071E                            ; ===========================================================================
0001071E                            Ani_obj0D:
0001071E                            	include "_anim\obj0D.asm"
0001071E                            ; ---------------------------------------------------------------------------
0001071E                            ; Animation script - signpost
0001071E                            ; ---------------------------------------------------------------------------
0001071E 0000                       		dc.w byte_ED24-Ani_obj0D
00010720 0000                       		dc.w byte_ED28-Ani_obj0D
00010722 0000                       		dc.w byte_ED2E-Ani_obj0D
00010724 0000                       		dc.w byte_ED34-Ani_obj0D
00010726 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0001072A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00010730 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00010736 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0001073A 00                         		even
0001073A 00                         		even
0001073A                            
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            ; Sprite mappings - signpost
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            Map_obj0D:
0001073A                            	include "_maps\obj0D.asm"
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            ; Sprite mappings - signpost
0001073A                            ; ---------------------------------------------------------------------------
0001073A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0001073E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00010742 0000                       		dc.w byte_ED73-Map_obj0D
00010744 03                         byte_ED42:	dc.b 3
00010745 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0001074A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0001074F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010754 02                         byte_ED52:	dc.b 2
00010755 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0001075A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001075F 02                         byte_ED5D:	dc.b 2
00010760 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00010765 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001076A 02                         byte_ED68:	dc.b 2
0001076B F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010770 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010775 03                         byte_ED73:	dc.b 3
00010776 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0001077B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010780 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010786 00                         		even
00010786 00                         		even
00010786                            
00010786                            ; ===========================================================================
00010786                            ; ---------------------------------------------------------------------------
00010786                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010786                            ; ---------------------------------------------------------------------------
00010786                            
00010786                            Obj4C:					; XREF: Obj_Index
00010786 7000                       		moveq	#0,d0
00010788 1028 0024                  		move.b	$24(a0),d0
0001078C 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010790 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010794 6000 0000                  		bra.w	Obj4D_ChkDel
00010798                            ; ===========================================================================
00010798 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001079A 0000                       		dc.w loc_EDCC-Obj4C_Index
0001079C 0000                       		dc.w loc_EE3E-Obj4C_Index
0001079E 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
000107A0 0000                       		dc.w Obj4C_Display-Obj4C_Index
000107A2 0000                       		dc.w Obj4C_Delete-Obj4C_Index
000107A4                            ; ===========================================================================
000107A4                            
000107A4                            Obj4C_Main:				; XREF: Obj4C_Index
000107A4 5428 0024                  		addq.b	#2,$24(a0)
000107A8 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
000107B0 317C E3A8 0002             		move.w	#$E3A8,2(a0)
000107B6 117C 0004 0001             		move.b	#4,1(a0)
000107BC 117C 0001 0018             		move.b	#1,$18(a0)
000107C2 117C 0038 0019             		move.b	#$38,$19(a0)
000107C8 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
000107CE                            
000107CE                            loc_EDCC:				; XREF: Obj4C_Index
000107CE 5368 0032                  		subq.w	#1,$32(a0)
000107D2 6A00                       		bpl.s	locret_EDF0
000107D4 3168 0034 0032             		move.w	$34(a0),$32(a0)
000107DA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000107DE 3228 000C                  		move.w	$C(a0),d1
000107E2 B041                       		cmp.w	d1,d0
000107E4 6400                       		bcc.s	locret_EDF0
000107E6 0441 0170                  		subi.w	#$170,d1
000107EA B041                       		cmp.w	d1,d0
000107EC 6500                       		bcs.s	locret_EDF0
000107EE 5428 0024                  		addq.b	#2,$24(a0)
000107F2                            
000107F2                            locret_EDF0:
000107F2 4E75                       		rts	
000107F4                            ; ===========================================================================
000107F4                            
000107F4                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000107F4 5428 0024                  		addq.b	#2,$24(a0)
000107F8 6100 ECB2                  		bsr.w	SingleObjLoad2
000107FC 6600                       		bne.s	loc_EE18
000107FE 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00010802 3368 0008 0008             		move.w	8(a0),8(a1)
00010808 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001080E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010814 2348 003C                  		move.l	a0,$3C(a1)
00010818                            
00010818                            loc_EE18:
00010818 117C 0001 001C             		move.b	#1,$1C(a0)
0001081E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010822 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00010824 117C 0004 001C             		move.b	#4,$1C(a0)
0001082A 6000                       		bra.s	Obj4C_Display
0001082C                            ; ===========================================================================
0001082C                            
0001082C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0001082C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00010830 08E9 0001 0022             		bset	#1,$22(a1)
00010836 337C FA80 0012             		move.w	#-$580,$12(a1)
0001083C 6000                       		bra.s	Obj4C_Display
0001083E                            ; ===========================================================================
0001083E                            
0001083E                            loc_EE3E:				; XREF: Obj4C_Index
0001083E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010842 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010844 5428 0024                  		addq.b	#2,$24(a0)
00010848 4E75                       		rts	
0001084A                            ; ===========================================================================
0001084A                            
0001084A                            Obj4C_Display:				; XREF: Obj4C_Index
0001084A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010850 6100 B8BA                  		bsr.w	AnimateSprite
00010854 6100 E7BA                  		bsr.w	DisplaySprite
00010858 4E75                       		rts	
0001085A                            ; ===========================================================================
0001085A                            
0001085A                            Obj4C_Delete:				; XREF: Obj4C_Index
0001085A 117C 0000 001C             		move.b	#0,$1C(a0)
00010860 117C 0002 0024             		move.b	#2,$24(a0)
00010866 4A28 0028                  		tst.b	$28(a0)
0001086A 6700 E7E0                  		beq.w	DeleteObject
0001086E 4E75                       		rts	
00010870                            ; ===========================================================================
00010870                            ; ---------------------------------------------------------------------------
00010870                            ; Object 4D - lava geyser / lavafall (MZ)
00010870                            ; ---------------------------------------------------------------------------
00010870                            
00010870                            Obj4D:					; XREF: Obj_Index
00010870 7000                       		moveq	#0,d0
00010872 1028 0024                  		move.b	$24(a0),d0
00010876 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0001087A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0001087E 6000 E790                  		bra.w	DisplaySprite
00010882                            ; ===========================================================================
00010882 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010884 0000                       		dc.w Obj4D_Action-Obj4D_Index
00010886 0000                       		dc.w loc_EFFC-Obj4D_Index
00010888 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0001088A                            
0001088A FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0001088E                            ; ===========================================================================
0001088E                            
0001088E                            Obj4D_Main:				; XREF: Obj4D_Index
0001088E 5428 0024                  		addq.b	#2,$24(a0)
00010892 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010898 4A28 0028                  		tst.b	$28(a0)
0001089C 6700                       		beq.s	loc_EEA4
0001089E 0468 0250 000C             		subi.w	#$250,$C(a0)
000108A4                            
000108A4                            loc_EEA4:
000108A4 7000                       		moveq	#0,d0
000108A6 1028 0028                  		move.b	$28(a0),d0
000108AA D040                       		add.w	d0,d0
000108AC 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
000108B2 2248                       		movea.l	a0,a1
000108B4 7201                       		moveq	#1,d1
000108B6 6100                       		bsr.s	Obj4D_MakeLava
000108B8 6000                       		bra.s	loc_EF10
000108BA                            ; ===========================================================================
000108BA                            
000108BA                            Obj4D_Loop:
000108BA 6100 EBF0                  		bsr.w	SingleObjLoad2
000108BE 6600                       		bne.s	loc_EF0A
000108C0                            
000108C0                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000108C0 12BC 004D                  		move.b	#$4D,0(a1)
000108C4 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000108CC 337C 63A8 0002             		move.w	#$63A8,2(a1)
000108D2 137C 0004 0001             		move.b	#4,1(a1)
000108D8 137C 0020 0019             		move.b	#$20,$19(a1)
000108DE 3368 0008 0008             		move.w	8(a0),8(a1)
000108E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000108EA 1368 0028 0028             		move.b	$28(a0),$28(a1)
000108F0 137C 0001 0018             		move.b	#1,$18(a1)
000108F6 137C 0005 001C             		move.b	#5,$1C(a1)
000108FC 4A28 0028                  		tst.b	$28(a0)
00010900 6700                       		beq.s	loc_EF0A
00010902 137C 0002 001C             		move.b	#2,$1C(a1)
00010908                            
00010908                            loc_EF0A:
00010908 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0001090C 4E75                       		rts	
0001090E                            ; ===========================================================================
0001090E                            
0001090E                            loc_EF10:				; XREF: Obj4D_Main
0001090E 0669 0060 000C             		addi.w	#$60,$C(a1)
00010914 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001091A 0669 0060 0030             		addi.w	#$60,$30(a1)
00010920 137C 0093 0020             		move.b	#$93,$20(a1)
00010926 137C 0080 0016             		move.b	#$80,$16(a1)
0001092C 08E9 0004 0001             		bset	#4,1(a1)
00010932 5829 0024                  		addq.b	#4,$24(a1)
00010936 2348 003C                  		move.l	a0,$3C(a1)
0001093A 4A28 0028                  		tst.b	$28(a0)
0001093E 6700                       		beq.s	Obj4D_PlaySnd
00010940 7200                       		moveq	#0,d1
00010942 6100 FF76                  		bsr.w	Obj4D_Loop
00010946 5429 0024                  		addq.b	#2,$24(a1)
0001094A 08E9 0004 0002             		bset	#4,2(a1)
00010950 0669 0100 000C             		addi.w	#$100,$C(a1)
00010956 137C 0000 0018             		move.b	#0,$18(a1)
0001095C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010962 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010968 117C 0000 0028             		move.b	#0,$28(a0)
0001096E                            
0001096E                            Obj4D_PlaySnd:
0001096E 303C 00C8                  		move.w	#$C8,d0
00010972 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play flame sound
00010978                            
00010978                            Obj4D_Action:				; XREF: Obj4D_Index
00010978 7000                       		moveq	#0,d0
0001097A 1028 0028                  		move.b	$28(a0),d0
0001097E D040                       		add.w	d0,d0
00010980 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010984 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010988 6100 E660                  		bsr.w	SpeedToPos
0001098C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010992 6100 B778                  		bsr.w	AnimateSprite
00010996                            
00010996                            Obj4D_ChkDel:				; XREF: Obj4C
00010996 3028 0008                  		move.w	8(a0),d0
0001099A 0240 FF80                  		andi.w	#$FF80,d0
0001099E 3238 F700                  		move.w	($FFFFF700).w,d1
000109A2 0441 0080                  		subi.w	#$80,d1
000109A6 0241 FF80                  		andi.w	#$FF80,d1
000109AA 9041                       		sub.w	d1,d0
000109AC 0C40 0280                  		cmpi.w	#$280,d0
000109B0 6200 E69A                  		bhi.w	DeleteObject
000109B4 4E75                       		rts	
000109B6                            ; ===========================================================================
000109B6 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
000109B8 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
000109BA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000109C0 3028 0030                  		move.w	$30(a0),d0
000109C4 B068 000C                  		cmp.w	$C(a0),d0
000109C8 6400                       		bcc.s	locret_EFDA
000109CA 5828 0024                  		addq.b	#4,$24(a0)
000109CE 2268 003C                  		movea.l	$3C(a0),a1
000109D2 137C 0003 001C             		move.b	#3,$1C(a1)
000109D8                            
000109D8                            locret_EFDA:
000109D8 4E75                       		rts	
000109DA                            ; ===========================================================================
000109DA                            
000109DA                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000109DA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000109E0 3028 0030                  		move.w	$30(a0),d0
000109E4 B068 000C                  		cmp.w	$C(a0),d0
000109E8 6400                       		bcc.s	locret_EFFA
000109EA 5828 0024                  		addq.b	#4,$24(a0)
000109EE 2268 003C                  		movea.l	$3C(a0),a1
000109F2 137C 0001 001C             		move.b	#1,$1C(a1)
000109F8                            
000109F8                            locret_EFFA:
000109F8 4E75                       		rts	
000109FA                            ; ===========================================================================
000109FA                            
000109FA                            loc_EFFC:				; XREF: Obj4D_Index
000109FA 2268 003C                  		movea.l	$3C(a0),a1
000109FE 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010A04 6700 0000                  		beq.w	Obj4D_Delete
00010A08 3029 000C                  		move.w	$C(a1),d0
00010A0C 0640 0060                  		addi.w	#$60,d0
00010A10 3140 000C                  		move.w	d0,$C(a0)
00010A14 9068 0030                  		sub.w	$30(a0),d0
00010A18 4440                       		neg.w	d0
00010A1A 7208                       		moveq	#8,d1
00010A1C 0C40 0040                  		cmpi.w	#$40,d0
00010A20 6C00                       		bge.s	loc_F026
00010A22 720B                       		moveq	#$B,d1
00010A24                            
00010A24                            loc_F026:
00010A24 0C40 0080                  		cmpi.w	#$80,d0
00010A28 6F00                       		ble.s	loc_F02E
00010A2A 720E                       		moveq	#$E,d1
00010A2C                            
00010A2C                            loc_F02E:
00010A2C 5328 001E                  		subq.b	#1,$1E(a0)
00010A30 6A00                       		bpl.s	loc_F04C
00010A32 117C 0007 001E             		move.b	#7,$1E(a0)
00010A38 5228 001B                  		addq.b	#1,$1B(a0)
00010A3C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010A42 6500                       		bcs.s	loc_F04C
00010A44 117C 0000 001B             		move.b	#0,$1B(a0)
00010A4A                            
00010A4A                            loc_F04C:
00010A4A 1028 001B                  		move.b	$1B(a0),d0
00010A4E D001                       		add.b	d1,d0
00010A50 1140 001A                  		move.b	d0,$1A(a0)
00010A54 6000 FF40                  		bra.w	Obj4D_ChkDel
00010A58                            ; ===========================================================================
00010A58                            
00010A58                            Obj4D_Delete:				; XREF: Obj4D_Index
00010A58 6000 E5F2                  		bra.w	DeleteObject
00010A5C                            ; ===========================================================================
00010A5C                            ; ---------------------------------------------------------------------------
00010A5C                            ; Object 4E - advancing	wall of	lava (MZ)
00010A5C                            ; ---------------------------------------------------------------------------
00010A5C                            
00010A5C                            Obj4E:					; XREF: Obj_Index
00010A5C 7000                       		moveq	#0,d0
00010A5E 1028 0024                  		move.b	$24(a0),d0
00010A62 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010A66 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010A6A                            ; ===========================================================================
00010A6A 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010A6C 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010A6E 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010A70 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010A72 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010A74                            ; ===========================================================================
00010A74                            
00010A74                            Obj4E_Main:				; XREF: Obj4E_Index
00010A74 5828 0024                  		addq.b	#4,$24(a0)
00010A78 2248                       		movea.l	a0,a1
00010A7A 7201                       		moveq	#1,d1
00010A7C 6000                       		bra.s	Obj4E_Main2
00010A7E                            ; ===========================================================================
00010A7E                            
00010A7E                            Obj4E_Loop:
00010A7E 6100 EA2C                  		bsr.w	SingleObjLoad2
00010A82 6600                       		bne.s	loc_F0C8
00010A84                            
00010A84                            Obj4E_Main2:				; XREF: Obj4E_Main
00010A84 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010A88 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010A90 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010A96 137C 0004 0001             		move.b	#4,1(a1)
00010A9C 137C 0050 0019             		move.b	#$50,$19(a1)
00010AA2 3368 0008 0008             		move.w	8(a0),8(a1)
00010AA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010AAE 137C 0001 0018             		move.b	#1,$18(a1)
00010AB4 137C 0000 001C             		move.b	#0,$1C(a1)
00010ABA 137C 0094 0020             		move.b	#$94,$20(a1)
00010AC0 2348 003C                  		move.l	a0,$3C(a1)
00010AC4                            
00010AC4                            loc_F0C8:
00010AC4 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010AC8                            
00010AC8 5C29 0024                  		addq.b	#6,$24(a1)
00010ACC 137C 0004 001A             		move.b	#4,$1A(a1)
00010AD2                            
00010AD2                            Obj4E_Action:				; XREF: Obj4E_Index
00010AD2 3038 D008                  		move.w	($FFFFD008).w,d0
00010AD6 9068 0008                  		sub.w	8(a0),d0
00010ADA 6400                       		bcc.s	Obj4E_ChkSonic
00010ADC 4440                       		neg.w	d0
00010ADE                            
00010ADE                            Obj4E_ChkSonic:
00010ADE 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010AE2 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010AE4 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010AE8 9068 000C                  		sub.w	$C(a0),d0
00010AEC 6400                       		bcc.s	loc_F0F4
00010AEE 4440                       		neg.w	d0
00010AF0                            
00010AF0                            loc_F0F4:
00010AF0 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010AF4 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010AF6 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010AFC 6000                       		bra.s	Obj4E_Solid
00010AFE                            ; ===========================================================================
00010AFE                            
00010AFE                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010AFE 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010B02 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010B04 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010B0A 5528 0024                  		subq.b	#2,$24(a0)
00010B0E                            
00010B0E                            Obj4E_Solid:				; XREF: Obj4E_Index
00010B0E 323C 002B                  		move.w	#$2B,d1
00010B12 343C 0018                  		move.w	#$18,d2
00010B16 3602                       		move.w	d2,d3
00010B18 5243                       		addq.w	#1,d3
00010B1A 3828 0008                  		move.w	8(a0),d4
00010B1E 1028 0024                  		move.b	$24(a0),d0
00010B22 3F00                       		move.w	d0,-(sp)
00010B24 6100 0000                  		bsr.w	SolidObject
00010B28 301F                       		move.w	(sp)+,d0
00010B2A 1140 0024                  		move.b	d0,$24(a0)
00010B2E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010B34 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010B36 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010B3A 4228 0036                  		clr.b	$36(a0)
00010B3E                            
00010B3E                            Obj4E_Animate:
00010B3E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010B44 6100 B5C6                  		bsr.w	AnimateSprite
00010B48 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010B4E 6400                       		bcc.s	Obj4E_ChkDel
00010B50 6100 E498                  		bsr.w	SpeedToPos
00010B54                            
00010B54                            Obj4E_ChkDel:
00010B54 6100 E4BA                  		bsr.w	DisplaySprite
00010B58 4A28 0036                  		tst.b	$36(a0)
00010B5C 6600                       		bne.s	locret_F17E
00010B5E 3028 0008                  		move.w	8(a0),d0
00010B62 0240 FF80                  		andi.w	#$FF80,d0
00010B66 3238 F700                  		move.w	($FFFFF700).w,d1
00010B6A 0441 0080                  		subi.w	#$80,d1
00010B6E 0241 FF80                  		andi.w	#$FF80,d1
00010B72 9041                       		sub.w	d1,d0
00010B74 0C40 0280                  		cmpi.w	#$280,d0
00010B78 6200                       		bhi.s	Obj4E_ChkGone
00010B7A                            
00010B7A                            locret_F17E:
00010B7A 4E75                       		rts	
00010B7C                            ; ===========================================================================
00010B7C                            
00010B7C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010B7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B80 7000                       		moveq	#0,d0
00010B82 1028 0023                  		move.b	$23(a0),d0
00010B86 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010B8C 117C 0008 0024             		move.b	#8,$24(a0)
00010B92 4E75                       		rts	
00010B94                            ; ===========================================================================
00010B94                            
00010B94                            Obj4E_Move2:				; XREF: Obj4E_Index
00010B94 2268 003C                  		movea.l	$3C(a0),a1
00010B98 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010B9E 6700                       		beq.s	Obj4E_Delete
00010BA0 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010BA6 0468 0080 0008             		subi.w	#$80,8(a0)
00010BAC 6000 E462                  		bra.w	DisplaySprite
00010BB0                            ; ===========================================================================
00010BB0                            
00010BB0                            Obj4E_Delete:				; XREF: Obj4E_Index
00010BB0 6000 E49A                  		bra.w	DeleteObject
00010BB4                            ; ===========================================================================
00010BB4                            ; ---------------------------------------------------------------------------
00010BB4                            ; Object 54 - invisible	lava tag (MZ)
00010BB4                            ; ---------------------------------------------------------------------------
00010BB4                            
00010BB4                            Obj54:					; XREF: Obj_Index
00010BB4 7000                       		moveq	#0,d0
00010BB6 1028 0024                  		move.b	$24(a0),d0
00010BBA 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010BBE 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010BC2                            ; ===========================================================================
00010BC2 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010BC4 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010BC6                            
00010BC6 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010BCA                            ; ===========================================================================
00010BCA                            
00010BCA                            Obj54_Main:				; XREF: Obj54_Index
00010BCA 5428 0024                  		addq.b	#2,$24(a0)
00010BCE 7000                       		moveq	#0,d0
00010BD0 1028 0028                  		move.b	$28(a0),d0
00010BD4 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010BDA 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010BE2 117C 0084 0001             		move.b	#$84,1(a0)
00010BE8                            
00010BE8                            Obj54_ChkDel:				; XREF: Obj54_Index
00010BE8 3028 0008                  		move.w	8(a0),d0
00010BEC 0240 FF80                  		andi.w	#$FF80,d0
00010BF0 3238 F700                  		move.w	($FFFFF700).w,d1
00010BF4 0441 0080                  		subi.w	#$80,d1
00010BF8 0241 FF80                  		andi.w	#$FF80,d1
00010BFC 9041                       		sub.w	d1,d0
00010BFE 6B00 E44C                  		bmi.w	DeleteObject
00010C02 0C40 0280                  		cmpi.w	#$280,d0
00010C06 6200 E444                  		bhi.w	DeleteObject
00010C0A 4E75                       		rts	
00010C0C                            ; ===========================================================================
00010C0C                            ; ---------------------------------------------------------------------------
00010C0C                            ; Sprite mappings - invisible lava tag (MZ)
00010C0C                            ; ---------------------------------------------------------------------------
00010C0C                            Map_obj54:
00010C0C                            	include "_maps\obj54.asm"
00010C0C                            ; ---------------------------------------------------------------------------
00010C0C                            ; Sprite mappings - invisible lava tag (MZ)
00010C0C                            ; ---------------------------------------------------------------------------
00010C0C 0000                       		dc.w byte_F212-Map_obj54
00010C0E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010C10 00                         		even
00010C10 00                         		even
00010C10                            
00010C10                            Ani_obj4C:
00010C10                            	include "_anim\obj4C.asm"
00010C10                            ; ---------------------------------------------------------------------------
00010C10                            ; Animation script - geyser of lava (MZ)
00010C10                            ; ---------------------------------------------------------------------------
00010C10 0000                       		dc.w byte_F220-Ani_obj4C
00010C12 0000                       		dc.w byte_F22A-Ani_obj4C
00010C14 0000                       		dc.w byte_F22E-Ani_obj4C
00010C16 0000                       		dc.w byte_F232-Ani_obj4C
00010C18 0000                       		dc.w byte_F23A-Ani_obj4C
00010C1A 0000                       		dc.w byte_F23E-Ani_obj4C
00010C1C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010C26 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010C2A 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010C2E 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010C36 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010C3A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010C3E                            		even
00010C3E                            		even
00010C3E                            
00010C3E                            Ani_obj4E:
00010C3E                            	include "_anim\obj4E.asm"
00010C3E                            ; ---------------------------------------------------------------------------
00010C3E                            ; Animation script - advancing wall of lava (MZ)
00010C3E                            ; ---------------------------------------------------------------------------
00010C3E 0000                       		dc.w byte_F244-Ani_obj4E
00010C40 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010C46                            		even
00010C46                            		even
00010C46                            
00010C46                            ; ---------------------------------------------------------------------------
00010C46                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010C46                            ; ---------------------------------------------------------------------------
00010C46                            Map_obj4C:
00010C46                            	include "_maps\obj4C.asm"
00010C46                            ; ---------------------------------------------------------------------------
00010C46                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010C46                            ; ---------------------------------------------------------------------------
00010C46 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010C4A 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010C4E 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010C52 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010C56 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010C5A 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010C5E 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010C62 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010C66 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010C6A 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010C6E 02                         byte_F272:	dc.b 2
00010C6F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010C74 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010C79 02                         byte_F27D:	dc.b 2
00010C7A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010C7F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010C84 04                         byte_F288:	dc.b 4
00010C85 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010C8A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010C8F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010C94 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010C99 04                         byte_F29D:	dc.b 4
00010C9A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010C9F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010CA4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010CA9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010CAE 06                         byte_F2B2:	dc.b 6
00010CAF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010CB4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010CB9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010CBE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010CC3 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010CC8 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010CCD 06                         byte_F2D1:	dc.b 6
00010CCE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010CD3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010CD8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010CDD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010CE2 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010CE7 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010CEC 02                         byte_F2F0:	dc.b 2
00010CED E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010CF2 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010CF7 02                         byte_F2FB:	dc.b 2
00010CF8 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010CFD E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010D02 0A                         byte_F306:	dc.b $A
00010D03 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010D08 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010D0D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010D12 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010D17 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010D1C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010D21 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010D26 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010D2B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010D30 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010D35 0A                         byte_F339:	dc.b $A
00010D36 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010D3B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010D40 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010D45 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D4A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010D4F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010D54 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010D59 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010D5E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010D63 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010D68 0A                         byte_F36C:	dc.b $A
00010D69 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010D6E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010D73 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010D78 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010D7D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010D82 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010D87 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010D8C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010D91 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010D96 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010D9B 06                         byte_F39F:	dc.b 6
00010D9C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010DA1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010DA6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010DAB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010DB0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010DB5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010DBA 06                         byte_F3BE:	dc.b 6
00010DBB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010DC0 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010DC5 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010DCA B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010DCF D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010DD4 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010DD9 06                         byte_F3DD:	dc.b 6
00010DDA 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010DDF 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010DE4 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010DE9 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010DEE D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010DF3 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010DF8 10                         byte_F3FC:	dc.b $10
00010DF9 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010DFE 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010E03 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010E08 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010E0D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010E12 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010E17 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010E1C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010E21 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010E26 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010E2B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010E30 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010E35 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010E3A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010E3F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010E44 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010E49 10                         byte_F44D:	dc.b $10
00010E4A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010E4F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010E54 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010E59 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010E5E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010E63 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010E68 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010E6D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010E72 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010E77 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010E7C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010E81 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010E86 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010E8B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010E90 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010E95 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010E9A 10                         byte_F49E:	dc.b $10
00010E9B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010EA0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010EA5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010EAA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010EAF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010EB4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010EB9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010EBE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010EC3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010EC8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010ECD 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010ED2 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010ED7 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010EDC 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010EE1 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010EE6 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010EEB 06                         byte_F4EF:	dc.b 6
00010EEC E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010EF1 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010EF6 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010EFB E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010F00 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010F05 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010F0A 06                         byte_F50E:	dc.b 6
00010F0B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010F10 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010F15 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010F1A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010F1F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010F24 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010F29 00                         byte_F52D:	dc.b 0
00010F2A                            		even
00010F2A                            		even
00010F2A                            
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A                            ; Sprite mappings - advancing wall of lava (MZ)
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A                            Map_obj4E:
00010F2A                            	include "_maps\obj4E.asm"
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A                            ; Sprite mappings - advancing wall of lava (MZ)
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A 0000                       		dc.w byte_F538-Map_obj4E
00010F2C 0000                       		dc.w byte_F566-Map_obj4E
00010F2E 0000                       		dc.w byte_F594-Map_obj4E
00010F30 0000                       		dc.w byte_F5C2-Map_obj4E
00010F32 0000                       		dc.w byte_F5F0-Map_obj4E
00010F34 09                         byte_F538:	dc.b 9
00010F35 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010F3A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010F3F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010F44 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010F49 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010F4E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010F53 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010F58 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010F5D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010F62 09                         byte_F566:	dc.b 9
00010F63 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010F68 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010F6D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010F72 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010F77 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010F7C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010F81 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010F86 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010F8B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010F90 09                         byte_F594:	dc.b 9
00010F91 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010F96 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010F9B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010FA0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010FA5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010FAA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010FAF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010FB4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010FB9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010FBE 09                         byte_F5C2:	dc.b 9
00010FBF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010FC4 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010FC9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010FCE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010FD3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010FD8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010FDD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010FE2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010FE7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010FEC 08                         byte_F5F0:	dc.b 8
00010FED E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010FF2 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010FF7 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010FFC 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011001 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011006 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001100B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011010 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011016 00                         		even
00011016 00                         		even
00011016                            
00011016                            ; ===========================================================================
00011016                            ; ---------------------------------------------------------------------------
00011016                            ; Object 40 - Moto Bug enemy (GHZ)
00011016                            ; ---------------------------------------------------------------------------
00011016                            
00011016                            Obj40:					; XREF: Obj_Index
00011016 7000                       		moveq	#0,d0
00011018 1028 0024                  		move.b	$24(a0),d0
0001101C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00011020 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00011024                            ; ===========================================================================
00011024 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00011026 0000                       		dc.w Obj40_Action-Obj40_Index
00011028 0000                       		dc.w Obj40_Animate-Obj40_Index
0001102A 0000                       		dc.w Obj40_Delete-Obj40_Index
0001102C                            ; ===========================================================================
0001102C                            
0001102C                            Obj40_Main:				; XREF: Obj40_Index
0001102C 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00011034 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001103A 117C 0004 0001             		move.b	#4,1(a0)
00011040 117C 0004 0018             		move.b	#4,$18(a0)
00011046 117C 0014 0019             		move.b	#$14,$19(a0)
0001104C 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00011050 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00011052 117C 000E 0016             		move.b	#$E,$16(a0)
00011058 117C 0008 0017             		move.b	#8,$17(a0)
0001105E 117C 000C 0020             		move.b	#$C,$20(a0)
00011064 6100 DF58                  		bsr.w	ObjectFall
00011068 4EB9 0000 0000             		jsr	ObjHitFloor
0001106E 4A41                       		tst.w	d1		; is object above the ground?
00011070 6A00                       		bpl.s	locret_F68A	; if yes, branch
00011072 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011076 317C 0000 0012             		move.w	#0,$12(a0)
0001107C 5428 0024                  		addq.b	#2,$24(a0)
00011080 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
00011086                            
00011086                            locret_F68A:
00011086 4E75                       		rts	
00011088                            ; ===========================================================================
00011088                            
00011088                            Obj40_SetSmoke:				; XREF: Obj40_Main
00011088 5828 0024                  		addq.b	#4,$24(a0)
0001108C 6000 0000                  		bra.w	Obj40_Animate
00011090                            ; ===========================================================================
00011090                            
00011090                            Obj40_Action:				; XREF: Obj40_Index
00011090 7000                       		moveq	#0,d0
00011092 1028 0025                  		move.b	$25(a0),d0
00011096 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001109A 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0001109E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000110A4 6100 B066                  		bsr.w	AnimateSprite
000110A8                            
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            ; Routine to mark an enemy/monitor/ring	as destroyed
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            
000110A8                            MarkObjGone:
000110A8 3028 0008                  		move.w	8(a0),d0
000110AC 0240 FF80                  		andi.w	#$FF80,d0
000110B0 3238 F700                  		move.w	($FFFFF700).w,d1
000110B4 0441 0080                  		subi.w	#$80,d1
000110B8 0241 FF80                  		andi.w	#$FF80,d1
000110BC 9041                       		sub.w	d1,d0
000110BE 0C40 0280                  		cmpi.w	#$280,d0
000110C2 6200 0000                  		bhi.w	Mark_ChkGone
000110C6 6000 DF48                  		bra.w	DisplaySprite
000110CA                            ; ===========================================================================
000110CA                            
000110CA                            Mark_ChkGone:
000110CA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000110CE 7000                       		moveq	#0,d0
000110D0 1028 0023                  		move.b	$23(a0),d0
000110D4 6700                       		beq.s	Mark_Delete
000110D6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000110DC                            
000110DC                            Mark_Delete:
000110DC 6000 DF6E                  		bra.w	DeleteObject
000110E0                            
000110E0                            ; ===========================================================================
000110E0 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000110E2 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000110E4                            ; ===========================================================================
000110E4                            
000110E4                            Obj40_Move:				; XREF: Obj40_Index2
000110E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000110E8 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000110EA 5428 0025                  		addq.b	#2,$25(a0)
000110EE 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000110F4 117C 0001 001C             		move.b	#1,$1C(a0)
000110FA 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
00011100 6600                       		bne.s	locret_F70A	; if orientation is left, branch
00011102 4468 0010                  		neg.w	$10(a0)		; make object move to the right
00011106                            
00011106                            locret_F70A:
00011106 4E75                       		rts	
00011108                            ; ===========================================================================
00011108                            
00011108                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00011108 6100 DEE0                  		bsr.w	SpeedToPos
0001110C 4EB9 0000 0000             		jsr	ObjHitFloor
00011112 0C41 FFF8                  		cmpi.w	#-8,d1		; is the nearest floor level >8 pixels down?
00011116 6D00                       		blt.s	Obj40_Pause	; if yes, stop moving
00011118 0C41 000C                  		cmpi.w	#$C,d1		; is the nearest floor level <$C pixels up?
0001111C 6C00                       		bge.s	Obj40_Pause	; if yes, stop moving
0001111E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011122 5328 0033                  		subq.b	#1,$33(a0)	; subtract 1 from smoke delay
00011126 6A00                       		bpl.s	locret_F756	; if time remains, branch
00011128 117C 000F 0033             		move.b	#$F,$33(a0)	; set smoke delay to $F
0001112E 6100 E366                  		bsr.w	SingleObjLoad
00011132 6600                       		bne.s	locret_F756
00011134 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00011138 3368 0008 0008             		move.w	8(a0),8(a1)
0001113E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011144 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001114A 137C 0002 001C             		move.b	#2,$1C(a1)
00011150                            
00011150                            locret_F756:
00011150 4E75                       		rts	
00011152                            ; ===========================================================================
00011152                            
00011152                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00011152 5528 0025                  		subq.b	#2,$25(a0)
00011156 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001115C 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00011162 117C 0000 001C             		move.b	#0,$1C(a0)
00011168 4E75                       		rts	
0001116A                            ; ===========================================================================
0001116A                            
0001116A                            Obj40_Animate:				; XREF: Obj40_Index
0001116A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011170 6100 AF9A                  		bsr.w	AnimateSprite
00011174 6000 DE9A                  		bra.w	DisplaySprite
00011178                            ; ===========================================================================
00011178                            
00011178                            Obj40_Delete:				; XREF: Obj40_Index
00011178 6000 DED2                  		bra.w	DeleteObject
0001117C                            ; ===========================================================================
0001117C                            Ani_obj40:
0001117C                            	include "_anim\obj40.asm"
0001117C                            ; ---------------------------------------------------------------------------
0001117C                            ; Animation script - Motobug enemy
0001117C                            ; ---------------------------------------------------------------------------
0001117C 0000                       		dc.w byte_F788-Ani_obj40
0001117E 0000                       		dc.w byte_F78C-Ani_obj40
00011180 0000                       		dc.w byte_F792-Ani_obj40
00011182 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011186 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001118C 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001119A                            		even
0001119A                            		even
0001119A                            
0001119A                            ; ---------------------------------------------------------------------------
0001119A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001119A                            ; ---------------------------------------------------------------------------
0001119A                            Map_obj40:
0001119A                            	include "_maps\obj40.asm"
0001119A                            ; ---------------------------------------------------------------------------
0001119A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001119A                            ; ---------------------------------------------------------------------------
0001119A 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001119E 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
000111A2 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
000111A6 0000                       		dc.w byte_F804-Map_obj40
000111A8 04                         byte_F7AE:	dc.b 4
000111A9 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000111AE 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000111B3 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000111B8 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000111BD 04                         byte_F7C3:	dc.b 4
000111BE F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000111C3 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000111C8 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000111CD 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000111D2 05                         byte_F7D8:	dc.b 5
000111D3 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000111D8 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000111DD F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000111E2 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000111E7 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000111EC 01                         byte_F7F2:	dc.b 1
000111ED FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000111F2 01                         byte_F7F8:	dc.b 1
000111F3 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000111F8 01                         byte_F7FE:	dc.b 1
000111F9 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000111FE 00                         byte_F804:	dc.b 0
00011200 00                         		even
00011200 00                         		even
00011200                            
00011200                            ; ===========================================================================
00011200                            ; ---------------------------------------------------------------------------
00011200                            ; Object 4F - blank
00011200                            ; ---------------------------------------------------------------------------
00011200                            
00011200                            Obj4F:					; XREF: Obj_Index
00011200 4E75                       		rts	
00011202                            
00011202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011202                            
00011202                            
00011202                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00011202 3038 FE04                  		move.w	($FFFFFE04).w,d0
00011206 D047                       		add.w	d7,d0
00011208 0240 0003                  		andi.w	#3,d0
0001120C 6600                       		bne.s	loc_F836
0001120E 7600                       		moveq	#0,d3
00011210 1628 0019                  		move.b	$19(a0),d3
00011214 4A68 0010                  		tst.w	$10(a0)
00011218 6B00                       		bmi.s	loc_F82C
0001121A 6100 0000                  		bsr.w	ObjHitWallRight
0001121E 4A41                       		tst.w	d1
00011220 6A00                       		bpl.s	loc_F836
00011222                            
00011222                            loc_F828:
00011222 7001                       		moveq	#1,d0
00011224 4E75                       		rts	
00011226                            ; ===========================================================================
00011226                            
00011226                            loc_F82C:
00011226 4643                       		not.w	d3
00011228 6100 0000                  		bsr.w	ObjHitWallLeft
0001122C 4A41                       		tst.w	d1
0001122E 6BF2                       		bmi.s	loc_F828
00011230                            
00011230                            loc_F836:
00011230 7000                       		moveq	#0,d0
00011232 4E75                       		rts	
00011234                            ; End of function Obj50_ChkWall
00011234                            
00011234                            ; ===========================================================================
00011234                            ; ---------------------------------------------------------------------------
00011234                            ; Object 50 - Yadrin enemy (SYZ)
00011234                            ; ---------------------------------------------------------------------------
00011234                            
00011234                            Obj50:					; XREF: Obj_Index
00011234 7000                       		moveq	#0,d0
00011236 1028 0024                  		move.b	$24(a0),d0
0001123A 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001123E 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00011242                            ; ===========================================================================
00011242 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00011244 0000                       		dc.w Obj50_Action-Obj50_Index
00011246                            ; ===========================================================================
00011246                            
00011246                            Obj50_Main:				; XREF: Obj50_Index
00011246 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001124E 317C 247B 0002             		move.w	#$247B,2(a0)
00011254 117C 0004 0001             		move.b	#4,1(a0)
0001125A 117C 0004 0018             		move.b	#4,$18(a0)
00011260 117C 0014 0019             		move.b	#$14,$19(a0)
00011266 117C 0011 0016             		move.b	#$11,$16(a0)
0001126C 117C 0008 0017             		move.b	#8,$17(a0)
00011272 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011278 6100 DD44                  		bsr.w	ObjectFall
0001127C 6100 0000                  		bsr.w	ObjHitFloor
00011280 4A41                       		tst.w	d1		; is object above the ground?
00011282 6A00                       		bpl.s	locret_F89E	; if yes, branch
00011284 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011288 317C 0000 0012             		move.w	#0,$12(a0)
0001128E 5428 0024                  		addq.b	#2,$24(a0)
00011292 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
00011298                            
00011298                            locret_F89E:
00011298 4E75                       		rts	
0001129A                            ; ===========================================================================
0001129A                            
0001129A                            Obj50_Action:				; XREF: Obj50_Index
0001129A 7000                       		moveq	#0,d0
0001129C 1028 0025                  		move.b	$25(a0),d0
000112A0 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000112A4 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000112A8 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000112AE 6100 AE5C                  		bsr.w	AnimateSprite
000112B2 6000 FDF4                  		bra.w	MarkObjGone
000112B6                            ; ===========================================================================
000112B6 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000112B8 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000112BA                            ; ===========================================================================
000112BA                            
000112BA                            Obj50_Move:				; XREF: Obj50_Index2
000112BA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000112BE 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000112C0 5428 0025                  		addq.b	#2,$25(a0)
000112C4 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object slightly up
000112CA 117C 0001 001C             		move.b	#1,$1C(a0)
000112D0 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
000112D6 6600                       		bne.s	locret_F8E2	; if orientation is left, branch
000112D8 4468 0010                  		neg.w	$10(a0)		; change direction
000112DC                            
000112DC                            locret_F8E2:
000112DC 4E75                       		rts	
000112DE                            ; ===========================================================================
000112DE                            
000112DE                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000112DE 6100 DD0A                  		bsr.w	SpeedToPos
000112E2 6100 0000                  		bsr.w	ObjHitFloor
000112E6 0C41 FFF8                  		cmpi.w	#-8,d1
000112EA 6D00                       		blt.s	Obj50_Pause
000112EC 0C41 000C                  		cmpi.w	#$C,d1
000112F0 6C00                       		bge.s	Obj50_Pause
000112F2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000112F6 6100 FF0A                  		bsr.w	Obj50_ChkWall
000112FA 6600                       		bne.s	Obj50_Pause
000112FC 4E75                       		rts	
000112FE                            ; ===========================================================================
000112FE                            
000112FE                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000112FE 5528 0025                  		subq.b	#2,$25(a0)
00011302 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011308 317C 0000 0010             		move.w	#0,$10(a0)
0001130E 117C 0000 001C             		move.b	#0,$1C(a0)
00011314 4E75                       		rts	
00011316                            ; ===========================================================================
00011316                            Ani_obj50:
00011316                            	include "_anim\obj50.asm"
00011316                            ; ---------------------------------------------------------------------------
00011316                            ; Animation script - Yadrin enemy
00011316                            ; ---------------------------------------------------------------------------
00011316 0000                       		dc.w byte_F920-Ani_obj50
00011318 0000                       		dc.w byte_F924-Ani_obj50
0001131A 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001131E 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00011328                            		even
00011328                            		even
00011328                            
00011328                            ; ---------------------------------------------------------------------------
00011328                            ; Sprite mappings - Yadrin enemy (SYZ)
00011328                            ; ---------------------------------------------------------------------------
00011328                            Map_obj50:
00011328                            	include "_maps\obj50.asm"
00011328                            ; ---------------------------------------------------------------------------
00011328                            ; Sprite mappings - Yadrin enemy (SYZ)
00011328                            ; ---------------------------------------------------------------------------
00011328 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0001132C 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00011330 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00011334 05                         byte_F93A:	dc.b 5
00011335 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001133A FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001133F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011344 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011349 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001134E 05                         byte_F954:	dc.b 5
0001134F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011354 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011359 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001135E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011363 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011368 05                         byte_F96E:	dc.b 5
00011369 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001136E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011373 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011378 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001137D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011382 05                         byte_F988:	dc.b 5
00011383 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011388 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001138D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011392 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011397 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001139C 05                         byte_F9A2:	dc.b 5
0001139D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000113A2 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000113A7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000113AC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000113B1 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000113B6 05                         byte_F9BC:	dc.b 5
000113B7 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000113BC 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000113C1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000113C6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000113CB 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000113D0                            		even
000113D0                            		even
000113D0                            
000113D0                            ; ===========================================================================
000113D0                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000113D0                            ; ===========================================================================
000113D0                            ; Input:	d1 - width
000113D0                            ; 		d2 - height / 2 (when jumping)
000113D0                            ; 		d3 - height / 2 (when walking)
000113D0                            ; 		d4 - x-axis position
000113D0                            ; ---------------------------------------------------------------------------
000113D0                            
000113D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000113D0                            
000113D0                            
000113D0                            SolidObject:
000113D0 4A28 0025                  		tst.b	$25(a0)		; is Sonic standing on the object?
000113D4 6700 0000                  		beq.w	loc_FAC8	; if not, branch
000113D8 3401                       		move.w	d1,d2
000113DA D442                       		add.w	d2,d2
000113DC 43F8 D000                  		lea	($FFFFD000).w,a1 ; load Sonic object to a1
000113E0 0829 0001 0022             		btst	#1,$22(a1)	 ; is Sonic in the air?
000113E6 6600                       		bne.s	loc_F9FE	 ; if yes, branch
000113E8 3029 0008                  		move.w	8(a1),d0
000113EC 9068 0008                  		sub.w	8(a0),d0
000113F0 D041                       		add.w	d1,d0
000113F2 6B00                       		bmi.s	loc_F9FE
000113F4 B042                       		cmp.w	d2,d0
000113F6 6500                       		bcs.s	loc_FA12
000113F8                            
000113F8                            loc_F9FE:
000113F8 08A9 0003 0022             		bclr	#3,$22(a1)
000113FE 08A8 0003 0022             		bclr	#3,$22(a0)
00011404 4228 0025                  		clr.b	$25(a0)
00011408 7800                       		moveq	#0,d4
0001140A 4E75                       		rts	
0001140C                            ; ===========================================================================
0001140C                            
0001140C                            loc_FA12:
0001140C 3404                       		move.w	d4,d2
0001140E 6100 8126                  		bsr.w	MvSonicOnPtfm
00011412 7800                       		moveq	#0,d4
00011414 4E75                       		rts	
00011416                            ; ===========================================================================
00011416                            
00011416                            SolidObject71:				; XREF: Obj71_Solid
00011416 4A28 0025                  		tst.b	$25(a0)
0001141A 6700 0000                  		beq.w	loc_FAD0
0001141E 3401                       		move.w	d1,d2
00011420 D442                       		add.w	d2,d2
00011422 43F8 D000                  		lea	($FFFFD000).w,a1
00011426 0829 0001 0022             		btst	#1,$22(a1)
0001142C 6600                       		bne.s	loc_FA44
0001142E 3029 0008                  		move.w	8(a1),d0
00011432 9068 0008                  		sub.w	8(a0),d0
00011436 D041                       		add.w	d1,d0
00011438 6B00                       		bmi.s	loc_FA44
0001143A B042                       		cmp.w	d2,d0
0001143C 6500                       		bcs.s	loc_FA58
0001143E                            
0001143E                            loc_FA44:
0001143E 08A9 0003 0022             		bclr	#3,$22(a1)
00011444 08A8 0003 0022             		bclr	#3,$22(a0)
0001144A 4228 0025                  		clr.b	$25(a0)
0001144E 7800                       		moveq	#0,d4
00011450 4E75                       		rts	
00011452                            ; ===========================================================================
00011452                            
00011452                            loc_FA58:
00011452 3404                       		move.w	d4,d2
00011454 6100 80E0                  		bsr.w	MvSonicOnPtfm
00011458 7800                       		moveq	#0,d4
0001145A 4E75                       		rts	
0001145C                            ; ===========================================================================
0001145C                            
0001145C                            SolidObject2F:				; XREF: Obj2F_Solid
0001145C 43F8 D000                  		lea	($FFFFD000).w,a1
00011460 4A28 0001                  		tst.b	1(a0)
00011464 6A00 0000                  		bpl.w	loc_FB92
00011468 3029 0008                  		move.w	8(a1),d0
0001146C 9068 0008                  		sub.w	8(a0),d0
00011470 D041                       		add.w	d1,d0
00011472 6B00 0000                  		bmi.w	loc_FB92
00011476 3601                       		move.w	d1,d3
00011478 D643                       		add.w	d3,d3
0001147A B043                       		cmp.w	d3,d0
0001147C 6200 0000                  		bhi.w	loc_FB92
00011480 3A00                       		move.w	d0,d5
00011482 0828 0000 0001             		btst	#0,1(a0)
00011488 6700                       		beq.s	loc_FA94
0001148A 4645                       		not.w	d5
0001148C DA43                       		add.w	d3,d5
0001148E                            
0001148E                            loc_FA94:
0001148E E24D                       		lsr.w	#1,d5
00011490 7600                       		moveq	#0,d3
00011492 1632 5000                  		move.b	(a2,d5.w),d3
00011496 9612                       		sub.b	(a2),d3
00011498 3A28 000C                  		move.w	$C(a0),d5
0001149C 9A43                       		sub.w	d3,d5
0001149E 1629 0016                  		move.b	$16(a1),d3
000114A2 4883                       		ext.w	d3
000114A4 D443                       		add.w	d3,d2
000114A6 3629 000C                  		move.w	$C(a1),d3
000114AA 9645                       		sub.w	d5,d3
000114AC 5843                       		addq.w	#4,d3
000114AE D642                       		add.w	d2,d3
000114B0 6B00 0000                  		bmi.w	loc_FB92
000114B4 3802                       		move.w	d2,d4
000114B6 D844                       		add.w	d4,d4
000114B8 B644                       		cmp.w	d4,d3
000114BA 6400 0000                  		bcc.w	loc_FB92
000114BE 6000 0000                  		bra.w	loc_FB0E
000114C2                            ; ===========================================================================
000114C2                            
000114C2                            loc_FAC8:
000114C2 4A28 0001                  		tst.b	1(a0)		; is object on screen?
000114C6 6A00 0000                  		bpl.w	loc_FB92	; if not, branch
000114CA                            
000114CA                            loc_FAD0:
000114CA 43F8 D000                  		lea	($FFFFD000).w,a1 ; load Sonic object to a1
000114CE 3029 0008                  		move.w	8(a1),d0
000114D2 9068 0008                  		sub.w	8(a0),d0
000114D6 D041                       		add.w	d1,d0
000114D8 6B00 0000                  		bmi.w	loc_FB92
000114DC 3601                       		move.w	d1,d3
000114DE D643                       		add.w	d3,d3
000114E0 B043                       		cmp.w	d3,d0
000114E2 6200 0000                  		bhi.w	loc_FB92
000114E6 1629 0016                  		move.b	$16(a1),d3
000114EA 4883                       		ext.w	d3
000114EC D443                       		add.w	d3,d2
000114EE 3629 000C                  		move.w	$C(a1),d3
000114F2 9668 000C                  		sub.w	$C(a0),d3
000114F6 5843                       		addq.w	#4,d3
000114F8 D642                       		add.w	d2,d3
000114FA 6B00 0000                  		bmi.w	loc_FB92
000114FE 3802                       		move.w	d2,d4
00011500 D844                       		add.w	d4,d4
00011502 B644                       		cmp.w	d4,d3
00011504 6400 0000                  		bcc.w	loc_FB92
00011508                            
00011508                            loc_FB0E:
00011508 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001150C 6B00 0000                  		bmi.w	loc_FB92
00011510 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00011516 6400 0000                  		bcc.w	loc_FB92
0001151A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001151E 6600 0000                  		bne.w	loc_FBAC
00011522 3A00                       		move.w	d0,d5
00011524 B240                       		cmp.w	d0,d1
00011526 6400                       		bcc.s	loc_FB36
00011528 D241                       		add.w	d1,d1
0001152A 9041                       		sub.w	d1,d0
0001152C 3A00                       		move.w	d0,d5
0001152E 4445                       		neg.w	d5
00011530                            
00011530                            loc_FB36:
00011530 3203                       		move.w	d3,d1
00011532 B443                       		cmp.w	d3,d2
00011534 6400                       		bcc.s	loc_FB44
00011536 5943                       		subq.w	#4,d3
00011538 9644                       		sub.w	d4,d3
0001153A 3203                       		move.w	d3,d1
0001153C 4441                       		neg.w	d1
0001153E                            
0001153E                            loc_FB44:
0001153E BA41                       		cmp.w	d1,d5
00011540 6200 0000                  		bhi.w	loc_FBB0
00011544 0C41 0004                  		cmpi.w	#4,d1
00011548 6300                       		bls.s	loc_FB8C
0001154A 4A40                       		tst.w	d0
0001154C 6700                       		beq.s	loc_FB70
0001154E 6B00                       		bmi.s	loc_FB5E
00011550 4A69 0010                  		tst.w	$10(a1)
00011554 6B00                       		bmi.s	loc_FB70
00011556 6000                       		bra.s	loc_FB64
00011558                            ; ===========================================================================
00011558                            
00011558                            loc_FB5E:
00011558 4A69 0010                  		tst.w	$10(a1)
0001155C 6A00                       		bpl.s	loc_FB70
0001155E                            
0001155E                            loc_FB64:
0001155E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00011564 337C 0000 0010             		move.w	#0,$10(a1)
0001156A                            
0001156A                            loc_FB70:
0001156A 9169 0008                  		sub.w	d0,8(a1)
0001156E 0829 0001 0022             		btst	#1,$22(a1)
00011574 6600                       		bne.s	loc_FB8C
00011576 08E9 0005 0022             		bset	#5,$22(a1)
0001157C 08E8 0005 0022             		bset	#5,$22(a0)
00011582 7801                       		moveq	#1,d4
00011584 4E75                       		rts	
00011586                            ; ===========================================================================
00011586                            
00011586                            loc_FB8C:
00011586 6100                       		bsr.s	loc_FBA0
00011588 7801                       		moveq	#1,d4
0001158A 4E75                       		rts	
0001158C                            ; ===========================================================================
0001158C                            
0001158C                            loc_FB92:
0001158C 0828 0005 0022             		btst	#5,$22(a0)
00011592 6700                       		beq.s	loc_FBAC
00011594 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001159A                            
0001159A                            loc_FBA0:
0001159A 08A8 0005 0022             		bclr	#5,$22(a0)
000115A0 08A9 0005 0022             		bclr	#5,$22(a1)
000115A6                            
000115A6                            loc_FBAC:
000115A6 7800                       		moveq	#0,d4
000115A8 4E75                       		rts	
000115AA                            ; ===========================================================================
000115AA                            
000115AA                            loc_FBB0:
000115AA 4A43                       		tst.w	d3
000115AC 6B00                       		bmi.s	loc_FBBC
000115AE 0C43 0010                  		cmpi.w	#$10,d3
000115B2 6500                       		bcs.s	loc_FBEE
000115B4 60D6                       		bra.s	loc_FB92
000115B6                            ; ===========================================================================
000115B6                            
000115B6                            loc_FBBC:
000115B6 4A69 0012                  		tst.w	$12(a1)
000115BA 6700                       		beq.s	loc_FBD6
000115BC 6A00                       		bpl.s	loc_FBD2
000115BE 4A43                       		tst.w	d3
000115C0 6A00                       		bpl.s	loc_FBD2
000115C2 9769 000C                  		sub.w	d3,$C(a1)
000115C6 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000115CC                            
000115CC                            loc_FBD2:
000115CC 78FF                       		moveq	#-1,d4
000115CE 4E75                       		rts	
000115D0                            ; ===========================================================================
000115D0                            
000115D0                            loc_FBD6:
000115D0 0829 0001 0022             		btst	#1,$22(a1)
000115D6 66F4                       		bne.s	loc_FBD2
000115D8 2F08                       		move.l	a0,-(sp)
000115DA 2049                       		movea.l	a1,a0
000115DC 4EB9 0000 0000             		jsr	KillSonic
000115E2 205F                       		movea.l	(sp)+,a0
000115E4 78FF                       		moveq	#-1,d4
000115E6 4E75                       		rts	
000115E8                            ; ===========================================================================
000115E8                            
000115E8                            loc_FBEE:
000115E8 5943                       		subq.w	#4,d3
000115EA 7200                       		moveq	#0,d1
000115EC 1228 0019                  		move.b	$19(a0),d1
000115F0 3401                       		move.w	d1,d2
000115F2 D442                       		add.w	d2,d2
000115F4 D269 0008                  		add.w	8(a1),d1
000115F8 9268 0008                  		sub.w	8(a0),d1
000115FC 6B00                       		bmi.s	loc_FC28
000115FE B242                       		cmp.w	d2,d1
00011600 6400                       		bcc.s	loc_FC28
00011602 4A69 0012                  		tst.w	$12(a1)
00011606 6B00                       		bmi.s	loc_FC28
00011608 9769 000C                  		sub.w	d3,$C(a1)
0001160C 5369 000C                  		subq.w	#1,$C(a1)
00011610 6100                       		bsr.s	sub_FC2C
00011612 117C 0002 0025             		move.b	#2,$25(a0)
00011618 08E8 0003 0022             		bset	#3,$22(a0)
0001161E 78FF                       		moveq	#-1,d4
00011620 4E75                       		rts	
00011622                            ; ===========================================================================
00011622                            
00011622                            loc_FC28:
00011622 7800                       		moveq	#0,d4
00011624 4E75                       		rts	
00011626                            ; End of function SolidObject
00011626                            
00011626                            
00011626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011626                            
00011626                            
00011626                            sub_FC2C:				; XREF: SolidObject
00011626 0829 0003 0022             		btst	#3,$22(a1)
0001162C 6700                       		beq.s	loc_FC4E
0001162E 7000                       		moveq	#0,d0
00011630 1029 003D                  		move.b	$3D(a1),d0
00011634 ED48                       		lsl.w	#6,d0
00011636 0680 00FF D000             		addi.l	#$FFD000,d0
0001163C 2440                       		movea.l	d0,a2
0001163E 08AA 0003 0022             		bclr	#3,$22(a2)
00011644 422A 0025                  		clr.b	$25(a2)
00011648                            
00011648                            loc_FC4E:
00011648 3008                       		move.w	a0,d0
0001164A 0440 D000                  		subi.w	#-$3000,d0
0001164E EC48                       		lsr.w	#6,d0
00011650 0240 007F                  		andi.w	#$7F,d0
00011654 1340 003D                  		move.b	d0,$3D(a1)
00011658 137C 0000 0026             		move.b	#0,$26(a1)
0001165E 337C 0000 0012             		move.w	#0,$12(a1)
00011664 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001166A 0829 0001 0022             		btst	#1,$22(a1)
00011670 6700                       		beq.s	loc_FC84
00011672 2F08                       		move.l	a0,-(sp)
00011674 2049                       		movea.l	a1,a0
00011676 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001167C 205F                       		movea.l	(sp)+,a0
0001167E                            
0001167E                            loc_FC84:
0001167E 08E9 0003 0022             		bset	#3,$22(a1)
00011684 08E8 0003 0022             		bset	#3,$22(a0)
0001168A 4E75                       		rts	
0001168C                            ; End of function sub_FC2C
0001168C                            
0001168C                            ; ===========================================================================
0001168C                            ; ---------------------------------------------------------------------------
0001168C                            ; Object 51 - smashable	green block (MZ)
0001168C                            ; ---------------------------------------------------------------------------
0001168C                            
0001168C                            Obj51:					; XREF: Obj_Index
0001168C 7000                       		moveq	#0,d0
0001168E 1028 0024                  		move.b	$24(a0),d0
00011692 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00011696 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001169A 6000 FA0C                  		bra.w	MarkObjGone
0001169E                            ; ===========================================================================
0001169E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000116A0 0000                       		dc.w Obj51_Solid-Obj51_Index
000116A2 0000                       		dc.w Obj51_Display-Obj51_Index
000116A4                            ; ===========================================================================
000116A4                            
000116A4                            Obj51_Main:				; XREF: Obj51_Index
000116A4 5428 0024                  		addq.b	#2,$24(a0)
000116A8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000116B0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000116B6 117C 0004 0001             		move.b	#4,1(a0)
000116BC 117C 0010 0019             		move.b	#$10,$19(a0)
000116C2 117C 0004 0018             		move.b	#4,$18(a0)
000116C8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000116CE                            
000116CE                            Obj51_Solid:				; XREF: Obj51_Index
000116CE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000116D4 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000116DA 323C 001B                  		move.w	#$1B,d1
000116DE 343C 0010                  		move.w	#$10,d2
000116E2 363C 0011                  		move.w	#$11,d3
000116E6 3828 0008                  		move.w	8(a0),d4
000116EA 6100 FCE4                  		bsr.w	SolidObject
000116EE 0828 0003 0022             		btst	#3,$22(a0)
000116F4 6600                       		bne.s	Obj51_Smash
000116F6                            
000116F6                            locret_FCFC:
000116F6 4E75                       		rts	
000116F8                            ; ===========================================================================
000116F8                            
000116F8                            Obj51_Smash:				; XREF: Obj51_Solid
000116F8 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000116FE 66F6                       		bne.s	locret_FCFC	; if not, branch
00011700 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00011706 08E9 0002 0022             		bset	#2,$22(a1)
0001170C 137C 000E 0016             		move.b	#$E,$16(a1)
00011712 137C 0007 0017             		move.b	#7,$17(a1)
00011718 137C 0002 001C             		move.b	#2,$1C(a1)
0001171E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00011724 08E9 0001 0022             		bset	#1,$22(a1)
0001172A 08A9 0003 0022             		bclr	#3,$22(a1)
00011730 137C 0002 0024             		move.b	#2,$24(a1)
00011736 08A8 0003 0022             		bclr	#3,$22(a0)
0001173C 4228 0025                  		clr.b	$25(a0)
00011740 117C 0001 001A             		move.b	#1,$1A(a0)
00011746 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001174C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001174E 343C 0038                  		move.w	#$38,d2
00011752 6100 D4AA                  		bsr.w	SmashObject
00011756 6100 DD3E                  		bsr.w	SingleObjLoad
0001175A 6600                       		bne.s	Obj51_Display
0001175C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011760 3368 0008 0008             		move.w	8(a0),8(a1)
00011766 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001176C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011770 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00011774 0C42 0006                  		cmpi.w	#6,d2
00011778 6500                       		bcs.s	Obj51_Bonus
0001177A 7406                       		moveq	#6,d2
0001177C                            
0001177C                            Obj51_Bonus:
0001177C 7000                       		moveq	#0,d0
0001177E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011782 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00011788 6500                       		bcs.s	loc_FD98	; if not, branch
0001178A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001178E 740A                       		moveq	#10,d2
00011790                            
00011790                            loc_FD98:
00011790 4EB9 0000 0000             		jsr	AddPoints
00011796 E24A                       		lsr.w	#1,d2
00011798 1342 001A                  		move.b	d2,$1A(a1)
0001179C                            
0001179C                            Obj51_Display:				; XREF: Obj51_Index
0001179C 6100 D84C                  		bsr.w	SpeedToPos
000117A0 0668 0038 0012             		addi.w	#$38,$12(a0)
000117A6 6100 D868                  		bsr.w	DisplaySprite
000117AA 4A28 0001                  		tst.b	1(a0)
000117AE 6A00 D89C                  		bpl.w	DeleteObject
000117B2 4E75                       		rts	
000117B4                            ; ===========================================================================
000117B4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000117B8 FF00 FF00                  		dc.w $FF00, $FF00
000117BC 0200 FE00                  		dc.w $200, $FE00
000117C0 0100 FF00                  		dc.w $100, $FF00
000117C4                            
000117C4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000117CC                            ; ---------------------------------------------------------------------------
000117CC                            ; Sprite mappings - smashable green block (MZ)
000117CC                            ; ---------------------------------------------------------------------------
000117CC                            Map_obj51:
000117CC                            	include "_maps\obj51.asm"
000117CC                            ; ---------------------------------------------------------------------------
000117CC                            ; Sprite mappings - smashable green block (MZ)
000117CC                            ; ---------------------------------------------------------------------------
000117CC 0000                       		dc.w byte_FDD8-Map_obj51
000117CE 0000                       		dc.w byte_FDE3-Map_obj51
000117D0 02                         byte_FDD8:	dc.b 2
000117D1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000117D6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000117DB 04                         byte_FDE3:	dc.b 4
000117DC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000117E1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000117E6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000117EB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000117F0                            		even
000117F0                            		even
000117F0                            
000117F0                            ; ===========================================================================
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            
000117F0                            Obj52:					; XREF: Obj_Index
000117F0 7000                       		moveq	#0,d0
000117F2 1028 0024                  		move.b	$24(a0),d0
000117F6 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000117FA 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000117FE                            ; ===========================================================================
000117FE 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00011800 0000                       		dc.w Obj52_Platform-Obj52_Index
00011802 0000                       		dc.w Obj52_StandOn-Obj52_Index
00011804                            
00011804 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00011806 2001                       		dc.b $20, 1
00011808 2002                       		dc.b $20, 2
0001180A 4003                       		dc.b $40, 3
0001180C 3004                       		dc.b $30, 4
0001180E                            ; ===========================================================================
0001180E                            
0001180E                            Obj52_Main:				; XREF: Obj52_Index
0001180E 5428 0024                  		addq.b	#2,$24(a0)
00011812 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001181A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011820 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011826 6600                       		bne.s	loc_FE44
00011828 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011830 317C 43BC 0002             		move.w	#$43BC,2(a0)
00011836 117C 0007 0016             		move.b	#7,$16(a0)
0001183C                            
0001183C                            loc_FE44:
0001183C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011842 6600                       		bne.s	loc_FE60
00011844 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001184A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011850 6700                       		beq.s	loc_FE60	; if yes, branch
00011852 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00011858                            
00011858                            loc_FE60:
00011858 117C 0004 0001             		move.b	#4,1(a0)
0001185E 7000                       		moveq	#0,d0
00011860 1028 0028                  		move.b	$28(a0),d0
00011864 E648                       		lsr.w	#3,d0
00011866 0240 001E                  		andi.w	#$1E,d0
0001186A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001186E 115A 0019                  		move.b	(a2)+,$19(a0)
00011872 115A 001A                  		move.b	(a2)+,$1A(a0)
00011876 117C 0004 0018             		move.b	#4,$18(a0)
0001187C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011882 3168 000C 0032             		move.w	$C(a0),$32(a0)
00011888 0228 000F 0028             		andi.b	#$F,$28(a0)
0001188E                            
0001188E                            Obj52_Platform:				; XREF: Obj52_Index
0001188E 6100 0000                  		bsr.w	Obj52_Move
00011892 7200                       		moveq	#0,d1
00011894 1228 0019                  		move.b	$19(a0),d1
00011898 4EB9 0000 8E64             		jsr	(PlatformObject).l
0001189E 6000                       		bra.s	Obj52_ChkDel
000118A0                            ; ===========================================================================
000118A0                            
000118A0                            Obj52_StandOn:				; XREF: Obj52_Index
000118A0 7200                       		moveq	#0,d1
000118A2 1228 0019                  		move.b	$19(a0),d1
000118A6 4EB9 0000 8FD8             		jsr	(ExitPlatform).l
000118AC 3F28 0008                  		move.w	8(a0),-(sp)
000118B0 6100 0000                  		bsr.w	Obj52_Move
000118B4 341F                       		move.w	(sp)+,d2
000118B6 4EB9 0000 9542             		jsr	(MvSonicOnPtfm2).l
000118BC                            
000118BC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000118BC 3028 0030                  		move.w	$30(a0),d0
000118C0 0240 FF80                  		andi.w	#$FF80,d0
000118C4 3238 F700                  		move.w	($FFFFF700).w,d1
000118C8 0441 0080                  		subi.w	#$80,d1
000118CC 0241 FF80                  		andi.w	#$FF80,d1
000118D0 9041                       		sub.w	d1,d0
000118D2 0C40 0280                  		cmpi.w	#$280,d0
000118D6 6200 D774                  		bhi.w	DeleteObject
000118DA 6000 D734                  		bra.w	DisplaySprite
000118DE                            ; ===========================================================================
000118DE                            
000118DE                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000118DE 7000                       		moveq	#0,d0
000118E0 1028 0028                  		move.b	$28(a0),d0
000118E4 0240 000F                  		andi.w	#$F,d0
000118E8 D040                       		add.w	d0,d0
000118EA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000118EE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000118F2                            ; ===========================================================================
000118F2 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000118F6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000118FA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000118FE 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011902 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011906 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011908                            ; ===========================================================================
00011908                            
00011908                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011908 4E75                       		rts	
0001190A                            ; ===========================================================================
0001190A                            
0001190A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001190A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001190E 323C 0060                  		move.w	#$60,d1
00011912 0828 0000 0022             		btst	#0,$22(a0)
00011918 6700                       		beq.s	loc_FF26
0001191A 4440                       		neg.w	d0
0001191C D041                       		add.w	d1,d0
0001191E                            
0001191E                            loc_FF26:
0001191E 3228 0030                  		move.w	$30(a0),d1
00011922 9240                       		sub.w	d0,d1
00011924 3141 0008                  		move.w	d1,8(a0)
00011928 4E75                       		rts	
0001192A                            ; ===========================================================================
0001192A                            
0001192A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001192A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011930 6600                       		bne.s	Obj52_02_Wait
00011932 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011936                            
00011936                            Obj52_02_Wait:
00011936 4E75                       		rts	
00011938                            ; ===========================================================================
00011938                            
00011938                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011938 7600                       		moveq	#0,d3
0001193A 1628 0019                  		move.b	$19(a0),d3
0001193E 6100 0000                  		bsr.w	ObjHitWallRight
00011942 4A41                       		tst.w	d1		; has the platform hit a wall?
00011944 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011946 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001194A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011950 4E75                       		rts	
00011952                            ; ===========================================================================
00011952                            
00011952                            Obj52_03_End:
00011952 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011956 4E75                       		rts	
00011958                            ; ===========================================================================
00011958                            
00011958                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011958 7600                       		moveq	#0,d3
0001195A 1628 0019                  		move.b	$19(a0),d3
0001195E 6100 0000                  		bsr.w	ObjHitWallRight
00011962 4A41                       		tst.w	d1		; has the platform hit a wall?
00011964 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011966 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001196A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011970 4E75                       		rts	
00011972                            ; ===========================================================================
00011972                            
00011972                            Obj52_05_End:
00011972 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011976 4E75                       		rts	
00011978                            ; ===========================================================================
00011978                            
00011978                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011978 6100 D670                  		bsr.w	SpeedToPos
0001197C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011982 6100 0000                  		bsr.w	ObjHitFloor
00011986 4A41                       		tst.w	d1		; has platform hit the floor?
00011988 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001198C D368 000C                  		add.w	d1,$C(a0)
00011990 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011994 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00011998                            
00011998                            locret_FFA0:
00011998 4E75                       		rts	
0001199A                            ; ===========================================================================
0001199A                            
0001199A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001199A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001199E 6700                       		beq.s	Obj52_07_ChkDel
000119A0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000119A4                            
000119A4                            Obj52_07_ChkDel:
000119A4 588F                       		addq.l	#4,sp
000119A6 3028 0030                  		move.w	$30(a0),d0
000119AA 0240 FF80                  		andi.w	#$FF80,d0
000119AE 3238 F700                  		move.w	($FFFFF700).w,d1
000119B2 0441 0080                  		subi.w	#$80,d1
000119B6 0241 FF80                  		andi.w	#$FF80,d1
000119BA 9041                       		sub.w	d1,d0
000119BC 0C40 0280                  		cmpi.w	#$280,d0
000119C0 6200 D68A                  		bhi.w	DeleteObject
000119C4 4E75                       		rts	
000119C6                            ; ===========================================================================
000119C6                            
000119C6                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000119C6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000119CA 323C 0080                  		move.w	#$80,d1
000119CE 0828 0000 0022             		btst	#0,$22(a0)
000119D4 6700                       		beq.s	loc_FFE2
000119D6 4440                       		neg.w	d0
000119D8 D041                       		add.w	d1,d0
000119DA                            
000119DA                            loc_FFE2:
000119DA 3228 0032                  		move.w	$32(a0),d1
000119DE 9240                       		sub.w	d0,d1
000119E0 3141 000C                  		move.w	d1,$C(a0)
000119E4 4E75                       		rts	
000119E6                            ; ===========================================================================
000119E6                            
000119E6                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000119E6 7600                       		moveq	#0,d3
000119E8 1628 0019                  		move.b	$19(a0),d3
000119EC D643                       		add.w	d3,d3
000119EE 7208                       		moveq	#8,d1
000119F0 0828 0000 0022             		btst	#0,$22(a0)
000119F6 6700                       		beq.s	loc_10004
000119F8 4441                       		neg.w	d1
000119FA 4443                       		neg.w	d3
000119FC                            
000119FC                            loc_10004:
000119FC 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011A00 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011A02 3028 0008                  		move.w	8(a0),d0
00011A06 9068 0030                  		sub.w	$30(a0),d0
00011A0A B043                       		cmp.w	d3,d0
00011A0C 6700                       		beq.s	Obj52_0A_Wait
00011A0E D368 0008                  		add.w	d1,8(a0)	; move platform
00011A12 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011A18 4E75                       		rts	
00011A1A                            ; ===========================================================================
00011A1A                            
00011A1A                            Obj52_0A_Wait:
00011A1A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011A1E 6600                       		bne.s	locret_1002E	; if time remains, branch
00011A20 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011A26                            
00011A26                            locret_1002E:
00011A26 4E75                       		rts	
00011A28                            ; ===========================================================================
00011A28                            
00011A28                            Obj52_0A_Back:
00011A28 3028 0008                  		move.w	8(a0),d0
00011A2C 9068 0030                  		sub.w	$30(a0),d0
00011A30 6700                       		beq.s	Obj52_0A_Reset
00011A32 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011A36 4E75                       		rts	
00011A38                            ; ===========================================================================
00011A38                            
00011A38                            Obj52_0A_Reset:
00011A38 4268 0036                  		clr.w	$36(a0)
00011A3C 5328 0028                  		subq.b	#1,$28(a0)
00011A40 4E75                       		rts	
00011A42                            ; ===========================================================================
00011A42                            ; ---------------------------------------------------------------------------
00011A42                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011A42                            ; ---------------------------------------------------------------------------
00011A42                            Map_obj52:
00011A42                            	include "_maps\obj52mz.asm"
00011A42                            ; ---------------------------------------------------------------------------
00011A42                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011A42                            ; ---------------------------------------------------------------------------
00011A42 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011A46 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011A4A 0000                       		dc.w byte_1008F-Map_obj52
00011A4C 01                         byte_10054:	dc.b 1
00011A4D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011A52 02                         byte_1005A:	dc.b 2
00011A53 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011A58 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011A5D 04                         byte_10065:	dc.b 4
00011A5E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011A63 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011A68 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011A6D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011A72 04                         byte_1007A:	dc.b 4
00011A73 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011A78 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011A7D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011A82 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011A87 03                         byte_1008F:	dc.b 3
00011A88 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011A8D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011A92 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00011A98 00                         		even
00011A98 00                         		even
00011A98                            
00011A98                            ; ---------------------------------------------------------------------------
00011A98                            ; Sprite mappings - moving block (LZ)
00011A98                            ; ---------------------------------------------------------------------------
00011A98                            Map_obj52a:
00011A98                            	include "_maps\obj52lz.asm"
00011A98                            ; ---------------------------------------------------------------------------
00011A98                            ; Sprite mappings - moving block (LZ)
00011A98                            ; ---------------------------------------------------------------------------
00011A98 0000                       		dc.w byte_100A2-Map_obj52a
00011A9A 01                         byte_100A2:	dc.b 1
00011A9B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011AA0                            		even
00011AA0                            		even
00011AA0                            
00011AA0                            ; ===========================================================================
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            ; Object 55 - Basaran enemy (MZ)
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            
00011AA0                            Obj55:					; XREF: Obj_Index
00011AA0 7000                       		moveq	#0,d0
00011AA2 1028 0024                  		move.b	$24(a0),d0
00011AA6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011AAA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011AAE                            ; ===========================================================================
00011AAE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011AB0 0000                       		dc.w Obj55_Action-Obj55_Index
00011AB2                            ; ===========================================================================
00011AB2                            
00011AB2                            Obj55_Main:				; XREF: Obj55_Index
00011AB2 5428 0024                  		addq.b	#2,$24(a0)
00011AB6 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011ABE 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011AC4 117C 0004 0001             		move.b	#4,1(a0)
00011ACA 117C 000C 0016             		move.b	#$C,$16(a0)
00011AD0 117C 0002 0018             		move.b	#2,$18(a0)
00011AD6 117C 000B 0020             		move.b	#$B,$20(a0)
00011ADC 117C 0010 0019             		move.b	#$10,$19(a0)
00011AE2                            
00011AE2                            Obj55_Action:				; XREF: Obj55_Index
00011AE2 7000                       		moveq	#0,d0
00011AE4 1028 0025                  		move.b	$25(a0),d0
00011AE8 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011AEC 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011AF0 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011AF6 6100 A614                  		bsr.w	AnimateSprite
00011AFA 6000 F5AC                  		bra.w	MarkObjGone
00011AFE                            ; ===========================================================================
00011AFE 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011B00 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011B02 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011B04 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011B06                            ; ===========================================================================
00011B06                            
00011B06                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011B06 343C 0080                  		move.w	#$80,d2
00011B0A 6100 0000                  		bsr.w	Obj55_ChkSonic
00011B0E 6400                       		bcc.s	Obj55_NoDrop
00011B10 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011B14 3140 0036                  		move.w	d0,$36(a0)
00011B18 9068 000C                  		sub.w	$C(a0),d0
00011B1C 6500                       		bcs.s	Obj55_NoDrop
00011B1E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011B22 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011B24 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011B28 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011B2A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011B2E D007                       		add.b	d7,d0
00011B30 0200 0007                  		andi.b	#7,d0
00011B34 6600                       		bne.s	Obj55_NoDrop
00011B36 117C 0001 001C             		move.b	#1,$1C(a0)
00011B3C 5428 0025                  		addq.b	#2,$25(a0)
00011B40                            
00011B40                            Obj55_NoDrop:
00011B40 4E75                       		rts	
00011B42                            ; ===========================================================================
00011B42                            
00011B42                            Obj55_DropFly:				; XREF: Obj55_Index2
00011B42 6100 D4A6                  		bsr.w	SpeedToPos
00011B46 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011B4C 343C 0080                  		move.w	#$80,d2
00011B50 6100 0000                  		bsr.w	Obj55_ChkSonic
00011B54 3028 0036                  		move.w	$36(a0),d0
00011B58 9068 000C                  		sub.w	$C(a0),d0
00011B5C 6500                       		bcs.s	Obj55_ChkDel
00011B5E 0C40 0010                  		cmpi.w	#$10,d0
00011B62 6400                       		bcc.s	locret_10180
00011B64 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011B68 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011B6E 117C 0002 001C             		move.b	#2,$1C(a0)
00011B74 5428 0025                  		addq.b	#2,$25(a0)
00011B78                            
00011B78                            locret_10180:
00011B78 4E75                       		rts	
00011B7A                            ; ===========================================================================
00011B7A                            
00011B7A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011B7A 4A28 0001                  		tst.b	1(a0)
00011B7E 6A00 D4CC                  		bpl.w	DeleteObject
00011B82 4E75                       		rts	
00011B84                            ; ===========================================================================
00011B84                            
00011B84                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011B84 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011B88 0200 000F                  		andi.b	#$F,d0
00011B8C 6600                       		bne.s	loc_101A0
00011B8E 303C 00C0                  		move.w	#$C0,d0
00011B92 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play flapping sound
00011B98                            
00011B98                            loc_101A0:
00011B98 6100 D450                  		bsr.w	SpeedToPos
00011B9C 3038 D008                  		move.w	($FFFFD008).w,d0
00011BA0 9068 0008                  		sub.w	8(a0),d0
00011BA4 6400                       		bcc.s	loc_101B0
00011BA6 4440                       		neg.w	d0
00011BA8                            
00011BA8                            loc_101B0:
00011BA8 0C40 0080                  		cmpi.w	#$80,d0
00011BAC 6500                       		bcs.s	locret_101C6
00011BAE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011BB2 D007                       		add.b	d7,d0
00011BB4 0200 0007                  		andi.b	#7,d0
00011BB8 6600                       		bne.s	locret_101C6
00011BBA 5428 0025                  		addq.b	#2,$25(a0)
00011BBE                            
00011BBE                            locret_101C6:
00011BBE 4E75                       		rts	
00011BC0                            ; ===========================================================================
00011BC0                            
00011BC0                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011BC0 6100 D428                  		bsr.w	SpeedToPos
00011BC4 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011BCA 6100 0000                  		bsr.w	ObjHitCeiling
00011BCE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011BD0 6A00                       		bpl.s	locret_101F4	; if not, branch
00011BD2 9368 000C                  		sub.w	d1,$C(a0)
00011BD6 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011BDC 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011BE0 4268 0012                  		clr.w	$12(a0)
00011BE4 4228 001C                  		clr.b	$1C(a0)
00011BE8 4228 0025                  		clr.b	$25(a0)
00011BEC                            
00011BEC                            locret_101F4:
00011BEC 4E75                       		rts	
00011BEE                            ; ===========================================================================
00011BEE                            
00011BEE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011BEE 323C 0100                  		move.w	#$100,d1
00011BF2 08E8 0000 0022             		bset	#0,$22(a0)
00011BF8 3038 D008                  		move.w	($FFFFD008).w,d0
00011BFC 9068 0008                  		sub.w	8(a0),d0
00011C00 6400                       		bcc.s	loc_10214
00011C02 4440                       		neg.w	d0
00011C04 4441                       		neg.w	d1
00011C06 08A8 0000 0022             		bclr	#0,$22(a0)
00011C0C                            
00011C0C                            loc_10214:
00011C0C B042                       		cmp.w	d2,d0
00011C0E 4E75                       		rts	
00011C10                            ; ===========================================================================
00011C10 6100 D3D8                  		bsr.w	SpeedToPos
00011C14 6100 D3FA                  		bsr.w	DisplaySprite
00011C18 4A28 0001                  		tst.b	1(a0)
00011C1C 6A00 D42E                  		bpl.w	DeleteObject
00011C20 4E75                       		rts	
00011C22                            ; ===========================================================================
00011C22                            Ani_obj55:
00011C22                            	include "_anim\obj55.asm"
00011C22                            ; ---------------------------------------------------------------------------
00011C22                            ; Animation script - Basaran enemy
00011C22                            ; ---------------------------------------------------------------------------
00011C22 0000                       		dc.w byte_10230-Ani_obj55
00011C24 0000                       		dc.w byte_10234-Ani_obj55
00011C26 0000                       		dc.w byte_10238-Ani_obj55
00011C28 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011C2C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011C30 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011C36                            		even
00011C36                            		even
00011C36                            
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            ; Sprite mappings - Basaran enemy (MZ)
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            Map_obj55:
00011C36                            	include "_maps\obj55.asm"
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            ; Sprite mappings - Basaran enemy (MZ)
00011C36                            ; ---------------------------------------------------------------------------
00011C36 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011C3A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011C3E 01                         byte_10246:	dc.b 1
00011C3F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011C44 03                         byte_1024C:	dc.b 3
00011C45 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011C4A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011C4F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011C54 04                         byte_1025C:	dc.b 4
00011C55 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011C5A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011C5F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011C64 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011C69 04                         byte_10271:	dc.b 4
00011C6A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011C6F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011C74 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011C79 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011C7E                            		even
00011C7E                            		even
00011C7E                            
00011C7E                            ; ===========================================================================
00011C7E                            ; ---------------------------------------------------------------------------
00011C7E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011C7E                            ; ---------------------------------------------------------------------------
00011C7E                            
00011C7E                            Obj56:					; XREF: Obj_Index
00011C7E 7000                       		moveq	#0,d0
00011C80 1028 0024                  		move.b	$24(a0),d0
00011C84 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011C88 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011C8C                            ; ===========================================================================
00011C8C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011C8E 0000                       		dc.w Obj56_Action-Obj56_Index
00011C90                            
00011C90 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011C92 2020                       		dc.b  $20, $20
00011C94 1020                       		dc.b  $10, $20
00011C96 201A                       		dc.b  $20, $1A
00011C98 1027                       		dc.b  $10, $27
00011C9A 1010                       		dc.b  $10, $10
00011C9C 0820                       		dc.b	8, $20
00011C9E 4010                       		dc.b  $40, $10
00011CA0                            ; ===========================================================================
00011CA0                            
00011CA0                            Obj56_Main:				; XREF: Obj56_Index
00011CA0 5428 0024                  		addq.b	#2,$24(a0)
00011CA4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011CAC 317C 4000 0002             		move.w	#$4000,2(a0)
00011CB2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011CB8 6600                       		bne.s	loc_102C8
00011CBA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011CC0                            
00011CC0                            loc_102C8:
00011CC0 117C 0004 0001             		move.b	#4,1(a0)
00011CC6 117C 0003 0018             		move.b	#3,$18(a0)
00011CCC 7000                       		moveq	#0,d0
00011CCE 1028 0028                  		move.b	$28(a0),d0
00011CD2 E648                       		lsr.w	#3,d0
00011CD4 0240 000E                  		andi.w	#$E,d0
00011CD8 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011CDC 115A 0019                  		move.b	(a2)+,$19(a0)
00011CE0 1152 0016                  		move.b	(a2),$16(a0)
00011CE4 E248                       		lsr.w	#1,d0
00011CE6 1140 001A                  		move.b	d0,$1A(a0)
00011CEA 3168 0008 0034             		move.w	8(a0),$34(a0)
00011CF0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011CF6 7000                       		moveq	#0,d0
00011CF8 1012                       		move.b	(a2),d0
00011CFA D040                       		add.w	d0,d0
00011CFC 3140 003A                  		move.w	d0,$3A(a0)
00011D00 7000                       		moveq	#0,d0
00011D02 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011D08 6700                       		beq.s	loc_10332
00011D0A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011D0E 0240 000F                  		andi.w	#$F,d0
00011D12 5140                       		subq.w	#8,d0
00011D14 6500                       		bcs.s	loc_10332
00011D16 E548                       		lsl.w	#2,d0
00011D18 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011D1C 45F2 0000                  		lea	(a2,d0.w),a2
00011D20 4A52                       		tst.w	(a2)
00011D22 6A00                       		bpl.s	loc_10332
00011D24 0868 0000 0022             		bchg	#0,$22(a0)
00011D2A                            
00011D2A                            loc_10332:
00011D2A 1028 0028                  		move.b	$28(a0),d0
00011D2E 6A00                       		bpl.s	Obj56_Action
00011D30 0200 000F                  		andi.b	#$F,d0
00011D34 1140 003C                  		move.b	d0,$3C(a0)
00011D38 117C 0005 0028             		move.b	#5,$28(a0)
00011D3E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011D44 6600                       		bne.s	Obj56_ChkGone
00011D46 117C 000C 0028             		move.b	#$C,$28(a0)
00011D4C 317C 0080 003A             		move.w	#$80,$3A(a0)
00011D52                            
00011D52                            Obj56_ChkGone:
00011D52 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011D56 7000                       		moveq	#0,d0
00011D58 1028 0023                  		move.b	$23(a0),d0
00011D5C 6700                       		beq.s	Obj56_Action
00011D5E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011D64 0832 0000 0002             		btst	#0,2(a2,d0.w)
00011D6A 6700                       		beq.s	Obj56_Action
00011D6C 5228 0028                  		addq.b	#1,$28(a0)
00011D70 4268 003A                  		clr.w	$3A(a0)
00011D74                            
00011D74                            Obj56_Action:				; XREF: Obj56_Index
00011D74 3F28 0008                  		move.w	8(a0),-(sp)
00011D78 7000                       		moveq	#0,d0
00011D7A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D7E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011D82 D040                       		add.w	d0,d0
00011D84 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011D88 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011D8C 381F                       		move.w	(sp)+,d4
00011D8E 4A28 0001                  		tst.b	1(a0)
00011D92 6A00                       		bpl.s	Obj56_ChkDel
00011D94 7200                       		moveq	#0,d1
00011D96 1228 0019                  		move.b	$19(a0),d1
00011D9A 0641 000B                  		addi.w	#$B,d1
00011D9E 7400                       		moveq	#0,d2
00011DA0 1428 0016                  		move.b	$16(a0),d2
00011DA4 3602                       		move.w	d2,d3
00011DA6 5243                       		addq.w	#1,d3
00011DA8 6100 F626                  		bsr.w	SolidObject
00011DAC                            
00011DAC                            Obj56_ChkDel:
00011DAC 3028 0034                  		move.w	$34(a0),d0
00011DB0 0240 FF80                  		andi.w	#$FF80,d0
00011DB4 3238 F700                  		move.w	($FFFFF700).w,d1
00011DB8 0441 0080                  		subi.w	#$80,d1
00011DBC 0241 FF80                  		andi.w	#$FF80,d1
00011DC0 9041                       		sub.w	d1,d0
00011DC2 0C40 0280                  		cmpi.w	#$280,d0
00011DC6 6200 D284                  		bhi.w	DeleteObject
00011DCA 6000 D244                  		bra.w	DisplaySprite
00011DCE                            ; ===========================================================================
00011DCE 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011DD2 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011DD6 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011DDA 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011DDE 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011DE2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011DE6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011DEA                            ; ===========================================================================
00011DEA                            
00011DEA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011DEA 4E75                       		rts	
00011DEC                            ; ===========================================================================
00011DEC                            
00011DEC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011DEC 323C 0040                  		move.w	#$40,d1
00011DF0 7000                       		moveq	#0,d0
00011DF2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011DF6 6000                       		bra.s	Obj56_Move_LR
00011DF8                            ; ===========================================================================
00011DF8                            
00011DF8                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011DF8 323C 0080                  		move.w	#$80,d1
00011DFC 7000                       		moveq	#0,d0
00011DFE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011E02                            
00011E02                            Obj56_Move_LR:
00011E02 0828 0000 0022             		btst	#0,$22(a0)
00011E08 6700                       		beq.s	loc_10416
00011E0A 4440                       		neg.w	d0
00011E0C D041                       		add.w	d1,d0
00011E0E                            
00011E0E                            loc_10416:
00011E0E 3228 0034                  		move.w	$34(a0),d1
00011E12 9240                       		sub.w	d0,d1
00011E14 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011E18 4E75                       		rts	
00011E1A                            ; ===========================================================================
00011E1A                            
00011E1A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011E1A 323C 0040                  		move.w	#$40,d1
00011E1E 7000                       		moveq	#0,d0
00011E20 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011E24 6000                       		bra.s	Obj56_Move_UD
00011E26                            ; ===========================================================================
00011E26                            
00011E26                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011E26 323C 0080                  		move.w	#$80,d1
00011E2A 7000                       		moveq	#0,d0
00011E2C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011E30                            
00011E30                            Obj56_Move_UD:
00011E30 0828 0000 0022             		btst	#0,$22(a0)
00011E36 6700                       		beq.s	loc_10444
00011E38 4440                       		neg.w	d0
00011E3A D041                       		add.w	d1,d0
00011E3C                            
00011E3C                            loc_10444:
00011E3C 3228 0030                  		move.w	$30(a0),d1
00011E40 9240                       		sub.w	d0,d1
00011E42 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011E46 4E75                       		rts	
00011E48                            ; ===========================================================================
00011E48                            
00011E48                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011E48 4A28 0038                  		tst.b	$38(a0)
00011E4C 6600                       		bne.s	loc_104A4
00011E4E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011E54 6600                       		bne.s	loc_1047A	; if not, branch
00011E56 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011E5C 6600                       		bne.s	loc_1047A
00011E5E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011E62 3038 D008                  		move.w	($FFFFD008).w,d0
00011E66 B068 0008                  		cmp.w	8(a0),d0
00011E6A 6400                       		bcc.s	loc_1047A
00011E6C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011E72                            
00011E72                            loc_1047A:
00011E72 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E76 7000                       		moveq	#0,d0
00011E78 1028 003C                  		move.b	$3C(a0),d0
00011E7C 0832 0000 0000             		btst	#0,(a2,d0.w)
00011E82 6700                       		beq.s	loc_104AE
00011E84 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011E8A 6600                       		bne.s	loc_1049E	; if not, branch
00011E8C 0C00 0003                  		cmpi.b	#3,d0
00011E90 6600                       		bne.s	loc_1049E
00011E92 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011E96                            
00011E96                            loc_1049E:
00011E96 117C 0001 0038             		move.b	#1,$38(a0)
00011E9C                            
00011E9C                            loc_104A4:
00011E9C 4A68 003A                  		tst.w	$3A(a0)
00011EA0 6700                       		beq.s	loc_104C8
00011EA2 5568 003A                  		subq.w	#2,$3A(a0)
00011EA6                            
00011EA6                            loc_104AE:
00011EA6 3028 003A                  		move.w	$3A(a0),d0
00011EAA 0828 0000 0022             		btst	#0,$22(a0)
00011EB0 6700                       		beq.s	loc_104BC
00011EB2 4440                       		neg.w	d0
00011EB4                            
00011EB4                            loc_104BC:
00011EB4 3228 0030                  		move.w	$30(a0),d1
00011EB8 D240                       		add.w	d0,d1
00011EBA 3141 000C                  		move.w	d1,$C(a0)
00011EBE 4E75                       		rts	
00011EC0                            ; ===========================================================================
00011EC0                            
00011EC0                            loc_104C8:
00011EC0 5228 0028                  		addq.b	#1,$28(a0)
00011EC4 4228 0038                  		clr.b	$38(a0)
00011EC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011ECC 7000                       		moveq	#0,d0
00011ECE 1028 0023                  		move.b	$23(a0),d0
00011ED2 67D2                       		beq.s	loc_104AE
00011ED4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011EDA 60CA                       		bra.s	loc_104AE
00011EDC                            ; ===========================================================================
00011EDC                            
00011EDC                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011EDC 4A28 0038                  		tst.b	$38(a0)
00011EE0 6600                       		bne.s	loc_10500
00011EE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011EE6 7000                       		moveq	#0,d0
00011EE8 1028 003C                  		move.b	$3C(a0),d0
00011EEC 4A32 0000                  		tst.b	(a2,d0.w)
00011EF0 6A00                       		bpl.s	loc_10512
00011EF2 117C 0001 0038             		move.b	#1,$38(a0)
00011EF8                            
00011EF8                            loc_10500:
00011EF8 7000                       		moveq	#0,d0
00011EFA 1028 0016                  		move.b	$16(a0),d0
00011EFE D040                       		add.w	d0,d0
00011F00 B068 003A                  		cmp.w	$3A(a0),d0
00011F04 6700                       		beq.s	loc_1052C
00011F06 5468 003A                  		addq.w	#2,$3A(a0)
00011F0A                            
00011F0A                            loc_10512:
00011F0A 3028 003A                  		move.w	$3A(a0),d0
00011F0E 0828 0000 0022             		btst	#0,$22(a0)
00011F14 6700                       		beq.s	loc_10520
00011F16 4440                       		neg.w	d0
00011F18                            
00011F18                            loc_10520:
00011F18 3228 0030                  		move.w	$30(a0),d1
00011F1C D240                       		add.w	d0,d1
00011F1E 3141 000C                  		move.w	d1,$C(a0)
00011F22 4E75                       		rts	
00011F24                            ; ===========================================================================
00011F24                            
00011F24                            loc_1052C:
00011F24 5328 0028                  		subq.b	#1,$28(a0)
00011F28 4228 0038                  		clr.b	$38(a0)
00011F2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011F30 7000                       		moveq	#0,d0
00011F32 1028 0023                  		move.b	$23(a0),d0
00011F36 67D2                       		beq.s	loc_10512
00011F38 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011F3E 60CA                       		bra.s	loc_10512
00011F40                            ; ===========================================================================
00011F40                            
00011F40                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011F40 4A28 0038                  		tst.b	$38(a0)
00011F44 6600                       		bne.s	loc_1055E
00011F46 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011F4A 6700                       		beq.s	locret_10578
00011F4C 117C 0001 0038             		move.b	#1,$38(a0)
00011F52 4268 003A                  		clr.w	$3A(a0)
00011F56                            
00011F56                            loc_1055E:
00011F56 5268 0008                  		addq.w	#1,8(a0)
00011F5A 3168 0008 0034             		move.w	8(a0),$34(a0)
00011F60 5268 003A                  		addq.w	#1,$3A(a0)
00011F64 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011F6A 6600                       		bne.s	locret_10578
00011F6C 4228 0028                  		clr.b	$28(a0)
00011F70                            
00011F70                            locret_10578:
00011F70 4E75                       		rts	
00011F72                            ; ===========================================================================
00011F72                            
00011F72                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011F72 4A28 0038                  		tst.b	$38(a0)
00011F76 6600                       		bne.s	loc_10598
00011F78 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011F7C 7000                       		moveq	#0,d0
00011F7E 1028 003C                  		move.b	$3C(a0),d0
00011F82 0832 0000 0000             		btst	#0,(a2,d0.w)
00011F88 6700                       		beq.s	loc_105A2
00011F8A 117C 0001 0038             		move.b	#1,$38(a0)
00011F90                            
00011F90                            loc_10598:
00011F90 4A68 003A                  		tst.w	$3A(a0)
00011F94 6700                       		beq.s	loc_105C0
00011F96 5568 003A                  		subq.w	#2,$3A(a0)
00011F9A                            
00011F9A                            loc_105A2:
00011F9A 3028 003A                  		move.w	$3A(a0),d0
00011F9E 0828 0000 0022             		btst	#0,$22(a0)
00011FA4 6700                       		beq.s	loc_105B4
00011FA6 4440                       		neg.w	d0
00011FA8 0640 0080                  		addi.w	#$80,d0
00011FAC                            
00011FAC                            loc_105B4:
00011FAC 3228 0034                  		move.w	$34(a0),d1
00011FB0 D240                       		add.w	d0,d1
00011FB2 3141 0008                  		move.w	d1,8(a0)
00011FB6 4E75                       		rts	
00011FB8                            ; ===========================================================================
00011FB8                            
00011FB8                            loc_105C0:
00011FB8 5228 0028                  		addq.b	#1,$28(a0)
00011FBC 4228 0038                  		clr.b	$38(a0)
00011FC0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011FC4 7000                       		moveq	#0,d0
00011FC6 1028 0023                  		move.b	$23(a0),d0
00011FCA 67CE                       		beq.s	loc_105A2
00011FCC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011FD2 60C6                       		bra.s	loc_105A2
00011FD4                            ; ===========================================================================
00011FD4                            
00011FD4                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011FD4 4A28 0038                  		tst.b	$38(a0)
00011FD8 6600                       		bne.s	loc_105F8
00011FDA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011FDE 7000                       		moveq	#0,d0
00011FE0 1028 003C                  		move.b	$3C(a0),d0
00011FE4 4A32 0000                  		tst.b	(a2,d0.w)
00011FE8 6A00                       		bpl.s	loc_10606
00011FEA 117C 0001 0038             		move.b	#1,$38(a0)
00011FF0                            
00011FF0                            loc_105F8:
00011FF0 303C 0080                  		move.w	#$80,d0
00011FF4 B068 003A                  		cmp.w	$3A(a0),d0
00011FF8 6700                       		beq.s	loc_10624
00011FFA 5468 003A                  		addq.w	#2,$3A(a0)
00011FFE                            
00011FFE                            loc_10606:
00011FFE 3028 003A                  		move.w	$3A(a0),d0
00012002 0828 0000 0022             		btst	#0,$22(a0)
00012008 6700                       		beq.s	loc_10618
0001200A 4440                       		neg.w	d0
0001200C 0640 0080                  		addi.w	#$80,d0
00012010                            
00012010                            loc_10618:
00012010 3228 0034                  		move.w	$34(a0),d1
00012014 D240                       		add.w	d0,d1
00012016 3141 0008                  		move.w	d1,8(a0)
0001201A 4E75                       		rts	
0001201C                            ; ===========================================================================
0001201C                            
0001201C                            loc_10624:
0001201C 5328 0028                  		subq.b	#1,$28(a0)
00012020 4228 0038                  		clr.b	$38(a0)
00012024 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012028 7000                       		moveq	#0,d0
0001202A 1028 0023                  		move.b	$23(a0),d0
0001202E 67CE                       		beq.s	loc_10606
00012030 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012036 60C6                       		bra.s	loc_10606
00012038                            ; ===========================================================================
00012038                            
00012038                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00012038 323C 0010                  		move.w	#$10,d1
0001203C 7000                       		moveq	#0,d0
0001203E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00012042 E248                       		lsr.w	#1,d0
00012044 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00012048 6000                       		bra.s	Obj56_Move_Sqr
0001204A                            ; ===========================================================================
0001204A                            
0001204A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001204A 323C 0030                  		move.w	#$30,d1
0001204E 7000                       		moveq	#0,d0
00012050 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00012054 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00012058 6000                       		bra.s	Obj56_Move_Sqr
0001205A                            ; ===========================================================================
0001205A                            
0001205A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001205A 323C 0050                  		move.w	#$50,d1
0001205E 7000                       		moveq	#0,d0
00012060 1038 FE90                  		move.b	($FFFFFE90).w,d0
00012064 3638 FE92                  		move.w	($FFFFFE92).w,d3
00012068 6000                       		bra.s	Obj56_Move_Sqr
0001206A                            ; ===========================================================================
0001206A                            
0001206A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001206A 323C 0070                  		move.w	#$70,d1
0001206E 7000                       		moveq	#0,d0
00012070 1038 FE94                  		move.b	($FFFFFE94).w,d0
00012074 3638 FE96                  		move.w	($FFFFFE96).w,d3
00012078                            
00012078                            Obj56_Move_Sqr:
00012078 4A43                       		tst.w	d3
0001207A 6600                       		bne.s	loc_1068E
0001207C 5228 0022                  		addq.b	#1,$22(a0)
00012080 0228 0003 0022             		andi.b	#3,$22(a0)
00012086                            
00012086                            loc_1068E:
00012086 1428 0022                  		move.b	$22(a0),d2
0001208A 0202 0003                  		andi.b	#3,d2
0001208E 6600                       		bne.s	loc_106AE
00012090 9041                       		sub.w	d1,d0
00012092 D068 0034                  		add.w	$34(a0),d0
00012096 3140 0008                  		move.w	d0,8(a0)
0001209A 4441                       		neg.w	d1
0001209C D268 0030                  		add.w	$30(a0),d1
000120A0 3141 000C                  		move.w	d1,$C(a0)
000120A4 4E75                       		rts	
000120A6                            ; ===========================================================================
000120A6                            
000120A6                            loc_106AE:
000120A6 5302                       		subq.b	#1,d2
000120A8 6600                       		bne.s	loc_106CC
000120AA 5341                       		subq.w	#1,d1
000120AC 9041                       		sub.w	d1,d0
000120AE 4440                       		neg.w	d0
000120B0 D068 0030                  		add.w	$30(a0),d0
000120B4 3140 000C                  		move.w	d0,$C(a0)
000120B8 5241                       		addq.w	#1,d1
000120BA D268 0034                  		add.w	$34(a0),d1
000120BE 3141 0008                  		move.w	d1,8(a0)
000120C2 4E75                       		rts	
000120C4                            ; ===========================================================================
000120C4                            
000120C4                            loc_106CC:
000120C4 5302                       		subq.b	#1,d2
000120C6 6600                       		bne.s	loc_106EA
000120C8 5341                       		subq.w	#1,d1
000120CA 9041                       		sub.w	d1,d0
000120CC 4440                       		neg.w	d0
000120CE D068 0034                  		add.w	$34(a0),d0
000120D2 3140 0008                  		move.w	d0,8(a0)
000120D6 5241                       		addq.w	#1,d1
000120D8 D268 0030                  		add.w	$30(a0),d1
000120DC 3141 000C                  		move.w	d1,$C(a0)
000120E0 4E75                       		rts	
000120E2                            ; ===========================================================================
000120E2                            
000120E2                            loc_106EA:
000120E2 9041                       		sub.w	d1,d0
000120E4 D068 0030                  		add.w	$30(a0),d0
000120E8 3140 000C                  		move.w	d0,$C(a0)
000120EC 4441                       		neg.w	d1
000120EE D268 0034                  		add.w	$34(a0),d1
000120F2 3141 0008                  		move.w	d1,8(a0)
000120F6 4E75                       		rts	
000120F8                            ; ===========================================================================
000120F8                            ; ---------------------------------------------------------------------------
000120F8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000120F8                            ; ---------------------------------------------------------------------------
000120F8                            Map_obj56:
000120F8                            	include "_maps\obj56.asm"
000120F8                            ; ---------------------------------------------------------------------------
000120F8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000120F8                            ; ---------------------------------------------------------------------------
000120F8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000120FC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00012100 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00012104 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00012108 01                         byte_10710:	dc.b 1
00012109 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001210E 04                         byte_10716:	dc.b 4
0001210F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00012114 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012119 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001211E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012123 02                         byte_1072B:	dc.b 2
00012124 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00012129 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001212E 04                         byte_10736:	dc.b 4
0001212F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012134 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012139 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001213E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012143 03                         byte_1074B:	dc.b 3
00012144 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00012149 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001214E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012153 01                         byte_1075B:	dc.b 1
00012154 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012159 02                         byte_10761:	dc.b 2
0001215A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001215F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012164 04                         byte_1076C:	dc.b 4
00012165 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001216A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001216F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012174 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001217A 00                         		even
0001217A 00                         		even
0001217A                            
0001217A                            ; ===========================================================================
0001217A                            ; ---------------------------------------------------------------------------
0001217A                            ; Object 57 - spiked balls (SYZ, LZ)
0001217A                            ; ---------------------------------------------------------------------------
0001217A                            
0001217A                            Obj57:					; XREF: Obj_Index
0001217A 7000                       		moveq	#0,d0
0001217C 1028 0024                  		move.b	$24(a0),d0
00012180 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012184 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00012188                            ; ===========================================================================
00012188 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001218A 0000                       		dc.w Obj57_Move-Obj57_Index
0001218C 0000                       		dc.w Obj57_Display-Obj57_Index
0001218E                            ; ===========================================================================
0001218E                            
0001218E                            Obj57_Main:				; XREF: Obj57_Index
0001218E 5428 0024                  		addq.b	#2,$24(a0)
00012192 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001219A 317C 03BA 0002             		move.w	#$3BA,2(a0)
000121A0 117C 0004 0001             		move.b	#4,1(a0)
000121A6 117C 0004 0018             		move.b	#4,$18(a0)
000121AC 117C 0008 0019             		move.b	#8,$19(a0)
000121B2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000121B8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000121BE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000121C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000121CA 6600                       		bne.s	loc_107E8
000121CC 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000121D2 317C 0310 0002             		move.w	#$310,2(a0)
000121D8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000121E0                            
000121E0                            loc_107E8:
000121E0 1228 0028                  		move.b	$28(a0),d1	; get object type
000121E4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000121E8 4881                       		ext.w	d1
000121EA E741                       		asl.w	#3,d1		; multiply by 8
000121EC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000121F0 1028 0022                  		move.b	$22(a0),d0
000121F4 E418                       		ror.b	#2,d0
000121F6 0200 00C0                  		andi.b	#-$40,d0
000121FA 1140 0026                  		move.b	d0,$26(a0)
000121FE 45E8 0029                  		lea	$29(a0),a2
00012202 1228 0028                  		move.b	$28(a0),d1	; get object type
00012206 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001220A 14FC 0000                  		move.b	#0,(a2)+
0001220E 3601                       		move.w	d1,d3
00012210 E94B                       		lsl.w	#4,d3
00012212 1143 003C                  		move.b	d3,$3C(a0)
00012216 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012218 6500                       		bcs.s	loc_10894
0001221A 0828 0003 0028             		btst	#3,$28(a0)
00012220 6700                       		beq.s	Obj57_MakeChain
00012222 5341                       		subq.w	#1,d1
00012224 6500                       		bcs.s	loc_10894
00012226                            
00012226                            Obj57_MakeChain:
00012226 6100 D26E                  		bsr.w	SingleObjLoad
0001222A 6600                       		bne.s	loc_10894
0001222C 5228 0029                  		addq.b	#1,$29(a0)
00012230 3A09                       		move.w	a1,d5
00012232 0445 D000                  		subi.w	#-$3000,d5
00012236 EC4D                       		lsr.w	#6,d5
00012238 0245 007F                  		andi.w	#$7F,d5
0001223C 14C5                       		move.b	d5,(a2)+
0001223E 137C 0004 0024             		move.b	#4,$24(a1)
00012244 1290                       		move.b	0(a0),0(a1)
00012246 2368 0004 0004             		move.l	4(a0),4(a1)
0001224C 3368 0002 0002             		move.w	2(a0),2(a1)
00012252 1368 0001 0001             		move.b	1(a0),1(a1)
00012258 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001225E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012264 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001226A 0403 0010                  		subi.b	#$10,d3
0001226E 1343 003C                  		move.b	d3,$3C(a1)
00012272 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012278 6600                       		bne.s	loc_10890
0001227A 4A03                       		tst.b	d3
0001227C 6600                       		bne.s	loc_10890
0001227E 137C 0002 001A             		move.b	#2,$1A(a1)
00012284                            
00012284                            loc_10890:
00012284 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00012288                            
00012288                            loc_10894:
00012288 3A08                       		move.w	a0,d5
0001228A 0445 D000                  		subi.w	#-$3000,d5
0001228E EC4D                       		lsr.w	#6,d5
00012290 0245 007F                  		andi.w	#$7F,d5
00012294 14C5                       		move.b	d5,(a2)+
00012296 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001229C 6600                       		bne.s	Obj57_Move
0001229E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000122A4 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000122AA                            
000122AA                            Obj57_Move:				; XREF: Obj57_Index
000122AA 6100 0000                  		bsr.w	Obj57_MoveSub
000122AE 6000 0000                  		bra.w	Obj57_ChkDel
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            Obj57_MoveSub:				; XREF: Obj57_Move
000122B2 3028 003E                  		move.w	$3E(a0),d0
000122B6 D168 0026                  		add.w	d0,$26(a0)
000122BA 1028 0026                  		move.b	$26(a0),d0
000122BE 4EB9 0000 29AE             		jsr	(CalcSine).l
000122C4 3428 0038                  		move.w	$38(a0),d2
000122C8 3628 003A                  		move.w	$3A(a0),d3
000122CC 45E8 0029                  		lea	$29(a0),a2
000122D0 7C00                       		moveq	#0,d6
000122D2 1C1A                       		move.b	(a2)+,d6
000122D4                            
000122D4                            Obj57_MoveLoop:
000122D4 7800                       		moveq	#0,d4
000122D6 181A                       		move.b	(a2)+,d4
000122D8 ED4C                       		lsl.w	#6,d4
000122DA 0684 00FF D000             		addi.l	#$FFD000,d4
000122E0 2244                       		movea.l	d4,a1
000122E2 7800                       		moveq	#0,d4
000122E4 1829 003C                  		move.b	$3C(a1),d4
000122E8 2A04                       		move.l	d4,d5
000122EA C9C0                       		muls.w	d0,d4
000122EC E084                       		asr.l	#8,d4
000122EE CBC1                       		muls.w	d1,d5
000122F0 E085                       		asr.l	#8,d5
000122F2 D842                       		add.w	d2,d4
000122F4 DA43                       		add.w	d3,d5
000122F6 3344 000C                  		move.w	d4,$C(a1)
000122FA 3345 0008                  		move.w	d5,8(a1)
000122FE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00012302 4E75                       		rts	
00012304                            ; ===========================================================================
00012304                            
00012304                            Obj57_ChkDel:				; XREF: Obj57_Move
00012304 3028 003A                  		move.w	$3A(a0),d0
00012308 0240 FF80                  		andi.w	#$FF80,d0
0001230C 3238 F700                  		move.w	($FFFFF700).w,d1
00012310 0441 0080                  		subi.w	#$80,d1
00012314 0241 FF80                  		andi.w	#$FF80,d1
00012318 9041                       		sub.w	d1,d0
0001231A 0C40 0280                  		cmpi.w	#$280,d0
0001231E 6200 0000                  		bhi.w	Obj57_Delete
00012322 6000 CCEC                  		bra.w	DisplaySprite
00012326                            ; ===========================================================================
00012326                            
00012326                            Obj57_Delete:				; XREF: Obj57_ChkDel
00012326 7400                       		moveq	#0,d2
00012328 45E8 0029                  		lea	$29(a0),a2
0001232C 141A                       		move.b	(a2)+,d2
0001232E                            
0001232E                            Obj57_DelLoop:
0001232E 7000                       		moveq	#0,d0
00012330 101A                       		move.b	(a2)+,d0
00012332 ED48                       		lsl.w	#6,d0
00012334 0680 00FF D000             		addi.l	#$FFD000,d0
0001233A 2240                       		movea.l	d0,a1
0001233C 6100 CD10                  		bsr.w	DeleteObject2
00012340 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00012344                            
00012344 4E75                       		rts	
00012346                            ; ===========================================================================
00012346                            
00012346                            Obj57_Display:				; XREF: Obj57_Index
00012346 6000 CCC8                  		bra.w	DisplaySprite
0001234A                            ; ===========================================================================
0001234A                            ; ---------------------------------------------------------------------------
0001234A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001234A                            ; ---------------------------------------------------------------------------
0001234A                            Map_obj57:
0001234A                            	include "_maps\obj57syz.asm"
0001234A                            ; ---------------------------------------------------------------------------
0001234A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001234A                            ; ---------------------------------------------------------------------------
0001234A 0000                       		dc.w byte_10958-Map_obj57
0001234C 01                         byte_10958:	dc.b 1
0001234D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012352                            		even
00012352                            		even
00012352                            
00012352                            ; ---------------------------------------------------------------------------
00012352                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012352                            ; ---------------------------------------------------------------------------
00012352                            Map_obj57a:
00012352                            	include "_maps\obj57lz.asm"
00012352                            ; ---------------------------------------------------------------------------
00012352                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012352                            ; ---------------------------------------------------------------------------
00012352 0000                       		dc.w byte_10964-Map_obj57a
00012354 0000                       		dc.w byte_1096A-Map_obj57a
00012356 0000                       		dc.w byte_10970-Map_obj57a
00012358 01                         byte_10964:	dc.b 1
00012359 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001235E 01                         byte_1096A:	dc.b 1
0001235F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00012364 01                         byte_10970:	dc.b 1
00012365 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001236A                            		even
0001236A                            		even
0001236A                            
0001236A                            ; ===========================================================================
0001236A                            ; ---------------------------------------------------------------------------
0001236A                            ; Object 58 - giant spiked balls (SYZ)
0001236A                            ; ---------------------------------------------------------------------------
0001236A                            
0001236A                            Obj58:					; XREF: Obj_Index
0001236A 7000                       		moveq	#0,d0
0001236C 1028 0024                  		move.b	$24(a0),d0
00012370 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00012374 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012378                            ; ===========================================================================
00012378 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001237A 0000                       		dc.w Obj58_Move-Obj58_Index
0001237C                            ; ===========================================================================
0001237C                            
0001237C                            Obj58_Main:				; XREF: Obj58_Index
0001237C 5428 0024                  		addq.b	#2,$24(a0)
00012380 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012388 317C 0396 0002             		move.w	#$396,2(a0)
0001238E 117C 0004 0001             		move.b	#4,1(a0)
00012394 117C 0004 0018             		move.b	#4,$18(a0)
0001239A 117C 0018 0019             		move.b	#$18,$19(a0)
000123A0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000123A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000123AC 117C 0086 0020             		move.b	#$86,$20(a0)
000123B2 1228 0028                  		move.b	$28(a0),d1	; get object type
000123B6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000123BA 4881                       		ext.w	d1
000123BC E741                       		asl.w	#3,d1		; multiply by 8
000123BE 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000123C2 1028 0022                  		move.b	$22(a0),d0
000123C6 E418                       		ror.b	#2,d0
000123C8 0200 00C0                  		andi.b	#$C0,d0
000123CC 1140 0026                  		move.b	d0,$26(a0)
000123D0 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000123D6                            
000123D6                            Obj58_Move:				; XREF: Obj58_Index
000123D6 7000                       		moveq	#0,d0
000123D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000123DC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000123E0 D040                       		add.w	d0,d0
000123E2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000123E6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000123EA 3028 003A                  		move.w	$3A(a0),d0
000123EE 0240 FF80                  		andi.w	#$FF80,d0
000123F2 3238 F700                  		move.w	($FFFFF700).w,d1
000123F6 0441 0080                  		subi.w	#$80,d1
000123FA 0241 FF80                  		andi.w	#$FF80,d1
000123FE 9041                       		sub.w	d1,d0
00012400 0C40 0280                  		cmpi.w	#$280,d0
00012404 6200 CC46                  		bhi.w	DeleteObject
00012408 6000 CC06                  		bra.w	DisplaySprite
0001240C                            ; ===========================================================================
0001240C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001240E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00012410 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00012412 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00012414                            ; ===========================================================================
00012414                            
00012414                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00012414 4E75                       		rts	
00012416                            ; ===========================================================================
00012416                            
00012416                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00012416 323C 0060                  		move.w	#$60,d1
0001241A 7000                       		moveq	#0,d0
0001241C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012420 0828 0000 0022             		btst	#0,$22(a0)
00012426 6700                       		beq.s	loc_10A38
00012428 4440                       		neg.w	d0
0001242A D041                       		add.w	d1,d0
0001242C                            
0001242C                            loc_10A38:
0001242C 3228 003A                  		move.w	$3A(a0),d1
00012430 9240                       		sub.w	d0,d1
00012432 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00012436 4E75                       		rts	
00012438                            ; ===========================================================================
00012438                            
00012438                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00012438 323C 0060                  		move.w	#$60,d1
0001243C 7000                       		moveq	#0,d0
0001243E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012442 0828 0000 0022             		btst	#0,$22(a0)
00012448 6700                       		beq.s	loc_10A5C
0001244A 4440                       		neg.w	d0
0001244C 0640 0080                  		addi.w	#$80,d0
00012450                            
00012450                            loc_10A5C:
00012450 3228 0038                  		move.w	$38(a0),d1
00012454 9240                       		sub.w	d0,d1
00012456 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001245A 4E75                       		rts	
0001245C                            ; ===========================================================================
0001245C                            
0001245C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001245C 3028 003E                  		move.w	$3E(a0),d0
00012460 D168 0026                  		add.w	d0,$26(a0)
00012464 1028 0026                  		move.b	$26(a0),d0
00012468 4EB9 0000 29AE             		jsr	(CalcSine).l
0001246E 3428 0038                  		move.w	$38(a0),d2
00012472 3628 003A                  		move.w	$3A(a0),d3
00012476 7800                       		moveq	#0,d4
00012478 1828 003C                  		move.b	$3C(a0),d4
0001247C 2A04                       		move.l	d4,d5
0001247E C9C0                       		muls.w	d0,d4
00012480 E084                       		asr.l	#8,d4
00012482 CBC1                       		muls.w	d1,d5
00012484 E085                       		asr.l	#8,d5
00012486 D842                       		add.w	d2,d4
00012488 DA43                       		add.w	d3,d5
0001248A 3144 000C                  		move.w	d4,$C(a0)
0001248E 3145 0008                  		move.w	d5,8(a0)
00012492 4E75                       		rts	
00012494                            ; ===========================================================================
00012494                            ; ---------------------------------------------------------------------------
00012494                            ; Sprite mappings - SBZ	spiked ball on a chain
00012494                            ; ---------------------------------------------------------------------------
00012494                            Map_obj15b:
00012494                            	include "_maps\obj15sbz.asm"
00012494                            ; ---------------------------------------------------------------------------
00012494                            ; Sprite mappings - spiked ball on a chain (SBZ)
00012494                            ; ---------------------------------------------------------------------------
00012494 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00012498 0000                       		dc.w byte_10AC6-Map_obj15b
0001249A 05                         byte_10AA6:	dc.b 5
0001249B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000124A0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000124A5 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000124AA F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000124AF 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000124B4 01                         byte_10AC0:	dc.b 1
000124B5 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000124BA 02                         byte_10AC6:	dc.b 2
000124BB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000124C0 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000124C6 00                         		even
000124C6 00                         		even
000124C6                            
000124C6                            ; ===========================================================================
000124C6                            ; ---------------------------------------------------------------------------
000124C6                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000124C6                            ; ---------------------------------------------------------------------------
000124C6                            
000124C6                            Obj59:					; XREF: Obj_Index
000124C6 7000                       		moveq	#0,d0
000124C8 1028 0024                  		move.b	$24(a0),d0
000124CC 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000124D0 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000124D4 3028 0032                  		move.w	$32(a0),d0
000124D8 0240 FF80                  		andi.w	#$FF80,d0
000124DC 3238 F700                  		move.w	($FFFFF700).w,d1
000124E0 0441 0080                  		subi.w	#$80,d1
000124E4 0241 FF80                  		andi.w	#$FF80,d1
000124E8 9041                       		sub.w	d1,d0
000124EA 0C40 0280                  		cmpi.w	#$280,d0
000124EE 6200 CB5C                  		bhi.w	DeleteObject
000124F2 6000 CB1C                  		bra.w	DisplaySprite
000124F6                            ; ===========================================================================
000124F6 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000124F8 0000                       		dc.w Obj59_Platform-Obj59_Index
000124FA 0000                       		dc.w Obj59_Action-Obj59_Index
000124FC 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000124FE                            
000124FE 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00012500                            
00012500 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00012502 2001                       		dc.b $20, 1
00012504 3401                       		dc.b $34, 1
00012506 1003                       		dc.b $10, 3
00012508 2003                       		dc.b $20, 3
0001250A 3403                       		dc.b $34, 3
0001250C 1401                       		dc.b $14, 1
0001250E 2401                       		dc.b $24, 1
00012510 2C01                       		dc.b $2C, 1
00012512 1403                       		dc.b $14, 3
00012514 2403                       		dc.b $24, 3
00012516 2C03                       		dc.b $2C, 3
00012518 2005                       		dc.b $20, 5
0001251A 2007                       		dc.b $20, 7
0001251C 3009                       		dc.b $30, 9
0001251E                            ; ===========================================================================
0001251E                            
0001251E                            Obj59_Main:				; XREF: Obj59_Index
0001251E 5428 0024                  		addq.b	#2,$24(a0)
00012522 7000                       		moveq	#0,d0
00012524 1028 0028                  		move.b	$28(a0),d0
00012528 6A00                       		bpl.s	Obj59_Main2
0001252A 5828 0024                  		addq.b	#4,$24(a0)
0001252E 0240 007F                  		andi.w	#$7F,d0
00012532 C0FC 0006                  		mulu.w	#6,d0
00012536 3140 003C                  		move.w	d0,$3C(a0)
0001253A 3140 003E                  		move.w	d0,$3E(a0)
0001253E 588F                       		addq.l	#4,sp
00012540 4E75                       		rts	
00012542                            ; ===========================================================================
00012542                            
00012542                            Obj59_Main2:
00012542 E648                       		lsr.w	#3,d0
00012544 0240 001E                  		andi.w	#$1E,d0
00012548 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001254C 115A 0019                  		move.b	(a2)+,$19(a0)
00012550 115A 001A                  		move.b	(a2)+,$1A(a0)
00012554 7000                       		moveq	#0,d0
00012556 1028 0028                  		move.b	$28(a0),d0
0001255A D040                       		add.w	d0,d0
0001255C 0240 001E                  		andi.w	#$1E,d0
00012560 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00012564 101A                       		move.b	(a2)+,d0
00012566 E548                       		lsl.w	#2,d0
00012568 3140 003C                  		move.w	d0,$3C(a0)
0001256C 115A 0028                  		move.b	(a2)+,$28(a0)
00012570 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00012578 317C 4000 0002             		move.w	#$4000,2(a0)
0001257E 117C 0004 0001             		move.b	#4,1(a0)
00012584 117C 0004 0018             		move.b	#4,$18(a0)
0001258A 3168 0008 0032             		move.w	8(a0),$32(a0)
00012590 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012596                            
00012596                            Obj59_Platform:				; XREF: Obj59_Index
00012596 7200                       		moveq	#0,d1
00012598 1228 0019                  		move.b	$19(a0),d1
0001259C 4EB9 0000 8E64             		jsr	(PlatformObject).l
000125A2 6000 0000                  		bra.w	Obj59_Types
000125A6                            ; ===========================================================================
000125A6                            
000125A6                            Obj59_Action:				; XREF: Obj59_Index
000125A6 7200                       		moveq	#0,d1
000125A8 1228 0019                  		move.b	$19(a0),d1
000125AC 4EB9 0000 8FD8             		jsr	(ExitPlatform).l
000125B2 3F28 0008                  		move.w	8(a0),-(sp)
000125B6 6100 0000                  		bsr.w	Obj59_Types
000125BA 341F                       		move.w	(sp)+,d2
000125BC 4A10                       		tst.b	0(a0)
000125BE 6700                       		beq.s	locret_10BD4
000125C0 4EF9 0000 9542             		jmp	(MvSonicOnPtfm2).l
000125C6                            ; ===========================================================================
000125C6                            
000125C6                            locret_10BD4:
000125C6 4E75                       		rts	
000125C8                            ; ===========================================================================
000125C8                            
000125C8                            Obj59_Types:
000125C8 7000                       		moveq	#0,d0
000125CA 1028 0028                  		move.b	$28(a0),d0
000125CE 0240 000F                  		andi.w	#$F,d0
000125D2 D040                       		add.w	d0,d0
000125D4 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000125D8 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000125DC                            ; ===========================================================================
000125DC 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125E0 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125E4 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125E8 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125EC 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000125F0                            ; ===========================================================================
000125F0                            
000125F0                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000125F0 4E75                       		rts	
000125F2                            ; ===========================================================================
000125F2                            
000125F2                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000125F2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000125F8 6600                       		bne.s	locret_10C0C
000125FA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000125FE                            
000125FE                            locret_10C0C:
000125FE 4E75                       		rts	
00012600                            ; ===========================================================================
00012600                            
00012600                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00012600 6100 0000                  		bsr.w	Obj59_Move
00012604 3028 0034                  		move.w	$34(a0),d0
00012608 4440                       		neg.w	d0
0001260A D068 0030                  		add.w	$30(a0),d0
0001260E 3140 000C                  		move.w	d0,$C(a0)
00012612 4E75                       		rts	
00012614                            ; ===========================================================================
00012614                            
00012614                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00012614 6100 0000                  		bsr.w	Obj59_Move
00012618 3028 0034                  		move.w	$34(a0),d0
0001261C D068 0030                  		add.w	$30(a0),d0
00012620 3140 000C                  		move.w	d0,$C(a0)
00012624 4E75                       		rts	
00012626                            ; ===========================================================================
00012626                            
00012626                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00012626 6100 0000                  		bsr.w	Obj59_Move
0001262A 3028 0034                  		move.w	$34(a0),d0
0001262E E240                       		asr.w	#1,d0
00012630 4440                       		neg.w	d0
00012632 D068 0030                  		add.w	$30(a0),d0
00012636 3140 000C                  		move.w	d0,$C(a0)
0001263A 3028 0034                  		move.w	$34(a0),d0
0001263E D068 0032                  		add.w	$32(a0),d0
00012642 3140 0008                  		move.w	d0,8(a0)
00012646 4E75                       		rts	
00012648                            ; ===========================================================================
00012648                            
00012648                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00012648 6100 0000                  		bsr.w	Obj59_Move
0001264C 3028 0034                  		move.w	$34(a0),d0
00012650 E240                       		asr.w	#1,d0
00012652 D068 0030                  		add.w	$30(a0),d0
00012656 3140 000C                  		move.w	d0,$C(a0)
0001265A 3028 0034                  		move.w	$34(a0),d0
0001265E 4440                       		neg.w	d0
00012660 D068 0032                  		add.w	$32(a0),d0
00012664 3140 0008                  		move.w	d0,8(a0)
00012668 4E75                       		rts	
0001266A                            ; ===========================================================================
0001266A                            
0001266A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001266A 6100 0000                  		bsr.w	Obj59_Move
0001266E 3028 0034                  		move.w	$34(a0),d0
00012672 4440                       		neg.w	d0
00012674 D068 0030                  		add.w	$30(a0),d0
00012678 3140 000C                  		move.w	d0,$C(a0)
0001267C 4A28 0028                  		tst.b	$28(a0)
00012680 6700 0000                  		beq.w	loc_10C94
00012684 4E75                       		rts	
00012686                            ; ===========================================================================
00012686                            
00012686                            loc_10C94:
00012686 0828 0003 0022             		btst	#3,$22(a0)
0001268C 6700                       		beq.s	Obj59_Delete
0001268E 08E9 0001 0022             		bset	#1,$22(a1)
00012694 08A9 0003 0022             		bclr	#3,$22(a1)
0001269A 137C 0002 0024             		move.b	#2,$24(a1)
000126A0                            
000126A0                            Obj59_Delete:
000126A0 6000 C9AA                  		bra.w	DeleteObject
000126A4                            
000126A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000126A4                            
000126A4                            
000126A4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000126A4 3028 0038                  		move.w	$38(a0),d0
000126A8 4A28 003A                  		tst.b	$3A(a0)
000126AC 6600                       		bne.s	loc_10CC8
000126AE 0C40 0800                  		cmpi.w	#$800,d0
000126B2 6400                       		bcc.s	loc_10CD0
000126B4 0640 0010                  		addi.w	#$10,d0
000126B8 6000                       		bra.s	loc_10CD0
000126BA                            ; ===========================================================================
000126BA                            
000126BA                            loc_10CC8:
000126BA 4A40                       		tst.w	d0
000126BC 6700                       		beq.s	loc_10CD0
000126BE 0440 0010                  		subi.w	#$10,d0
000126C2                            
000126C2                            loc_10CD0:
000126C2 3140 0038                  		move.w	d0,$38(a0)
000126C6 48C0                       		ext.l	d0
000126C8 E180                       		asl.l	#8,d0
000126CA D0A8 0034                  		add.l	$34(a0),d0
000126CE 2140 0034                  		move.l	d0,$34(a0)
000126D2 4840                       		swap	d0
000126D4 3428 003C                  		move.w	$3C(a0),d2
000126D8 B042                       		cmp.w	d2,d0
000126DA 6300                       		bls.s	loc_10CF0
000126DC 117C 0001 003A             		move.b	#1,$3A(a0)
000126E2                            
000126E2                            loc_10CF0:
000126E2 D442                       		add.w	d2,d2
000126E4 B042                       		cmp.w	d2,d0
000126E6 6600                       		bne.s	locret_10CFA
000126E8 4228 0028                  		clr.b	$28(a0)
000126EC                            
000126EC                            locret_10CFA:
000126EC 4E75                       		rts	
000126EE                            ; End of function Obj59_Move
000126EE                            
000126EE                            ; ===========================================================================
000126EE                            
000126EE                            Obj59_MakeMulti:			; XREF: Obj59_Index
000126EE 5368 003C                  		subq.w	#1,$3C(a0)
000126F2 6600                       		bne.s	Obj59_ChkDel
000126F4 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000126FA 6100 CD9A                  		bsr.w	SingleObjLoad
000126FE 6600                       		bne.s	Obj59_ChkDel
00012700 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00012704 3368 0008 0008             		move.w	8(a0),8(a1)
0001270A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012710 137C 000E 0028             		move.b	#$E,$28(a1)
00012716                            
00012716                            Obj59_ChkDel:
00012716 588F                       		addq.l	#4,sp
00012718 3028 0008                  		move.w	8(a0),d0
0001271C 0240 FF80                  		andi.w	#$FF80,d0
00012720 3238 F700                  		move.w	($FFFFF700).w,d1
00012724 0441 0080                  		subi.w	#$80,d1
00012728 0241 FF80                  		andi.w	#$FF80,d1
0001272C 9041                       		sub.w	d1,d0
0001272E 0C40 0280                  		cmpi.w	#$280,d0
00012732 6200 C918                  		bhi.w	DeleteObject
00012736 4E75                       		rts	
00012738                            ; ===========================================================================
00012738                            ; ---------------------------------------------------------------------------
00012738                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012738                            ; ---------------------------------------------------------------------------
00012738                            Map_obj59:
00012738                            	include "_maps\obj59.asm"
00012738                            ; ---------------------------------------------------------------------------
00012738                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012738                            ; ---------------------------------------------------------------------------
00012738 0000                       		dc.w byte_10D4A-Map_obj59
0001273A 03                         byte_10D4A:	dc.b 3
0001273B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012740 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012745 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001274A                            		even
0001274A                            		even
0001274A                            
0001274A                            ; ===========================================================================
0001274A                            ; ---------------------------------------------------------------------------
0001274A                            ; Object 5A - platforms	moving in circles (SLZ)
0001274A                            ; ---------------------------------------------------------------------------
0001274A                            
0001274A                            Obj5A:					; XREF: Obj_Index
0001274A 7000                       		moveq	#0,d0
0001274C 1028 0024                  		move.b	$24(a0),d0
00012750 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00012754 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00012758 3028 0032                  		move.w	$32(a0),d0
0001275C 0240 FF80                  		andi.w	#$FF80,d0
00012760 3238 F700                  		move.w	($FFFFF700).w,d1
00012764 0441 0080                  		subi.w	#$80,d1
00012768 0241 FF80                  		andi.w	#$FF80,d1
0001276C 9041                       		sub.w	d1,d0
0001276E 0C40 0280                  		cmpi.w	#$280,d0
00012772 6200 C8D8                  		bhi.w	DeleteObject
00012776 6000 C898                  		bra.w	DisplaySprite
0001277A                            ; ===========================================================================
0001277A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001277C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001277E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012780                            ; ===========================================================================
00012780                            
00012780                            Obj5A_Main:				; XREF: Obj5A_Index
00012780 5428 0024                  		addq.b	#2,$24(a0)
00012784 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001278C 317C 4000 0002             		move.w	#$4000,2(a0)
00012792 117C 0004 0001             		move.b	#4,1(a0)
00012798 117C 0004 0018             		move.b	#4,$18(a0)
0001279E 117C 0018 0019             		move.b	#$18,$19(a0)
000127A4 3168 0008 0032             		move.w	8(a0),$32(a0)
000127AA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000127B0                            
000127B0                            Obj5A_Platform:				; XREF: Obj5A_Index
000127B0 7200                       		moveq	#0,d1
000127B2 1228 0019                  		move.b	$19(a0),d1
000127B6 4EB9 0000 8E64             		jsr	(PlatformObject).l
000127BC 6000 0000                  		bra.w	Obj5A_Types
000127C0                            ; ===========================================================================
000127C0                            
000127C0                            Obj5A_Action:				; XREF: Obj5A_Index
000127C0 7200                       		moveq	#0,d1
000127C2 1228 0019                  		move.b	$19(a0),d1
000127C6 4EB9 0000 8FD8             		jsr	(ExitPlatform).l
000127CC 3F28 0008                  		move.w	8(a0),-(sp)
000127D0 6100 0000                  		bsr.w	Obj5A_Types
000127D4 341F                       		move.w	(sp)+,d2
000127D6 4EF9 0000 9542             		jmp	(MvSonicOnPtfm2).l
000127DC                            ; ===========================================================================
000127DC                            
000127DC                            Obj5A_Types:
000127DC 7000                       		moveq	#0,d0
000127DE 1028 0028                  		move.b	$28(a0),d0
000127E2 0240 000C                  		andi.w	#$C,d0
000127E6 E248                       		lsr.w	#1,d0
000127E8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000127EC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000127F0                            ; ===========================================================================
000127F0 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000127F2 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000127F4                            ; ===========================================================================
000127F4                            
000127F4                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000127F4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000127F8 0401 0050                  		subi.b	#$50,d1
000127FC 4881                       		ext.w	d1
000127FE 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012802 0402 0050                  		subi.b	#$50,d2
00012806 4882                       		ext.w	d2
00012808 0828 0000 0028             		btst	#0,$28(a0)
0001280E 6700                       		beq.s	loc_10E24
00012810 4441                       		neg.w	d1
00012812 4442                       		neg.w	d2
00012814                            
00012814                            loc_10E24:
00012814 0828 0001 0028             		btst	#1,$28(a0)
0001281A 6700                       		beq.s	loc_10E30
0001281C 4441                       		neg.w	d1
0001281E C342                       		exg	d1,d2
00012820                            
00012820                            loc_10E30:
00012820 D268 0032                  		add.w	$32(a0),d1
00012824 3141 0008                  		move.w	d1,8(a0)
00012828 D468 0030                  		add.w	$30(a0),d2
0001282C 3142 000C                  		move.w	d2,$C(a0)
00012830 4E75                       		rts	
00012832                            ; ===========================================================================
00012832                            
00012832                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012832 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012836 0401 0050                  		subi.b	#$50,d1
0001283A 4881                       		ext.w	d1
0001283C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012840 0402 0050                  		subi.b	#$50,d2
00012844 4882                       		ext.w	d2
00012846 0828 0000 0028             		btst	#0,$28(a0)
0001284C 6700                       		beq.s	loc_10E62
0001284E 4441                       		neg.w	d1
00012850 4442                       		neg.w	d2
00012852                            
00012852                            loc_10E62:
00012852 0828 0001 0028             		btst	#1,$28(a0)
00012858 6700                       		beq.s	loc_10E6E
0001285A 4441                       		neg.w	d1
0001285C C342                       		exg	d1,d2
0001285E                            
0001285E                            loc_10E6E:
0001285E 4441                       		neg.w	d1
00012860 D268 0032                  		add.w	$32(a0),d1
00012864 3141 0008                  		move.w	d1,8(a0)
00012868 D468 0030                  		add.w	$30(a0),d2
0001286C 3142 000C                  		move.w	d2,$C(a0)
00012870 4E75                       		rts	
00012872                            ; ===========================================================================
00012872                            ; ---------------------------------------------------------------------------
00012872                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012872                            ; ---------------------------------------------------------------------------
00012872                            Map_obj5A:
00012872                            	include "_maps\obj5A.asm"
00012872                            ; ---------------------------------------------------------------------------
00012872                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012872                            ; ---------------------------------------------------------------------------
00012872 0000                       		dc.w byte_10E84-Map_obj5A
00012874 02                         byte_10E84:	dc.b 2
00012875 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001287A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012880 00                         		even
00012880 00                         		even
00012880                            
00012880                            ; ===========================================================================
00012880                            ; ---------------------------------------------------------------------------
00012880                            ; Object 5B - blocks that form a staircase (SLZ)
00012880                            ; ---------------------------------------------------------------------------
00012880                            
00012880                            Obj5B:					; XREF: Obj_Index
00012880 7000                       		moveq	#0,d0
00012882 1028 0024                  		move.b	$24(a0),d0
00012886 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001288A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001288E 3028 0030                  		move.w	$30(a0),d0
00012892 0240 FF80                  		andi.w	#$FF80,d0
00012896 3238 F700                  		move.w	($FFFFF700).w,d1
0001289A 0441 0080                  		subi.w	#$80,d1
0001289E 0241 FF80                  		andi.w	#$FF80,d1
000128A2 9041                       		sub.w	d1,d0
000128A4 0C40 0280                  		cmpi.w	#$280,d0
000128A8 6200 C7A2                  		bhi.w	DeleteObject
000128AC 6000 C762                  		bra.w	DisplaySprite
000128B0                            ; ===========================================================================
000128B0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000128B2 0000                       		dc.w Obj5B_Move-Obj5B_Index
000128B4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000128B6                            ; ===========================================================================
000128B6                            
000128B6                            Obj5B_Main:				; XREF: Obj5B_Index
000128B6 5428 0024                  		addq.b	#2,$24(a0)
000128BA 7638                       		moveq	#$38,d3
000128BC 7801                       		moveq	#1,d4
000128BE 0828 0000 0022             		btst	#0,$22(a0)
000128C4 6700                       		beq.s	loc_10EDA
000128C6 763B                       		moveq	#$3B,d3
000128C8 78FF                       		moveq	#-1,d4
000128CA                            
000128CA                            loc_10EDA:
000128CA 3428 0008                  		move.w	8(a0),d2
000128CE 2248                       		movea.l	a0,a1
000128D0 7203                       		moveq	#3,d1
000128D2 6000                       		bra.s	Obj5B_MakeBlocks
000128D4                            ; ===========================================================================
000128D4                            
000128D4                            Obj5B_Loop:
000128D4 6100 CBD6                  		bsr.w	SingleObjLoad2
000128D8 6600 0000                  		bne.w	Obj5B_Move
000128DC 137C 0004 0024             		move.b	#4,$24(a1)
000128E2                            
000128E2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000128E2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000128E6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000128EE 337C 4000 0002             		move.w	#$4000,2(a1)
000128F4 137C 0004 0001             		move.b	#4,1(a1)
000128FA 137C 0003 0018             		move.b	#3,$18(a1)
00012900 137C 0010 0019             		move.b	#$10,$19(a1)
00012906 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001290C 3342 0008                  		move.w	d2,8(a1)
00012910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012916 3368 0008 0030             		move.w	8(a0),$30(a1)
0001291C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012922 0642 0020                  		addi.w	#$20,d2
00012926 1343 0037                  		move.b	d3,$37(a1)
0001292A 2348 003C                  		move.l	a0,$3C(a1)
0001292E D604                       		add.b	d4,d3
00012930 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012934                            
00012934                            Obj5B_Move:				; XREF: Obj5B_Index
00012934 7000                       		moveq	#0,d0
00012936 1028 0028                  		move.b	$28(a0),d0
0001293A 0240 0007                  		andi.w	#7,d0
0001293E D040                       		add.w	d0,d0
00012940 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012944 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012948                            
00012948                            Obj5B_Solid:				; XREF: Obj5B_Index
00012948 2468 003C                  		movea.l	$3C(a0),a2
0001294C 7000                       		moveq	#0,d0
0001294E 1028 0037                  		move.b	$37(a0),d0
00012952 1032 0000                  		move.b	(a2,d0.w),d0
00012956 D068 0032                  		add.w	$32(a0),d0
0001295A 3140 000C                  		move.w	d0,$C(a0)
0001295E 7200                       		moveq	#0,d1
00012960 1228 0019                  		move.b	$19(a0),d1
00012964 0641 000B                  		addi.w	#$B,d1
00012968 343C 0010                  		move.w	#$10,d2
0001296C 363C 0011                  		move.w	#$11,d3
00012970 3828 0008                  		move.w	8(a0),d4
00012974 6100 EA5A                  		bsr.w	SolidObject
00012978 4A04                       		tst.b	d4
0001297A 6A00                       		bpl.s	loc_10F92
0001297C 1544 0036                  		move.b	d4,$36(a2)
00012980                            
00012980                            loc_10F92:
00012980 0828 0003 0022             		btst	#3,$22(a0)
00012986 6700                       		beq.s	locret_10FA0
00012988 157C 0001 0036             		move.b	#1,$36(a2)
0001298E                            
0001298E                            locret_10FA0:
0001298E 4E75                       		rts	
00012990                            ; ===========================================================================
00012990 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012992 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012994 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012996 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012998                            ; ===========================================================================
00012998                            
00012998                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012998 4A68 0034                  		tst.w	$34(a0)
0001299C 6600                       		bne.s	loc_10FC0
0001299E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000129A4 6600                       		bne.s	locret_10FBE
000129A6 317C 001E 0034             		move.w	#$1E,$34(a0)
000129AC                            
000129AC                            locret_10FBE:
000129AC 4E75                       		rts	
000129AE                            ; ===========================================================================
000129AE                            
000129AE                            loc_10FC0:
000129AE 5368 0034                  		subq.w	#1,$34(a0)
000129B2 66F8                       		bne.s	locret_10FBE
000129B4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000129B8 4E75                       		rts	
000129BA                            ; ===========================================================================
000129BA                            
000129BA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000129BA 4A68 0034                  		tst.w	$34(a0)
000129BE 6600                       		bne.s	loc_10FE0
000129C0 4A28 0036                  		tst.b	$36(a0)
000129C4 6A00                       		bpl.s	locret_10FDE
000129C6 317C 003C 0034             		move.w	#$3C,$34(a0)
000129CC                            
000129CC                            locret_10FDE:
000129CC 4E75                       		rts	
000129CE                            ; ===========================================================================
000129CE                            
000129CE                            loc_10FE0:
000129CE 5368 0034                  		subq.w	#1,$34(a0)
000129D2 6600                       		bne.s	loc_10FEC
000129D4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000129D8 4E75                       		rts	
000129DA                            ; ===========================================================================
000129DA                            
000129DA                            loc_10FEC:
000129DA 43E8 0038                  		lea	$38(a0),a1
000129DE 3028 0034                  		move.w	$34(a0),d0
000129E2 E408                       		lsr.b	#2,d0
000129E4 0200 0001                  		andi.b	#1,d0
000129E8 12C0                       		move.b	d0,(a1)+
000129EA 0A00 0001                  		eori.b	#1,d0
000129EE 12C0                       		move.b	d0,(a1)+
000129F0 0A00 0001                  		eori.b	#1,d0
000129F4 12C0                       		move.b	d0,(a1)+
000129F6 0A00 0001                  		eori.b	#1,d0
000129FA 12C0                       		move.b	d0,(a1)+
000129FC 4E75                       		rts	
000129FE                            ; ===========================================================================
000129FE                            
000129FE                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000129FE 43E8 0038                  		lea	$38(a0),a1
00012A02 0C11 0080                  		cmpi.b	#$80,(a1)
00012A06 6700                       		beq.s	locret_11038
00012A08 5211                       		addq.b	#1,(a1)
00012A0A 7200                       		moveq	#0,d1
00012A0C 1219                       		move.b	(a1)+,d1
00012A0E 4841                       		swap	d1
00012A10 E289                       		lsr.l	#1,d1
00012A12 2401                       		move.l	d1,d2
00012A14 E289                       		lsr.l	#1,d1
00012A16 2601                       		move.l	d1,d3
00012A18 D682                       		add.l	d2,d3
00012A1A 4841                       		swap	d1
00012A1C 4842                       		swap	d2
00012A1E 4843                       		swap	d3
00012A20 12C3                       		move.b	d3,(a1)+
00012A22 12C2                       		move.b	d2,(a1)+
00012A24 12C1                       		move.b	d1,(a1)+
00012A26                            
00012A26                            locret_11038:
00012A26 4E75                       		rts	
00012A28 4E75                       		rts	
00012A2A                            ; ===========================================================================
00012A2A                            ; ---------------------------------------------------------------------------
00012A2A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012A2A                            ; ---------------------------------------------------------------------------
00012A2A                            Map_obj5B:
00012A2A                            	include "_maps\obj5B.asm"
00012A2A                            ; ---------------------------------------------------------------------------
00012A2A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012A2A                            ; ---------------------------------------------------------------------------
00012A2A 0000                       		dc.w byte_1103E-Map_obj5B
00012A2C 01                         byte_1103E:	dc.b 1
00012A2D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012A32                            		even
00012A32                            		even
00012A32                            
00012A32                            ; ===========================================================================
00012A32                            ; ---------------------------------------------------------------------------
00012A32                            ; Object 5C - metal girders in foreground (SLZ)
00012A32                            ; ---------------------------------------------------------------------------
00012A32                            
00012A32                            Obj5C:					; XREF: Obj_Index
00012A32 7000                       		moveq	#0,d0
00012A34 1028 0024                  		move.b	$24(a0),d0
00012A38 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012A3C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012A40                            ; ===========================================================================
00012A40 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012A42 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012A44                            ; ===========================================================================
00012A44                            
00012A44                            Obj5C_Main:				; XREF: Obj5C_Index
00012A44 5428 0024                  		addq.b	#2,$24(a0)
00012A48 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012A50 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012A56 117C 0010 0019             		move.b	#$10,$19(a0)
00012A5C                            
00012A5C                            Obj5C_Display:				; XREF: Obj5C_Index
00012A5C 2238 F700                  		move.l	($FFFFF700).w,d1
00012A60 D281                       		add.l	d1,d1
00012A62 4841                       		swap	d1
00012A64 4441                       		neg.w	d1
00012A66 3141 0008                  		move.w	d1,8(a0)
00012A6A 2238 F704                  		move.l	($FFFFF704).w,d1
00012A6E D281                       		add.l	d1,d1
00012A70 4841                       		swap	d1
00012A72 0241 003F                  		andi.w	#$3F,d1
00012A76 4441                       		neg.w	d1
00012A78 0641 0100                  		addi.w	#$100,d1
00012A7C 3141 000A                  		move.w	d1,$A(a0)
00012A80 6000 C58E                  		bra.w	DisplaySprite
00012A84                            ; ===========================================================================
00012A84                            ; ---------------------------------------------------------------------------
00012A84                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012A84                            ; ---------------------------------------------------------------------------
00012A84                            Map_obj5C:
00012A84                            	include "_maps\obj5C.asm"
00012A84                            ; ---------------------------------------------------------------------------
00012A84                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012A84                            ; ---------------------------------------------------------------------------
00012A84 0000                       		dc.w byte_11098-Map_obj5C
00012A86 09                         byte_11098:	dc.b 9
00012A87 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012A8C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012A91 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012A96 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012A9B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012AA0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012AA5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012AAA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012AAF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012AB4                            		even
00012AB4                            		even
00012AB4                            
00012AB4                            ; ===========================================================================
00012AB4                            ; ---------------------------------------------------------------------------
00012AB4                            ; Object 1B - water surface (LZ)
00012AB4                            ; ---------------------------------------------------------------------------
00012AB4                            
00012AB4                            Obj1B:					; XREF: Obj_Index
00012AB4 7000                       		moveq	#0,d0
00012AB6 1028 0024                  		move.b	$24(a0),d0
00012ABA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012ABE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012AC2                            ; ===========================================================================
00012AC2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012AC4 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012AC6                            ; ===========================================================================
00012AC6                            
00012AC6                            Obj1B_Main:				; XREF: Obj1B_Index
00012AC6 5428 0024                  		addq.b	#2,$24(a0)
00012ACA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012AD2 317C C300 0002             		move.w	#$C300,2(a0)
00012AD8 117C 0004 0001             		move.b	#4,1(a0)
00012ADE 117C 0080 0019             		move.b	#$80,$19(a0)
00012AE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00012AEA                            
00012AEA                            Obj1B_Action:				; XREF: Obj1B_Index
00012AEA 3238 F700                  		move.w	($FFFFF700).w,d1
00012AEE 0241 FFE0                  		andi.w	#$FFE0,d1
00012AF2 D268 0030                  		add.w	$30(a0),d1
00012AF6 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012AFC 6700                       		beq.s	loc_11114
00012AFE 0641 0020                  		addi.w	#$20,d1
00012B02                            
00012B02                            loc_11114:
00012B02 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012B06 3238 F646                  		move.w	($FFFFF646).w,d1
00012B0A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012B0E 4A28 0032                  		tst.b	$32(a0)
00012B12 6600                       		bne.s	Obj1B_Animate
00012B14 0838 0007 F605             		btst	#iStart,(Joypad|Press)	; is Start button pressed?
00012B1A 6700                       		beq.s	loc_1114A		; if not, branch
00012B1C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012B20 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012B26 6000                       		bra.s	Obj1B_Display
00012B28                            ; ===========================================================================
00012B28                            
00012B28                            Obj1B_Animate:				; XREF: loc_11114
00012B28 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012B2C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012B2E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012B34 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012B38                            
00012B38                            loc_1114A:				; XREF: loc_11114
00012B38 5328 001E                  		subq.b	#1,$1E(a0)
00012B3C 6A00                       		bpl.s	Obj1B_Display
00012B3E 117C 0007 001E             		move.b	#7,$1E(a0)
00012B44 5228 001A                  		addq.b	#1,$1A(a0)
00012B48 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012B4E 6500                       		bcs.s	Obj1B_Display
00012B50 117C 0000 001A             		move.b	#0,$1A(a0)
00012B56                            
00012B56                            Obj1B_Display:
00012B56 6000 C4B8                  		bra.w	DisplaySprite
00012B5A                            ; ===========================================================================
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A                            ; Sprite mappings - water surface (LZ)
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A                            Map_obj1B:
00012B5A                            	include "_maps\obj1B.asm"
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A                            ; Sprite mappings - water surface (LZ)
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012B5E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012B62 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012B66 03                         byte_11178:	dc.b 3
00012B67 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012B6C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012B71 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012B76 03                         byte_11188:	dc.b 3
00012B77 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012B7C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012B81 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012B86 03                         byte_11198:	dc.b 3
00012B87 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012B8C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012B91 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012B96 06                         byte_111A8:	dc.b 6
00012B97 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012B9C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012BA1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012BA6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012BAB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012BB0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012BB5 06                         byte_111C7:	dc.b 6
00012BB6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012BBB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012BC0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012BC5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012BCA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012BCF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012BD4 06                         byte_111E6:	dc.b 6
00012BD5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012BDA FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012BDF FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012BE4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012BE9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012BEE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012BF4 00                         		even
00012BF4 00                         		even
00012BF4                            
00012BF4                            ; ===========================================================================
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            ; Object 0B - pole that	breaks (LZ)
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            
00012BF4                            Obj0B:					; XREF: Obj_Index
00012BF4 7000                       		moveq	#0,d0
00012BF6 1028 0024                  		move.b	$24(a0),d0
00012BFA 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012BFE 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012C02                            ; ===========================================================================
00012C02 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012C04 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012C06 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012C08                            ; ===========================================================================
00012C08                            
00012C08                            Obj0B_Main:				; XREF: Obj0B_Index
00012C08 5428 0024                  		addq.b	#2,$24(a0)
00012C0C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012C14 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012C1A 117C 0004 0001             		move.b	#4,1(a0)
00012C20 117C 0008 0019             		move.b	#8,$19(a0)
00012C26 117C 0004 0018             		move.b	#4,$18(a0)
00012C2C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012C32 7000                       		moveq	#0,d0
00012C34 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C38 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012C3C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012C40                            
00012C40                            Obj0B_Action:				; XREF: Obj0B_Index
00012C40 4A28 0032                  		tst.b	$32(a0)
00012C44 6700                       		beq.s	Obj0B_Grab
00012C46 4A68 0030                  		tst.w	$30(a0)
00012C4A 6700                       		beq.s	Obj0B_MoveUp
00012C4C 5368 0030                  		subq.w	#1,$30(a0)
00012C50 6600                       		bne.s	Obj0B_MoveUp
00012C52 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012C58 6000                       		bra.s	Obj0B_Release
00012C5A                            ; ===========================================================================
00012C5A                            
00012C5A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012C5A 43F8 D000                  		lea	($FFFFD000).w,a1
00012C5E 3028 000C                  		move.w	$C(a0),d0
00012C62 0440 0018                  		subi.w	#$18,d0
00012C66 0838 0000 F604             		btst	#iUp,(Joypad|Held) ; check if "up" is pressed
00012C6C 6700                       		beq.s	Obj0B_MoveDown
00012C6E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012C72 B069 000C                  		cmp.w	$C(a1),d0
00012C76 6500                       		bcs.s	Obj0B_MoveDown
00012C78 3340 000C                  		move.w	d0,$C(a1)
00012C7C                            
00012C7C                            Obj0B_MoveDown:
00012C7C 0640 0024                  		addi.w	#$24,d0
00012C80 0838 0001 F604             		btst	#iDown,(Joypad|Held) ; check if "down" is pressed
00012C86 6700                       		beq.s	Obj0B_LetGo
00012C88 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012C8C B069 000C                  		cmp.w	$C(a1),d0
00012C90 6400                       		bcc.s	Obj0B_LetGo
00012C92 3340 000C                  		move.w	d0,$C(a1)
00012C96                            
00012C96                            Obj0B_LetGo:
00012C96 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)
00012C9E 6700                       		beq.s	Obj0B_Display
00012CA0                            
00012CA0                            Obj0B_Release:				; XREF: Obj0B_Action
00012CA0 4228 0020                  		clr.b	$20(a0)
00012CA4 5428 0024                  		addq.b	#2,$24(a0)
00012CA8 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012CAC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012CB0 4228 0032                  		clr.b	$32(a0)
00012CB4 6000                       		bra.s	Obj0B_Display
00012CB6                            ; ===========================================================================
00012CB6                            
00012CB6                            Obj0B_Grab:				; XREF: Obj0B_Action
00012CB6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012CBA 6700                       		beq.s	Obj0B_Display	; if not, branch
00012CBC 43F8 D000                  		lea	($FFFFD000).w,a1; load Sonic object
00012CC0 3028 0008                  		move.w	8(a0),d0
00012CC4 0640 0014                  		addi.w	#$14,d0
00012CC8 B069 0008                  		cmp.w	8(a1),d0
00012CCC 6400                       		bcc.s	Obj0B_Display
00012CCE 4228 0021                  		clr.b	$21(a0)
00012CD2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012CD8 6400                       		bcc.s	Obj0B_Display
00012CDA 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012CDE 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012CE2 3028 0008                  		move.w	8(a0),d0
00012CE6 0640 0014                  		addi.w	#$14,d0
00012CEA 3340 0008                  		move.w	d0,8(a1)
00012CEE 08A9 0000 0022             		bclr	#0,$22(a1)
00012CF4 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012CFA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012D00 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012D06 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012D0C                            
00012D0C                            Obj0B_Display:				; XREF: Obj0B_Index
00012D0C 6000 E39A                  		bra.w	MarkObjGone
00012D10                            ; ===========================================================================
00012D10                            ; ---------------------------------------------------------------------------
00012D10                            ; Sprite mappings - pole that breaks (LZ)
00012D10                            ; ---------------------------------------------------------------------------
00012D10                            Map_obj0B:
00012D10                            	include "_maps\obj0B.asm"
00012D10                            ; ---------------------------------------------------------------------------
00012D10                            ; Sprite mappings - pole that breaks (LZ)
00012D10                            ; ---------------------------------------------------------------------------
00012D10 0000                       		dc.w byte_11326-Map_obj0B
00012D12 0000                       		dc.w byte_11331-Map_obj0B
00012D14 02                         byte_11326:	dc.b 2			; normal pole
00012D15 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012D1A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012D1F 04                         byte_11331:	dc.b 4			; broken pole
00012D20 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012D25 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012D2A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012D2F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012D34                            		even
00012D34                            		even
00012D34                            
00012D34                            ; ===========================================================================
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            ; Object 0C - flapping door (LZ)
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            
00012D34                            Obj0C:					; XREF: Obj_Index
00012D34 7000                       		moveq	#0,d0
00012D36 1028 0024                  		move.b	$24(a0),d0
00012D3A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012D3E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012D42                            ; ===========================================================================
00012D42 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012D44 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012D46                            ; ===========================================================================
00012D46                            
00012D46                            Obj0C_Main:				; XREF: Obj0C_Index
00012D46 5428 0024                  		addq.b	#2,$24(a0)
00012D4A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012D52 317C 4328 0002             		move.w	#$4328,2(a0)
00012D58 0028 0004 0001             		ori.b	#4,1(a0)
00012D5E 117C 0028 0019             		move.b	#$28,$19(a0)
00012D64 7000                       		moveq	#0,d0
00012D66 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D6A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012D6E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012D72                            
00012D72                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012D72 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012D76 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012D78 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012D7E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012D84 4A28 0001                  		tst.b	1(a0)
00012D88 6A00                       		bpl.s	Obj0C_Solid
00012D8A 303C 00BB                  		move.w	#$BB,d0
00012D8E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play door sound
00012D94                            
00012D94                            Obj0C_Solid:
00012D94 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012D9A 6100 9370                  		bsr.w	AnimateSprite
00012D9E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012DA2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012DA6 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012DA8 3038 D008                  		move.w	($FFFFD008).w,d0
00012DAC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012DB0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012DB2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012DB8 323C 0013                  		move.w	#$13,d1
00012DBC 343C 0020                  		move.w	#$20,d2
00012DC0 3602                       		move.w	d2,d3
00012DC2 5243                       		addq.w	#1,d3
00012DC4 3828 0008                  		move.w	8(a0),d4
00012DC8 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00012DCC                            
00012DCC                            Obj0C_Display:
00012DCC 6000 E2DA                  		bra.w	MarkObjGone
00012DD0                            ; ===========================================================================
00012DD0                            Ani_obj0C:
00012DD0                            	include "_anim\obj0C.asm"
00012DD0                            ; ---------------------------------------------------------------------------
00012DD0                            ; Animation script - flapping door (LZ)
00012DD0                            ; ---------------------------------------------------------------------------
00012DD0 0000                       		dc.w byte_113E6-Ani_obj0C
00012DD2 0000                       		dc.w byte_113EC-Ani_obj0C
00012DD4 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012DDA 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012DE0                            		even
00012DE0                            		even
00012DE0                            
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0                            ; Sprite mappings - flapping door (LZ)
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0                            Map_obj0C:
00012DE0                            	include "_maps\obj0C.asm"
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0                            ; Sprite mappings - flapping door (LZ)
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0 0000                       		dc.w byte_113F8-Map_obj0C
00012DE2 0000                       		dc.w byte_11403-Map_obj0C
00012DE4 0000                       		dc.w byte_1140E-Map_obj0C
00012DE6 02                         byte_113F8:	dc.b 2
00012DE7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012DEC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012DF1 02                         byte_11403:	dc.b 2
00012DF2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012DF7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012DFC 02                         byte_1140E:	dc.b 2
00012DFD D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012E02 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012E08 00                         		even
00012E08 00                         		even
00012E08                            
00012E08                            ; ===========================================================================
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            ; Object 71 - invisible	solid blocks
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            
00012E08                            Obj71:					; XREF: Obj_Index
00012E08 7000                       		moveq	#0,d0
00012E0A 1028 0024                  		move.b	$24(a0),d0
00012E0E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012E12 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012E16                            ; ===========================================================================
00012E16 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012E18 0000                       		dc.w Obj71_Solid-Obj71_Index
00012E1A                            ; ===========================================================================
00012E1A                            
00012E1A                            Obj71_Main:				; XREF: Obj71_Index
00012E1A 5428 0024                  		addq.b	#2,$24(a0)
00012E1E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012E26 317C 8680 0002             		move.w	#$8680,2(a0)
00012E2C 0028 0004 0001             		ori.b	#4,1(a0)
00012E32 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E36 1200                       		move.b	d0,d1
00012E38 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012E3C 0640 0010                  		addi.w	#$10,d0
00012E40 E248                       		lsr.w	#1,d0
00012E42 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012E46 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012E4A 5241                       		addq.w	#1,d1
00012E4C E749                       		lsl.w	#3,d1
00012E4E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012E52                            
00012E52                            Obj71_Solid:				; XREF: Obj71_Index
00012E52 6100 C436                  		bsr.w	ChkObjOnScreen
00012E56 6600                       		bne.s	Obj71_ChkDel
00012E58 7200                       		moveq	#0,d1
00012E5A 1228 0019                  		move.b	$19(a0),d1
00012E5E 0641 000B                  		addi.w	#$B,d1
00012E62 7400                       		moveq	#0,d2
00012E64 1428 0016                  		move.b	$16(a0),d2
00012E68 3602                       		move.w	d2,d3
00012E6A 5243                       		addq.w	#1,d3
00012E6C 3828 0008                  		move.w	8(a0),d4
00012E70 6100 E5A4                  		bsr.w	SolidObject71
00012E74                            
00012E74                            Obj71_ChkDel:
00012E74 3028 0008                  		move.w	8(a0),d0
00012E78 0240 FF80                  		andi.w	#$FF80,d0
00012E7C 3238 F700                  		move.w	($FFFFF700).w,d1
00012E80 0441 0080                  		subi.w	#$80,d1
00012E84 0241 FF80                  		andi.w	#$FF80,d1
00012E88 9041                       		sub.w	d1,d0
00012E8A 0C40 0280                  		cmpi.w	#$280,d0
00012E8E 6200                       		bhi.s	Obj71_Delete
00012E90 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012E94 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012E96 4EFA C178                  		jmp	DisplaySprite	; if yes, display the object
00012E9A                            ; ===========================================================================
00012E9A                            
00012E9A                            Obj71_NoDisplay:
00012E9A 4E75                       		rts	
00012E9C                            ; ===========================================================================
00012E9C                            
00012E9C                            Obj71_Delete:
00012E9C 4EFA C1AE                  		jmp	DeleteObject
00012EA0                            ; ===========================================================================
00012EA0                            ; ---------------------------------------------------------------------------
00012EA0                            ; Sprite mappings - invisible solid blocks
00012EA0                            ; ---------------------------------------------------------------------------
00012EA0                            Map_obj71:
00012EA0                            	include "_maps\obj71.asm"
00012EA0                            ; ---------------------------------------------------------------------------
00012EA0                            ; Sprite mappings - invisible solid blocks
00012EA0                            ; ---------------------------------------------------------------------------
00012EA0 0000                       		dc.w byte_114BC-Map_obj71
00012EA2 0000                       		dc.w byte_114D1-Map_obj71
00012EA4 0000                       		dc.w byte_114E6-Map_obj71
00012EA6 04                         byte_114BC:	dc.b 4
00012EA7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012EAC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012EB1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012EB6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012EBB 04                         byte_114D1:	dc.b 4
00012EBC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012EC1 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012EC6 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012ECB 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012ED0 04                         byte_114E6:	dc.b 4
00012ED1 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012ED6 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012EDB 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012EE0 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012EE6 00                         		even
00012EE6 00                         		even
00012EE6                            
00012EE6                            ; ===========================================================================
00012EE6                            ; ---------------------------------------------------------------------------
00012EE6                            ; Object 5D - fans (SLZ)
00012EE6                            ; ---------------------------------------------------------------------------
00012EE6                            
00012EE6                            Obj5D:					; XREF: Obj_Index
00012EE6 7000                       		moveq	#0,d0
00012EE8 1028 0024                  		move.b	$24(a0),d0
00012EEC 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012EF0 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012EF4                            ; ===========================================================================
00012EF4 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012EF6 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012EF8                            ; ===========================================================================
00012EF8                            
00012EF8                            Obj5D_Main:				; XREF: Obj5D_Index
00012EF8 5428 0024                  		addq.b	#2,$24(a0)
00012EFC 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012F04 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012F0A 0028 0004 0001             		ori.b	#4,1(a0)
00012F10 117C 0010 0019             		move.b	#$10,$19(a0)
00012F16 117C 0004 0018             		move.b	#4,$18(a0)
00012F1C                            
00012F1C                            Obj5D_Delay:				; XREF: Obj5D_Index
00012F1C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012F22 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012F24 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012F28 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012F2A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012F30 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012F36 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012F38 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012F3E                            
00012F3E                            Obj5D_Blow:
00012F3E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012F42 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012F46 43F8 D000                  		lea	($FFFFD000).w,a1
00012F4A 3029 0008                  		move.w	8(a1),d0
00012F4E 9068 0008                  		sub.w	8(a0),d0
00012F52 0828 0000 0022             		btst	#0,$22(a0)
00012F58 6600                       		bne.s	Obj5D_ChkSonic
00012F5A 4440                       		neg.w	d0
00012F5C                            
00012F5C                            Obj5D_ChkSonic:
00012F5C 0640 0050                  		addi.w	#$50,d0
00012F60 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012F64 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012F66 3229 000C                  		move.w	$C(a1),d1
00012F6A 0641 0060                  		addi.w	#$60,d1
00012F6E 9268 000C                  		sub.w	$C(a0),d1
00012F72 6500                       		bcs.s	Obj5D_Animate
00012F74 0C41 0070                  		cmpi.w	#$70,d1
00012F78 6400                       		bcc.s	Obj5D_Animate
00012F7A 0440 0050                  		subi.w	#$50,d0
00012F7E 6400                       		bcc.s	loc_1159A
00012F80 4640                       		not.w	d0
00012F82 D040                       		add.w	d0,d0
00012F84                            
00012F84                            loc_1159A:
00012F84 0640 0060                  		addi.w	#$60,d0
00012F88 0828 0000 0022             		btst	#0,$22(a0)
00012F8E 6600                       		bne.s	loc_115A8
00012F90 4440                       		neg.w	d0
00012F92                            
00012F92                            loc_115A8:
00012F92 4400                       		neg.b	d0
00012F94 E840                       		asr.w	#4,d0
00012F96 0828 0000 0028             		btst	#0,$28(a0)
00012F9C 6700                       		beq.s	Obj5D_MoveSonic
00012F9E 4440                       		neg.w	d0
00012FA0                            
00012FA0                            Obj5D_MoveSonic:
00012FA0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012FA4                            
00012FA4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012FA4 5328 001E                  		subq.b	#1,$1E(a0)
00012FA8 6A00                       		bpl.s	Obj5D_ChkDel
00012FAA 117C 0000 001E             		move.b	#0,$1E(a0)
00012FB0 5228 001B                  		addq.b	#1,$1B(a0)
00012FB4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012FBA 6500                       		bcs.s	loc_115D8
00012FBC 117C 0000 001B             		move.b	#0,$1B(a0)
00012FC2                            
00012FC2                            loc_115D8:
00012FC2 7000                       		moveq	#0,d0
00012FC4 0828 0000 0028             		btst	#0,$28(a0)
00012FCA 6700                       		beq.s	loc_115E4
00012FCC 7002                       		moveq	#2,d0
00012FCE                            
00012FCE                            loc_115E4:
00012FCE D028 001B                  		add.b	$1B(a0),d0
00012FD2 1140 001A                  		move.b	d0,$1A(a0)
00012FD6                            
00012FD6                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012FD6 6100 C038                  		bsr.w	DisplaySprite
00012FDA 3028 0008                  		move.w	8(a0),d0
00012FDE 0240 FF80                  		andi.w	#$FF80,d0
00012FE2 3238 F700                  		move.w	($FFFFF700).w,d1
00012FE6 0441 0080                  		subi.w	#$80,d1
00012FEA 0241 FF80                  		andi.w	#$FF80,d1
00012FEE 9041                       		sub.w	d1,d0
00012FF0 0C40 0280                  		cmpi.w	#$280,d0
00012FF4 6200 C056                  		bhi.w	DeleteObject
00012FF8 4E75                       		rts	
00012FFA                            ; ===========================================================================
00012FFA                            ; ---------------------------------------------------------------------------
00012FFA                            ; Sprite mappings - fans (SLZ)
00012FFA                            ; ---------------------------------------------------------------------------
00012FFA                            Map_obj5D:
00012FFA                            	include "_maps\obj5D.asm"
00012FFA                            ; ---------------------------------------------------------------------------
00012FFA                            ; Sprite mappings - fans (SLZ)
00012FFA                            ; ---------------------------------------------------------------------------
00012FFA 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012FFE 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00013002 0000                       		dc.w byte_1161A-Map_obj5D
00013004 02                         byte_1161A:	dc.b 2
00013005 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001300A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001300F 02                         byte_11625:	dc.b 2
00013010 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013015 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001301A 02                         byte_11630:	dc.b 2
0001301B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013020 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013026 00                         		even
00013026 00                         		even
00013026                            
00013026                            ; ===========================================================================
00013026                            ; ---------------------------------------------------------------------------
00013026                            ; Object 5E - seesaws (SLZ)
00013026                            ; ---------------------------------------------------------------------------
00013026                            
00013026                            Obj5E:					; XREF: Obj_Index
00013026 7000                       		moveq	#0,d0
00013028 1028 0024                  		move.b	$24(a0),d0
0001302C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00013030 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00013034 3028 0030                  		move.w	$30(a0),d0
00013038 0240 FF80                  		andi.w	#$FF80,d0
0001303C 3238 F700                  		move.w	($FFFFF700).w,d1
00013040 0441 0080                  		subi.w	#$80,d1
00013044 0241 FF80                  		andi.w	#$FF80,d1
00013048 9041                       		sub.w	d1,d0
0001304A 6B00 C000                  		bmi.w	DeleteObject
0001304E 0C40 0280                  		cmpi.w	#$280,d0
00013052 6200 BFF8                  		bhi.w	DeleteObject
00013056 6000 BFB8                  		bra.w	DisplaySprite
0001305A                            ; ===========================================================================
0001305A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001305C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001305E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00013060 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00013062 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00013064 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00013066                            ; ===========================================================================
00013066                            
00013066                            Obj5E_Main:				; XREF: Obj5E_Index
00013066 5428 0024                  		addq.b	#2,$24(a0)
0001306A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00013072 317C 0374 0002             		move.w	#$374,2(a0)
00013078 0028 0004 0001             		ori.b	#4,1(a0)
0001307E 117C 0004 0018             		move.b	#4,$18(a0)
00013084 117C 0030 0019             		move.b	#$30,$19(a0)
0001308A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013090 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00013094 6600                       		bne.s	loc_116D2	; if not, branch
00013096 6100 C414                  		bsr.w	SingleObjLoad2
0001309A 6600                       		bne.s	loc_116D2
0001309C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000130A0 5C29 0024                  		addq.b	#6,$24(a1)
000130A4 3368 0008 0008             		move.w	8(a0),8(a1)
000130AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000130B0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000130B6 2348 003C                  		move.l	a0,$3C(a1)
000130BA                            
000130BA                            loc_116D2:
000130BA 0828 0000 0022             		btst	#0,$22(a0)
000130C0 6700                       		beq.s	loc_116E0
000130C2 117C 0002 001A             		move.b	#2,$1A(a0)
000130C8                            
000130C8                            loc_116E0:
000130C8 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000130CE                            
000130CE                            Obj5E_Slope:				; XREF: Obj5E_Index
000130CE 1228 003A                  		move.b	$3A(a0),d1
000130D2 6100 0000                  		bsr.w	loc_11766
000130D6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000130DC 0828 0000 001A             		btst	#0,$1A(a0)
000130E2 6700                       		beq.s	loc_11702
000130E4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000130EA                            
000130EA                            loc_11702:
000130EA 43F8 D000                  		lea	($FFFFD000).w,a1
000130EE 3169 0012 0038             		move.w	$12(a1),$38(a0)
000130F4 323C 0030                  		move.w	#$30,d1
000130F8 4EB9 0000 8F38             		jsr	(SlopeObject).l
000130FE 4E75                       		rts	
00013100                            ; ===========================================================================
00013100                            
00013100                            Obj5E_Slope2:				; XREF: Obj5E_Index
00013100 6100 0000                  		bsr.w	loc_1174A
00013104 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001310A 0828 0000 001A             		btst	#0,$1A(a0)
00013110 6700                       		beq.s	loc_11730
00013112 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013118                            
00013118                            loc_11730:
00013118 323C 0030                  		move.w	#$30,d1
0001311C 4EB9 0000 8FD8             		jsr	(ExitPlatform).l
00013122 323C 0030                  		move.w	#$30,d1
00013126 3428 0008                  		move.w	8(a0),d2
0001312A 4EB9 0000 9F36             		jsr	SlopeObject2
00013130 4E75                       		rts	
00013132                            ; ===========================================================================
00013132                            
00013132                            loc_1174A:				; XREF: Obj5E_Slope2
00013132 7202                       		moveq	#2,d1
00013134 43F8 D000                  		lea	($FFFFD000).w,a1
00013138 3028 0008                  		move.w	8(a0),d0
0001313C 9069 0008                  		sub.w	8(a1),d0
00013140 6400                       		bcc.s	loc_1175E
00013142 4440                       		neg.w	d0
00013144 7200                       		moveq	#0,d1
00013146                            
00013146                            loc_1175E:
00013146 0C40 0008                  		cmpi.w	#8,d0
0001314A 6400                       		bcc.s	loc_11766
0001314C 7201                       		moveq	#1,d1
0001314E                            
0001314E                            loc_11766:
0001314E 1028 001A                  		move.b	$1A(a0),d0
00013152 B001                       		cmp.b	d1,d0
00013154 6700                       		beq.s	locret_11790
00013156 6400                       		bcc.s	loc_11772
00013158 5400                       		addq.b	#2,d0
0001315A                            
0001315A                            loc_11772:
0001315A 5300                       		subq.b	#1,d0
0001315C 1140 001A                  		move.b	d0,$1A(a0)
00013160 1141 003A                  		move.b	d1,$3A(a0)
00013164 08A8 0000 0001             		bclr	#0,1(a0)
0001316A 0828 0001 001A             		btst	#1,$1A(a0)
00013170 6700                       		beq.s	locret_11790
00013172 08E8 0000 0001             		bset	#0,1(a0)
00013178                            
00013178                            locret_11790:
00013178 4E75                       		rts	
0001317A                            ; ===========================================================================
0001317A                            
0001317A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001317A 5428 0024                  		addq.b	#2,$24(a0)
0001317E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00013186 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001318C 0028 0004 0001             		ori.b	#4,1(a0)
00013192 117C 0004 0018             		move.b	#4,$18(a0)
00013198 117C 008B 0020             		move.b	#$8B,$20(a0)
0001319E 117C 000C 0019             		move.b	#$C,$19(a0)
000131A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000131AA 0668 0028 0008             		addi.w	#$28,8(a0)
000131B0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000131B6 117C 0001 001A             		move.b	#1,$1A(a0)
000131BC 0828 0000 0022             		btst	#0,$22(a0)
000131C2 6700                       		beq.s	Obj5E_MoveSpike
000131C4 0468 0050 0008             		subi.w	#$50,8(a0)
000131CA 117C 0002 003A             		move.b	#2,$3A(a0)
000131D0                            
000131D0                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000131D0 2268 003C                  		movea.l	$3C(a0),a1
000131D4 7000                       		moveq	#0,d0
000131D6 1028 003A                  		move.b	$3A(a0),d0
000131DA 9029 003A                  		sub.b	$3A(a1),d0
000131DE 6700                       		beq.s	loc_1183E
000131E0 6400                       		bcc.s	loc_117FC
000131E2 4400                       		neg.b	d0
000131E4                            
000131E4                            loc_117FC:
000131E4 323C F7E8                  		move.w	#-$818,d1
000131E8 343C FEEC                  		move.w	#-$114,d2
000131EC 0C00 0001                  		cmpi.b	#1,d0
000131F0 6700                       		beq.s	loc_11822
000131F2 323C F510                  		move.w	#-$AF0,d1
000131F6 343C FF34                  		move.w	#-$CC,d2
000131FA 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013200 6D00                       		blt.s	loc_11822
00013202 323C F200                  		move.w	#-$E00,d1
00013206 343C FF60                  		move.w	#-$A0,d2
0001320A                            
0001320A                            loc_11822:
0001320A 3141 0012                  		move.w	d1,$12(a0)
0001320E 3142 0010                  		move.w	d2,$10(a0)
00013212 3028 0008                  		move.w	8(a0),d0
00013216 9068 0030                  		sub.w	$30(a0),d0
0001321A 6400                       		bcc.s	loc_11838
0001321C 4468 0010                  		neg.w	$10(a0)
00013220                            
00013220                            loc_11838:
00013220 5428 0024                  		addq.b	#2,$24(a0)
00013224 6000                       		bra.s	Obj5E_SpikeFall
00013226                            ; ===========================================================================
00013226                            
00013226                            loc_1183E:				; XREF: Obj5E_MoveSpike
00013226 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001322C 7000                       		moveq	#0,d0
0001322E 1029 001A                  		move.b	$1A(a1),d0
00013232 343C 0028                  		move.w	#$28,d2
00013236 3228 0008                  		move.w	8(a0),d1
0001323A 9268 0030                  		sub.w	$30(a0),d1
0001323E 6400                       		bcc.s	loc_1185C
00013240 4442                       		neg.w	d2
00013242 5440                       		addq.w	#2,d0
00013244                            
00013244                            loc_1185C:
00013244 D040                       		add.w	d0,d0
00013246 3228 0034                  		move.w	$34(a0),d1
0001324A D272 0000                  		add.w	(a2,d0.w),d1
0001324E 3141 000C                  		move.w	d1,$C(a0)
00013252 D468 0030                  		add.w	$30(a0),d2
00013256 3142 0008                  		move.w	d2,8(a0)
0001325A 4268 000E                  		clr.w	$E(a0)
0001325E 4268 000A                  		clr.w	$A(a0)
00013262 4E75                       		rts	
00013264                            ; ===========================================================================
00013264                            
00013264                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00013264 4A68 0012                  		tst.w	$12(a0)
00013268 6A00                       		bpl.s	loc_1189A
0001326A 6100 BD52                  		bsr.w	ObjectFall
0001326E 3028 0034                  		move.w	$34(a0),d0
00013272 0440 002F                  		subi.w	#$2F,d0
00013276 B068 000C                  		cmp.w	$C(a0),d0
0001327A 6E00                       		bgt.s	locret_11898
0001327C 6100 BD40                  		bsr.w	ObjectFall
00013280                            
00013280                            locret_11898:
00013280 4E75                       		rts	
00013282                            ; ===========================================================================
00013282                            
00013282                            loc_1189A:				; XREF: Obj5E_SpikeFall
00013282 6100 BD3A                  		bsr.w	ObjectFall
00013286 2268 003C                  		movea.l	$3C(a0),a1
0001328A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013290 7000                       		moveq	#0,d0
00013292 1029 001A                  		move.b	$1A(a1),d0
00013296 3228 0008                  		move.w	8(a0),d1
0001329A 9268 0030                  		sub.w	$30(a0),d1
0001329E 6400                       		bcc.s	loc_118BA
000132A0 5440                       		addq.w	#2,d0
000132A2                            
000132A2                            loc_118BA:
000132A2 D040                       		add.w	d0,d0
000132A4 3228 0034                  		move.w	$34(a0),d1
000132A8 D272 0000                  		add.w	(a2,d0.w),d1
000132AC B268 000C                  		cmp.w	$C(a0),d1
000132B0 6E00                       		bgt.s	locret_11938
000132B2 2268 003C                  		movea.l	$3C(a0),a1
000132B6 7202                       		moveq	#2,d1
000132B8 4A68 0010                  		tst.w	$10(a0)
000132BC 6B00                       		bmi.s	Obj5E_Spring
000132BE 7200                       		moveq	#0,d1
000132C0                            
000132C0                            Obj5E_Spring:
000132C0 1341 003A                  		move.b	d1,$3A(a1)
000132C4 1141 003A                  		move.b	d1,$3A(a0)
000132C8 B229 001A                  		cmp.b	$1A(a1),d1
000132CC 6700                       		beq.s	loc_1192C
000132CE 08A9 0003 0022             		bclr	#3,$22(a1)
000132D4 6700                       		beq.s	loc_1192C
000132D6 4229 0025                  		clr.b	$25(a1)
000132DA 137C 0002 0024             		move.b	#2,$24(a1)
000132E0 45F8 D000                  		lea	($FFFFD000).w,a2
000132E4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000132EA 446A 0012                  		neg.w	$12(a2)
000132EE 08EA 0001 0022             		bset	#1,$22(a2)
000132F4 08AA 0003 0022             		bclr	#3,$22(a2)
000132FA 422A 003C                  		clr.b	$3C(a2)
000132FE 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00013304 157C 0002 0024             		move.b	#2,$24(a2)
0001330A 303C 00CC                  		move.w	#$CC,d0
0001330E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play spring sound
00013314                            
00013314                            loc_1192C:
00013314 4268 0010                  		clr.w	$10(a0)
00013318 4268 0012                  		clr.w	$12(a0)
0001331C 5528 0024                  		subq.b	#2,$24(a0)
00013320                            
00013320                            locret_11938:
00013320 4E75                       		rts	
00013322                            ; ===========================================================================
00013322 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001332C                            
0001332C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001335C                            		even
0001335C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001338C                            		even
0001338C                            ; ---------------------------------------------------------------------------
0001338C                            ; Sprite mappings - seesaws (SLZ)
0001338C                            ; ---------------------------------------------------------------------------
0001338C                            Map_obj5E:
0001338C                            	include "_maps\obj5E.asm"
0001338C                            ; ---------------------------------------------------------------------------
0001338C                            ; Sprite mappings - seesaws (SLZ)
0001338C                            ; ---------------------------------------------------------------------------
0001338C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013390 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013394 07                         byte_119AC:	dc.b 7
00013395 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001339A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001339F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000133A4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000133A9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000133AE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000133B3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000133B8 04                         byte_119D0:	dc.b 4
000133B9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000133BE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000133C3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000133C8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000133CE 00                         		even
000133CE 00                         		even
000133CE                            
000133CE                            ; ---------------------------------------------------------------------------
000133CE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000133CE                            ; ---------------------------------------------------------------------------
000133CE                            Map_obj5Ea:
000133CE                            	include "_maps\obj5Eballs.asm"
000133CE                            ; ---------------------------------------------------------------------------
000133CE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000133CE                            ; ---------------------------------------------------------------------------
000133CE 0000                       		dc.w byte_119EA-Map_obj5Ea
000133D0 0000                       		dc.w byte_119F0-Map_obj5Ea
000133D2 01                         byte_119EA:	dc.b 1
000133D3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000133D8 01                         byte_119F0:	dc.b 1
000133D9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000133DE                            		even
000133DE                            		even
000133DE                            
000133DE                            ; ===========================================================================
000133DE                            ; ---------------------------------------------------------------------------
000133DE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000133DE                            ; ---------------------------------------------------------------------------
000133DE                            
000133DE                            Obj5F:					; XREF: Obj_Index
000133DE 7000                       		moveq	#0,d0
000133E0 1028 0024                  		move.b	$24(a0),d0
000133E4 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000133E8 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000133EC                            ; ===========================================================================
000133EC 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000133EE 0000                       		dc.w Obj5F_Action-Obj5F_Index
000133F0 0000                       		dc.w Obj5F_Display-Obj5F_Index
000133F2 0000                       		dc.w Obj5F_End-Obj5F_Index
000133F4                            ; ===========================================================================
000133F4                            
000133F4                            Obj5F_Main:				; XREF: Obj5F_Index
000133F4 5428 0024                  		addq.b	#2,$24(a0)
000133F8 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00013400 317C 0400 0002             		move.w	#$400,2(a0)
00013406 0028 0004 0001             		ori.b	#4,1(a0)
0001340C 117C 0003 0018             		move.b	#3,$18(a0)
00013412 117C 000C 0019             		move.b	#$C,$19(a0)
00013418 1028 0028                  		move.b	$28(a0),d0
0001341C 6700                       		beq.s	loc_11A3C
0001341E 1140 0024                  		move.b	d0,$24(a0)
00013422 4E75                       		rts	
00013424                            ; ===========================================================================
00013424                            
00013424                            loc_11A3C:
00013424 117C 009A 0020             		move.b	#$9A,$20(a0)
0001342A 0868 0000 0022             		bchg	#0,$22(a0)
00013430                            
00013430                            Obj5F_Action:				; XREF: Obj5F_Index
00013430 7000                       		moveq	#0,d0
00013432 1028 0025                  		move.b	$25(a0),d0
00013436 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001343A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001343E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013444 6100 8CC6                  		bsr.w	AnimateSprite
00013448 6000 DC5E                  		bra.w	MarkObjGone
0001344C                            ; ===========================================================================
0001344C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001344E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00013450 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00013452                            ; ===========================================================================
00013452                            
00013452                            Obj5F_Walk:				; XREF: Obj5F_Index2
00013452 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013456 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001345A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001345C 5428 0025                  		addq.b	#2,$25(a0)
00013460 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00013466 317C 0010 0010             		move.w	#$10,$10(a0)
0001346C 117C 0001 001C             		move.b	#1,$1C(a0)
00013472 0868 0000 0022             		bchg	#0,$22(a0)
00013478 6700                       		beq.s	locret_11A96
0001347A 4468 0010                  		neg.w	$10(a0)		; change direction
0001347E                            
0001347E                            locret_11A96:
0001347E 4E75                       		rts	
00013480                            ; ===========================================================================
00013480                            
00013480                            Obj5F_Wait:				; XREF: Obj5F_Index2
00013480 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013484 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013488 6B00                       		bmi.s	loc_11AA8
0001348A 6100 BB5E                  		bsr.w	SpeedToPos
0001348E 4E75                       		rts	
00013490                            ; ===========================================================================
00013490                            
00013490                            loc_11AA8:
00013490 5528 0025                  		subq.b	#2,$25(a0)
00013494 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001349A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001349E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000134A4 4E75                       		rts	
000134A6                            ; ===========================================================================
000134A6                            
000134A6                            Obj5F_Explode:				; XREF: Obj5F_Index2
000134A6 5368 0030                  		subq.w	#1,$30(a0)
000134AA 6A00                       		bpl.s	locret_11AD0
000134AC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000134B0 117C 0000 0024             		move.b	#0,$24(a0)
000134B6                            
000134B6                            locret_11AD0:
000134B6 4E75                       		rts	
000134B8                            ; ===========================================================================
000134B8                            
000134B8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000134B8 3038 D008                  		move.w	($FFFFD008).w,d0
000134BC 9068 0008                  		sub.w	8(a0),d0
000134C0 6400                       		bcc.s	loc_11ADE
000134C2 4440                       		neg.w	d0
000134C4                            
000134C4                            loc_11ADE:
000134C4 0C40 0060                  		cmpi.w	#$60,d0
000134C8 6400                       		bcc.s	locret_11B5E
000134CA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000134CE 9068 000C                  		sub.w	$C(a0),d0
000134D2 6400                       		bcc.s	Obj5F_MakeFuse
000134D4 4440                       		neg.w	d0
000134D6                            
000134D6                            Obj5F_MakeFuse:
000134D6 0C40 0060                  		cmpi.w	#$60,d0
000134DA 6400                       		bcc.s	locret_11B5E
000134DC 4A78 FE08                  		tst.w	($FFFFFE08).w
000134E0 6600                       		bne.s	locret_11B5E
000134E2 117C 0004 0025             		move.b	#4,$25(a0)
000134E8 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000134EE 4268 0010                  		clr.w	$10(a0)
000134F2 117C 0002 001C             		move.b	#2,$1C(a0)
000134F8 6100 BFB2                  		bsr.w	SingleObjLoad2
000134FC 6600                       		bne.s	locret_11B5E
000134FE 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00013502 3368 0008 0008             		move.w	8(a0),8(a1)
00013508 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001350E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00013514 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001351A 137C 0004 0028             		move.b	#4,$28(a1)
00013520 137C 0003 001C             		move.b	#3,$1C(a1)
00013526 337C 0010 0012             		move.w	#$10,$12(a1)
0001352C 0828 0001 0022             		btst	#1,$22(a0)
00013532 6700                       		beq.s	loc_11B54
00013534 4469 0012                  		neg.w	$12(a1)
00013538                            
00013538                            loc_11B54:
00013538 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001353E 2348 003C                  		move.l	a0,$3C(a1)
00013542                            
00013542                            locret_11B5E:
00013542 4E75                       		rts	
00013544                            ; ===========================================================================
00013544                            
00013544                            Obj5F_Display:				; XREF: Obj5F_Index
00013544 6100                       		bsr.s	loc_11B70
00013546 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001354C 6100 8BBE                  		bsr.w	AnimateSprite
00013550 6000 DB56                  		bra.w	MarkObjGone
00013554                            ; ===========================================================================
00013554                            
00013554                            loc_11B70:
00013554 5368 0030                  		subq.w	#1,$30(a0)
00013558 6B00                       		bmi.s	loc_11B7C
0001355A 6100 BA8E                  		bsr.w	SpeedToPos
0001355E 4E75                       		rts	
00013560                            ; ===========================================================================
00013560                            
00013560                            loc_11B7C:
00013560 4268 0030                  		clr.w	$30(a0)
00013564 4228 0024                  		clr.b	$24(a0)
00013568 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001356E 7203                       		moveq	#3,d1
00013570 2248                       		movea.l	a0,a1
00013572 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00013578 6000                       		bra.s	Obj5F_MakeShrap
0001357A                            ; ===========================================================================
0001357A                            
0001357A                            Obj5F_Loop:
0001357A 6100 BF30                  		bsr.w	SingleObjLoad2
0001357E 6600                       		bne.s	loc_11BCE
00013580                            
00013580                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00013580 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00013584 3368 0008 0008             		move.w	8(a0),8(a1)
0001358A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013590 137C 0006 0028             		move.b	#6,$28(a1)
00013596 137C 0004 001C             		move.b	#4,$1C(a1)
0001359C 335A 0010                  		move.w	(a2)+,$10(a1)
000135A0 335A 0012                  		move.w	(a2)+,$12(a1)
000135A4 137C 0098 0020             		move.b	#$98,$20(a1)
000135AA 08E9 0007 0001             		bset	#7,1(a1)
000135B0                            
000135B0                            loc_11BCE:
000135B0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000135B4                            
000135B4 117C 0006 0024             		move.b	#6,$24(a0)
000135BA                            
000135BA                            Obj5F_End:				; XREF: Obj5F_Index
000135BA 6100 BA2E                  		bsr.w	SpeedToPos
000135BE 0668 0018 0012             		addi.w	#$18,$12(a0)
000135C4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000135CA 6100 8B40                  		bsr.w	AnimateSprite
000135CE 4A28 0001                  		tst.b	1(a0)
000135D2 6A00 BA78                  		bpl.w	DeleteObject
000135D6 6000 BA38                  		bra.w	DisplaySprite
000135DA                            ; ===========================================================================
000135DA FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000135EA                            
000135EA                            Ani_obj5F:
000135EA                            	include "_anim\obj5F.asm"
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            ; Animation script - Bomb enemy
000135EA                            ; ---------------------------------------------------------------------------
000135EA 0000                       		dc.w byte_11C12-Ani_obj5F
000135EC 0000                       		dc.w byte_11C16-Ani_obj5F
000135EE 0000                       		dc.w byte_11C1C-Ani_obj5F
000135F0 0000                       		dc.w byte_11C20-Ani_obj5F
000135F2 0000                       		dc.w byte_11C24-Ani_obj5F
000135F4 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000135F8 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000135FE 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00013602 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00013606 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001360A                            		even
0001360A                            		even
0001360A                            
0001360A                            ; ---------------------------------------------------------------------------
0001360A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001360A                            ; ---------------------------------------------------------------------------
0001360A                            Map_obj5F:
0001360A                            	include "_maps\obj5F.asm"
0001360A                            ; ---------------------------------------------------------------------------
0001360A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001360A                            ; ---------------------------------------------------------------------------
0001360A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001360E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00013612 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00013616 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001361A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001361E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00013622 03                         byte_11C40:	dc.b 3
00013623 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013628 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001362D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013632 03                         byte_11C50:	dc.b 3
00013633 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013638 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001363D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013642 03                         byte_11C60:	dc.b 3
00013643 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013648 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001364D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013652 03                         byte_11C70:	dc.b 3
00013653 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013658 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001365D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013662 03                         byte_11C80:	dc.b 3
00013663 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013668 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001366D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013672 03                         byte_11C90:	dc.b 3
00013673 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013678 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001367D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013682 02                         byte_11CA0:	dc.b 2
00013683 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013688 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001368D 02                         byte_11CAB:	dc.b 2
0001368E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013693 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013698 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00013699 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001369E 01                         byte_11CBC:	dc.b 1			; fuse
0001369F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000136A4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000136A5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000136AA 01                         byte_11CC8:	dc.b 1			; fireball
000136AB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000136B0                            		even
000136B0                            		even
000136B0                            
000136B0                            ; ===========================================================================
000136B0                            ; ---------------------------------------------------------------------------
000136B0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000136B0                            ; ---------------------------------------------------------------------------
000136B0                            
000136B0                            Obj60:					; XREF: Obj_Index
000136B0 7000                       		moveq	#0,d0
000136B2 1028 0024                  		move.b	$24(a0),d0
000136B6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000136BA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000136BE                            ; ===========================================================================
000136BE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000136C0 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000136C2 0000                       		dc.w Obj60_Display-Obj60_Index
000136C4 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000136C6 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000136C8                            ; ===========================================================================
000136C8                            
000136C8                            Obj60_Main:				; XREF: Obj60_Index
000136C8 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000136D0 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000136D6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000136DC 6700                       		beq.s	loc_11D02
000136DE 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000136E4                            
000136E4                            loc_11D02:
000136E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000136EA 6600                       		bne.s	loc_11D10
000136EC 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000136F2                            
000136F2                            loc_11D10:
000136F2 0028 0004 0001             		ori.b	#4,1(a0)
000136F8 117C 0004 0018             		move.b	#4,$18(a0)
000136FE 117C 000B 0020             		move.b	#$B,$20(a0)
00013704 117C 000C 0019             		move.b	#$C,$19(a0)
0001370A 7400                       		moveq	#0,d2
0001370C 45E8 0037                  		lea	$37(a0),a2
00013710 264A                       		movea.l	a2,a3
00013712 524A                       		addq.w	#1,a2
00013714 7203                       		moveq	#3,d1
00013716                            
00013716                            Obj60_MakeOrbs:
00013716 6100 BD94                  		bsr.w	SingleObjLoad2
0001371A 6600                       		bne.s	loc_11D90
0001371C 5213                       		addq.b	#1,(a3)
0001371E 3A09                       		move.w	a1,d5
00013720 0445 D000                  		subi.w	#-$3000,d5
00013724 EC4D                       		lsr.w	#6,d5
00013726 0245 007F                  		andi.w	#$7F,d5
0001372A 14C5                       		move.b	d5,(a2)+
0001372C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001372E 137C 0006 0024             		move.b	#6,$24(a1)
00013734 2368 0004 0004             		move.l	4(a0),4(a1)
0001373A 3368 0002 0002             		move.w	2(a0),2(a1)
00013740 0029 0004 0001             		ori.b	#4,1(a1)
00013746 137C 0004 0018             		move.b	#4,$18(a1)
0001374C 137C 0008 0019             		move.b	#8,$19(a1)
00013752 137C 0003 001A             		move.b	#3,$1A(a1)
00013758 137C 0098 0020             		move.b	#$98,$20(a1)
0001375E 1342 0026                  		move.b	d2,$26(a1)
00013762 0602 0040                  		addi.b	#$40,d2
00013766 2348 003C                  		move.l	a0,$3C(a1)
0001376A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001376E                            
0001376E                            loc_11D90:
0001376E 7001                       		moveq	#1,d0
00013770 0828 0000 0022             		btst	#0,$22(a0)
00013776 6700                       		beq.s	Obj60_Move
00013778 4440                       		neg.w	d0
0001377A                            
0001377A                            Obj60_Move:
0001377A 1140 0036                  		move.b	d0,$36(a0)
0001377E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00013784 5428 0024                  		addq.b	#2,$24(a0)
00013788 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001378E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00013794 6700                       		beq.s	locret_11DBC	; if not, branch
00013796 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001379A                            
0001379A                            locret_11DBC:
0001379A 4E75                       		rts	
0001379C                            ; ===========================================================================
0001379C                            
0001379C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001379C 3038 D008                  		move.w	($FFFFD008).w,d0
000137A0 9068 0008                  		sub.w	8(a0),d0
000137A4 6400                       		bcc.s	loc_11DCA
000137A6 4440                       		neg.w	d0
000137A8                            
000137A8                            loc_11DCA:
000137A8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000137AC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000137AE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000137B2 9068 000C                  		sub.w	$C(a0),d0
000137B6 6400                       		bcc.s	loc_11DDC
000137B8 4440                       		neg.w	d0
000137BA                            
000137BA                            loc_11DDC:
000137BA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000137BE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000137C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000137C4 6600                       		bne.s	Obj60_Animate	; if yes, branch
000137C6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000137CC                            
000137CC                            Obj60_Animate:
000137CC 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000137D2 6100 8938                  		bsr.w	AnimateSprite
000137D6 6000 0000                  		bra.w	Obj60_ChkDel
000137DA                            ; ===========================================================================
000137DA                            
000137DA                            Obj60_Display:				; XREF: Obj60_Index
000137DA 6100 B80E                  		bsr.w	SpeedToPos
000137DE                            
000137DE                            Obj60_ChkDel:				; XREF: Obj60_Animate
000137DE 3028 0008                  		move.w	8(a0),d0
000137E2 0240 FF80                  		andi.w	#$FF80,d0
000137E6 3238 F700                  		move.w	($FFFFF700).w,d1
000137EA 0441 0080                  		subi.w	#$80,d1
000137EE 0241 FF80                  		andi.w	#$FF80,d1
000137F2 9041                       		sub.w	d1,d0
000137F4 0C40 0280                  		cmpi.w	#$280,d0
000137F8 6200 0000                  		bhi.w	Obj60_ChkGone
000137FC 6000 B812                  		bra.w	DisplaySprite
00013800                            ; ===========================================================================
00013800                            
00013800                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00013800 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013804 7000                       		moveq	#0,d0
00013806 1028 0023                  		move.b	$23(a0),d0
0001380A 6700                       		beq.s	loc_11E34
0001380C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013812                            
00013812                            loc_11E34:
00013812 45E8 0037                  		lea	$37(a0),a2
00013816 7400                       		moveq	#0,d2
00013818 141A                       		move.b	(a2)+,d2
0001381A 5342                       		subq.w	#1,d2
0001381C 6500                       		bcs.s	Obj60_Delete
0001381E                            
0001381E                            loc_11E40:
0001381E 7000                       		moveq	#0,d0
00013820 101A                       		move.b	(a2)+,d0
00013822 ED48                       		lsl.w	#6,d0
00013824 0680 00FF D000             		addi.l	#$FFD000,d0
0001382A 2240                       		movea.l	d0,a1
0001382C 6100 B820                  		bsr.w	DeleteObject2
00013830 51CA FFEC                  		dbf	d2,loc_11E40
00013834                            
00013834                            Obj60_Delete:
00013834 6000 B816                  		bra.w	DeleteObject
00013838                            ; ===========================================================================
00013838                            
00013838                            Obj60_MoveOrb:				; XREF: Obj60_Index
00013838 2268 003C                  		movea.l	$3C(a0),a1
0001383C 0C11 0060                  		cmpi.b	#$60,0(a1)
00013840 6600 B80A                  		bne.w	DeleteObject
00013844 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001384A 6600                       		bne.s	Obj60_Circle
0001384C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00013852 6600                       		bne.s	Obj60_Circle
00013854 5428 0024                  		addq.b	#2,$24(a0)
00013858 5329 0037                  		subq.b	#1,$37(a1)
0001385C 6600                       		bne.s	Obj60_FireOrb
0001385E 5429 0024                  		addq.b	#2,$24(a1)
00013862                            
00013862                            Obj60_FireOrb:
00013862 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00013868 0829 0000 0022             		btst	#0,$22(a1)
0001386E 6700                       		beq.s	Obj60_Display2
00013870 4468 0010                  		neg.w	$10(a0)
00013874                            
00013874                            Obj60_Display2:
00013874 6000 B79A                  		bra.w	DisplaySprite
00013878                            ; ===========================================================================
00013878                            
00013878                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00013878 1028 0026                  		move.b	$26(a0),d0
0001387C 4EB9 0000 29AE             		jsr	(CalcSine).l
00013882 E841                       		asr.w	#4,d1
00013884 D269 0008                  		add.w	8(a1),d1
00013888 3141 0008                  		move.w	d1,8(a0)
0001388C E840                       		asr.w	#4,d0
0001388E D069 000C                  		add.w	$C(a1),d0
00013892 3140 000C                  		move.w	d0,$C(a0)
00013896 1029 0036                  		move.b	$36(a1),d0
0001389A D128 0026                  		add.b	d0,$26(a0)
0001389E 6000 B770                  		bra.w	DisplaySprite
000138A2                            ; ===========================================================================
000138A2                            
000138A2                            Obj60_ChkDel2:				; XREF: Obj60_Index
000138A2 6100 B746                  		bsr.w	SpeedToPos
000138A6 4A28 0001                  		tst.b	1(a0)
000138AA 6A00 B7A0                  		bpl.w	DeleteObject
000138AE 6000 B760                  		bra.w	DisplaySprite
000138B2                            ; ===========================================================================
000138B2                            Ani_obj60:
000138B2                            	include "_anim\obj60.asm"
000138B2                            ; ---------------------------------------------------------------------------
000138B2                            ; Animation script - Orbinaut enemy
000138B2                            ; ---------------------------------------------------------------------------
000138B2 0000                       		dc.w byte_11EDA-Ani_obj60
000138B4 0000                       		dc.w byte_11EDE-Ani_obj60
000138B6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000138BA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000138C0                            		even
000138C0                            		even
000138C0                            
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            Map_obj60:
000138C0                            	include "_maps\obj60.asm"
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000138C0                            ; ---------------------------------------------------------------------------
000138C0 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000138C4 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000138C8 01                         byte_11EEC:	dc.b 1
000138C9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000138CE 01                         byte_11EF2:	dc.b 1
000138CF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000138D4 01                         byte_11EF8:	dc.b 1
000138D5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000138DA 01                         byte_11EFE:	dc.b 1
000138DB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000138E0                            		even
000138E0                            		even
000138E0                            
000138E0                            ; ===========================================================================
000138E0                            ; ---------------------------------------------------------------------------
000138E0                            ; Object 16 - harpoon (LZ)
000138E0                            ; ---------------------------------------------------------------------------
000138E0                            
000138E0                            Obj16:					; XREF: Obj_Index
000138E0 7000                       		moveq	#0,d0
000138E2 1028 0024                  		move.b	$24(a0),d0
000138E6 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000138EA 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000138EE                            ; ===========================================================================
000138EE 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000138F0 0000                       		dc.w Obj16_Move-Obj16_Index
000138F2 0000                       		dc.w Obj16_Wait-Obj16_Index
000138F4                            ; ===========================================================================
000138F4                            
000138F4                            Obj16_Main:				; XREF: Obj16_Index
000138F4 5428 0024                  		addq.b	#2,$24(a0)
000138F8 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013900 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013906 0028 0004 0001             		ori.b	#4,1(a0)
0001390C 117C 0004 0018             		move.b	#4,$18(a0)
00013912 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013918 117C 0014 0019             		move.b	#$14,$19(a0)
0001391E 317C 003C 0030             		move.w	#60,$30(a0)
00013924                            
00013924                            Obj16_Move:				; XREF: Obj16_Index
00013924 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001392A 6100 87E0                  		bsr.w	AnimateSprite
0001392E 7000                       		moveq	#0,d0
00013930 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013934 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001393A 6000 D76C                  		bra.w	MarkObjGone
0001393E                            ; ===========================================================================
0001393E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013944                            ; ===========================================================================
00013944                            
00013944                            Obj16_Wait:				; XREF: Obj16_Index
00013944 5368 0030                  		subq.w	#1,$30(a0)
00013948 6A00                       		bpl.s	Obj16_ChkDel
0001394A 317C 003C 0030             		move.w	#60,$30(a0)
00013950 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013954 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001395A                            
0001395A                            Obj16_ChkDel:
0001395A 6000 D74C                  		bra.w	MarkObjGone
0001395E                            ; ===========================================================================
0001395E                            Ani_obj16:
0001395E                            	include "_anim\obj16.asm"
0001395E                            ; ---------------------------------------------------------------------------
0001395E                            ; Animation script - harpoon (LZ)
0001395E                            ; ---------------------------------------------------------------------------
0001395E 0000                       		dc.w byte_11F8A-Ani_obj16
00013960 0000                       		dc.w byte_11F8E-Ani_obj16
00013962 0000                       		dc.w byte_11F92-Ani_obj16
00013964 0000                       		dc.w byte_11F96-Ani_obj16
00013966 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001396A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001396E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013972 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013976                            		even
00013976                            		even
00013976                            
00013976                            ; ---------------------------------------------------------------------------
00013976                            ; Sprite mappings - harpoon (LZ)
00013976                            ; ---------------------------------------------------------------------------
00013976                            Map_obj16:
00013976                            	include "_maps\obj16.asm"
00013976                            ; ---------------------------------------------------------------------------
00013976                            ; Sprite mappings - harpoon (LZ)
00013976                            ; ---------------------------------------------------------------------------
00013976 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001397A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001397E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013982 01                         byte_11FA6:	dc.b 1
00013983 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00013988 01                         byte_11FAC:	dc.b 1
00013989 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001398E 02                         byte_11FB2:	dc.b 2
0001398F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013994 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013999 01                         byte_11FBD:	dc.b 1
0001399A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001399F 01                         byte_11FC3:	dc.b 1
000139A0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000139A5 02                         byte_11FC9:	dc.b 2
000139A6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000139AB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000139B0                            		even
000139B0                            		even
000139B0                            
000139B0                            ; ===========================================================================
000139B0                            ; ---------------------------------------------------------------------------
000139B0                            ; Object 61 - blocks (LZ)
000139B0                            ; ---------------------------------------------------------------------------
000139B0                            
000139B0                            Obj61:					; XREF: Obj_Index
000139B0 7000                       		moveq	#0,d0
000139B2 1028 0024                  		move.b	$24(a0),d0
000139B6 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000139BA 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000139BE                            ; ===========================================================================
000139BE 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000139C0 0000                       		dc.w Obj61_Action-Obj61_Index
000139C2                            
000139C2 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000139C4 200C                       		dc.b $20, $C
000139C6 1010                       		dc.b $10, $10
000139C8 1010                       		dc.b $10, $10
000139CA                            ; ===========================================================================
000139CA                            
000139CA                            Obj61_Main:				; XREF: Obj61_Index
000139CA 5428 0024                  		addq.b	#2,$24(a0)
000139CE 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000139D6 317C 43E6 0002             		move.w	#$43E6,2(a0)
000139DC 117C 0004 0001             		move.b	#4,1(a0)
000139E2 117C 0003 0018             		move.b	#3,$18(a0)
000139E8 7000                       		moveq	#0,d0
000139EA 1028 0028                  		move.b	$28(a0),d0
000139EE E648                       		lsr.w	#3,d0
000139F0 0240 000E                  		andi.w	#$E,d0
000139F4 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000139F8 115A 0019                  		move.b	(a2)+,$19(a0)
000139FC 1152 0016                  		move.b	(a2),$16(a0)
00013A00 E248                       		lsr.w	#1,d0
00013A02 1140 001A                  		move.b	d0,$1A(a0)
00013A06 3168 0008 0034             		move.w	8(a0),$34(a0)
00013A0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013A12 1028 0028                  		move.b	$28(a0),d0
00013A16 0200 000F                  		andi.b	#$F,d0
00013A1A 6700                       		beq.s	Obj61_Action
00013A1C 0C00 0007                  		cmpi.b	#7,d0
00013A20 6700                       		beq.s	Obj61_Action
00013A22 117C 0001 0038             		move.b	#1,$38(a0)
00013A28                            
00013A28                            Obj61_Action:				; XREF: Obj61_Index
00013A28 3F28 0008                  		move.w	8(a0),-(sp)
00013A2C 7000                       		moveq	#0,d0
00013A2E 1028 0028                  		move.b	$28(a0),d0
00013A32 0240 000F                  		andi.w	#$F,d0
00013A36 D040                       		add.w	d0,d0
00013A38 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013A3C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013A40 381F                       		move.w	(sp)+,d4
00013A42 4A28 0001                  		tst.b	1(a0)
00013A46 6A00                       		bpl.s	Obj61_ChkDel
00013A48 7200                       		moveq	#0,d1
00013A4A 1228 0019                  		move.b	$19(a0),d1
00013A4E 0641 000B                  		addi.w	#$B,d1
00013A52 7400                       		moveq	#0,d2
00013A54 1428 0016                  		move.b	$16(a0),d2
00013A58 3602                       		move.w	d2,d3
00013A5A 5243                       		addq.w	#1,d3
00013A5C 6100 D972                  		bsr.w	SolidObject
00013A60 1144 003F                  		move.b	d4,$3F(a0)
00013A64 6100 0000                  		bsr.w	loc_12180
00013A68                            
00013A68                            Obj61_ChkDel:
00013A68 3028 0034                  		move.w	$34(a0),d0
00013A6C 0240 FF80                  		andi.w	#$FF80,d0
00013A70 3238 F700                  		move.w	($FFFFF700).w,d1
00013A74 0441 0080                  		subi.w	#$80,d1
00013A78 0241 FF80                  		andi.w	#$FF80,d1
00013A7C 9041                       		sub.w	d1,d0
00013A7E 0C40 0280                  		cmpi.w	#$280,d0
00013A82 6200 B5C8                  		bhi.w	DeleteObject
00013A86 6000 B588                  		bra.w	DisplaySprite
00013A8A                            ; ===========================================================================
00013A8A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A8E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A92 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013A96 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013A9A                            ; ===========================================================================
00013A9A                            
00013A9A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013A9A 4E75                       		rts	
00013A9C                            ; ===========================================================================
00013A9C                            
00013A9C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013A9C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013AA0 6600                       		bne.s	loc_120D6	; if yes, branch
00013AA2 0828 0003 0022             		btst	#3,$22(a0)
00013AA8 6700                       		beq.s	locret_120D4
00013AAA 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013AB0                            
00013AB0                            locret_120D4:
00013AB0 4E75                       		rts	
00013AB2                            ; ===========================================================================
00013AB2                            
00013AB2                            loc_120D6:
00013AB2 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013AB6 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013AB8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013ABC 4228 0038                  		clr.b	$38(a0)
00013AC0 4E75                       		rts	
00013AC2                            ; ===========================================================================
00013AC2                            
00013AC2                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013AC2 6100 B526                  		bsr.w	SpeedToPos
00013AC6 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013ACA 6100 0000                  		bsr.w	ObjHitFloor
00013ACE 4A41                       		tst.w	d1
00013AD0 6A00 0000                  		bpl.w	locret_12106
00013AD4 5241                       		addq.w	#1,d1
00013AD6 D368 000C                  		add.w	d1,$C(a0)
00013ADA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013ADE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013AE2                            
00013AE2                            locret_12106:
00013AE2 4E75                       		rts	
00013AE4                            ; ===========================================================================
00013AE4                            
00013AE4                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013AE4 6100 B504                  		bsr.w	SpeedToPos
00013AE8 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013AEC 6100 0000                  		bsr.w	ObjHitCeiling
00013AF0 4A41                       		tst.w	d1
00013AF2 6A00 0000                  		bpl.w	locret_12126
00013AF6 9368 000C                  		sub.w	d1,$C(a0)
00013AFA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013AFE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013B02                            
00013B02                            locret_12126:
00013B02 4E75                       		rts	
00013B04                            ; ===========================================================================
00013B04                            
00013B04                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013B04 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013B0A 6600                       		bne.s	locret_12138	; if not, branch
00013B0C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013B10 4228 0038                  		clr.b	$38(a0)
00013B14                            
00013B14                            locret_12138:
00013B14 4E75                       		rts	
00013B16                            ; ===========================================================================
00013B16                            
00013B16                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013B16 3038 F646                  		move.w	($FFFFF646).w,d0
00013B1A 9068 000C                  		sub.w	$C(a0),d0
00013B1E 6700                       		beq.s	locret_1217E
00013B20 6400                       		bcc.s	loc_12162
00013B22 0C40 FFFE                  		cmpi.w	#-2,d0
00013B26 6C00                       		bge.s	loc_1214E
00013B28 70FE                       		moveq	#-2,d0
00013B2A                            
00013B2A                            loc_1214E:
00013B2A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013B2E 6100 0000                  		bsr.w	ObjHitCeiling
00013B32 4A41                       		tst.w	d1
00013B34 6A00 0000                  		bpl.w	locret_12160
00013B38 9368 000C                  		sub.w	d1,$C(a0)
00013B3C                            
00013B3C                            locret_12160:
00013B3C 4E75                       		rts	
00013B3E                            ; ===========================================================================
00013B3E                            
00013B3E                            loc_12162:				; XREF: Obj61_Type07
00013B3E 0C40 0002                  		cmpi.w	#2,d0
00013B42 6F00                       		ble.s	loc_1216A
00013B44 7002                       		moveq	#2,d0
00013B46                            
00013B46                            loc_1216A:
00013B46 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013B4A 6100 0000                  		bsr.w	ObjHitFloor
00013B4E 4A41                       		tst.w	d1
00013B50 6A00 0000                  		bpl.w	locret_1217E
00013B54 5241                       		addq.w	#1,d1
00013B56 D368 000C                  		add.w	d1,$C(a0)
00013B5A                            
00013B5A                            locret_1217E:
00013B5A 4E75                       		rts	
00013B5C                            ; ===========================================================================
00013B5C                            
00013B5C                            loc_12180:				; XREF: Obj61_Action
00013B5C 4A28 0038                  		tst.b	$38(a0)
00013B60 6700                       		beq.s	locret_121C0
00013B62 0828 0003 0022             		btst	#3,$22(a0)
00013B68 6600                       		bne.s	loc_1219A
00013B6A 4A28 003E                  		tst.b	$3E(a0)
00013B6E 6700                       		beq.s	locret_121C0
00013B70 5928 003E                  		subq.b	#4,$3E(a0)
00013B74 6000                       		bra.s	loc_121A6
00013B76                            ; ===========================================================================
00013B76                            
00013B76                            loc_1219A:
00013B76 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013B7C 6700                       		beq.s	locret_121C0
00013B7E 5828 003E                  		addq.b	#4,$3E(a0)
00013B82                            
00013B82                            loc_121A6:
00013B82 1028 003E                  		move.b	$3E(a0),d0
00013B86 4EB9 0000 29AE             		jsr	(CalcSine).l
00013B8C 323C 0400                  		move.w	#$400,d1
00013B90 C1C1                       		muls.w	d1,d0
00013B92 4840                       		swap	d0
00013B94 D068 0030                  		add.w	$30(a0),d0
00013B98 3140 000C                  		move.w	d0,$C(a0)
00013B9C                            
00013B9C                            locret_121C0:
00013B9C 4E75                       		rts	
00013B9E                            ; ===========================================================================
00013B9E                            ; ---------------------------------------------------------------------------
00013B9E                            ; Sprite mappings - blocks (LZ)
00013B9E                            ; ---------------------------------------------------------------------------
00013B9E                            Map_obj61:
00013B9E                            	include "_maps\obj61.asm"
00013B9E                            ; ---------------------------------------------------------------------------
00013B9E                            ; Sprite mappings - blocks (LZ)
00013B9E                            ; ---------------------------------------------------------------------------
00013B9E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013BA2 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013BA6 01                         byte_121CA:	dc.b 1
00013BA7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013BAC 02                         byte_121D0:	dc.b 2
00013BAD F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013BB2 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013BB7 01                         byte_121DB:	dc.b 1
00013BB8 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013BBD 01                         byte_121E1:	dc.b 1
00013BBE F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013BC4 00                         		even
00013BC4 00                         		even
00013BC4                            
00013BC4                            ; ===========================================================================
00013BC4                            ; ---------------------------------------------------------------------------
00013BC4                            ; Object 62 - gargoyle head (LZ)
00013BC4                            ; ---------------------------------------------------------------------------
00013BC4                            
00013BC4                            Obj62:					; XREF: Obj_Index
00013BC4 7000                       		moveq	#0,d0
00013BC6 1028 0024                  		move.b	$24(a0),d0
00013BCA 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013BCE 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013BD2 6000 D4D4                  		bra.w	MarkObjGone
00013BD6                            ; ===========================================================================
00013BD6 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013BD8 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013BDA 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013BDC 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013BDE                            
00013BDE 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013BE6                            ; ===========================================================================
00013BE6                            
00013BE6                            Obj62_Main:				; XREF: Obj62_Index
00013BE6 5428 0024                  		addq.b	#2,$24(a0)
00013BEA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013BF2 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013BF8 0028 0004 0001             		ori.b	#4,1(a0)
00013BFE 117C 0003 0018             		move.b	#3,$18(a0)
00013C04 117C 0010 0019             		move.b	#$10,$19(a0)
00013C0A 1028 0028                  		move.b	$28(a0),d0	; get object type
00013C0E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013C12 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013C18 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013C1E 0228 000F 0028             		andi.b	#$F,$28(a0)
00013C24                            
00013C24                            Obj62_MakeFire:				; XREF: Obj62_Index
00013C24 5328 001E                  		subq.b	#1,$1E(a0)
00013C28 6600                       		bne.s	Obj62_NoFire
00013C2A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013C30 6100 B658                  		bsr.w	ChkObjOnScreen
00013C34 6600                       		bne.s	Obj62_NoFire
00013C36 6100 B85E                  		bsr.w	SingleObjLoad
00013C3A 6600                       		bne.s	Obj62_NoFire
00013C3C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013C40 5829 0024                  		addq.b	#4,$24(a1)
00013C44 3368 0008 0008             		move.w	8(a0),8(a1)
00013C4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013C50 1368 0001 0001             		move.b	1(a0),1(a1)
00013C56 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013C5C                            
00013C5C                            Obj62_NoFire:
00013C5C 4E75                       		rts	
00013C5E                            ; ===========================================================================
00013C5E                            
00013C5E                            Obj62_FireBall:				; XREF: Obj62_Index
00013C5E 5428 0024                  		addq.b	#2,$24(a0)
00013C62 117C 0008 0016             		move.b	#8,$16(a0)
00013C68 117C 0008 0017             		move.b	#8,$17(a0)
00013C6E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013C76 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013C7C 0028 0004 0001             		ori.b	#4,1(a0)
00013C82 117C 0004 0018             		move.b	#4,$18(a0)
00013C88 117C 0098 0020             		move.b	#$98,$20(a0)
00013C8E 117C 0008 0019             		move.b	#8,$19(a0)
00013C94 117C 0002 001A             		move.b	#2,$1A(a0)
00013C9A 5068 000C                  		addq.w	#8,$C(a0)
00013C9E 317C 0200 0010             		move.w	#$200,$10(a0)
00013CA4 0828 0000 0022             		btst	#0,$22(a0)
00013CAA 6600                       		bne.s	Obj62_Sound
00013CAC 4468 0010                  		neg.w	$10(a0)
00013CB0                            
00013CB0                            Obj62_Sound:
00013CB0 303C 00AE                  		move.w	#$AE,d0
00013CB4 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013CBA                            
00013CBA                            Obj62_AniFire:				; XREF: Obj62_Index
00013CBA 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013CBE 0200 0007                  		andi.b	#7,d0
00013CC2 6600                       		bne.s	Obj62_StopFire
00013CC4 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013CCA                            
00013CCA                            Obj62_StopFire:
00013CCA 6100 B31E                  		bsr.w	SpeedToPos
00013CCE 0828 0000 0022             		btst	#0,$22(a0)
00013CD4 6600                       		bne.s	Obj62_StopFire2
00013CD6 76F8                       		moveq	#-8,d3
00013CD8 6100 0000                  		bsr.w	ObjHitWallLeft
00013CDC 4A41                       		tst.w	d1
00013CDE 6B00 B36C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013CE2 4E75                       		rts	
00013CE4                            ; ===========================================================================
00013CE4                            
00013CE4                            Obj62_StopFire2:
00013CE4 7608                       		moveq	#8,d3
00013CE6 6100 0000                  		bsr.w	ObjHitWallRight
00013CEA 4A41                       		tst.w	d1
00013CEC 6B00 B35E                  		bmi.w	DeleteObject
00013CF0 4E75                       		rts	
00013CF2                            ; ===========================================================================
00013CF2                            ; ---------------------------------------------------------------------------
00013CF2                            ; Sprite mappings - gargoyle head (LZ)
00013CF2                            ; ---------------------------------------------------------------------------
00013CF2                            Map_obj62:
00013CF2                            	include "_maps\obj62.asm"
00013CF2                            ; ---------------------------------------------------------------------------
00013CF2                            ; Sprite mappings - gargoyle head (LZ)
00013CF2                            ; ---------------------------------------------------------------------------
00013CF2 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013CF6 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013CFA 03                         byte_12320:	dc.b 3
00013CFB F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013D00 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013D05 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013D0A 01                         byte_12330:	dc.b 1
00013D0B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013D10 01                         byte_12336:	dc.b 1
00013D11 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013D16                            		even
00013D16                            		even
00013D16                            
00013D16                            ; ===========================================================================
00013D16                            ; ---------------------------------------------------------------------------
00013D16                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013D16                            ; ---------------------------------------------------------------------------
00013D16                            
00013D16                            Obj63:					; XREF: Obj_Index
00013D16 7000                       		moveq	#0,d0
00013D18 1028 0024                  		move.b	$24(a0),d0
00013D1C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013D20 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013D24 3028 0030                  		move.w	$30(a0),d0
00013D28 0240 FF80                  		andi.w	#$FF80,d0
00013D2C 3238 F700                  		move.w	($FFFFF700).w,d1
00013D30 0441 0080                  		subi.w	#$80,d1
00013D34 0241 FF80                  		andi.w	#$FF80,d1
00013D38 9041                       		sub.w	d1,d0
00013D3A 0C40 0280                  		cmpi.w	#$280,d0
00013D3E 6200                       		bhi.s	loc_1236A
00013D40                            
00013D40                            Obj63_Display:				; XREF: loc_1236A
00013D40 6000 B2CE                  		bra.w	DisplaySprite
00013D44                            ; ===========================================================================
00013D44                            
00013D44                            loc_1236A:				; XREF: Obj63
00013D44 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013D4A 6600                       		bne.s	loc_12378
00013D4C 0C40 FF80                  		cmpi.w	#-$80,d0
00013D50 64EE                       		bcc.s	Obj63_Display
00013D52                            
00013D52                            loc_12378:
00013D52 1028 002F                  		move.b	$2F(a0),d0
00013D56 6A00 B2F4                  		bpl.w	DeleteObject
00013D5A 0240 007F                  		andi.w	#$7F,d0
00013D5E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013D62 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013D68 6000 B2E2                  		bra.w	DeleteObject
00013D6C                            ; ===========================================================================
00013D6C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013D6E 0000                       		dc.w loc_124B2-Obj63_Index
00013D70 0000                       		dc.w loc_124C2-Obj63_Index
00013D72 0000                       		dc.w loc_124DE-Obj63_Index
00013D74                            ; ===========================================================================
00013D74                            
00013D74                            Obj63_Main:				; XREF: Obj63_Index
00013D74 1028 0028                  		move.b	$28(a0),d0
00013D78 6B00 0000                  		bmi.w	loc_12460
00013D7C 5428 0024                  		addq.b	#2,$24(a0)
00013D80 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013D88 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013D8E 0028 0004 0001             		ori.b	#4,1(a0)
00013D94 117C 0010 0019             		move.b	#$10,$19(a0)
00013D9A 117C 0004 0018             		move.b	#4,$18(a0)
00013DA0 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013DA6 6600                       		bne.s	loc_123E2
00013DA8 5828 0024                  		addq.b	#4,$24(a0)
00013DAC 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013DB2 117C 0001 0018             		move.b	#1,$18(a0)
00013DB8 6000 0000                  		bra.w	loc_124DE
00013DBC                            ; ===========================================================================
00013DBC                            
00013DBC                            loc_123E2:
00013DBC 117C 0004 001A             		move.b	#4,$1A(a0)
00013DC2 7000                       		moveq	#0,d0
00013DC4 1028 0028                  		move.b	$28(a0),d0
00013DC8 3200                       		move.w	d0,d1
00013DCA E648                       		lsr.w	#3,d0
00013DCC 0240 001E                  		andi.w	#$1E,d0
00013DD0 45FA 0000                  		lea	Obj63_Data(pc),a2
00013DD4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013DD8 315A 0038                  		move.w	(a2)+,$38(a0)
00013DDC 315A 0030                  		move.w	(a2)+,$30(a0)
00013DE0 214A 003C                  		move.l	a2,$3C(a0)
00013DE4 0241 000F                  		andi.w	#$F,d1
00013DE8 E549                       		lsl.w	#2,d1
00013DEA 1141 0038                  		move.b	d1,$38(a0)
00013DEE 117C 0004 003A             		move.b	#4,$3A(a0)
00013DF4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013DF8 6700                       		beq.s	loc_1244C
00013DFA 117C 0001 003B             		move.b	#1,$3B(a0)
00013E00 4428 003A                  		neg.b	$3A(a0)
00013E04 7200                       		moveq	#0,d1
00013E06 1228 0038                  		move.b	$38(a0),d1
00013E0A D228 003A                  		add.b	$3A(a0),d1
00013E0E B228 0039                  		cmp.b	$39(a0),d1
00013E12 6500                       		bcs.s	loc_12448
00013E14 1001                       		move.b	d1,d0
00013E16 7200                       		moveq	#0,d1
00013E18 4A00                       		tst.b	d0
00013E1A 6A00                       		bpl.s	loc_12448
00013E1C 1228 0039                  		move.b	$39(a0),d1
00013E20 5901                       		subq.b	#4,d1
00013E22                            
00013E22                            loc_12448:
00013E22 1141 0038                  		move.b	d1,$38(a0)
00013E26                            
00013E26                            loc_1244C:
00013E26 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013E2C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013E32 6100 0000                  		bsr.w	Obj63_ChangeDir
00013E36 6000 0000                  		bra.w	loc_124B2
00013E3A                            ; ===========================================================================
00013E3A                            
00013E3A                            loc_12460:				; XREF: Obj63_Main
00013E3A 1140 002F                  		move.b	d0,$2F(a0)
00013E3E 0240 007F                  		andi.w	#$7F,d0
00013E42 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013E46 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013E4C 6600 B1FE                  		bne.w	DeleteObject
00013E50 D040                       		add.w	d0,d0
00013E52 0240 001E                  		andi.w	#$1E,d0
00013E56 0640 0070                  		addi.w	#$70,d0
00013E5A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013E60 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013E64 321A                       		move.w	(a2)+,d1
00013E66 2248                       		movea.l	a0,a1
00013E68 6000                       		bra.s	Obj63_MakePtfms
00013E6A                            ; ===========================================================================
00013E6A                            
00013E6A                            Obj63_Loop:
00013E6A 6100 B62A                  		bsr.w	SingleObjLoad
00013E6E 6600                       		bne.s	loc_124AA
00013E70                            
00013E70                            Obj63_MakePtfms:			; XREF: loc_12460
00013E70 12BC 0063                  		move.b	#$63,0(a1)
00013E74 335A 0008                  		move.w	(a2)+,8(a1)
00013E78 335A 000C                  		move.w	(a2)+,$C(a1)
00013E7C 301A                       		move.w	(a2)+,d0
00013E7E 1340 0028                  		move.b	d0,$28(a1)
00013E82                            
00013E82                            loc_124AA:
00013E82 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013E86                            
00013E86 588F                       		addq.l	#4,sp
00013E88 4E75                       		rts	
00013E8A                            ; ===========================================================================
00013E8A                            
00013E8A                            loc_124B2:				; XREF: Obj63_Index
00013E8A 7200                       		moveq	#0,d1
00013E8C 1228 0019                  		move.b	$19(a0),d1
00013E90 4EB9 0000 8E64             		jsr	(PlatformObject).l
00013E96 6000 0000                  		bra.w	sub_12502
00013E9A                            ; ===========================================================================
00013E9A                            
00013E9A                            loc_124C2:				; XREF: Obj63_Index
00013E9A 7200                       		moveq	#0,d1
00013E9C 1228 0019                  		move.b	$19(a0),d1
00013EA0 4EB9 0000 8FD8             		jsr	(ExitPlatform).l
00013EA6 3F28 0008                  		move.w	8(a0),-(sp)
00013EAA 6100 0000                  		bsr.w	sub_12502
00013EAE 341F                       		move.w	(sp)+,d2
00013EB0 4EF9 0000 9542             		jmp	(MvSonicOnPtfm2).l
00013EB6                            ; ===========================================================================
00013EB6                            
00013EB6                            loc_124DE:				; XREF: Obj63_Index
00013EB6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013EBA 0240 0003                  		andi.w	#3,d0
00013EBE 6600                       		bne.s	loc_124FC
00013EC0 7201                       		moveq	#1,d1
00013EC2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013EC6 6700                       		beq.s	loc_124F2
00013EC8 4401                       		neg.b	d1
00013ECA                            
00013ECA                            loc_124F2:
00013ECA D328 001A                  		add.b	d1,$1A(a0)
00013ECE 0228 0003 001A             		andi.b	#3,$1A(a0)
00013ED4                            
00013ED4                            loc_124FC:
00013ED4 588F                       		addq.l	#4,sp
00013ED6 6000 D1D0                  		bra.w	MarkObjGone
00013EDA                            
00013EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EDA                            
00013EDA                            
00013EDA                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013EDA 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013EDE 6700                       		beq.s	loc_12520
00013EE0 4A28 003B                  		tst.b	$3B(a0)
00013EE4 6600                       		bne.s	loc_12520
00013EE6 117C 0001 003B             		move.b	#1,$3B(a0)
00013EEC 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013EF2 4428 003A                  		neg.b	$3A(a0)
00013EF6 6000                       		bra.s	loc_12534
00013EF8                            ; ===========================================================================
00013EF8                            
00013EF8                            loc_12520:
00013EF8 3028 0008                  		move.w	8(a0),d0
00013EFC B068 0034                  		cmp.w	$34(a0),d0
00013F00 6600                       		bne.s	loc_1256A
00013F02 3028 000C                  		move.w	$C(a0),d0
00013F06 B068 0036                  		cmp.w	$36(a0),d0
00013F0A 6600                       		bne.s	loc_1256A
00013F0C                            
00013F0C                            loc_12534:
00013F0C 7200                       		moveq	#0,d1
00013F0E 1228 0038                  		move.b	$38(a0),d1
00013F12 D228 003A                  		add.b	$3A(a0),d1
00013F16 B228 0039                  		cmp.b	$39(a0),d1
00013F1A 6500                       		bcs.s	loc_12552
00013F1C 1001                       		move.b	d1,d0
00013F1E 7200                       		moveq	#0,d1
00013F20 4A00                       		tst.b	d0
00013F22 6A00                       		bpl.s	loc_12552
00013F24 1228 0039                  		move.b	$39(a0),d1
00013F28 5901                       		subq.b	#4,d1
00013F2A                            
00013F2A                            loc_12552:
00013F2A 1141 0038                  		move.b	d1,$38(a0)
00013F2E 2268 003C                  		movea.l	$3C(a0),a1
00013F32 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013F38 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013F3E 6100 0000                  		bsr.w	Obj63_ChangeDir
00013F42                            
00013F42                            loc_1256A:
00013F42 6100 B0A6                  		bsr.w	SpeedToPos
00013F46 4E75                       		rts	
00013F48                            ; End of function sub_12502
00013F48                            
00013F48                            
00013F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F48                            
00013F48                            
00013F48                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013F48 7000                       		moveq	#0,d0
00013F4A 343C FF00                  		move.w	#-$100,d2
00013F4E 3028 0008                  		move.w	8(a0),d0
00013F52 9068 0034                  		sub.w	$34(a0),d0
00013F56 6400                       		bcc.s	loc_12584
00013F58 4440                       		neg.w	d0
00013F5A 4442                       		neg.w	d2
00013F5C                            
00013F5C                            loc_12584:
00013F5C 7200                       		moveq	#0,d1
00013F5E 363C FF00                  		move.w	#-$100,d3
00013F62 3228 000C                  		move.w	$C(a0),d1
00013F66 9268 0036                  		sub.w	$36(a0),d1
00013F6A 6400                       		bcc.s	loc_12598
00013F6C 4441                       		neg.w	d1
00013F6E 4443                       		neg.w	d3
00013F70                            
00013F70                            loc_12598:
00013F70 B240                       		cmp.w	d0,d1
00013F72 6500                       		bcs.s	loc_125C2
00013F74 3028 0008                  		move.w	8(a0),d0
00013F78 9068 0034                  		sub.w	$34(a0),d0
00013F7C 6700                       		beq.s	loc_125AE
00013F7E 48C0                       		ext.l	d0
00013F80 E180                       		asl.l	#8,d0
00013F82 81C1                       		divs.w	d1,d0
00013F84 4440                       		neg.w	d0
00013F86                            
00013F86                            loc_125AE:
00013F86 3140 0010                  		move.w	d0,$10(a0)
00013F8A 3143 0012                  		move.w	d3,$12(a0)
00013F8E 4840                       		swap	d0
00013F90 3140 000A                  		move.w	d0,$A(a0)
00013F94 4268 000E                  		clr.w	$E(a0)
00013F98 4E75                       		rts	
00013F9A                            ; ===========================================================================
00013F9A                            
00013F9A                            loc_125C2:				; XREF: Obj63_ChangeDir
00013F9A 3228 000C                  		move.w	$C(a0),d1
00013F9E 9268 0036                  		sub.w	$36(a0),d1
00013FA2 6700                       		beq.s	loc_125D4
00013FA4 48C1                       		ext.l	d1
00013FA6 E181                       		asl.l	#8,d1
00013FA8 83C0                       		divs.w	d0,d1
00013FAA 4441                       		neg.w	d1
00013FAC                            
00013FAC                            loc_125D4:
00013FAC 3141 0012                  		move.w	d1,$12(a0)
00013FB0 3142 0010                  		move.w	d2,$10(a0)
00013FB4 4841                       		swap	d1
00013FB6 3141 000E                  		move.w	d1,$E(a0)
00013FBA 4268 000A                  		clr.w	$A(a0)
00013FBE 4E75                       		rts	
00013FC0                            ; End of function Obj63_ChangeDir
00013FC0                            
00013FC0                            ; ===========================================================================
00013FC0 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013FC2 0000                       		dc.w word_12610-Obj63_Data
00013FC4 0000                       		dc.w word_12628-Obj63_Data
00013FC6 0000                       		dc.w word_1263C-Obj63_Data
00013FC8 0000                       		dc.w word_12650-Obj63_Data
00013FCA 0000                       		dc.w word_12668-Obj63_Data
00013FCC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013FDC 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013FE8 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013FF8 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014000 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014014 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014028 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014040 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014054                            
00014054                            ; ---------------------------------------------------------------------------
00014054                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014054                            ; ---------------------------------------------------------------------------
00014054                            Map_obj63:
00014054                            	include "_maps\obj63.asm"
00014054                            ; ---------------------------------------------------------------------------
00014054                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014054                            ; ---------------------------------------------------------------------------
00014054 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00014058 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001405C 0000                       		dc.w byte_1269E-Map_obj63
0001405E 01                         byte_12686:	dc.b 1
0001405F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014064 01                         byte_1268C:	dc.b 1
00014065 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001406A 01                         byte_12692:	dc.b 1
0001406B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014070 01                         byte_12698:	dc.b 1
00014071 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014076 01                         byte_1269E:	dc.b 1
00014077 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001407C                            		even
0001407C                            		even
0001407C                            
0001407C                            ; ===========================================================================
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            ; Object 64 - bubbles (LZ)
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            
0001407C                            Obj64:					; XREF: Obj_Index
0001407C 7000                       		moveq	#0,d0
0001407E 1028 0024                  		move.b	$24(a0),d0
00014082 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00014086 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001408A                            ; ===========================================================================
0001408A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001408C 0000                       		dc.w Obj64_Animate-Obj64_Index
0001408E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014090 0000                       		dc.w Obj64_Display2-Obj64_Index
00014092 0000                       		dc.w Obj64_Delete3-Obj64_Index
00014094 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00014096                            ; ===========================================================================
00014096                            
00014096                            Obj64_Main:				; XREF: Obj64_Index
00014096 5428 0024                  		addq.b	#2,$24(a0)
0001409A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000140A2 317C 8348 0002             		move.w	#$8348,2(a0)
000140A8 117C 0084 0001             		move.b	#$84,1(a0)
000140AE 117C 0010 0019             		move.b	#$10,$19(a0)
000140B4 117C 0001 0018             		move.b	#1,$18(a0)
000140BA 1028 0028                  		move.b	$28(a0),d0	; get object type
000140BE 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000140C0 5028 0024                  		addq.b	#8,$24(a0)
000140C4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000140C8 1140 0032                  		move.b	d0,$32(a0)
000140CC 1140 0033                  		move.b	d0,$33(a0)
000140D0 117C 0006 001C             		move.b	#6,$1C(a0)
000140D6 6000 0000                  		bra.w	Obj64_BblMaker
000140DA                            ; ===========================================================================
000140DA                            
000140DA                            Obj64_Bubble:				; XREF: Obj64_Main
000140DA 1140 001C                  		move.b	d0,$1C(a0)
000140DE 3168 0008 0030             		move.w	8(a0),$30(a0)
000140E4 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000140EA 4EB9 0000 2988             		jsr	(RandomNumber).l
000140F0 1140 0026                  		move.b	d0,$26(a0)
000140F4                            
000140F4                            Obj64_Animate:				; XREF: Obj64_Index
000140F4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000140FA 4EBA 8010                  		jsr	AnimateSprite
000140FE 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00014104 6600                       		bne.s	Obj64_ChkWater
00014106 117C 0001 002E             		move.b	#1,$2E(a0)
0001410C                            
0001410C                            Obj64_ChkWater:				; XREF: Obj64_Index
0001410C 3038 F646                  		move.w	($FFFFF646).w,d0
00014110 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00014114 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00014116                            
00014116                            Obj64_Burst:				; XREF: Obj64_Wobble
00014116 117C 0006 0024             		move.b	#6,$24(a0)
0001411C 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00014120 6000 0000                  		bra.w	Obj64_Display2
00014124                            ; ===========================================================================
00014124                            
00014124                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00014124 1028 0026                  		move.b	$26(a0),d0
00014128 5228 0026                  		addq.b	#1,$26(a0)
0001412C 0240 007F                  		andi.w	#$7F,d0
00014130 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014136 1031 0000                  		move.b	(a1,d0.w),d0
0001413A 4880                       		ext.w	d0
0001413C D068 0030                  		add.w	$30(a0),d0
00014140 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00014144 4A28 002E                  		tst.b	$2E(a0)
00014148 6700                       		beq.s	Obj64_Display
0001414A 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001414E 6700                       		beq.s	Obj64_Display	; if not, branch
00014150                            
00014150 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014154 303C 00AD                  		move.w	#$AD,d0
00014158 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001415E 43F8 D000                  		lea	($FFFFD000).w,a1
00014162 4269 0010                  		clr.w	$10(a1)
00014166 4269 0012                  		clr.w	$12(a1)
0001416A 4269 0014                  		clr.w	$14(a1)
0001416E 137C 0015 001C             		move.b	#$15,$1C(a1)
00014174 337C 0023 003E             		move.w	#$23,$3E(a1)
0001417A 137C 0000 003C             		move.b	#0,$3C(a1)
00014180 08A9 0005 0022             		bclr	#5,$22(a1)
00014186 08A9 0004 0022             		bclr	#4,$22(a1)
0001418C 0829 0002 0022             		btst	#2,$22(a1)
00014192 6700 FF82                  		beq.w	Obj64_Burst
00014196 08A9 0002 0022             		bclr	#2,$22(a1)
0001419C 137C 0013 0016             		move.b	#$13,$16(a1)
000141A2 137C 0009 0017             		move.b	#9,$17(a1)
000141A8 5B69 000C                  		subq.w	#5,$C(a1)
000141AC 6000 FF68                  		bra.w	Obj64_Burst
000141B0                            ; ===========================================================================
000141B0                            
000141B0                            Obj64_Display:				; XREF: Obj64_Wobble
000141B0 6100 AE38                  		bsr.w	SpeedToPos
000141B4 4A28 0001                  		tst.b	1(a0)
000141B8 6A00                       		bpl.s	Obj64_Delete
000141BA 4EFA AE54                  		jmp	DisplaySprite
000141BE                            ; ===========================================================================
000141BE                            
000141BE                            Obj64_Delete:
000141BE 4EFA AE8C                  		jmp	DeleteObject
000141C2                            ; ===========================================================================
000141C2                            
000141C2                            Obj64_Display2:				; XREF: Obj64_Index
000141C2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000141C8 4EB9 0000 C10C             		jsr	AnimateSprite
000141CE 4A28 0001                  		tst.b	1(a0)
000141D2 6A00                       		bpl.s	Obj64_Delete2
000141D4 4EFA AE3A                  		jmp	DisplaySprite
000141D8                            ; ===========================================================================
000141D8                            
000141D8                            Obj64_Delete2:
000141D8 4EFA AE72                  		jmp	DeleteObject
000141DC                            ; ===========================================================================
000141DC                            
000141DC                            Obj64_Delete3:				; XREF: Obj64_Index
000141DC 6000 AE6E                  		bra.w	DeleteObject
000141E0                            ; ===========================================================================
000141E0                            
000141E0                            Obj64_BblMaker:				; XREF: Obj64_Index
000141E0 4A68 0036                  		tst.w	$36(a0)
000141E4 6600                       		bne.s	loc_12874
000141E6 3038 F646                  		move.w	($FFFFF646).w,d0
000141EA B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000141EE 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000141F2 4A28 0001                  		tst.b	1(a0)
000141F6 6A00 0000                  		bpl.w	Obj64_ChkDel
000141FA 5368 0038                  		subq.w	#1,$38(a0)
000141FE 6A00 0000                  		bpl.w	loc_12914
00014202 317C 0001 0036             		move.w	#1,$36(a0)
00014208                            
00014208                            loc_1283A:
00014208 4EB9 0000 2988             		jsr	(RandomNumber).l
0001420E 3200                       		move.w	d0,d1
00014210 0240 0007                  		andi.w	#7,d0
00014214 0C40 0006                  		cmpi.w	#6,d0
00014218 64EE                       		bcc.s	loc_1283A
0001421A                            
0001421A 1140 0034                  		move.b	d0,$34(a0)
0001421E 0241 000C                  		andi.w	#$C,d1
00014222 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00014228 D2C1                       		adda.w	d1,a1
0001422A 2149 003C                  		move.l	a1,$3C(a0)
0001422E 5328 0032                  		subq.b	#1,$32(a0)
00014232 6A00                       		bpl.s	loc_12872
00014234 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001423A 08E8 0007 0036             		bset	#7,$36(a0)
00014240                            
00014240                            loc_12872:
00014240 6000                       		bra.s	loc_1287C
00014242                            ; ===========================================================================
00014242                            
00014242                            loc_12874:				; XREF: Obj64_BblMaker
00014242 5368 0038                  		subq.w	#1,$38(a0)
00014246 6A00 0000                  		bpl.w	loc_12914
0001424A                            
0001424A                            loc_1287C:
0001424A 4EB9 0000 2988             		jsr	(RandomNumber).l
00014250 0240 001F                  		andi.w	#$1F,d0
00014254 3140 0038                  		move.w	d0,$38(a0)
00014258 6100 B23C                  		bsr.w	SingleObjLoad
0001425C 6600                       		bne.s	loc_128F8
0001425E 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014262 3368 0008 0008             		move.w	8(a0),8(a1)
00014268 4EB9 0000 2988             		jsr	(RandomNumber).l
0001426E 0240 000F                  		andi.w	#$F,d0
00014272 5140                       		subq.w	#8,d0
00014274 D169 0008                  		add.w	d0,8(a1)
00014278 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001427E 7000                       		moveq	#0,d0
00014280 1028 0034                  		move.b	$34(a0),d0
00014284 2468 003C                  		movea.l	$3C(a0),a2
00014288 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001428E 0828 0007 0036             		btst	#7,$36(a0)
00014294 6700                       		beq.s	loc_128F8
00014296 4EB9 0000 2988             		jsr	(RandomNumber).l
0001429C 0240 0003                  		andi.w	#3,d0
000142A0 6600                       		bne.s	loc_128E4
000142A2 08E8 0006 0036             		bset	#6,$36(a0)
000142A8 6600                       		bne.s	loc_128F8
000142AA 137C 0002 0028             		move.b	#2,$28(a1)
000142B0                            
000142B0                            loc_128E4:
000142B0 4A28 0034                  		tst.b	$34(a0)
000142B4 6600                       		bne.s	loc_128F8
000142B6 08E8 0006 0036             		bset	#6,$36(a0)
000142BC 6600                       		bne.s	loc_128F8
000142BE 137C 0002 0028             		move.b	#2,$28(a1)
000142C4                            
000142C4                            loc_128F8:
000142C4 5328 0034                  		subq.b	#1,$34(a0)
000142C8 6A00                       		bpl.s	loc_12914
000142CA 4EB9 0000 2988             		jsr	(RandomNumber).l
000142D0 0240 007F                  		andi.w	#$7F,d0
000142D4 0640 0080                  		addi.w	#$80,d0
000142D8 D168 0038                  		add.w	d0,$38(a0)
000142DC 4268 0036                  		clr.w	$36(a0)
000142E0                            
000142E0                            loc_12914:
000142E0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142E6 4EB9 0000 C10C             		jsr	AnimateSprite
000142EC                            
000142EC                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000142EC 3028 0008                  		move.w	8(a0),d0
000142F0 0240 FF80                  		andi.w	#$FF80,d0
000142F4 3238 F700                  		move.w	($FFFFF700).w,d1
000142F8 0441 0080                  		subi.w	#$80,d1
000142FC 0241 FF80                  		andi.w	#$FF80,d1
00014300 9041                       		sub.w	d1,d0
00014302 0C40 0280                  		cmpi.w	#$280,d0
00014306 6200 AD44                  		bhi.w	DeleteObject
0001430A 3038 F646                  		move.w	($FFFFF646).w,d0
0001430E B068 000C                  		cmp.w	$C(a0),d0
00014312 6500 ACFC                  		bcs.w	DisplaySprite
00014316 4E75                       		rts	
00014318                            ; ===========================================================================
00014318                            ; bubble production sequence
00014318                            
00014318                            ; 0 = small bubble, 1 =	large bubble
00014318                            
00014318 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001432A                            
0001432A                            ; ===========================================================================
0001432A                            
0001432A                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001432A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001432E 6B00                       		bmi.s	loc_12998
00014330 43F8 D000                  		lea	($FFFFD000).w,a1
00014334 3029 0008                  		move.w	8(a1),d0
00014338 3228 0008                  		move.w	8(a0),d1
0001433C 0441 0010                  		subi.w	#$10,d1
00014340 B240                       		cmp.w	d0,d1
00014342 6400                       		bcc.s	loc_12998
00014344 0641 0020                  		addi.w	#$20,d1
00014348 B240                       		cmp.w	d0,d1
0001434A 6500                       		bcs.s	loc_12998
0001434C 3029 000C                  		move.w	$C(a1),d0
00014350 3228 000C                  		move.w	$C(a0),d1
00014354 B240                       		cmp.w	d0,d1
00014356 6400                       		bcc.s	loc_12998
00014358 0641 0010                  		addi.w	#$10,d1
0001435C B240                       		cmp.w	d0,d1
0001435E 6500                       		bcs.s	loc_12998
00014360 7001                       		moveq	#1,d0
00014362 4E75                       		rts	
00014364                            ; ===========================================================================
00014364                            
00014364                            loc_12998:
00014364 7000                       		moveq	#0,d0
00014366 4E75                       		rts	
00014368                            ; ===========================================================================
00014368                            Ani_obj64:
00014368                            	include "_anim\obj64.asm"
00014368                            ; ---------------------------------------------------------------------------
00014368                            ; Animation script - bubbles (LZ)
00014368                            ; ---------------------------------------------------------------------------
00014368 0000                       		dc.w byte_129AA-Ani_obj64
0001436A 0000                       		dc.w byte_129B0-Ani_obj64
0001436C 0000                       		dc.w byte_129B6-Ani_obj64
0001436E 0000                       		dc.w byte_129BE-Ani_obj64
00014370 0000                       		dc.w byte_129BE-Ani_obj64
00014372 0000                       		dc.w byte_129C0-Ani_obj64
00014374 0000                       		dc.w byte_129C6-Ani_obj64
00014376 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001437C 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00014382 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001438A 04FC                       byte_129BE:	dc.b 4,	$FC
0001438C 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00014392 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00014398 00                         		even
00014398 00                         		even
00014398                            
00014398                            ; ---------------------------------------------------------------------------
00014398                            ; Sprite mappings - bubbles (LZ)
00014398                            ; ---------------------------------------------------------------------------
00014398                            Map_obj64:
00014398                            	include "_maps\obj64.asm"
00014398                            ; ---------------------------------------------------------------------------
00014398                            ; Sprite mappings - bubbles (LZ)
00014398                            ; ---------------------------------------------------------------------------
00014398 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001439C 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000143A0 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000143A4 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000143A8 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000143AC 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000143B0 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000143B4 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000143B8 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000143BC 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000143C0 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000143C4 0000                       		dc.w byte_12A9C-Map_obj64
000143C6 01                         byte_129FA:	dc.b 1
000143C7 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000143CC 01                         byte_12A00:	dc.b 1
000143CD FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000143D2 01                         byte_12A06:	dc.b 1
000143D3 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000143D8 01                         byte_12A0C:	dc.b 1
000143D9 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000143DE 01                         byte_12A12:	dc.b 1
000143DF F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000143E4 01                         byte_12A18:	dc.b 1
000143E5 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000143EA 01                         byte_12A1E:	dc.b 1
000143EB F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000143F0 04                         byte_12A24:	dc.b 4
000143F1 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000143F6 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000143FB 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014400 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014405 04                         byte_12A39:	dc.b 4
00014406 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001440B F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014410 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014415 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001441A 01                         byte_12A4E:	dc.b 1
0001441B F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00014420 01                         byte_12A54:	dc.b 1
00014421 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014426 01                         byte_12A5A:	dc.b 1
00014427 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001442C 01                         byte_12A60:	dc.b 1
0001442D F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014432 01                         byte_12A66:	dc.b 1
00014433 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00014438 01                         byte_12A6C:	dc.b 1
00014439 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001443E 01                         byte_12A72:	dc.b 1
0001443F F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014444 01                         byte_12A78:	dc.b 1
00014445 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001444A 01                         byte_12A7E:	dc.b 1
0001444B F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014450 01                         byte_12A84:	dc.b 1
00014451 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014456 01                         byte_12A8A:	dc.b 1
00014457 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001445C 01                         byte_12A90:	dc.b 1
0001445D F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014462 01                         byte_12A96:	dc.b 1
00014463 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014468 00                         byte_12A9C:	dc.b 0
0001446A 00                         		even
0001446A 00                         		even
0001446A                            
0001446A                            ; ===========================================================================
0001446A                            ; ---------------------------------------------------------------------------
0001446A                            ; Object 65 - waterfalls (LZ)
0001446A                            ; ---------------------------------------------------------------------------
0001446A                            
0001446A                            Obj65:					; XREF: Obj_Index
0001446A 7000                       		moveq	#0,d0
0001446C 1028 0024                  		move.b	$24(a0),d0
00014470 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00014474 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00014478                            ; ===========================================================================
00014478 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001447A 0000                       		dc.w Obj65_Animate-Obj65_Index
0001447C 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001447E 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014480 0000                       		dc.w loc_12B36-Obj65_Index
00014482                            ; ===========================================================================
00014482                            
00014482                            Obj65_Main:				; XREF: Obj65_Index
00014482 5828 0024                  		addq.b	#4,$24(a0)
00014486 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001448E 317C 4259 0002             		move.w	#$4259,2(a0)
00014494 0028 0004 0001             		ori.b	#4,1(a0)
0001449A 117C 0018 0019             		move.b	#$18,$19(a0)
000144A0 117C 0001 0018             		move.b	#1,$18(a0)
000144A6 1028 0028                  		move.b	$28(a0),d0	; get object type
000144AA 6A00                       		bpl.s	loc_12AE6
000144AC 08E8 0007 0002             		bset	#7,2(a0)
000144B2                            
000144B2                            loc_12AE6:
000144B2 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000144B6 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000144BA 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000144BE 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000144C0 4228 0018                  		clr.b	$18(a0)
000144C4 5528 0024                  		subq.b	#2,$24(a0)
000144C8 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000144CE 6700                       		beq.s	loc_12B0A	; if not, branch
000144D0 117C 0006 0024             		move.b	#6,$24(a0)
000144D6                            
000144D6                            loc_12B0A:
000144D6 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000144DC 6700                       		beq.s	Obj65_Animate	; if not, branch
000144DE 117C 0008 0024             		move.b	#8,$24(a0)
000144E4                            
000144E4                            Obj65_Animate:				; XREF: Obj65_Index
000144E4 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000144EA 4EB9 0000 C10C             		jsr	AnimateSprite
000144F0                            
000144F0                            Obj65_ChkDel:				; XREF: Obj65_Index
000144F0 6000 CBB6                  		bra.w	MarkObjGone
000144F4                            ; ===========================================================================
000144F4                            
000144F4                            Obj65_FixHeight:			; XREF: Obj65_Index
000144F4 3038 F646                  		move.w	($FFFFF646).w,d0
000144F8 0440 0010                  		subi.w	#$10,d0
000144FC 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00014500 60E2                       		bra.s	Obj65_Animate
00014502                            ; ===========================================================================
00014502                            
00014502                            loc_12B36:				; XREF: Obj65_Index
00014502 08A8 0007 0002             		bclr	#7,2(a0)
00014508 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001450E 6600                       		bne.s	Obj65_Animate2
00014510 08E8 0007 0002             		bset	#7,2(a0)
00014516                            
00014516                            Obj65_Animate2:
00014516 60CC                       		bra.s	Obj65_Animate
00014518                            ; ===========================================================================
00014518                            Ani_obj65:
00014518                            	include "_anim\obj65.asm"
00014518                            ; ---------------------------------------------------------------------------
00014518                            ; Animation script - waterfall (LZ)
00014518                            ; ---------------------------------------------------------------------------
00014518 0000                       		dc.w byte_12B4E-Ani_obj65
0001451A 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014520 00                         		even
00014520 00                         		even
00014520                            
00014520                            ; ---------------------------------------------------------------------------
00014520                            ; Sprite mappings - waterfalls (LZ)
00014520                            ; ---------------------------------------------------------------------------
00014520                            Map_obj65:
00014520                            	include "_maps\obj65.asm"
00014520                            ; ---------------------------------------------------------------------------
00014520                            ; Sprite mappings - waterfalls (LZ)
00014520                            ; ---------------------------------------------------------------------------
00014520 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00014524 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00014528 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001452C 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014530 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00014534 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00014538 01                         byte_12B6C:	dc.b 1
00014539 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001453E 02                         byte_12B72:	dc.b 2
0001453F F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014544 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014549 02                         byte_12B7D:	dc.b 2
0001454A F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001454F 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014554 01                         byte_12B88:	dc.b 1
00014555 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001455A 02                         byte_12B8E:	dc.b 2
0001455B F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014560 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014565 01                         byte_12B99:	dc.b 1
00014566 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001456B 01                         byte_12B9F:	dc.b 1
0001456C F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014571 01                         byte_12BA5:	dc.b 1
00014572 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014577 02                         byte_12BAB:	dc.b 2
00014578 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001457D 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014582 02                         byte_12BB6:	dc.b 2
00014583 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014588 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001458D 02                         byte_12BC1:	dc.b 2
0001458E F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014593 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014598 02                         byte_12BCC:	dc.b 2
00014599 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001459E F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000145A4 00                         		even
000145A4 00                         		even
000145A4                            
000145A4                            
000145A4                            ; ===========================================================================
000145A4                            ; ---------------------------------------------------------------------------
000145A4                            ; Object 05 - Spin Dash Dust
000145A4                            ; ---------------------------------------------------------------------------
000145A4                            ; Vladikcomper:	this code was absolutely rewriten
000145A4                            
000145A4                            Obj05:
000145A4 7000                       		moveq	#0,d0
000145A6 1028 0024                  		move.b	$24(a0),d0
000145AA 323B 0000                  		move.w	Obj05_Index(pc,d0.w),d1
000145AE 4EFB 1000                  		jmp	Obj05_Index(pc,d1.w)
000145B2                            
000145B2                            ; ===========================================================================
000145B2 0000                       Obj05_Index:	dc.w Obj05_Main-Obj05_Index	; 0
000145B4 0000                       		dc.w Obj05_Dust-Obj05_Index	; 2
000145B6                            
000145B6                            ; ===========================================================================
000145B6                            Obj05_Main:
000145B6 5428 0024                  		addq.b	#2,$24(a0)
000145BA 217C 0000 0000 0004        		move.l	#Map_Obj05,4(a0)
000145C2 117C 0004 0001             		move.b	#4,1(a0)
000145C8 117C 0001 0018             		move.b	#1,$18(a0)
000145CE 117C 0010 0019             		move.b	#$10,$19(a0)
000145D4 317C 07A0 0002             		move.w	#$7A0,2(a0)
000145DA 317C F400 003C             		move.w	#$F400,$3C(a0)	; VRAM destination for DMA
000145E0                            
000145E0                            ; ===========================================================================
000145E0                            Obj05_Dust:
000145E0 45F8 D000                  		lea	($FFFFD000).w,a2; load Sonic object
000145E4 0C2A 0006 0024             		cmpi.b	#6,$24(a2)	; is Sonic dying?
000145EA 6400                       		bcc.s   Obj05_Rts	; if yes, branch
000145EC 4A2A 0039                  		tst.b	$39(a2)		; is Sonic Spin Dashing?
000145F0 6700                       		beq.s	Obj05_Rts	; if not, branch
000145F2 116A 0001 0001             		move.b	1(a2),1(a0)
000145F8 316A 0008 0008             		move.w	8(a2),8(a0)
000145FE 316A 000C 000C             		move.w	$C(a2),$C(a0)
00014604 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001460A 0228 0001 0022             		andi.b	#1,$22(a0)
00014610                            
00014610                            Obj05_Display:
00014610 43F9 0000 0000             		lea	(Ani_Obj05).l,a1
00014616 4EB9 0000 C10C             		jsr	AnimateSprite
0001461C 6100                       		bsr.s	Load_SpinDust_DPLC
0001461E 6000 A9F0                  		bra.w	DisplaySprite
00014622                            
00014622                            Obj05_Rts:
00014622 4E75                       		rts
00014624                            ; ===========================================================================
00014624                            
00014624                            Load_SpinDust_DPLC:
00014624 7000                       		moveq	#0,d0
00014626 1028 001A                  		move.b	$1A(a0),d0
0001462A B028 0030                  		cmp.b	$30(a0),d0
0001462E 6700 0000                  		beq.w	locret_1DF36
00014632 1140 0030                  		move.b	d0,$30(a0)
00014636 45F9 0000 0000             		lea	(off_1E074).l,a2
0001463C D040                       		add	d0,d0
0001463E D4F2 0000                  		add	(a2,d0.w),a2
00014642 3A1A                       		move	(a2)+,d5
00014644 5345                       		subq	#1,d5
00014646 6B00 0000                  		bmi.w	locret_1DF36
0001464A 3828 003C                  		move.w	$3C(a0),d4	; load VRAM destination
0001464E                             
0001464E                            loc_1DF0A:
0001464E 7200                       		moveq	#0,d1
00014650 321A                       		move.w	(a2)+,d1
00014652 3601                       		move.w	d1,d3
00014654 E04B                       		lsr.w	#8,d3
00014656 0243 00F0                  		andi.w	#$F0,d3
0001465A 0643 0010                  		addi.w	#$10,d3
0001465E 0241 0FFF                  		andi.w	#$FFF,d1
00014662 EB89                       		lsl.l	#5,d1
00014664 0681 0000 0000             		add.l	#Art_Dust,d1
0001466A 3404                       		move	d4,d2
0001466C D843                       		add	d3,d4
0001466E D843                       		add	d3,d4
00014670 4EB9 0000 1366             		jsr	(QueueDMATransfer).l
00014676 51CD FFD6                  		dbf	d5,loc_1DF0A
0001467A 4E75                       		rts
0001467C                             
0001467C                            locret_1DF36:
0001467C 4E75                       		rts	
0001467E                            
0001467E                            ; ===========================================================================
0001467E 0000                       Ani_Obj05:	dc.w byte_1DF4F-Ani_Obj05
00014680 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b 1, $A, $B, $C, $D, $E, $F, $10, $FF
0001468A 00                         		even
0001468A                            
0001468A                            ; -------------------------------------------------------------------------------
0001468A                            ; Sprite Mappings - Spin Dust
0001468A                            ; -------------------------------------------------------------------------------
0001468A                            Map_Obj05:
0001468A 0000                       	dc.w word_1DF8A-Map_Obj05; 0
0001468C 0000                       	dc.w word_1DF8C-Map_Obj05; 1
0001468E 0000                       	dc.w word_1DF96-Map_Obj05; 2
00014690 0000                       	dc.w word_1DFA0-Map_Obj05; 3
00014692 0000                       	dc.w word_1DFAA-Map_Obj05; 4
00014694 0000                       	dc.w word_1DFB4-Map_Obj05; 5
00014696 0000                       	dc.w word_1DFBE-Map_Obj05; 6
00014698 0000                       	dc.w word_1DFC8-Map_Obj05; 7
0001469A 0000                       	dc.w word_1DFD2-Map_Obj05; 8
0001469C 0000                       	dc.w word_1DFDC-Map_Obj05; 9
0001469E 0000                       	dc.w word_1DFE6-Map_Obj05; 10
000146A0 0000                       	dc.w word_1DFF0-Map_Obj05; 11
000146A2 0000                       	dc.w word_1DFFA-Map_Obj05; 12
000146A4 0000                       	dc.w word_1E004-Map_Obj05; 13
000146A6 0000                       	dc.w word_1E016-Map_Obj05; 14
000146A8 0000                       	dc.w word_1E028-Map_Obj05; 15
000146AA 0000                       	dc.w word_1E03A-Map_Obj05; 16
000146AC 0000                       	dc.w word_1E04C-Map_Obj05; 17
000146AE 0000                       	dc.w word_1E056-Map_Obj05; 18
000146B0 0000                       	dc.w word_1E060-Map_Obj05; 19
000146B2 0000                       	dc.w word_1E06A-Map_Obj05; 20
000146B4 0000                       	dc.w word_1DF8A-Map_Obj05; 21
000146B6 00                         word_1DF8A:	dc.b 0
000146B7 01                         word_1DF8C:	dc.b 1
000146B8 F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
000146BD 01                         word_1DF96:	dc.b 1
000146BE E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
000146C3 01                         word_1DFA0:	dc.b 1
000146C4 E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
000146C9 01                         word_1DFAA:	dc.b 1
000146CA E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
000146CF 01                         word_1DFB4:	dc.b 1
000146D0 E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
000146D5 01                         word_1DFBE:	dc.b 1
000146D6 E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
000146DB 01                         word_1DFC8:	dc.b 1
000146DC F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
000146E1 01                         word_1DFD2:	dc.b 1
000146E2 F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
000146E7 01                         word_1DFDC:	dc.b 1
000146E8 F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
000146ED 01                         word_1DFE6:	dc.b 1
000146EE 040D 0000 E0               		dc.b $4, $0D, $0, 0,$E0; 0
000146F3 01                         word_1DFF0:	dc.b 1
000146F4 040D 0000 E0               		dc.b $4, $0D, $0, 0,$E0; 0
000146F9 01                         word_1DFFA:	dc.b 1
000146FA 040D 0000 E0               		dc.b $4, $0D, $0, 0,$E0; 0
000146FF 02                         word_1E004:	dc.b 2
00014700 F401 0000 E8               		dc.b $F4, $01, $0, 0,$E8; 0
00014705 040D 0002 E0               		dc.b $4, $0D, $0, 2,$E0; 4
0001470A 02                         word_1E016:	dc.b 2
0001470B F405 0000 E8               		dc.b $F4, $05, $0, 0,$E8; 0
00014710 040D 0004 E0               		dc.b $4, $0D, $0, 4,$E0; 4
00014715 02                         word_1E028:	dc.b 2
00014716 F409 0000 E0               		dc.b $F4, $09, $0, 0,$E0; 0
0001471B 040D 0006 E0               		dc.b $4, $0D, $0, 6,$E0; 4
00014720 02                         word_1E03A:	dc.b 2
00014721 F409 0000 E0               		dc.b $F4, $09, $0, 0,$E0; 0
00014726 040D 0006 E0               		dc.b $4, $0D, $0, 6,$E0; 4
0001472B 01                         word_1E04C:	dc.b 1
0001472C F805 0000 F8               		dc.b $F8, $05, $0, 0,$F8; 0
00014731 01                         word_1E056:	dc.b 1
00014732 F805 0004 F8               		dc.b $F8, $05, $0, 4,$F8; 0
00014737 01                         word_1E060:	dc.b 1
00014738 F805 0008 F8               		dc.b $F8, $05, $0, 8,$F8; 0
0001473D 01                         word_1E06A:	dc.b 1
0001473E F805 000C F8               		dc.b $F8, $05, $0, $C,$F8; 0
00014743 00                         		dc.b 0
00014744                             
00014744                            ; -------------------------------------------------------------------------------
00014744                            ; Dynamic Pattern Load Cues - Spin Dust
00014744                            ; -------------------------------------------------------------------------------
00014744                            
00014744 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014746 0000                       	dc word_1E0A2-off_1E074; 1
00014748 0000                       	dc word_1E0A6-off_1E074; 2
0001474A 0000                       	dc word_1E0AA-off_1E074; 3
0001474C 0000                       	dc word_1E0AE-off_1E074; 4
0001474E 0000                       	dc word_1E0B2-off_1E074; 5
00014750 0000                       	dc word_1E0B6-off_1E074; 6
00014752 0000                       	dc word_1E0BA-off_1E074; 7
00014754 0000                       	dc word_1E0BE-off_1E074; 8
00014756 0000                       	dc word_1E0C2-off_1E074; 9
00014758 0000                       	dc word_1E0C6-off_1E074; 10
0001475A 0000                       	dc word_1E0CA-off_1E074; 11
0001475C 0000                       	dc word_1E0CE-off_1E074; 12
0001475E 0000                       	dc word_1E0D2-off_1E074; 13
00014760 0000                       	dc word_1E0D8-off_1E074; 14
00014762 0000                       	dc word_1E0DE-off_1E074; 15
00014764 0000                       	dc word_1E0E4-off_1E074; 16
00014766 0000                       	dc word_1E0EA-off_1E074; 17
00014768 0000                       	dc word_1E0EA-off_1E074; 18
0001476A 0000                       	dc word_1E0EA-off_1E074; 19
0001476C 0000                       	dc word_1E0EA-off_1E074; 20
0001476E 0000                       	dc word_1E0EC-off_1E074; 21
00014770 0000                       word_1E0A0:	dc 0
00014772 0001                       word_1E0A2:	dc 1
00014774 7000                       	dc $7000
00014776 0001                       word_1E0A6:	dc 1
00014778 F008                       	dc $F008
0001477A 0001                       word_1E0AA:	dc 1
0001477C F018                       	dc $F018
0001477E 0001                       word_1E0AE:	dc 1
00014780 F028                       	dc $F028
00014782 0001                       word_1E0B2:	dc 1
00014784 F038                       	dc $F038
00014786 0001                       word_1E0B6:	dc 1
00014788 F048                       	dc $F048
0001478A 0001                       word_1E0BA:	dc 1
0001478C 7058                       	dc $7058
0001478E 0001                       word_1E0BE:	dc 1
00014790 7060                       	dc $7060
00014792 0001                       word_1E0C2:	dc 1
00014794 7068                       	dc $7068
00014796 0001                       word_1E0C6:	dc 1
00014798 7070                       	dc $7070
0001479A 0001                       word_1E0CA:	dc 1
0001479C 7078                       	dc $7078
0001479E 0001                       word_1E0CE:	dc 1
000147A0 7080                       	dc $7080
000147A2 0002                       word_1E0D2:	dc 2
000147A4 1088                       	dc $1088
000147A6 708A                       	dc $708A
000147A8 0002                       word_1E0D8:	dc 2
000147AA 3092                       	dc $3092
000147AC 7096                       	dc $7096
000147AE 0002                       word_1E0DE:	dc 2
000147B0 509E                       	dc $509E
000147B2 70A4                       	dc $70A4
000147B4 0002                       word_1E0E4:	dc 2
000147B6 50AC                       	dc $50AC
000147B8 70B2                       	dc $70B2
000147BA 0000                       word_1E0EA:	dc 0
000147BC 0001                       word_1E0EC:	dc 1
000147BE F0BA                       	dc $F0BA
000147C0                            	even
000147C0                            
000147C0                            
000147C0                            ; ===========================================================================
000147C0                            ; ---------------------------------------------------------------------------
000147C0                            ; Object 01 - Sonic
000147C0                            ; ---------------------------------------------------------------------------
000147C0                            
000147C0                            Obj01:					; XREF: Obj_Index
000147C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000147C4 6700                       		beq.s	Obj01_Normal	; if not, branch
000147C6 4EF9 0000 0000             		jmp	DebugMode
000147CC                            ; ===========================================================================
000147CC                            
000147CC                            Obj01_Normal:
000147CC 7000                       		moveq	#0,d0
000147CE 1028 0024                  		move.b	$24(a0),d0
000147D2 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000147D6 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000147DA                            ; ===========================================================================
000147DA 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000147DC 0000                       		dc.w Obj01_Control-Obj01_Index
000147DE 0000                       		dc.w Obj01_Hurt-Obj01_Index
000147E0 0000                       		dc.w Obj01_Death-Obj01_Index
000147E2 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000147E4                            ; ===========================================================================
000147E4                            
000147E4                            Obj01_Main:				; XREF: Obj01_Index
000147E4 5428 0024                  		addq.b	#2,$24(a0)	; switch to the next routine, so this won't run twice
000147E8 117C 0013 0016             		move.b	#$13,$16(a0)
000147EE 117C 0009 0017             		move.b	#9,$17(a0)
000147F4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000147FC 317C 0780 0002             		move.w	#$780,2(a0)
00014802 117C 0002 0018             		move.b	#2,$18(a0)
00014808 117C 0018 0019             		move.b	#$18,$19(a0)
0001480E 117C 0004 0001             		move.b	#4,1(a0)
00014814 31FC 0600 F760             		move.w	#$600,($FFFFF760).w	; Sonic's Top Speed
0001481A 31FC 000C F762             		move.w	#$C,($FFFFF762).w	; Sonic's acceleration
00014820 31FC 0080 F764             		move.w	#$80,($FFFFF764).w	; Sonic's deceleration
00014826 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w	; create Spin Dust object
0001482C                            
0001482C                            Obj01_Control:				; XREF: Obj01_Index
0001482C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014830 6700                       		beq.s	loc_12C58	; if not, branch
00014832 0838 0004 F605             		btst	#iC,(Joypad|Press)	; is button C pressed?
00014838 6700                       		beq.s	loc_12C58		; if not, branch
0001483A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w	; change Sonic	into a ring/item
00014840 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014844 4E75                       		rts	
00014846                            ; ===========================================================================
00014846                            
00014846                            loc_12C58:
00014846 4A38 F7CC                  		tst.b	($FFFFF7CC).w		; are controls locked?
0001484A 6600                       		bne.s	loc_12C64		; if yes, branch
0001484C 31F8 F604 F602             		move.w	(Joypad),(SonicControl)	; enable joypad control
00014852                            
00014852                            loc_12C64:
00014852 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w	; is Sonic freezed?
00014858 6600                       		bne.s	loc_12C7E		; if yes, branch
0001485A 7000                       		moveq	#0,d0
0001485C 1028 0022                  		move.b	$22(a0),d0	; byte $22 used as the secondary routine counter
00014860 0240 0006                  		andi.w	#%110,d0	; filter only bits #1 and #2
00014864 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014868 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001486C                            
0001486C                            loc_12C7E:
0001486C 6100                       		bsr.s	Sonic_Display
0001486E 6100 0000                  		bsr.w	Sonic_RecordPos
00014872 6100 0000                  		bsr.w	Sonic_Water
00014876 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001487C 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014882 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014886 6700                       		beq.s	loc_12CA6
00014888 4A28 001C                  		tst.b	$1C(a0)
0001488C 6600                       		bne.s	loc_12CA6
0001488E 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014894                            
00014894                            loc_12CA6:
00014894 6100 0000                  		bsr.w	Sonic_Animate
00014898 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001489C 6B00                       		bmi.s	loc_12CB6
0001489E 4EB9 0000 0000             		jsr	TouchResponse
000148A4                            
000148A4                            loc_12CB6:
000148A4 6100 0000                  		bsr.w	Sonic_Loops
000148A8 6100 0000                  		bsr.w	LoadSonicDynPLC
000148AC 4E75                       		rts	
000148AE                            ; ===========================================================================
000148AE 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000148B0 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000148B2 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000148B4 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000148B6                            
000148B6                            ; ===========================================================================
000148B6                            
000148B6                            Sonic_Display:				; XREF: loc_12C7E
000148B6 3028 0030                  		move.w	$30(a0),d0	; move remaining invulnerability time to d0
000148BA 6700                       		beq.s	Obj01_Display	; if it's zero, branch
000148BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148C0 E648                       		lsr.w	#3,d0
000148C2 6400                       		bcc.s	Obj01_ChkInvin	; skip sprite displaying
000148C4                            
000148C4                            Obj01_Display:
000148C4 4EBA A74A                  		jsr	DisplaySprite
000148C8                            
000148C8                            Obj01_ChkInvin:
000148C8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000148CC 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
000148CE 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000148D2 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
000148D4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000148D8 6600                       		bne.s	Obj01_ChkShoes	; if time remains, branch
000148DA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000148DE 6600                       		bne.s	Obj01_RmvInvin
000148E0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000148E6 6500                       		bcs.s	Obj01_RmvInvin
000148E8 7000                       		moveq	#0,d0
000148EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000148EE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
000148F4 6600                       		bne.s	Obj01_PlayMusic
000148F6 7005                       		moveq	#5,d0		; play SBZ music
000148F8                            
000148F8                            Obj01_PlayMusic:
000148F8 43F9 0000 5184             		lea	(MusicList).l,a1 ; load	music playlist
000148FE 1031 0000                  		move.b	(a1,d0.w),d0
00014902 1238 FE11                  		move.b  ($FFFFFE11).w,d1
00014906 0C01 0003                                  cmpi.b	#3,d1		; is this act 4?
0001490A 6600                                       bne.s   @Play		; if not, branch
0001490C 5301                                       subi.b	#1,d1
0001490E D001                       	@Play:	add.b	d1,d0		; add act number to the current song
00014910 4EB9 0000 12C2             		jsr	(PlaySound).l	; play music
00014916                            
00014916                            Obj01_RmvInvin:
00014916 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001491C                            
0001491C                            Obj01_ChkShoes:
0001491C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00014920 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00014922 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014926 6700                       		beq.s	Obj01_ExitChk
00014928 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001492C 6600                       		bne.s	Obj01_ExitChk	; if time remains, branch
0001492E                            
0001492E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w	; restore Sonic's Top Speed
00014934 31FC 000C F762             		move.w	#$C,($FFFFF762).w	; restore Sonic's acceleration
0001493A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w	; restore Sonic's deceleration
00014940 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w	; cancel speed	shoes
00014946 303C 00E3                  		move.w	#$E3,d0
0001494A 4EF9 0000 12C2             		jmp	(PlaySound).l	; run music at normal speed
00014950                            ; ===========================================================================
00014950                            
00014950                            Obj01_ExitChk:
00014950 4E75                       		rts	
00014952                            
00014952                            ; ---------------------------------------------------------------------------
00014952                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014952                            ; ---------------------------------------------------------------------------
00014952                            
00014952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014952                            
00014952                            
00014952                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death et al
00014952 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014956 43F8 CB00                  		lea	($FFFFCB00).w,a1 ; load previous positions array
0001495A 43F1 0000                  		lea	(a1,d0.w),a1
0001495E 32E8 0008                  		move.w	8(a0),(a1)+
00014962 32E8 000C                  		move.w	$C(a0),(a1)+
00014966 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001496A 4E75                       		rts	
0001496C                            ; End of function Sonic_RecordPos
0001496C                            
0001496C                            ; ---------------------------------------------------------------------------
0001496C                            ; Subroutine for Sonic when he's underwater
0001496C                            ; ---------------------------------------------------------------------------
0001496C                            
0001496C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001496C                            
0001496C                            
0001496C                            Sonic_Water:				; XREF: loc_12C7E
0001496C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014972 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014974                            
00014974                            locret_12D80:
00014974 4E75                       		rts	
00014976                            ; ===========================================================================
00014976                            
00014976                            Obj01_InWater:
00014976 3038 F646                  		move.w	($FFFFF646).w,d0
0001497A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001497E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014980 08E8 0006 0022             		bset	#6,$22(a0)	; is Sonic already in water?
00014986 66EC                       		bne.s	locret_12D80	; if yes, branch
00014988 6100 0000                  		bsr.w	ResumeMusic
0001498C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014992 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014998 31FC 0300 F760             		move.w	#$300,($FFFFF760).w	; change Sonic's top speed
0001499E 31FC 0006 F762             		move.w	#6,($FFFFF762).w 	; change Sonic's acceleration
000149A4 31FC 0040 F764             		move.w	#$40,($FFFFF764).w	; change Sonic's deceleration
000149AA E0E8 0010                  		asr	$10(a0)
000149AE E0E8 0012                  		asr	$12(a0)
000149B2 E0E8 0012                  		asr	$12(a0)
000149B6 67BC                       		beq.s	locret_12D80
000149B8 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000149BE 303C 00AA                  		move.w	#$AA,d0
000149C2 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play splash sound
000149C8                            ; ===========================================================================
000149C8                            
000149C8                            Obj01_OutWater:
000149C8 08A8 0006 0022             		bclr	#6,$22(a0)	; is Sonic already out of water?
000149CE 67A4                       		beq.s	locret_12D80	; if yes, branch
000149D0 6100 0000                  		bsr.w	ResumeMusic
000149D4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w	; restore Sonic's speed
000149DA 31FC 000C F762             		move.w	#$C,($FFFFF762).w	; restore Sonic's acceleration
000149E0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w	; restore Sonic's deceleration
000149E6 E1E8 0012                  		asl	$12(a0)
000149EA 6700 FF88                  		beq.w	locret_12D80
000149EE 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000149F4 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000149FA 6E00                       		bgt.s	loc_12E0E
000149FC 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014A02                            
00014A02                            loc_12E0E:
00014A02 303C 00AA                  		move.w	#$AA,d0
00014A06 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play splash sound
00014A0C                            ; End of function Sonic_Water
00014A0C                            
00014A0C                            ; ===========================================================================
00014A0C                            ; ---------------------------------------------------------------------------
00014A0C                            ; Modes	for controlling	Sonic
00014A0C                            ; ---------------------------------------------------------------------------
00014A0C                            
00014A0C                            Obj01_MdNormal:				; XREF: Obj01_Modes
00014A0C 6100 0000                  		bsr.w	Sonic_SpinDash
00014A10 6100 0000                                  bsr.w	Sonic_Jump
00014A14 6100 0000                  		bsr.w	Sonic_SlopeResist
00014A18 6100 0000                  		bsr.w	Sonic_Move
00014A1C 6100 0000                  		bsr.w	Sonic_Roll
00014A20 6100 0000                  		bsr.w	Sonic_LevelBound
00014A24 4EBA A5C4                  		jsr	SpeedToPos
00014A28 6100 0000                  		bsr.w	Sonic_AnglePos
00014A2C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014A30 4E75                       		rts
00014A32                            ; ===========================================================================
00014A32                            
00014A32                            Obj01_MdJump:				; XREF: Obj01_Modes
00014A32 4228 0039                  		clr.b	$39(a0)		; clear Spin Dash flag
00014A36 6100 0000                  		bsr.w	Sonic_AirRoll
00014A3A 6100 0000                  		bsr.w	Sonic_JumpHeight
00014A3E 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014A42 6100 0000                  		bsr.w	Sonic_LevelBound
00014A46 4EBA A576                  		jsr	ObjectFall
00014A4A 0828 0006 0022             		btst	#6,$22(a0)	; is Sonic underwater?
00014A50 6700                       		beq.s	loc_12E5C	; if no, branch
00014A52 0468 0028 0012             		subi.w	#$28,$12(a0)
00014A58                            
00014A58                            loc_12E5C:
00014A58 6100 0000                  		bsr.w	Sonic_JumpAngle
00014A5C 6100 0000                  		bsr.w	Sonic_Floor
00014A60 4E75                       		rts	
00014A62                            ; ===========================================================================
00014A62                            
00014A62                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014A62 6100 0000                  		bsr.w	Sonic_Jump
00014A66 6100 0000                  		bsr.w	Sonic_RollRepel
00014A6A 6100 0000                  		bsr.w	Sonic_RollSpeed
00014A6E 6100 0000                  		bsr.w	Sonic_LevelBound
00014A72 4EBA A576                  		jsr	SpeedToPos
00014A76 6100 0000                  		bsr.w	Sonic_AnglePos
00014A7A 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014A7E 4E75                       		rts	
00014A80                            ; ===========================================================================
00014A80                            
00014A80                            Obj01_MdJump2:				; XREF: Obj01_Modes
00014A80 6100 0000                  		bsr.w	Sonic_JumpDash
00014A84 6100 0000                  		bsr.w Sonic_DoubleJump
00014A88 6100 0000                  		bsr.w	Sonic_JumpHeight
00014A8C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014A90 6100 0000                  		bsr.w	Sonic_LevelBound
00014A94 4EBA A528                  		jsr	ObjectFall
00014A98 0828 0006 0022             		btst	#6,$22(a0)	; is Sonic underwater?
00014A9E 6700                       		beq.s	loc_12EA6	; if no, branch
00014AA0 0468 0028 0012             		subi.w	#$28,$12(a0)
00014AA6                            
00014AA6                            loc_12EA6:
00014AA6 6100 0000                  		bsr.w	Sonic_JumpAngle
00014AAA 6100 0000                  		bsr.w	Sonic_Floor
00014AAE 4E75                       		rts	
00014AB0                            ; ---------------------------------------------------------------------------
00014AB0                            ; Subroutine to	make Sonic walk/run
00014AB0                            ; ---------------------------------------------------------------------------
00014AB0                            
00014AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AB0                            
00014AB0                            
00014AB0                            Sonic_Move:				; XREF: Obj01_MdNormal
00014AB0 3C38 F760                  		move.w	($FFFFF760).w,d6
00014AB4 3A38 F762                  		move.w	($FFFFF762).w,d5
00014AB8 3838 F764                  		move.w	($FFFFF764).w,d4
00014ABC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014AC0 6600 0000                  		bne.w	loc_12FEE
00014AC4 4A68 003E                  		tst.w	$3E(a0)
00014AC8 6600 0000                  		bne.w	Obj01_ResetScr
00014ACC 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
00014AD2 6700                       		beq.s	Obj01_NotLeft			; if not, branch
00014AD4 6100 0000                  		bsr.w	Sonic_MoveLeft
00014AD8                            
00014AD8                            Obj01_NotLeft:
00014AD8 0838 0003 F602             		btst	#iRight,(SonicControl|Held)	; is right being pressed?
00014ADE 6700                       		beq.s	Obj01_NotRight			; if not, branch
00014AE0 6100 0000                  		bsr.w	Sonic_MoveRight
00014AE4                            
00014AE4                            Obj01_NotRight:
00014AE4 1028 0026                  		move.b	$26(a0),d0
00014AE8 0600 0020                  		addi.b	#$20,d0
00014AEC 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014AF0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014AF4 4A68 0014                  		tst.w	$14(a0)		; test Sonic's inertia
00014AF8 6600 0000                  		bne.w	Obj01_ResetScr	; if it's not zero, branch
00014AFC                            
00014AFC 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
00014B02 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014B08 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on an object?
00014B0E 6700                       		beq.s	Sonic_Balance 	; if not, branch
00014B10 7000                       		moveq	#0,d0
00014B12 1028 003D                  		move.b	$3D(a0),d0
00014B16 ED48                       		lsl.w	#6,d0
00014B18 43F8 D000                  		lea	($FFFFD000).w,a1
00014B1C 43F1 0000                  		lea	(a1,d0.w),a1
00014B20 4A29 0022                  		tst.b	$22(a1)
00014B24 6B00                       		bmi.s	Sonic_LookUp
00014B26 7200                       		moveq	#0,d1
00014B28 1229 0019                  		move.b	$19(a1),d1
00014B2C 3401                       		move.w	d1,d2
00014B2E D442                       		add.w	d2,d2
00014B30 5942                       		subq.w	#4,d2
00014B32 D268 0008                  		add.w	8(a0),d1
00014B36 9269 0008                  		sub.w	8(a1),d1
00014B3A 0C41 0004                  		cmpi.w	#4,d1
00014B3E 6D00                       		blt.s	loc_12F6A
00014B40 B242                       		cmp.w	d2,d1
00014B42 6C00                       		bge.s	loc_12F5A
00014B44 6000                       		bra.s	Sonic_LookUp
00014B46                            ; ===========================================================================
00014B46                            
00014B46                            Sonic_Balance:
00014B46 4EB9 0000 0000             		jsr	ObjHitFloor
00014B4C 0C41 000C                  		cmpi.w	#$C,d1
00014B50 6D00                       		blt.s	Sonic_LookUp
00014B52 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014B58 6600                       		bne.s	loc_12F62
00014B5A                            
00014B5A                            loc_12F5A:
00014B5A 08A8 0000 0022             		bclr	#0,$22(a0)
00014B60 6000                       		bra.s	loc_12F70
00014B62                            ; ===========================================================================
00014B62                            
00014B62                            loc_12F62:
00014B62 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014B68 6600                       		bne.s	Sonic_LookUp
00014B6A                            
00014B6A                            loc_12F6A:
00014B6A 08E8 0000 0022             		bset	#0,$22(a0)
00014B70                            
00014B70                            loc_12F70:
00014B70 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014B76 6000                       		bra.s	Obj01_ResetScr
00014B78                            ; ===========================================================================
00014B78                            
00014B78                            Sonic_LookUp:
00014B78 0838 0000 F602             		btst	#iUp,(SonicControl|Held)	; is up being pressed?
00014B7E 6700                       		beq.s	Sonic_Duck			; if not, branch
00014B80 117C 0007 001C             		move.b	#7,$1C(a0)			; use "looking up" animation
00014B86 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014B8C 6700                       		beq.s	loc_12FC2
00014B8E 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014B92 6000                       		bra.s	loc_12FC2
00014B94                            ; ===========================================================================
00014B94                            
00014B94                            Sonic_Duck:
00014B94 0838 0001 F602             		btst	#iDown,(SonicControl|Held)	; is down being pressed?
00014B9A 6700                       		beq.s	Obj01_ResetScr			; if not, branch
00014B9C 117C 0008 001C             		move.b	#8,$1C(a0)			; use "ducking"	animation
00014BA2 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014BA8 6700                       		beq.s	loc_12FC2
00014BAA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014BAE 6000                       		bra.s	loc_12FC2
00014BB0                            ; ===========================================================================
00014BB0                            
00014BB0                            Obj01_ResetScr:
00014BB0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014BB6 6700                       		beq.s	loc_12FC2	; if yes, branch
00014BB8 6400                       		bcc.s	loc_12FBE
00014BBA 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014BBE                            
00014BBE                            loc_12FBE:
00014BBE 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014BC2                            
00014BC2                            loc_12FC2:
00014BC2 1038 F602 0200 000C        		theld	Left+Right,(SonicControl)
00014BCA 6600                       		bne.s	loc_12FEE	; if Left/Right held, branch
00014BCC 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
00014BD0 6700                       		beq.s	loc_12FEE	; if it's zero, branch
00014BD2 6B00                       		bmi.s	loc_12FE2	; if it's negative, branch
00014BD4 9045                       		sub.w	d5,d0
00014BD6 6400                       		bcc.s	loc_12FDC
00014BD8 303C 0000                  		move.w	#0,d0
00014BDC                            
00014BDC                            loc_12FDC:
00014BDC 3140 0014                  		move.w	d0,$14(a0)
00014BE0 6000                       		bra.s	loc_12FEE
00014BE2                            ; ===========================================================================
00014BE2                            
00014BE2                            loc_12FE2:
00014BE2 D045                       		add.w	d5,d0
00014BE4 6400                       		bcc.s	loc_12FEA
00014BE6 303C 0000                  		move.w	#0,d0
00014BEA                            
00014BEA                            loc_12FEA:
00014BEA 3140 0014                  		move.w	d0,$14(a0)
00014BEE                            
00014BEE                            loc_12FEE:
00014BEE 1028 0026                  		move.b	$26(a0),d0
00014BF2 4EB9 0000 29AE             		jsr	(CalcSine).l
00014BF8 C3E8 0014                  		muls.w	$14(a0),d1
00014BFC E081                       		asr.l	#8,d1
00014BFE 3141 0010                  		move.w	d1,$10(a0)
00014C02 C1E8 0014                  		muls.w	$14(a0),d0
00014C06 E080                       		asr.l	#8,d0
00014C08 3140 0012                  		move.w	d0,$12(a0)
00014C0C                            
00014C0C                            loc_1300C:
00014C0C 1028 0026                  		move.b	$26(a0),d0
00014C10 0600 0040                  		addi.b	#$40,d0
00014C14 6B00                       		bmi.s	locret_1307C
00014C16 123C 0040                  		move.b	#$40,d1
00014C1A 4A68 0014                  		tst.w	$14(a0)
00014C1E 6700                       		beq.s	locret_1307C
00014C20 6B00                       		bmi.s	loc_13024
00014C22 4441                       		neg.w	d1
00014C24                            
00014C24                            loc_13024:
00014C24 1028 0026                  		move.b	$26(a0),d0
00014C28 D001                       		add.b	d1,d0
00014C2A 3F00                       		move.w	d0,-(sp)
00014C2C 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014C30 301F                       		move.w	(sp)+,d0
00014C32 4A41                       		tst.w	d1
00014C34 6A00                       		bpl.s	locret_1307C
00014C36 E141                       		asl.w	#8,d1
00014C38 0600 0020                  		addi.b	#$20,d0
00014C3C 0200 00C0                  		andi.b	#$C0,d0
00014C40 6700                       		beq.s	loc_13078
00014C42 0C00 0040                  		cmpi.b	#$40,d0
00014C46 6700                       		beq.s	loc_13066
00014C48 0C00 0080                  		cmpi.b	#$80,d0
00014C4C 6700                       		beq.s	loc_13060
00014C4E D368 0010                  		add.w	d1,$10(a0)
00014C52 08E8 0005 0022             		bset	#5,$22(a0)
00014C58 317C 0000 0014             		move.w	#0,$14(a0)
00014C5E 4E75                       		rts	
00014C60                            ; ===========================================================================
00014C60                            
00014C60                            loc_13060:
00014C60 9368 0012                  		sub.w	d1,$12(a0)
00014C64 4E75                       		rts	
00014C66                            ; ===========================================================================
00014C66                            
00014C66                            loc_13066:
00014C66 9368 0010                  		sub.w	d1,$10(a0)
00014C6A 08E8 0005 0022             		bset	#5,$22(a0)
00014C70 317C 0000 0014             		move.w	#0,$14(a0)
00014C76 4E75                       		rts	
00014C78                            ; ===========================================================================
00014C78                            
00014C78                            loc_13078:
00014C78 D368 0012                  		add.w	d1,$12(a0)
00014C7C                            
00014C7C                            locret_1307C:
00014C7C 4E75                       		rts	
00014C7E                            ; End of function Sonic_Move
00014C7E                            
00014C7E                            
00014C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C7E                            
00014C7E                            
00014C7E                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014C7E 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
00014C82 6700                       		beq.s	loc_13086	; if it's zero, branch
00014C84 6A00                       		bpl.s	loc_130B2	; if it's positive, branch
00014C86                            
00014C86                            loc_13086:
00014C86 08E8 0000 0022             		bset	#0,$22(a0)	; set Sonic's orientation to 1 (left)
00014C8C 6600                       		bne.s	loc_1309A	; if orientation was already left, branch
00014C8E 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
00014C94 117C 0001 001D             		move.b	#1,$1D(a0)
00014C9A                            
00014C9A                            loc_1309A:
00014C9A 9045                       		sub.w	d5,d0
00014C9C 3206                       		move.w	d6,d1
00014C9E 4441                       		neg.w	d1
00014CA0 B041                       		cmp.w	d1,d0
00014CA2 6E00                       		bgt.s	loc_130A6
00014CA4 D045                       		add.w   d5,d0
00014CA6 B041                       		cmp.w   d1,d0
00014CA8 6F00                       		ble.s   loc_130A6
00014CAA 3001                       		move.w	d1,d0
00014CAC                            
00014CAC                            loc_130A6:
00014CAC 3140 0014                  		move.w	d0,$14(a0)
00014CB0 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014CB6 4E75                       		rts	
00014CB8                            ; ===========================================================================
00014CB8                            
00014CB8                            loc_130B2:				; XREF: Sonic_MoveLeft
00014CB8 9044                       		sub.w	d4,d0
00014CBA 6400                       		bcc.s	loc_130BA
00014CBC 303C FF80                  		move.w	#-$80,d0
00014CC0                            
00014CC0                            loc_130BA:
00014CC0 3140 0014                  		move.w	d0,$14(a0)
00014CC4 1028 0026                  		move.b	$26(a0),d0
00014CC8 0600 0020                  		addi.b	#$20,d0
00014CCC 0200 00C0                  		andi.b	#$C0,d0
00014CD0 6600                       		bne.s	locret_130E8
00014CD2 0C40 0400                  		cmpi.w	#$400,d0
00014CD6 6D00                       		blt.s	locret_130E8
00014CD8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014CDE 08A8 0000 0022             		bclr	#0,$22(a0)
00014CE4 303C 00A4                  		move.w	#$A4,d0
00014CE8 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play stopping sound
00014CEE                            
00014CEE                            locret_130E8:
00014CEE 4E75                       		rts	
00014CF0                            ; End of function Sonic_MoveLeft
00014CF0                            
00014CF0                            
00014CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CF0                            
00014CF0                            
00014CF0                            Sonic_MoveRight:			; XREF: Sonic_Move
00014CF0 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
00014CF4 6B00                       		bmi.s	loc_13118	; if it's negative, branch
00014CF6                            
00014CF6 08A8 0000 0022             		bclr	#0,$22(a0)	; set Sonic's orientation to 0 (right)
00014CFC 6700                       		beq.s	loc_13104	; if orientation was already right, branch
00014CFE 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
00014D04 117C 0001 001D             		move.b	#1,$1D(a0)
00014D0A                            
00014D0A                            loc_13104:
00014D0A D045                       		add.w	d5,d0
00014D0C B046                       		cmp.w	d6,d0
00014D0E 6D00                       		blt.s	loc_1310C
00014D10 9045                       		sub.w   d5,d0
00014D12 B046                       		cmp.w   d6,d0
00014D14 6C00                       		bge.s   loc_1310C
00014D16 3006                       		move.w	d6,d0
00014D18                            
00014D18                            loc_1310C:
00014D18 3140 0014                  		move.w	d0,$14(a0)
00014D1C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014D22 4E75                       		rts	
00014D24                            ; ===========================================================================
00014D24                            
00014D24                            loc_13118:				; XREF: Sonic_MoveRight
00014D24 D044                       		add.w	d4,d0
00014D26 6400                       		bcc.s	loc_13120
00014D28 303C 0080                  		move.w	#$80,d0
00014D2C                            
00014D2C                            loc_13120:
00014D2C 3140 0014                  		move.w	d0,$14(a0)
00014D30 1028 0026                  		move.b	$26(a0),d0
00014D34 0600 0020                  		addi.b	#$20,d0
00014D38 0200 00C0                  		andi.b	#$C0,d0
00014D3C 6600                       		bne.s	locret_1314E
00014D3E 0C40 FC00                  		cmpi.w	#-$400,d0
00014D42 6E00                       		bgt.s	locret_1314E
00014D44 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014D4A 08E8 0000 0022             		bset	#0,$22(a0)
00014D50 303C 00A4                  		move.w	#$A4,d0
00014D54 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play stopping sound
00014D5A                            
00014D5A                            locret_1314E:
00014D5A 4E75                       		rts	
00014D5C                            ; End of function Sonic_MoveRight
00014D5C                            
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            ; Subroutine to	change Sonic's speed as he rolls
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            
00014D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D5C                            
00014D5C                            
00014D5C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014D5C 3C38 F760                  		move.w	($FFFFF760).w,d6
00014D60 E346                       		asl.w	#1,d6
00014D62 3A38 F762                  		move.w	($FFFFF762).w,d5
00014D66 E245                       		asr.w	#1,d5
00014D68 3838 F764                  		move.w	($FFFFF764).w,d4
00014D6C E444                       		asr.w	#2,d4
00014D6E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014D72 6600 0000                  		bne.w	loc_131CC
00014D76 4A68 003E                  		tst.w	$3E(a0)
00014D7A 6600                       		bne.s	loc_13188
00014D7C 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
00014D82 6700                       		beq.s	loc_1317C			; if not, branch
00014D84 6100 0000                  		bsr.w	Sonic_RollLeft
00014D88                            
00014D88                            loc_1317C:
00014D88 0838 0003 F602             		btst	#iRight,(SonicControl|Held)	; is right being pressed?
00014D8E 6700                       		beq.s	loc_13188			; if not, branch
00014D90 6100 0000                  		bsr.w	Sonic_RollRight
00014D94                            
00014D94                            loc_13188:
00014D94 3028 0014                  		move.w	$14(a0),d0
00014D98 6700                       		beq.s	loc_131AA
00014D9A 6B00                       		bmi.s	loc_1319E
00014D9C 9045                       		sub.w	d5,d0
00014D9E 6400                       		bcc.s	loc_13198
00014DA0 303C 0000                  		move.w	#0,d0
00014DA4                            
00014DA4                            loc_13198:
00014DA4 3140 0014                  		move.w	d0,$14(a0)
00014DA8 6000                       		bra.s	loc_131AA
00014DAA                            ; ===========================================================================
00014DAA                            
00014DAA                            loc_1319E:				; XREF: Sonic_RollSpeed
00014DAA D045                       		add.w	d5,d0
00014DAC 6400                       		bcc.s	loc_131A6
00014DAE 303C 0000                  		move.w	#0,d0
00014DB2                            
00014DB2                            loc_131A6:
00014DB2 3140 0014                  		move.w	d0,$14(a0)
00014DB6                            
00014DB6                            loc_131AA:
00014DB6 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014DBA 6600                       		bne.s	loc_131CC	; if yes, branch
00014DBC 08A8 0002 0022             		bclr	#2,$22(a0)
00014DC2 117C 0013 0016             		move.b	#$13,$16(a0)
00014DC8 117C 0009 0017             		move.b	#9,$17(a0)
00014DCE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014DD4 5B68 000C                  		subq.w	#5,$C(a0)
00014DD8                            
00014DD8                            loc_131CC:
00014DD8 1028 0026                  		move.b	$26(a0),d0
00014DDC 4EB9 0000 29AE             		jsr	(CalcSine).l
00014DE2 C1E8 0014                  		muls.w	$14(a0),d0
00014DE6 E080                       		asr.l	#8,d0
00014DE8 3140 0012                  		move.w	d0,$12(a0)
00014DEC C3E8 0014                  		muls.w	$14(a0),d1
00014DF0 E081                       		asr.l	#8,d1
00014DF2 0C41 1000                  		cmpi.w	#$1000,d1
00014DF6 6F00                       		ble.s	loc_131F0
00014DF8 323C 1000                  		move.w	#$1000,d1
00014DFC                            
00014DFC                            loc_131F0:
00014DFC 0C41 F000                  		cmpi.w	#-$1000,d1
00014E00 6C00                       		bge.s	loc_131FA
00014E02 323C F000                  		move.w	#-$1000,d1
00014E06                            
00014E06                            loc_131FA:
00014E06 3141 0010                  		move.w	d1,$10(a0)
00014E0A 6000 FE00                  		bra.w	loc_1300C
00014E0E                            ; End of function Sonic_RollSpeed
00014E0E                            
00014E0E                            
00014E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E0E                            
00014E0E                            
00014E0E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014E0E 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
00014E12 6700                       		beq.s	loc_1320A	; if it's zero, branch
00014E14 6A00                       		bpl.s	loc_13218	; if it's positive, branch
00014E16                            
00014E16                            loc_1320A:
00014E16 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to #1 (left)
00014E1C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014E22 4E75                       		rts	
00014E24                            ; ===========================================================================
00014E24                            
00014E24                            loc_13218:
00014E24 9044                       		sub.w	d4,d0		; decrease inertia
00014E26 6400                       		bcc.s	loc_13220
00014E28 303C FF80                  		move.w	#-$80,d0
00014E2C                            
00014E2C                            loc_13220:
00014E2C 3140 0014                  		move.w	d0,$14(a0)	; update Sonic's inertia
00014E30 4E75                       		rts	
00014E32                            ; End of function Sonic_RollLeft
00014E32                            
00014E32                            
00014E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E32                            
00014E32                            
00014E32                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014E32 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia
00014E36 6B00                       		bmi.s	loc_1323A	; if it's negative, branch
00014E38 08A8 0000 0022             		bclr	#0,$22(a0)	; set orientation to #0 (rigth)
00014E3E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014E44 4E75                       		rts	
00014E46                            ; ===========================================================================
00014E46                            
00014E46                            loc_1323A:
00014E46 D044                       		add.w	d4,d0		; increase inertia
00014E48 6400                       		bcc.s	loc_13242
00014E4A 303C 0080                  		move.w	#$80,d0
00014E4E                            
00014E4E                            loc_13242:
00014E4E 3140 0014                  		move.w	d0,$14(a0)	; update Sonic's inertia
00014E52 4E75                       		rts	
00014E54                            ; End of function Sonic_RollRight
00014E54                            
00014E54                            ; ---------------------------------------------------------------------------
00014E54                            ; Subroutine to	change Sonic's direction while jumping
00014E54                            ; ---------------------------------------------------------------------------
00014E54                            
00014E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E54                            
00014E54                            
00014E54                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014E54 3C38 F760                  		move.w	($FFFFF760).w,d6
00014E58 3A38 F762                  		move.w	($FFFFF762).w,d5
00014E5C E345                       		asl.w	#1,d5
00014E5E 0828 0004 0022             		btst	#4,$22(a0)
00014E64 6600                       		bne.s	Obj01_ResetScr2
00014E66 3028 0010                  		move.w	$10(a0),d0
00014E6A 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
00014E70 6700                       		beq.s	loc_13278			; if not, branch
00014E72 08E8 0000 0022             		bset	#0,$22(a0)			; set orientation to #1 (left)
00014E78 9045                       		sub.w	d5,d0
00014E7A 3206                       		move.w	d6,d1
00014E7C 4441                       		neg.w	d1
00014E7E B041                       		cmp.w	d1,d0
00014E80 6E00                       		bgt.s	loc_13278
00014E82 D045                       		add.w   d5,d0
00014E84 B041                       		cmp.w   d1,d0
00014E86 6F00                       		ble.s   loc_13278
00014E88 3001                       		move.w	d1,d0
00014E8A                            
00014E8A                            loc_13278:
00014E8A 0838 0003 F602             		btst	#iRight,(SonicControl|Held).w	; is right being pressed?
00014E90 6700                       		beq.s	Obj01_JumpMove			; if not, branch
00014E92 08A8 0000 0022             		bclr	#0,$22(a0)			; set orientation to #0 (right)
00014E98 D045                       		add.w	d5,d0
00014E9A B046                       		cmp.w	d6,d0
00014E9C 6D00                       		blt.s	Obj01_JumpMove
00014E9E 9045                       		sub.w   d5,d0
00014EA0 B046                       		cmp.w   d6,d0
00014EA2 6C00                       		bge.s   Obj01_JumpMove
00014EA4 3006                       		move.w	d6,d0
00014EA6                            
00014EA6                            Obj01_JumpMove:
00014EA6 3140 0010                  		move.w	d0,$10(a0)		; change Sonic's horizontal speed
00014EAA                            
00014EAA                            Obj01_ResetScr2:
00014EAA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; is the screen in its default position?
00014EB0 6700                       		beq.s	loc_132A4		; if yes, branch
00014EB2 6400                       		bcc.s	loc_132A0
00014EB4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014EB8                            
00014EB8                            loc_132A0:
00014EB8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014EBC                            
00014EBC                            loc_132A4:
00014EBC 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014EC2 6500                       		bcs.s	locret_132D2	; if yes, branch
00014EC4 3028 0010                  		move.w	$10(a0),d0
00014EC8 3200                       		move.w	d0,d1
00014ECA EA41                       		asr.w	#5,d1
00014ECC 6700                       		beq.s	locret_132D2
00014ECE 6B00                       		bmi.s	loc_132C6
00014ED0 9041                       		sub.w	d1,d0
00014ED2 6400                       		bcc.s	loc_132C0
00014ED4 303C 0000                  		move.w	#0,d0
00014ED8                            
00014ED8                            loc_132C0:
00014ED8 3140 0010                  		move.w	d0,$10(a0)
00014EDC 4E75                       		rts	
00014EDE                            ; ===========================================================================
00014EDE                            
00014EDE                            loc_132C6:
00014EDE 9041                       		sub.w	d1,d0
00014EE0 6500                       		bcs.s	loc_132CE
00014EE2 303C 0000                  		move.w	#0,d0
00014EE6                            
00014EE6                            loc_132CE:
00014EE6 3140 0010                  		move.w	d0,$10(a0)
00014EEA                            
00014EEA                            locret_132D2:
00014EEA 4E75                       		rts	
00014EEC                            ; End of function Sonic_ChgJumpDir
00014EEC                            
00014EEC                            ; ===========================================================================
00014EEC                            ; ---------------------------------------------------------------------------
00014EEC                            ; Unused subroutine to squash Sonic
00014EEC                            ; ---------------------------------------------------------------------------
00014EEC 1028 0026                  		move.b	$26(a0),d0
00014EF0 0600 0020                  		addi.b	#$20,d0
00014EF4 0200 00C0                  		andi.b	#$C0,d0
00014EF8 6600                       		bne.s	locret_13302
00014EFA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014EFE 4A41                       		tst.w	d1
00014F00 6A00                       		bpl.s	locret_13302
00014F02 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00014F08 317C 0000 0010             		move.w	#0,$10(a0)
00014F0E 317C 0000 0012             		move.w	#0,$12(a0)
00014F14 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014F1A                            
00014F1A                            locret_13302:
00014F1A 4E75                       		rts	
00014F1C                            ; ---------------------------------------------------------------------------
00014F1C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014F1C                            ; ---------------------------------------------------------------------------
00014F1C                            
00014F1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F1C                            
00014F1C                            
00014F1C                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014F1C 2228 0008                  		move.l	8(a0),d1	; load Sonic's X-pos to d1
00014F20 3028 0010                  		move.w	$10(a0),d0	; load Sonic's X-velocity to d0
00014F24 48C0                       		ext.l	d0
00014F26 E180                       		asl.l	#8,d0
00014F28 D280                       		add.l	d0,d1
00014F2A 4841                       		swap	d1
00014F2C 3038 F728                  		move.w	($FFFFF728).w,d0
00014F30 0640 0010                  		addi.w	#$10,d0
00014F34 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014F36 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014F38 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014F3C 0640 0128                  		addi.w	#$128,d0
00014F40 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014F44 6600                       		bne.s	loc_13332
00014F46 0640 0040                  		addi.w	#$40,d0
00014F4A                            
00014F4A                            loc_13332:
00014F4A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014F4C 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014F4E                            
00014F4E                            loc_13336:
00014F4E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014F52 0640 00E0                  		addi.w	#$E0,d0
00014F56 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014F5A 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014F5C 4E75                       		rts	
00014F5E                            ; ===========================================================================
00014F5E                            
00014F5E                            Boundary_Bottom:
00014F5E 3038 F726                  		move.w	($FFFFF726).w,d0
00014F62 3238 F72E                  		move.w	($FFFFF72E).w,d1
00014F66 B240                       		cmp.w	d0,d1			; screen still scrolling down?
00014F68 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00014F6A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00014F70 6600 0000                  		bne.w	JmpTo_KillSonic		; if not, kill Sonic
00014F74 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014F7A 6500 0000                  		bcs.w	JmpTo_KillSonic
00014F7E 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00014F82 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00014F88 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00014F8E                             
00014F8E                            Boundary_Bottom_locret:
00014F8E 4E75                       		rts		
00014F90                            ; ===========================================================================
00014F90                            
00014F90                            Boundary_Sides:
00014F90 3140 0008                  		move.w	d0,8(a0)
00014F94 317C 0000 000A             		move.w	#0,$A(a0)
00014F9A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014FA0 317C 0000 0014             		move.w	#0,$14(a0)
00014FA6 60A6                       		bra.s	loc_13336
00014FA8                            ; End of function Sonic_LevelBound
00014FA8                            
00014FA8                            ; ---------------------------------------------------------------------------
00014FA8                            ; Subroutine allowing Sonic to roll when he's moving
00014FA8                            ; ---------------------------------------------------------------------------
00014FA8                            
00014FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FA8                            
00014FA8                            
00014FA8                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014FA8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014FAC 6600                       		bne.s	Obj01_NoRoll
00014FAE 3028 0014                  		move.w	$14(a0),d0
00014FB2 6A00                       		bpl.s	loc_13392
00014FB4 4440                       		neg.w	d0
00014FB6                            
00014FB6                            loc_13392:
00014FB6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014FBA 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014FBC                            
00014FBC 1038 F602 0200 000C        		theld	Left+Right,(SonicControl)
00014FC4 6600                       		bne.s	Obj01_NoRoll			; if Left/Right held, branch
00014FC6 0838 0001 F602             		btst	#iDown,(SonicControl|Held)	; is down being pressed?
00014FCC 6600                       		bne.s	Obj01_ChkRoll			; if yes, branch
00014FCE                            
00014FCE                            Obj01_NoRoll:
00014FCE 4E75                       		rts	
00014FD0                            ; ===========================================================================
00014FD0                            
00014FD0                            Obj01_ChkRoll:
00014FD0 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014FD6 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014FD8 4E75                       		rts	
00014FDA                            ; ===========================================================================
00014FDA                            
00014FDA                            Obj01_DoRoll:
00014FDA 08E8 0002 0022             		bset	#2,$22(a0)
00014FE0 117C 000E 0016             		move.b	#$E,$16(a0)
00014FE6 117C 0007 0017             		move.b	#7,$17(a0)
00014FEC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014FF2 5A68 000C                  		addq.w	#5,$C(a0)
00014FF6 303C 00BE                  		move.w	#$BE,d0
00014FFA 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play rolling sound
00015000 4A68 0014                  		tst.w	$14(a0)
00015004 6600                       		bne.s	locret_133E8
00015006 317C 0200 0014             		move.w	#$200,$14(a0)
0001500C                            
0001500C                            locret_133E8:
0001500C 4E75                       		rts	
0001500E                            ; End of function Sonic_Roll
0001500E                            
0001500E                            ; ---------------------------------------------------------------------------
0001500E                            ; Subroutine allowing Sonic to jump
0001500E                            ; ---------------------------------------------------------------------------
0001500E                            
0001500E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001500E                            
0001500E                            
0001500E                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001500E 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; is A,	B or C pressed?
00015016 6700 0000                  		beq.w	locret_1348E		; if not, branch
0001501A 7000                       		moveq	#0,d0
0001501C 1028 0026                  		move.b	$26(a0),d0
00015020 0600 0080                  		addi.b	#$80,d0
00015024 6100 0000                  		bsr.w	sub_14D48
00015028 0C41 0006                  		cmpi.w	#6,d1
0001502C 6D00 0000                  		blt.w	locret_1348E
00015030 343C 0680                  		move.w	#$680,d2
00015034 0828 0006 0022             		btst	#6,$22(a0)
0001503A 6700                       		beq.s	loc_1341C
0001503C 343C 0380                  		move.w	#$380,d2
00015040                            
00015040                            loc_1341C:
00015040 7000                       		moveq	#0,d0
00015042 1028 0026                  		move.b	$26(a0),d0
00015046 0400 0040                  		subi.b	#$40,d0
0001504A 4EB9 0000 29AE             		jsr	(CalcSine).l
00015050 C3C2                       		muls.w	d2,d1
00015052 E081                       		asr.l	#8,d1
00015054 D368 0010                  		add.w	d1,$10(a0)	; set Jump X-vel
00015058 C1C2                       		muls.w	d2,d0
0001505A E080                       		asr.l	#8,d0
0001505C D168 0012                  		add.w	d0,$12(a0)	; set Jump Y-vel
00015060 08E8 0001 0022             		bset	#1,$22(a0)
00015066 08A8 0005 0022             		bclr	#5,$22(a0)
0001506C 588F                       		addq.l	#4,sp
0001506E 117C 0001 003C             		move.b	#1,$3C(a0)
00015074 4228 0038                  		clr.b	$38(a0)
00015078 303C 00A0                  		move.w	#$A0,d0
0001507C 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play jumping sound
00015082 117C 0013 0016             		move.b	#$13,$16(a0)
00015088 117C 0009 0017             		move.b	#9,$17(a0)
0001508E 0828 0002 0022             		btst	#2,$22(a0)
00015094 6600                       		bne.s	loc_13490
00015096 117C 000E 0016             		move.b	#$E,$16(a0)
0001509C 117C 0007 0017             		move.b	#7,$17(a0)
000150A2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000150A8 08E8 0002 0022             		bset	#2,$22(a0)
000150AE 5A68 000C                  		addq.w	#5,$C(a0)
000150B2                            
000150B2                            locret_1348E:
000150B2 4E75                       		rts	
000150B4                            ; ===========================================================================
000150B4                            
000150B4                            loc_13490:
000150B4 08E8 0004 0022             		bset	#4,$22(a0)
000150BA 4E75                       		rts	
000150BC                            ; End of function Sonic_Jump
000150BC                            
000150BC                            
000150BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150BC                            
000150BC                            
000150BC                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000150BC 4A28 003C                  		tst.b	$3C(a0)
000150C0 6700                       		beq.s	loc_134C4
000150C2 323C FC00                  		move.w	#-$400,d1
000150C6 0828 0006 0022             		btst	#6,$22(a0)
000150CC 6700                       		beq.s	loc_134AE
000150CE 323C FE00                  		move.w	#-$200,d1
000150D2                            
000150D2                            loc_134AE:
000150D2 B268 0012                  		cmp.w	$12(a0),d1
000150D6 6F00                       		ble.s	locret_134C2
000150D8 1038 F602 0200 0070        		theld	A+B+C,(SonicControl)	; is A,	B or C pressed?
000150E0 6600                       		bne.s	locret_134C2		; if yes, branch
000150E2 3141 0012                  		move.w	d1,$12(a0)
000150E6                            
000150E6                            locret_134C2:
000150E6 4E75                       		rts	
000150E8                            ; ===========================================================================
000150E8                            
000150E8                            loc_134C4:
000150E8 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000150EE 6C00                       		bge.s	locret_134D2
000150F0 317C F040 0012             		move.w	#-$FC0,$12(a0)
000150F6                            
000150F6                            locret_134D2:
000150F6 4E75                       		rts	
000150F8                            ; End of function Sonic_JumpHeight
000150F8                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000150F8                            
000150F8                            Sonic_AirRoll:    
000150F8 0828 0001 0022                  btst    #1,$22(a0)   ; is Sonic in the air?
000150FE 6700                            beq.s   @nope   ; if not, branch
00015100 1038 F602                       move.b  ($FFFFF602).w,d0
00015104 0200 0070                       andi.b  #$70,d0     ; is button A, B or C pressed?
00015108 6700                            beq.s   @nope   ; if not, branch
0001510A 117C 0002 001C                  move.b  #2,$1C(a0)   ; use "rolling"   animation
00015110 08E8 0002 0022             	 bset   #2,$22(a0)   ; force Sonic to roll
00015116                            
00015116                            @nope:
00015116 4E75                            rts
00015118                            ; End of function Sonic_AirRoll
00015118                            
00015118                            Sonic_JumpDash:
00015118                            
00015118                            
00015118 1038 F603 0200 0050        		tpress	A+B,(SonicControl)	; is A, B pressed?
00015120                            
00015120                            
00015120 1038 F603 0200 0050        		tpress	A+B,(SonicControl)	; is A, Bpressed?
00015128                            
00015128                            
00015128 6700 0000                  		beq.w JD_End ; if not, branch
0001512C                            
0001512C                            
0001512C 4A38 FFEB                  		tst.b ($FFFFFFEB).w ; was jumpdash flag set?
00015130                            
00015130                            
00015130 6600 0000                  		bne.w JD_End ; if yes, branch
00015134                            
00015134                            
00015134 11FC 0001 FFEB             		move.b #1,($FFFFFFEB).w ; if not, set jumpdash flag
0001513A                            
0001513A                            
0001513A 103C 00BC                  		move.b #$BC,d0 ; set jumpdash sound
0001513E                            
0001513E                            
0001513E 4EB9 0000 12C8             		jsr (PlaySound_Special).l ; play jumpdash sound
00015144                            
00015144                            
00015144 08A8 0004 0022             		bclr #4,$22(a0) ; clear double jump flag
0001514A                            
0001514A                            
0001514A 303C 0A00                  		move.w #$A00,d0 ; set normal jumpdash speed
0001514E                            
0001514E                            
0001514E 4A38 FE2E                  		tst.b ($FFFFFE2E).w ; do you have speed shoes?
00015152                            
00015152                            
00015152 6700                       		beq.s JD_ChkUW ; if not, branch
00015154                            
00015154                            
00015154 303C 0B00                  		move.w #$B00,d0 ; set speed shoes jumpdash speed
00015158                            
00015158                            
00015158                            JD_ChkUW:
00015158                            
00015158                            
00015158 0828 0006 0022             		btst #6,$22(a0) ; is Sonic underwater?
0001515E                            
0001515E                            
0001515E 6700                       		beq.s JD_ChkDirection ; if not, branch
00015160                            
00015160                            
00015160 303C 0600                  		move.w #$600,d0 ; set underwater jumpdash speed
00015164                            
00015164                            
00015164                            JD_ChkDirection:
00015164                            
00015164                            
00015164 0828 0000 0022             		btst #0,$22(a0) ; is sonic facing left?
0001516A                            
0001516A                            
0001516A 6700                       		beq.s JD_Move ; if yes, branch
0001516C                            
0001516C                            
0001516C 4440                       		neg.w d0 ; if not, negate d0 (for jumping to the right)
0001516E                            
0001516E                            
0001516E                            JD_Move:
0001516E                            
0001516E                            
0001516E 3140 0010                  		move.w d0,$10(a0) ; move Sonic forward with the selected speed ($10(a0) = Sonic's X-velocity)
00015172                            
00015172                            
00015172 4268 0012                  		clr.w $12(a0) ; clear Sonic's Y-velocity to move sonic directly down
00015176                            
00015176                            
00015176                            JD_End:
00015176                            
00015176                            
00015176 4E75                       		rts ; return
00015178                            
00015178                            
00015178                            ; End of function Sonic_JumpDash
00015178                            		
00015178                            ; ---------------------------------------------------------------------------
00015178                            ; Subrotine to perform Double Jump
00015178                            ; ---------------------------------------------------------------------------
00015178                            
00015178                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015178                            
00015178                            Sonic_DoubleJump:
00015178 1038 F603 0200 0020        		tpress	C,(SonicControl)	; is C pressed?
00015180 6700 0000                  		beq.w	DJ_End		; if not, branch 
00015184 4A38 FFEB                  		tst.b	($FFFFFFEB).w; was doublejump flag set?
00015188 6600                       		bne.s	DJ_End	; if yes, branch
0001518A 11FC 0001 FFEB             		move.b	#1,($FFFFFFEB).w; if not, set doublejump flag
00015190 117C 0002 001C             		move.b  #2,$1C(a0)   ; use "rolling"   animation
00015196 08E8 0002 0022             		bset   #2,$22(a0)   ; force Sonic to roll
0001519C 303C 00A0                  		move.w	#$A0,d0
000151A0 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play jumping sound
000151A6 08A8 0004 0022             		bclr	#4,$22(a0); clear double jump flag
000151AC 317C FA00 0012             		move.w	#-$600,$12(a0); set normal double jump speed
000151B2 0828 0006 0022             		btst	#6,$22(a0); is Sonic underwater?
000151B8 6700                       		beq.s	DJ_End	; if not, branch
000151BA 317C FD00 0012             		move.w	#-$300,$12(a0); set underwater double jump speed
000151C0                            DJ_End:
000151C0 4E75                       		rts		; return or cancel double jump
000151C2                            ; End of function Sonic_DoubleJump
000151C2                            
000151C2                            		
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            ; Subroutine to perform Spin Dash
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            
000151C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151C2                            
000151C2                            Sonic_SpinDash:
000151C2 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
000151C6 6600                       		bne.s	SpinDash_Process	; if yes, branch
000151C8 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is animation Duck?
000151CE 6600                       		bne.s	Sonic_SpinDash_Rts	; if not, branch
000151D0 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; is A, B or C pressed?
000151D8 6700 0000                  		beq.w	Sonic_SpinDash_Rts	; if not, branch
000151DC 117C 001F 001C                             move.b	#$1F,$1C(a0)		; use Spin Dash animation
000151E2 303C 0FD1                  		move.w	#$FD1,d0
000151E6 4EB9 0000 12C8             		jsr	(PlaySound_Special).l
000151EC 588F                       		addq.l	#4,sp			; avoid Sonic_Jump call
000151EE 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
000151F4 317C 0000 003A             		move.w	#0,$3A(a0)
000151FA 6100 FD20                  		bsr.w	Sonic_LevelBound
000151FE 6100 0000                  		bsr.w	Sonic_AnglePos
00015202                             
00015202                            Sonic_SpinDash_Rts:
00015202 4E75                       		rts	
00015204                            ; ---------------------------------------------------------------------------
00015204                             
00015204                            SpinDash_Process:
00015204 117C 001F 001C                             move.b	#$1F,$1C(a0)		; use Spin Dash animation
0001520A 1038 F602                  		move.b	(SonicControl|Held),d0	; load held buttons bitfield to d0
0001520E 0800 0001                  		btst	#iDown,d0		; is Down held?
00015212 6600 0000                  		bne.w	SpinDash_Charge		; if yes, branch
00015216                            		
00015216                            SpinDash_Release:
00015216 117C 000E 0016             		move.b	#$E,$16(a0)		; decrease Sonic's height
0001521C 117C 0007 0017             		move.b	#7,$17(a0)
00015222 117C 0002 001C             		move.b	#2,$1C(a0)		; use rolling animation
00015228 5A68 000C                  		addq.w	#5,$C(a0)		; add 5 to Y coordinate
0001522C 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
00015232 7000                       		moveq	#0,d0
00015234 1028 003A                  		move.b	$3A(a0),d0
00015238 D040                       		add.w	d0,d0
0001523A 317B 0000 0014             		move.w	DashSpeeds(pc,d0.w),$14(a0) ; get Spin Dash speed
00015240 0828 0000 0022             		btst	#0,$22(a0)		; is Sonic facing right?
00015246 6700                       		beq.s	SpinDash_ReleaseSound	; if yes, branch
00015248 4468 0014                  		neg.w	$14(a0)			; negate inertia
0001524C                            
0001524C                            SpinDash_ReleaseSound:
0001524C 08E8 0002 0022             		bset	#2,$22(a0)
00015252 303C 00BC                  		move.w	#$BC,d0
00015256 4EB9 0000 12C8             		jsr	(PlaySound_Special).l
0001525C 6000                       		bra.s	loc2_1AD78
0001525E                            
0001525E                            ; ---------------------------------------------------------------------------
0001525E 0800                       DashSpeeds:	dc.w  $800		; 0
00015260 0880                       		dc.w  $880		; 1
00015262 0900                       		dc.w  $900		; 2
00015264 0980                       		dc.w  $980		; 3
00015266 0A00                       		dc.w  $A00		; 4
00015268 0A80                       		dc.w  $A80		; 5
0001526A 0B00                       		dc.w  $B00		; 6
0001526C 0B80                       		dc.w  $B80		; 7
0001526E 0C00                       		dc.w  $C00		; 8
00015270                            ; ---------------------------------------------------------------------------
00015270                            
00015270                            SpinDash_Charge:
00015270 4A68 003A                  		tst.w	$3A(a0)		; test charge counter
00015274 6700                       		beq.s	loc2_1AD48	; if it's zero, branch
00015276 3028 003A                  		move.w	$3A(a0),d0	; move it to d0
0001527A EA48                       		lsr.w	#5,d0		; divide by 32
0001527C 9168 003A                  		sub.w	d0,$3A(a0)
00015280 6400                       		bcc.s	loc2_1AD48
00015282 317C 0000 003A             		move.w	#0,$3A(a0)
00015288                             
00015288                            loc2_1AD48:
00015288 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)
00015290 6700 0000                  		beq.w	loc2_1AD78
00015294 317C 1F00 001C             		move.w	#$1F00,$1C(a0)
0001529A 303C 00D1                  		move.w	#$D1,d0
0001529E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l
000152A4 0668 0200 003A             		addi.w	#$200,$3A(a0)
000152AA 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)
000152B0 6500                       		bcs.s	loc2_1AD78
000152B2 317C 0800 003A             		move.w	#$800,$3A(a0)
000152B8                             
000152B8                            loc2_1AD78:
000152B8 588F                       		addq.l	#4,sp		; avoid Sonic_Jump call
000152BA 0C78 0060 EED8             		cmpi.w	#$60,($FFFFEED8).w
000152C0 6700                       		beq.s	loc2_1AD8C
000152C2 6400                       		bcc.s	loc2_1AD88
000152C4 5878 EED8                  		addq.w	#4,($FFFFEED8).w
000152C8                             
000152C8                            loc2_1AD88:
000152C8 5578 EED8                  		subq.w	#2,($FFFFEED8).w
000152CC                             
000152CC                            loc2_1AD8C:
000152CC 6100 FC4E                  		bsr.w	Sonic_LevelBound
000152D0 6100 0000                  		bsr.w	Sonic_AnglePos
000152D4 31FC 0060 F73E             		move.w	#$60,($FFFFF73E).w	; reset looking up/down
000152DA 4E75                       		rts                     
000152DC                            ; End of subroutine Sonic_Spin_Dash
000152DC                            
000152DC                            
000152DC                            ; ---------------------------------------------------------------------------
000152DC                            ; Subroutine to	slow Sonic walking up a	slope
000152DC                            ; ---------------------------------------------------------------------------
000152DC                            
000152DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152DC                            
000152DC                            
000152DC                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000152DC 1028 0026                  		move.b	$26(a0),d0
000152E0 0600 0060                  		addi.b	#$60,d0
000152E4 0C00 00C0                  		cmpi.b	#$C0,d0
000152E8 6400                       		bcc.s	locret_13508
000152EA 1028 0026                  		move.b	$26(a0),d0
000152EE 4EB9 0000 29AE             		jsr	(CalcSine).l
000152F4 C1FC 0020                  		muls.w	#$20,d0
000152F8 E080                       		asr.l	#8,d0
000152FA 4A68 0014                  		tst.w	$14(a0)
000152FE 6700                       		beq.s	locret_13508
00015300 6B00                       		bmi.s	loc_13504
00015302 4A40                       		tst.w	d0
00015304 6700                       		beq.s	locret_13502
00015306 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001530A                            
0001530A                            locret_13502:
0001530A 4E75                       		rts	
0001530C                            ; ===========================================================================
0001530C                            
0001530C                            loc_13504:
0001530C D168 0014                  		add.w	d0,$14(a0)
00015310                            
00015310                            locret_13508:
00015310 4E75                       		rts	
00015312                            ; End of function Sonic_SlopeResist
00015312                            
00015312                            ; ---------------------------------------------------------------------------
00015312                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015312                            ; ---------------------------------------------------------------------------
00015312                            
00015312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015312                            
00015312                            
00015312                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00015312 1028 0026                  		move.b	$26(a0),d0
00015316 0600 0060                  		addi.b	#$60,d0
0001531A 0C00 00C0                  		cmpi.b	#-$40,d0
0001531E 6400                       		bcc.s	locret_13544
00015320 1028 0026                  		move.b	$26(a0),d0
00015324 4EB9 0000 29AE             		jsr	(CalcSine).l
0001532A C1FC 0050                  		muls.w	#$50,d0
0001532E E080                       		asr.l	#8,d0
00015330 4A68 0014                  		tst.w	$14(a0)
00015334 6B00                       		bmi.s	loc_1353A
00015336 4A40                       		tst.w	d0
00015338 6A00                       		bpl.s	loc_13534
0001533A E480                       		asr.l	#2,d0
0001533C                            
0001533C                            loc_13534:
0001533C D168 0014                  		add.w	d0,$14(a0)
00015340 4E75                       		rts	
00015342                            ; ===========================================================================
00015342                            
00015342                            loc_1353A:
00015342 4A40                       		tst.w	d0
00015344 6B00                       		bmi.s	loc_13540
00015346 E480                       		asr.l	#2,d0
00015348                            
00015348                            loc_13540:
00015348 D168 0014                  		add.w	d0,$14(a0)
0001534C                            
0001534C                            locret_13544:
0001534C 4E75                       		rts	
0001534E                            ; End of function Sonic_RollRepel
0001534E                            
0001534E                            ; ---------------------------------------------------------------------------
0001534E                            ; Subroutine to	push Sonic down	a slope
0001534E                            ; ---------------------------------------------------------------------------
0001534E                            
0001534E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001534E                            
0001534E                            
0001534E                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001534E 4E71                       		nop	
00015350 4A28 0038                  		tst.b	$38(a0)
00015354 6600                       		bne.s	locret_13580
00015356 4A68 003E                  		tst.w	$3E(a0)
0001535A 6600                       		bne.s	loc_13582
0001535C 1028 0026                  		move.b	$26(a0),d0
00015360 0600 0020                  		addi.b	#$20,d0
00015364 0200 00C0                  		andi.b	#$C0,d0
00015368 6700                       		beq.s	locret_13580
0001536A 3028 0014                  		move.w	$14(a0),d0
0001536E 6A00                       		bpl.s	loc_1356A
00015370 4440                       		neg.w	d0
00015372                            
00015372                            loc_1356A:
00015372 0C40 0280                  		cmpi.w	#$280,d0
00015376 6400                       		bcc.s	locret_13580
00015378 4268 0014                  		clr.w	$14(a0)
0001537C 08E8 0001 0022             		bset	#1,$22(a0)
00015382 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015388                            
00015388                            locret_13580:
00015388 4E75                       		rts	
0001538A                            ; ===========================================================================
0001538A                            
0001538A                            loc_13582:
0001538A 5368 003E                  		subq.w	#1,$3E(a0)
0001538E 4E75                       		rts	
00015390                            ; End of function Sonic_SlopeRepel
00015390                            
00015390                            
00015390                            ; ---------------------------------------------------------------------------
00015390                            ; Routine that jumps to kill Sonic
00015390                            ; ---------------------------------------------------------------------------
00015390                            JmpTo_KillSonic:
00015390 6000 0000                  		bra.w	KillSonic
00015394                            
00015394                            ; ---------------------------------------------------------------------------
00015394                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015394                            ; ---------------------------------------------------------------------------
00015394                            
00015394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015394                            
00015394                            
00015394                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00015394 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015398 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001539A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001539C                            
0001539C 5400                       		addq.b	#2,d0		; increase angle
0001539E 6400                       		bcc.s	loc_13596
000153A0 7000                       		moveq	#0,d0
000153A2                            
000153A2                            loc_13596:
000153A2 6000                       		bra.s	loc_1359E
000153A4                            ; ===========================================================================
000153A4                            
000153A4                            loc_13598:
000153A4 5500                       		subq.b	#2,d0		; decrease angle
000153A6 6400                       		bcc.s	loc_1359E
000153A8 7000                       		moveq	#0,d0
000153AA                            
000153AA                            loc_1359E:
000153AA 1140 0026                  		move.b	d0,$26(a0)
000153AE                            
000153AE                            locret_135A2:
000153AE 4E75                       		rts	
000153B0                            ; End of function Sonic_JumpAngle
000153B0                            
000153B0                            ; ---------------------------------------------------------------------------
000153B0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000153B0                            ; ---------------------------------------------------------------------------
000153B0                            
000153B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153B0                            
000153B0                            
000153B0                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000153B0 3228 0010                  		move.w	$10(a0),d1
000153B4 3428 0012                  		move.w	$12(a0),d2
000153B8 4EB9 0000 2C7C             		jsr	(CalcAngle).l
000153BE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000153C2 0400 0020                  		subi.b	#$20,d0
000153C6 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000153CA 0200 00C0                  		andi.b	#$C0,d0
000153CE 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000153D2 0C00 0040                  		cmpi.b	#$40,d0
000153D6 6700 0000                  		beq.w	loc_13680
000153DA 0C00 0080                  		cmpi.b	#$80,d0
000153DE 6700 0000                  		beq.w	loc_136E2
000153E2 0C00 00C0                  		cmpi.b	#-$40,d0
000153E6 6700 0000                  		beq.w	loc_1373E
000153EA 6100 0000                  		bsr.w	Sonic_HitWall
000153EE 4A41                       		tst.w	d1
000153F0 6A00                       		bpl.s	loc_135F0
000153F2 9368 0008                  		sub.w	d1,8(a0)
000153F6 317C 0000 0010             		move.w	#0,$10(a0)
000153FC                            
000153FC                            loc_135F0:
000153FC 6100 0000                  		bsr.w	sub_14EB4
00015400 4A41                       		tst.w	d1
00015402 6A00                       		bpl.s	loc_13602
00015404 D368 0008                  		add.w	d1,8(a0)
00015408 317C 0000 0010             		move.w	#0,$10(a0)
0001540E                            
0001540E                            loc_13602:
0001540E 6100 0000                  		bsr.w	Sonic_HitFloor
00015412 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015416 4A41                       		tst.w	d1
00015418 6A00                       		bpl.s	locret_1367E
0001541A 1428 0012                  		move.b	$12(a0),d2
0001541E 5002                       		addq.b	#8,d2
00015420 4402                       		neg.b	d2
00015422 B202                       		cmp.b	d2,d1
00015424 6C00                       		bge.s	loc_1361E
00015426 B002                       		cmp.b	d2,d0
00015428 6D00                       		blt.s	locret_1367E
0001542A                            
0001542A                            loc_1361E:
0001542A D368 000C                  		add.w	d1,$C(a0)
0001542E 1143 0026                  		move.b	d3,$26(a0)
00015432 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015436 117C 0000 001C             		move.b	#0,$1C(a0)
0001543C 1003                       		move.b	d3,d0
0001543E 0600 0020                  		addi.b	#$20,d0
00015442 0200 0040                  		andi.b	#$40,d0
00015446 6600                       		bne.s	loc_1365C
00015448 1003                       		move.b	d3,d0
0001544A 0600 0010                  		addi.b	#$10,d0
0001544E 0200 0020                  		andi.b	#$20,d0
00015452 6700                       		beq.s	loc_1364E
00015454 E0E8 0012                  		asr	$12(a0)
00015458 6000                       		bra.s	loc_13670
0001545A                            ; ===========================================================================
0001545A                            
0001545A                            loc_1364E:
0001545A 317C 0000 0012             		move.w	#0,$12(a0)
00015460 3168 0010 0014             		move.w	$10(a0),$14(a0)
00015466 4E75                       		rts	
00015468                            ; ===========================================================================
00015468                            
00015468                            loc_1365C:
00015468 317C 0000 0010             		move.w	#0,$10(a0)
0001546E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00015474 6F00                       		ble.s	loc_13670
00015476 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001547C                            
0001547C                            loc_13670:
0001547C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015482 4A03                       		tst.b	d3
00015484 6A00                       		bpl.s	locret_1367E
00015486 4468 0014                  		neg.w	$14(a0)
0001548A                            
0001548A                            locret_1367E:
0001548A 4E75                       		rts	
0001548C                            ; ===========================================================================
0001548C                            
0001548C                            loc_13680:
0001548C 6100 0000                  		bsr.w	Sonic_HitWall
00015490 4A41                       		tst.w	d1
00015492 6A00                       		bpl.s	loc_1369A
00015494 9368 0008                  		sub.w	d1,8(a0)
00015498 317C 0000 0010             		move.w	#0,$10(a0)
0001549E 3168 0012 0014             		move.w	$12(a0),$14(a0)
000154A4 4E75                       		rts	
000154A6                            ; ===========================================================================
000154A6                            
000154A6                            loc_1369A:
000154A6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000154AA 4A41                       		tst.w	d1
000154AC 6A00                       		bpl.s	loc_136B4
000154AE 9368 000C                  		sub.w	d1,$C(a0)
000154B2 4A68 0012                  		tst.w	$12(a0)
000154B6 6A00                       		bpl.s	locret_136B2
000154B8 317C 0000 0012             		move.w	#0,$12(a0)
000154BE                            
000154BE                            locret_136B2:
000154BE 4E75                       		rts	
000154C0                            ; ===========================================================================
000154C0                            
000154C0                            loc_136B4:
000154C0 4A68 0012                  		tst.w	$12(a0)
000154C4 6B00                       		bmi.s	locret_136E0
000154C6 6100 0000                  		bsr.w	Sonic_HitFloor
000154CA 4A41                       		tst.w	d1
000154CC 6A00                       		bpl.s	locret_136E0
000154CE D368 000C                  		add.w	d1,$C(a0)
000154D2 1143 0026                  		move.b	d3,$26(a0)
000154D6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000154DA 117C 0000 001C             		move.b	#0,$1C(a0)
000154E0 317C 0000 0012             		move.w	#0,$12(a0)
000154E6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000154EC                            
000154EC                            locret_136E0:
000154EC 4E75                       		rts	
000154EE                            ; ===========================================================================
000154EE                            
000154EE                            loc_136E2:
000154EE 6100 0000                  		bsr.w	Sonic_HitWall
000154F2 4A41                       		tst.w	d1
000154F4 6A00                       		bpl.s	loc_136F4
000154F6 9368 0008                  		sub.w	d1,8(a0)
000154FA 317C 0000 0010             		move.w	#0,$10(a0)
00015500                            
00015500                            loc_136F4:
00015500 6100 0000                  		bsr.w	sub_14EB4
00015504 4A41                       		tst.w	d1
00015506 6A00                       		bpl.s	loc_13706
00015508 D368 0008                  		add.w	d1,8(a0)
0001550C 317C 0000 0010             		move.w	#0,$10(a0)
00015512                            
00015512                            loc_13706:
00015512 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015516 4A41                       		tst.w	d1
00015518 6A00                       		bpl.s	locret_1373C
0001551A 9368 000C                  		sub.w	d1,$C(a0)
0001551E 1003                       		move.b	d3,d0
00015520 0600 0020                  		addi.b	#$20,d0
00015524 0200 0040                  		andi.b	#$40,d0
00015528 6600                       		bne.s	loc_13726
0001552A 317C 0000 0012             		move.w	#0,$12(a0)
00015530 4E75                       		rts	
00015532                            ; ===========================================================================
00015532                            
00015532                            loc_13726:
00015532 1143 0026                  		move.b	d3,$26(a0)
00015536 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001553A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015540 4A03                       		tst.b	d3
00015542 6A00                       		bpl.s	locret_1373C
00015544 4468 0014                  		neg.w	$14(a0)
00015548                            
00015548                            locret_1373C:
00015548 4E75                       		rts	
0001554A                            ; ===========================================================================
0001554A                            
0001554A                            loc_1373E:
0001554A 6100 0000                  		bsr.w	sub_14EB4
0001554E 4A41                       		tst.w	d1
00015550 6A00                       		bpl.s	loc_13758
00015552 D368 0008                  		add.w	d1,8(a0)
00015556 317C 0000 0010             		move.w	#0,$10(a0)
0001555C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015562 4E75                       		rts	
00015564                            ; ===========================================================================
00015564                            
00015564                            loc_13758:
00015564 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015568 4A41                       		tst.w	d1
0001556A 6A00                       		bpl.s	loc_13772
0001556C 9368 000C                  		sub.w	d1,$C(a0)
00015570 4A68 0012                  		tst.w	$12(a0)
00015574 6A00                       		bpl.s	locret_13770
00015576 317C 0000 0012             		move.w	#0,$12(a0)
0001557C                            
0001557C                            locret_13770:
0001557C 4E75                       		rts	
0001557E                            ; ===========================================================================
0001557E                            
0001557E                            loc_13772:
0001557E 4A68 0012                  		tst.w	$12(a0)
00015582 6B00                       		bmi.s	locret_1379E
00015584 6100 0000                  		bsr.w	Sonic_HitFloor
00015588 4A41                       		tst.w	d1
0001558A 6A00                       		bpl.s	locret_1379E
0001558C D368 000C                  		add.w	d1,$C(a0)
00015590 1143 0026                  		move.b	d3,$26(a0)
00015594 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015598 117C 0000 001C             		move.b	#0,$1C(a0)
0001559E 317C 0000 0012             		move.w	#0,$12(a0)
000155A4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000155AA                            
000155AA                            locret_1379E:
000155AA 4E75                       		rts	
000155AC                            ; End of function Sonic_Floor
000155AC                            
000155AC                            ; ---------------------------------------------------------------------------
000155AC                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000155AC                            ; ---------------------------------------------------------------------------
000155AC                            
000155AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155AC                            
000155AC                            
000155AC                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000155AC 08A8 0007 0022             		bclr    #7,$22(a0)
000155B2 4238 FFEB                  		clr.b ($FFFFFFEB).w; clear doublejump flag
000155B6 0828 0004 0022             		btst	#4,$22(a0)
000155BC 6700                       		beq.s	loc_137AE
000155BE 4E71                       		nop
000155C0 4E71                       		nop	
000155C2 4E71                       		nop	
000155C4                            
000155C4                            loc_137AE:
000155C4 08A8 0005 0022             		bclr	#5,$22(a0)
000155CA 08A8 0001 0022             		bclr	#1,$22(a0)
000155D0 08A8 0004 0022             		bclr	#4,$22(a0)
000155D6 0828 0002 0022             		btst	#2,$22(a0)
000155DC 6700                       		beq.s	loc_137E4
000155DE 08A8 0002 0022             		bclr	#2,$22(a0)
000155E4 117C 0013 0016             		move.b	#$13,$16(a0)
000155EA 117C 0009 0017             		move.b	#9,$17(a0)
000155F0 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000155F6 5B68 000C                  		subq.w	#5,$C(a0)
000155FA                            
000155FA                            loc_137E4:
000155FA 117C 0000 003C             		move.b	#0,$3C(a0)
00015600 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00015606 4E75                       		rts	
00015608                            ; End of function Sonic_ResetOnFloor
00015608                            
00015608                            ; ===========================================================================
00015608                            ; ---------------------------------------------------------------------------
00015608                            ; Sonic	when he	gets hurt
00015608                            ; ---------------------------------------------------------------------------
00015608                            
00015608                            Obj01_Hurt:				; XREF: Obj01_Index
00015608 4EBA 99E0                  		jsr	SpeedToPos
0001560C 0668 0030 0012             		addi.w	#$30,$12(a0)	; decrease speed
00015612 0828 0006 0022             		btst	#6,$22(a0)	; is Sonic underwater?
00015618 6700                       		beq.s	loc_1380C	; if not, branch
0001561A 0468 0020 0012             		subi.w	#$20,$12(a0)	; reduce speed a bit
00015620                            
00015620                            loc_1380C:
00015620 6100 0000                  		bsr.w	Sonic_HurtStop
00015624 6100 F8F6                  		bsr.w	Sonic_LevelBound
00015628 6100 F328                  		bsr.w	Sonic_RecordPos
0001562C 6100 0000                  		bsr.w	Sonic_Animate
00015630 6100 0000                  		bsr.w	LoadSonicDynPLC
00015634 4EFA 99DA                  		jmp	DisplaySprite
00015638                            
00015638                            ; ---------------------------------------------------------------------------
00015638                            ; Subroutine to	stop Sonic falling after he's been hurt
00015638                            ; ---------------------------------------------------------------------------
00015638                            
00015638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015638                            
00015638                            
00015638                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00015638 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001563C 0640 00E0                  		addi.w	#$E0,d0
00015640 B068 000C                  		cmp.w	$C(a0),d0
00015644 6500 0000                  		bcs.w	KillSonic
00015648 6100 FD66                  		bsr.w	Sonic_Floor
0001564C 0828 0001 0022             		btst	#1,$22(a0)	; is Sonic in the air?
00015652 6600                       		bne.s	@NoHurtStop	; if yes, branch
00015654 7000                       		moveq	#0,d0
00015656 3140 0012                  		move.w	d0,$12(a0)	; clear all his speeds
0001565A 3140 0010                  		move.w	d0,$10(a0)	;
0001565E 3140 0014                  		move.w	d0,$14(a0)	;
00015662 117C 0000 001C             		move.b	#0,$1C(a0)
00015668 5528 0024                  		subq.b	#2,$24(a0)	; switch to "Obj01_Control" routine
0001566C 317C 0078 0030             		move.w	#$78,$30(a0)	; set intervurable time
00015672                            
00015672                            @NoHurtStop:
00015672 4E75                       		rts	
00015674                            ; End of function Sonic_HurtStop
00015674                            
00015674                            ; ===========================================================================
00015674                            ; ---------------------------------------------------------------------------
00015674                            ; Sonic	when he	dies
00015674                            ; ---------------------------------------------------------------------------
00015674                            
00015674                            Obj01_Death:				; XREF: Obj01_Index
00015674 6100 0000                  		bsr.w	GameOver
00015678 4EBA 9944                  		jsr	ObjectFall
0001567C 6100 F2D4                  		bsr.w	Sonic_RecordPos
00015680 6100 0000                  		bsr.w	Sonic_Animate
00015684 6100 0000                  		bsr.w	LoadSonicDynPLC
00015688 4EFA 9986                  		jmp	DisplaySprite
0001568C                            
0001568C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001568C                            
0001568C                            
0001568C                            GameOver:				; XREF: Obj01_Death
0001568C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015690 0640 0100                  		addi.w	#$100,d0
00015694 B068 000C                  		cmp.w	$C(a0),d0
00015698 6400 0000                  		bcc.w	locret_13900
0001569C 317C FFC8 0012             		move.w	#-$38,$12(a0)
000156A2 5428 0024                  		addq.b	#2,$24(a0)
000156A6 4238 FE1E                  		clr.b	($FFFFFE1E).w	 ; stop time counter
000156AA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000156AE 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000156B2 6600                       		bne.s	loc_138D4
000156B4 317C 0000 003A             		move.w	#0,$3A(a0)
000156BA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w	; load GAME object
000156C0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w	; load OVER object
000156C6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w	; set OVER object to correct frame
000156CC 4238 FE1A                  		clr.b	($FFFFFE1A).w
000156D0                            
000156D0                            loc_138C2:
000156D0 303C 009E                  		move.w	#$9E,d0
000156D4 4EB9 0000 12C2             		jsr	(PlaySound).l	; play game over music
000156DA 7003                       		moveq	#3,d0
000156DC 4EF9 0000 1536             		jmp	(LoadPLC).l	; load game over patterns
000156E2                            ; ===========================================================================
000156E2                            
000156E2                            loc_138D4:
000156E2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000156E8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000156EC 6700                       		beq.s	locret_13900	; if not, branch
000156EE 317C 0000 003A             		move.w	#0,$3A(a0)
000156F4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000156FA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015700 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015706 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001570C 60C2                       		bra.s	loc_138C2
0001570E                            ; ===========================================================================
0001570E                            
0001570E                            locret_13900:
0001570E 4E75                       		rts	
00015710                            ; End of function GameOver
00015710                            
00015710                            ; ===========================================================================
00015710                            ; ---------------------------------------------------------------------------
00015710                            ; Sonic	when the level is restarted
00015710                            ; ---------------------------------------------------------------------------
00015710                            
00015710                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015710 4A68 003A                  		tst.w	$3A(a0)
00015714 6700                       		beq.s	locret_13914
00015716 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001571A 6600                       		bne.s	locret_13914
0001571C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015722                            
00015722                            locret_13914:
00015722 4E75                       		rts	
00015724                            
00015724                            ; ---------------------------------------------------------------------------
00015724                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00015724                            ; ---------------------------------------------------------------------------
00015724                            
00015724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015724                            
00015724                            
00015724                            Sonic_Loops:				; XREF: Obj01_Control
00015724 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
0001572A 6700                       		beq.s	loc_13926	; if yes, branch
0001572C 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00015730 6600 0000                  		bne.w	locret_139C2	; if not, branch
00015734                            
00015734                            loc_13926:
00015734 3028 000C                  		move.w	$C(a0),d0
00015738 E248                       		lsr.w	#1,d0
0001573A 0240 0380                  		andi.w	#$380,d0
0001573E 1228 0008                  		move.b	8(a0),d1
00015742 0241 007F                  		andi.w	#$7F,d1
00015746 D041                       		add.w	d1,d0
00015748 43F8 A400                  		lea	($FFFFA400).w,a1
0001574C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00015750 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00015754 6700 F87A                  		beq.w	Obj01_ChkRoll
00015758 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
0001575C 6700 F872                  		beq.w	Obj01_ChkRoll
00015760 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00015764 6700                       		beq.s	loc_13976
00015766 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
0001576A 6700                       		beq.s	loc_13966
0001576C 08A8 0006 0001             		bclr	#6,1(a0)
00015772 4E75                       		rts	
00015774                            ; ===========================================================================
00015774                            
00015774                            loc_13966:
00015774 0828 0001 0022             		btst	#1,$22(a0)
0001577A 6700                       		beq.s	loc_13976
0001577C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015782 4E75                       		rts	
00015784                            ; ===========================================================================
00015784                            
00015784                            loc_13976:
00015784 3428 0008                  		move.w	8(a0),d2
00015788 0C02 002C                  		cmpi.b	#$2C,d2
0001578C 6400                       		bcc.s	loc_13988
0001578E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015794 4E75                       		rts	
00015796                            ; ===========================================================================
00015796                            
00015796                            loc_13988:
00015796 0C02 00E0                  		cmpi.b	#-$20,d2
0001579A 6500                       		bcs.s	loc_13996
0001579C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000157A2 4E75                       		rts	
000157A4                            ; ===========================================================================
000157A4                            
000157A4                            loc_13996:
000157A4 0828 0006 0001             		btst	#6,1(a0)
000157AA 6600                       		bne.s	loc_139B2
000157AC 1228 0026                  		move.b	$26(a0),d1
000157B0 6700                       		beq.s	locret_139C2
000157B2 0C01 0080                  		cmpi.b	#-$80,d1
000157B6 6200                       		bhi.s	locret_139C2
000157B8 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000157BE 4E75                       		rts	
000157C0                            ; ===========================================================================
000157C0                            
000157C0                            loc_139B2:
000157C0 1228 0026                  		move.b	$26(a0),d1
000157C4 0C01 0080                  		cmpi.b	#-$80,d1
000157C8 6300                       		bls.s	locret_139C2
000157CA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000157D0                            
000157D0                            locret_139C2:
000157D0 4E75                       		rts	
000157D2                            ; End of function Sonic_Loops
000157D2                            
000157D2                            ; ---------------------------------------------------------------------------
000157D2                            ; Subroutine to	animate	Sonic's sprites
000157D2                            ; ---------------------------------------------------------------------------
000157D2                            
000157D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157D2                            
000157D2                            
000157D2                            Sonic_Animate:				; XREF: Obj01_Control; et al
000157D2 43F9 0000 0000             		lea	(SonicAniData).l,a1
000157D8 7000                       		moveq	#0,d0
000157DA 1028 001C                  		move.b	$1C(a0),d0
000157DE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000157E2 6700                       		beq.s	SAnim_Do	; if not, branch
000157E4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000157E8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000157EE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000157F4                            
000157F4                            SAnim_Do:
000157F4 D040                       		add.w	d0,d0
000157F6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000157FA 1011                       		move.b	(a1),d0
000157FC 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000157FE 1228 0022                  		move.b	$22(a0),d1
00015802 0201 0001                  		andi.b	#1,d1
00015806 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001580C 8328 0001                  		or.b	d1,1(a0)
00015810 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015814 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00015816 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001581A                            
0001581A                            SAnim_Do2:
0001581A 7200                       		moveq	#0,d1
0001581C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00015820 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015824 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015826                            
00015826                            SAnim_Next:
00015826 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001582A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001582E                            
0001582E                            SAnim_Delay:
0001582E 4E75                       		rts	
00015830                            ; ===========================================================================
00015830                            
00015830                            SAnim_End_FF:
00015830 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00015832 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015834 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001583A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001583E 60E6                       		bra.s	SAnim_Next
00015840                            ; ===========================================================================
00015840                            
00015840                            SAnim_End_FE:
00015840 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00015842 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015844 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015848 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001584C 9200                       		sub.b	d0,d1
0001584E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00015852 60D2                       		bra.s	SAnim_Next
00015854                            ; ===========================================================================
00015854                            
00015854                            SAnim_End_FD:
00015854 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00015856 6600                       		bne.s	SAnim_End	; if not, branch
00015858 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001585E                            
0001585E                            SAnim_End:
0001585E 4E75                       		rts	
00015860                            ; ===========================================================================
00015860                            
00015860                            SAnim_WalkRun:				; XREF: SAnim_Do
00015860 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015864 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015866 5200                       		addq.b	#1,d0		; is animation walking/running?
00015868 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001586C 7200                       		moveq	#0,d1
0001586E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015872 1428 0022                  		move.b	$22(a0),d2
00015876 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001587A 6600                       		bne.s	loc_13A70	; if yes, branch
0001587C 4600                       		not.b	d0		; reverse angle
0001587E                            
0001587E                            loc_13A70:
0001587E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00015882 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00015884 7203                       		moveq	#3,d1
00015886                            
00015886                            loc_13A78:
00015886 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001588C B302                       		eor.b	d1,d2
0001588E 8528 0001                  		or.b	d2,1(a0)
00015892 0828 0005 0022             		btst	#5,$22(a0)
00015898 6600 0000                  		bne.w	SAnim_Push
0001589C E808                       		lsr.b	#4,d0		; divide angle by $10
0001589E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000158A2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000158A6 6A00                       		bpl.s	loc_13A9C
000158A8 4442                       		neg.w	d2
000158AA                            
000158AA                            loc_13A9C:
000158AA 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000158B0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000158B4 6400                       		bcc.s	loc_13AB4	; if yes, branch
000158B6 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000158BC 1200                       		move.b	d0,d1
000158BE E209                       		lsr.b	#1,d1
000158C0 D001                       		add.b	d1,d0
000158C2                            
000158C2                            loc_13AB4:
000158C2 D000                       		add.b	d0,d0
000158C4 1600                       		move.b	d0,d3
000158C6 4442                       		neg.w	d2
000158C8 0642 0800                  		addi.w	#$800,d2
000158CC 6A00                       		bpl.s	loc_13AC2
000158CE 7400                       		moveq	#0,d2
000158D0                            
000158D0                            loc_13AC2:
000158D0 E04A                       		lsr.w	#8,d2
000158D2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000158D6 6100 FF42                  		bsr.w	SAnim_Do2
000158DA D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000158DE 4E75                       		rts	
000158E0                            ; ===========================================================================
000158E0                            
000158E0                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000158E0 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000158E2 6600                       		bne.s	SAnim_Push	; if not, branch
000158E4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000158E8 6A00                       		bpl.s	loc_13ADE
000158EA 4442                       		neg.w	d2
000158EC                            
000158EC                            loc_13ADE:
000158EC 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000158F2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000158F6 6400                       		bcc.s	loc_13AF0	; if yes, branch
000158F8 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000158FE                            
000158FE                            loc_13AF0:
000158FE 4442                       		neg.w	d2
00015900 0642 0400                  		addi.w	#$400,d2
00015904 6A00                       		bpl.s	loc_13AFA
00015906 7400                       		moveq	#0,d2
00015908                            
00015908                            loc_13AFA:
00015908 E04A                       		lsr.w	#8,d2
0001590A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001590E 1228 0022                  		move.b	$22(a0),d1
00015912 0201 0001                  		andi.b	#1,d1
00015916 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001591C 8328 0001                  		or.b	d1,1(a0)
00015920 6000 FEF8                  		bra.w	SAnim_Do2
00015924                            ; ===========================================================================
00015924                            
00015924                            SAnim_Push:				; XREF: SAnim_RollJump
00015924 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015928 6B00                       		bmi.s	loc_13B1E
0001592A 4442                       		neg.w	d2
0001592C                            
0001592C                            loc_13B1E:
0001592C 0642 0800                  		addi.w	#$800,d2
00015930 6A00                       		bpl.s	loc_13B26
00015932 7400                       		moveq	#0,d2
00015934                            
00015934                            loc_13B26:
00015934 EC4A                       		lsr.w	#6,d2
00015936 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001593A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00015940 1228 0022                  		move.b	$22(a0),d1
00015944 0201 0001                  		andi.b	#1,d1
00015948 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001594E 8328 0001                  		or.b	d1,1(a0)
00015952 6000 FEC6                  		bra.w	SAnim_Do2
00015956                            ; End of function Sonic_Animate
00015956                            
00015956                            ; ===========================================================================
00015956                            SonicAniData:
00015956                            	include "_anim\Sonic.asm"
00015956                            ; ---------------------------------------------------------------------------
00015956                            ; Sonic Animation Script
00015956                            ; ---------------------------------------------------------------------------
00015956 0000                       		dc.w SonAni_Walk-SonicAniData
00015958 0000                       		dc.w SonAni_Run-SonicAniData
0001595A 0000                       		dc.w SonAni_Roll-SonicAniData
0001595C 0000                       		dc.w SonAni_Roll2-SonicAniData
0001595E 0000                       		dc.w SonAni_Push-SonicAniData
00015960 0000                       		dc.w SonAni_Wait-SonicAniData
00015962 0000                       		dc.w SonAni_Balance-SonicAniData
00015964 0000                       		dc.w SonAni_LookUp-SonicAniData
00015966 0000                       		dc.w SonAni_Duck-SonicAniData
00015968 0000                       		dc.w SonAni_Warp1-SonicAniData
0001596A 0000                       		dc.w SonAni_Warp2-SonicAniData
0001596C 0000                       		dc.w SonAni_Warp3-SonicAniData
0001596E 0000                       		dc.w SonAni_Warp4-SonicAniData
00015970 0000                       		dc.w SonAni_Stop-SonicAniData
00015972 0000                       		dc.w SonAni_Float1-SonicAniData
00015974 0000                       		dc.w SonAni_Float2-SonicAniData
00015976 0000                       		dc.w SonAni_Spring-SonicAniData
00015978 0000                       		dc.w SonAni_LZHang-SonicAniData
0001597A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001597C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001597E 0000                       		dc.w SonAni_Surf-SonicAniData
00015980 0000                       		dc.w SonAni_Bubble-SonicAniData
00015982 0000                       		dc.w SonAni_Death1-SonicAniData
00015984 0000                       		dc.w SonAni_Drown-SonicAniData
00015986 0000                       		dc.w SonAni_Death2-SonicAniData
00015988 0000                       		dc.w SonAni_Shrink-SonicAniData
0001598A 0000                       		dc.w SonAni_Hurt-SonicAniData
0001598C 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001598E 0000                       		dc.w SonAni_Blank-SonicAniData
00015990 0000                       		dc.w SonAni_Float3-SonicAniData
00015992 0000                       		dc.w SonAni_Float4-SonicAniData
00015994 0000                       		dc.w SonAni_Spin_Dash-SonicAniData
00015996 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
0001599E FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000159A6 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000159AE FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000159B6 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000159BE 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000159D4 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
000159D8 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000159DC 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000159E0 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000159E4 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000159E8 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000159EC 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000159F0 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000159F4 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000159F8 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00015A00 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00015A04 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015A08 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00015A0E 1043 4444 FE01 00          SonAni_Leap2:	dc.b $10, $43, $44, $44, $FE, 1, 0
00015A15 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015A19 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00015A21 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00015A25 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00015A29 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00015A2D 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00015A37 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00015A3B 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00015A3F 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00015A43 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015A4B 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015A4F 0058 5958 5A58 5B58 5C58+  SonAni_Spin_Dash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
00015A5C 00                         		even
00015A5C 00                         		even
00015A5C                            
00015A5C                            ; ---------------------------------------------------------------------------
00015A5C                            ; Sonic	pattern	loading	subroutine
00015A5C                            ; ---------------------------------------------------------------------------
00015A5C                            
00015A5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A5C                            
00015A5C                            
00015A5C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00015A5C 7000                       		moveq	#0,d0
00015A5E 1028 001A                  		move.b	$1A(a0),d0	 ; load frame number
00015A62 B038 F766                  		cmp.b	($FFFFF766).w,d0 ; has Sonic frame changed?
00015A66 6700                       		beq.s	locret_13C96	 ; if not, branch
00015A68 11C0 F766                  		move.b	d0,($FFFFF766).w ; update frame number
00015A6C 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015A72 D040                       		add.w	d0,d0
00015A74 D4F2 0000                  		adda.w	(a2,d0.w),a2
00015A78 7A00                       		moveq	#0,d5
00015A7A 1A1A                       		move.b	(a2)+,d5
00015A7C 5345                       		subq.w	#1,d5
00015A7E 6B00                       		bmi.s	locret_13C96
00015A80 383C F000                  		move.w	#$F000,d4
00015A84 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015A8A                             
00015A8A                            SPLC_ReadEntry:
00015A8A 7200                       		moveq	#0,d1
00015A8C 121A                       		move.b	(a2)+,d1
00015A8E E149                       		lsl.w	#8,d1
00015A90 121A                       		move.b	(a2)+,d1
00015A92 3601                       		move.w	d1,d3
00015A94 E04B                       		lsr.w	#8,d3
00015A96 0243 00F0                  		andi.w	#$F0,d3
00015A9A 0643 0010                  		addi.w	#$10,d3
00015A9E 0241 0FFF                  		andi.w	#$FFF,d1
00015AA2 EB89                       		lsl.l	#5,d1
00015AA4 D286                       		add.l	d6,d1
00015AA6 3404                       		move.w	d4,d2
00015AA8 D843                       		add.w	d3,d4
00015AAA D843                       		add.w	d3,d4
00015AAC 4EB9 0000 1366             		jsr	(QueueDMATransfer).l
00015AB2 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015AB6                             
00015AB6                            locret_13C96:
00015AB6 4E75                       		rts	
00015AB8                            ; End of function LoadSonicDynPLC
00015AB8                            
00015AB8                            ; ===========================================================================
00015AB8                            ; ---------------------------------------------------------------------------
00015AB8                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015AB8                            ; ---------------------------------------------------------------------------
00015AB8                            
00015AB8                            Obj0A:					; XREF: Obj_Index
00015AB8 7000                       		moveq	#0,d0
00015ABA 1028 0024                  		move.b	$24(a0),d0
00015ABE 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015AC2 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015AC6                            ; ===========================================================================
00015AC6 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015ACA 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015ACE 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015AD2 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015AD6 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015AD8                            ; ===========================================================================
00015AD8                            
00015AD8                            Obj0A_Main:				; XREF: Obj0A_Index
00015AD8 5428 0024                  		addq.b	#2,$24(a0)
00015ADC 217C 0001 4398 0004        		move.l	#Map_obj64,4(a0)
00015AE4 317C 8348 0002             		move.w	#$8348,2(a0)
00015AEA 117C 0084 0001             		move.b	#$84,1(a0)
00015AF0 117C 0010 0019             		move.b	#$10,$19(a0)
00015AF6 117C 0001 0018             		move.b	#1,$18(a0)
00015AFC 1028 0028                  		move.b	$28(a0),d0
00015B00 6A00                       		bpl.s	loc_13D00
00015B02 5028 0024                  		addq.b	#8,$24(a0)
00015B06 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015B0E 317C 0440 0002             		move.w	#$440,2(a0)
00015B14 0240 007F                  		andi.w	#$7F,d0
00015B18 1140 0033                  		move.b	d0,$33(a0)
00015B1C 6000 0000                  		bra.w	Obj0A_Countdown
00015B20                            ; ===========================================================================
00015B20                            
00015B20                            loc_13D00:
00015B20 1140 001C                  		move.b	d0,$1C(a0)
00015B24 3168 0008 0030             		move.w	8(a0),$30(a0)
00015B2A 317C FF78 0012             		move.w	#-$88,$12(a0)
00015B30                            
00015B30                            Obj0A_Animate:				; XREF: Obj0A_Index
00015B30 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B36 4EB9 0000 C10C             		jsr	AnimateSprite
00015B3C                            
00015B3C                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015B3C 3038 F646                  		move.w	($FFFFF646).w,d0
00015B40 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015B44 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00015B46 117C 0006 0024             		move.b	#6,$24(a0)
00015B4C 5E28 001C                  		addq.b	#7,$1C(a0)
00015B50 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015B56 6700                       		beq.s	Obj0A_Display
00015B58 6000                       		bra.s	Obj0A_Display
00015B5A                            ; ===========================================================================
00015B5A                            
00015B5A                            Obj0A_Wobble:
00015B5A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015B5E 6700                       		beq.s	loc_13D44
00015B60 5868 0030                  		addq.w	#4,$30(a0)
00015B64                            
00015B64                            loc_13D44:
00015B64 1028 0026                  		move.b	$26(a0),d0
00015B68 5228 0026                  		addq.b	#1,$26(a0)
00015B6C 0240 007F                  		andi.w	#$7F,d0
00015B70 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015B76 1031 0000                  		move.b	(a1,d0.w),d0
00015B7A 4880                       		ext.w	d0
00015B7C D068 0030                  		add.w	$30(a0),d0
00015B80 3140 0008                  		move.w	d0,8(a0)
00015B84 6100                       		bsr.s	Obj0A_ShowNumber
00015B86 4EBA 9462                  		jsr	SpeedToPos
00015B8A 4A28 0001                  		tst.b	1(a0)
00015B8E 6A00                       		bpl.s	Obj0A_Delete
00015B90 4EFA 947E                  		jmp	DisplaySprite
00015B94                            ; ===========================================================================
00015B94                            
00015B94                            Obj0A_Delete:
00015B94 4EFA 94B6                  		jmp	DeleteObject
00015B98                            ; ===========================================================================
00015B98                            
00015B98                            Obj0A_Display:				; XREF: Obj0A_Index
00015B98 6100                       		bsr.s	Obj0A_ShowNumber
00015B9A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BA0 4EB9 0000 C10C             		jsr	AnimateSprite
00015BA6 4EFA 9468                  		jmp	DisplaySprite
00015BAA                            ; ===========================================================================
00015BAA                            
00015BAA                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015BAA 4EFA 94A0                  		jmp	DeleteObject
00015BAE                            ; ===========================================================================
00015BAE                            
00015BAE                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015BAE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015BB4 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015BB6 5368 0038                  		subq.w	#1,$38(a0)
00015BBA 6600                       		bne.s	Obj0A_Display2
00015BBC 117C 000E 0024             		move.b	#$E,$24(a0)
00015BC2 5E28 001C                  		addq.b	#7,$1C(a0)
00015BC6 60D0                       		bra.s	Obj0A_Display
00015BC8                            ; ===========================================================================
00015BC8                            
00015BC8                            Obj0A_Display2:
00015BC8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BCE 4EB9 0000 C10C             		jsr	AnimateSprite
00015BD4 4A28 0001                  		tst.b	1(a0)
00015BD8 6A00                       		bpl.s	Obj0A_Delete3
00015BDA 4EFA 9434                  		jmp	DisplaySprite
00015BDE                            ; ===========================================================================
00015BDE                            
00015BDE                            Obj0A_Delete3:
00015BDE 4EFA 946C                  		jmp	DeleteObject
00015BE2                            ; ===========================================================================
00015BE2                            
00015BE2                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015BE2 4A68 0038                  		tst.w	$38(a0)
00015BE6 6700                       		beq.s	locret_13E1A
00015BE8 5368 0038                  		subq.w	#1,$38(a0)
00015BEC 6600                       		bne.s	locret_13E1A
00015BEE 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015BF4 6400                       		bcc.s	locret_13E1A
00015BF6 317C 000F 0038             		move.w	#$F,$38(a0)
00015BFC 4268 0012                  		clr.w	$12(a0)
00015C00 117C 0080 0001             		move.b	#$80,1(a0)
00015C06 3028 0008                  		move.w	8(a0),d0
00015C0A 9078 F700                  		sub.w	($FFFFF700).w,d0
00015C0E 0640 0080                  		addi.w	#$80,d0
00015C12 3140 0008                  		move.w	d0,8(a0)
00015C16 3028 000C                  		move.w	$C(a0),d0
00015C1A 9078 F704                  		sub.w	($FFFFF704).w,d0
00015C1E 0640 0080                  		addi.w	#$80,d0
00015C22 3140 000A                  		move.w	d0,$A(a0)
00015C26 117C 000C 0024             		move.b	#$C,$24(a0)
00015C2C                            
00015C2C                            locret_13E1A:
00015C2C 4E75                       		rts	
00015C2E                            ; ===========================================================================
00015C2E                            Obj0A_WobbleData:
00015C2E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015C3F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015C50 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015C61 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015C71 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015C7E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015C8B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015C98 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015CA5 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015CAE                            ; ===========================================================================
00015CAE                            
00015CAE                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015CAE 4A68 002C                  		tst.w	$2C(a0)
00015CB2 6600 0000                  		bne.w	loc_13F86
00015CB6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015CBC 6400 0000                  		bcc.w	locret_1408C
00015CC0 0838 0006 D022             		btst	#6,($FFFFD022).w
00015CC6 6700 0000                  		beq.w	locret_1408C
00015CCA 5368 0038                  		subq.w	#1,$38(a0)
00015CCE 6A00 0000                  		bpl.w	loc_13FAC
00015CD2 317C 003B 0038             		move.w	#59,$38(a0)
00015CD8 317C 0001 0036             		move.w	#1,$36(a0)
00015CDE 4EB9 0000 2988             		jsr	(RandomNumber).l
00015CE4 0240 0001                  		andi.w	#1,d0
00015CE8 1140 0034                  		move.b	d0,$34(a0)
00015CEC 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015CF0 0C40 0019                  		cmpi.w	#$19,d0
00015CF4 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015CF6 0C40 0014                  		cmpi.w	#$14,d0
00015CFA 6700                       		beq.s	Obj0A_WarnSound
00015CFC 0C40 000F                  		cmpi.w	#$F,d0
00015D00 6700                       		beq.s	Obj0A_WarnSound
00015D02 0C40 000C                  		cmpi.w	#$C,d0
00015D06 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015D08 6600                       		bne.s	loc_13F02
00015D0A 303C 009A                  		move.w	#$9A,d0
00015D0E 4EB9 0000 12C2             		jsr	(PlaySound).l	; play countdown music
00015D14                            
00015D14                            loc_13F02:
00015D14 5328 0032                  		subq.b	#1,$32(a0)
00015D18 6A00                       		bpl.s	Obj0A_ReduceAir
00015D1A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015D20 08E8 0007 0036             		bset	#7,$36(a0)
00015D26 6000                       		bra.s	Obj0A_ReduceAir
00015D28                            ; ===========================================================================
00015D28                            
00015D28                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015D28 303C 00C2                  		move.w	#$C2,d0
00015D2C 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015D32                            
00015D32                            Obj0A_ReduceAir:
00015D32 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015D36 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015D3A 6100 0000                  		bsr.w	ResumeMusic
00015D3E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015D44 303C 00B2                  		move.w	#$B2,d0
00015D48 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play drowning sound
00015D4E 117C 000A 0034             		move.b	#$A,$34(a0)
00015D54 317C 0001 0036             		move.w	#1,$36(a0)
00015D5A 317C 0078 002C             		move.w	#$78,$2C(a0)
00015D60 2F08                       		move.l	a0,-(sp)
00015D62 41F8 D000                  		lea	($FFFFD000).w,a0
00015D66 6100 F844                  		bsr.w	Sonic_ResetOnFloor
00015D6A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015D70 08E8 0001 0022             		bset	#1,$22(a0)
00015D76 08E8 0007 0002             		bset	#7,2(a0)
00015D7C 317C 0000 0012             		move.w	#0,$12(a0)
00015D82 317C 0000 0010             		move.w	#0,$10(a0)
00015D88 317C 0000 0014             		move.w	#0,$14(a0)
00015D8E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015D94 205F                       		movea.l	(sp)+,a0
00015D96 4E75                       		rts	
00015D98                            ; ===========================================================================
00015D98                            
00015D98                            loc_13F86:
00015D98 5368 002C                  		subq.w	#1,$2C(a0)
00015D9C 6600                       		bne.s	loc_13F94
00015D9E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00015DA4 4E75                       		rts	
00015DA6                            ; ===========================================================================
00015DA6                            
00015DA6                            loc_13F94:
00015DA6 2F08                       		move.l	a0,-(sp)
00015DA8 41F8 D000                  		lea	($FFFFD000).w,a0
00015DAC 4EBA 923C                  		jsr	SpeedToPos
00015DB0 0668 0010 0012             		addi.w	#$10,$12(a0)
00015DB6 205F                       		movea.l	(sp)+,a0
00015DB8 6000                       		bra.s	loc_13FAC
00015DBA                            ; ===========================================================================
00015DBA                            
00015DBA                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015DBA 6000                       		bra.s	Obj0A_MakeItem
00015DBC                            ; ===========================================================================
00015DBC                            
00015DBC                            loc_13FAC:
00015DBC 4A68 0036                  		tst.w	$36(a0)
00015DC0 6700 0000                  		beq.w	locret_1408C
00015DC4 5368 003A                  		subq.w	#1,$3A(a0)
00015DC8 6A00 0000                  		bpl.w	locret_1408C
00015DCC                            
00015DCC                            Obj0A_MakeItem:
00015DCC 4EB9 0000 2988             		jsr	(RandomNumber).l
00015DD2 0240 000F                  		andi.w	#$F,d0
00015DD6 3140 003A                  		move.w	d0,$3A(a0)
00015DDA 4EBA 96BA                  		jsr	SingleObjLoad
00015DDE 6600 0000                  		bne.w	locret_1408C
00015DE2 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015DE6 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015DEC 7006                       		moveq	#6,d0
00015DEE 0838 0000 D022             		btst	#0,($FFFFD022).w
00015DF4 6700                       		beq.s	loc_13FF2
00015DF6 4440                       		neg.w	d0
00015DF8 137C 0040 0026             		move.b	#$40,$26(a1)
00015DFE                            
00015DFE                            loc_13FF2:
00015DFE D169 0008                  		add.w	d0,8(a1)
00015E02 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015E08 137C 0006 0028             		move.b	#6,$28(a1)
00015E0E 4A68 002C                  		tst.w	$2C(a0)
00015E12 6700 0000                  		beq.w	loc_1403E
00015E16 0268 0007 003A             		andi.w	#7,$3A(a0)
00015E1C 0668 0000 003A             		addi.w	#0,$3A(a0)
00015E22 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015E26 0440 000C                  		subi.w	#$C,d0
00015E2A 3340 000C                  		move.w	d0,$C(a1)
00015E2E 4EB9 0000 2988             		jsr	(RandomNumber).l
00015E34 1340 0026                  		move.b	d0,$26(a1)
00015E38 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E3C 0200 0003                  		andi.b	#3,d0
00015E40 6600                       		bne.s	loc_14082
00015E42 137C 000E 0028             		move.b	#$E,$28(a1)
00015E48 6000                       		bra.s	loc_14082
00015E4A                            ; ===========================================================================
00015E4A                            
00015E4A                            loc_1403E:
00015E4A 0828 0007 0036             		btst	#7,$36(a0)
00015E50 6700                       		beq.s	loc_14082
00015E52 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015E56 E24A                       		lsr.w	#1,d2
00015E58 4EB9 0000 2988             		jsr	(RandomNumber).l
00015E5E 0240 0003                  		andi.w	#3,d0
00015E62 6600                       		bne.s	loc_1406A
00015E64 08E8 0006 0036             		bset	#6,$36(a0)
00015E6A 6600                       		bne.s	loc_14082
00015E6C 1342 0028                  		move.b	d2,$28(a1)
00015E70 337C 001C 0038             		move.w	#$1C,$38(a1)
00015E76                            
00015E76                            loc_1406A:
00015E76 4A28 0034                  		tst.b	$34(a0)
00015E7A 6600                       		bne.s	loc_14082
00015E7C 08E8 0006 0036             		bset	#6,$36(a0)
00015E82 6600                       		bne.s	loc_14082
00015E84 1342 0028                  		move.b	d2,$28(a1)
00015E88 337C 001C 0038             		move.w	#$1C,$38(a1)
00015E8E                            
00015E8E                            loc_14082:
00015E8E 5328 0034                  		subq.b	#1,$34(a0)
00015E92 6A00                       		bpl.s	locret_1408C
00015E94 4268 0036                  		clr.w	$36(a0)
00015E98                            
00015E98                            locret_1408C:
00015E98 4E75                       		rts	
00015E9A                            
00015E9A                            ; ---------------------------------------------------------------------------
00015E9A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015E9A                            ; ---------------------------------------------------------------------------
00015E9A                            
00015E9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E9A                            
00015E9A                            
00015E9A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015E9A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015EA0 6200                       		bhi.s	loc_140AC
00015EA2                            
00015EA2                            ; Vladikcomper: Music play code changed
00015EA2 7000                                       moveq   #0,d0
00015EA4 7200                                       moveq   #0,d1
00015EA6 103C 0092                                  move.b  #$92,d0          ; SBZ music
00015EAA 0C38 0003 FE11                             cmpi.b  #3,($FFFFFE11).w ; is this act 4?
00015EB0 6700                                       beq.s	@ExecuteMusic	 ; if yes, branch
00015EB2 0400 000E                                  subi.b	#$E,d0		 ; set music to LZ
00015EB6 1238 FE11                                  move.b  ($FFFFFE11).w,d1
00015EBA D001                                       add.b	d1,d0		 ; add act number
00015EBC 4EB9 0000 12C2             @ExecuteMusic:	jsr	(PlaySound).l	 ; play music
00015EC2                            
00015EC2                            loc_140AC:
00015EC2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015EC8 4238 D372                  		clr.b	($FFFFD372).w
00015ECC 4E75                       		rts	
00015ECE                            ; End of function ResumeMusic
00015ECE                            
00015ECE                            ; ===========================================================================
00015ECE                            Ani_obj0A:
00015ECE                            	include "_anim\obj0A.asm"
00015ECE                            ; ---------------------------------------------------------------------------
00015ECE                            ; Animation script - countdown numbers and bubbles (LZ)
00015ECE                            ; ---------------------------------------------------------------------------
00015ECE 0000                       		dc.w byte_140D6-Ani_obj0A
00015ED0 0000                       		dc.w byte_140E0-Ani_obj0A
00015ED2 0000                       		dc.w byte_140EA-Ani_obj0A
00015ED4 0000                       		dc.w byte_140F4-Ani_obj0A
00015ED6 0000                       		dc.w byte_140FE-Ani_obj0A
00015ED8 0000                       		dc.w byte_14108-Ani_obj0A
00015EDA 0000                       		dc.w byte_14112-Ani_obj0A
00015EDC 0000                       		dc.w byte_14118-Ani_obj0A
00015EDE 0000                       		dc.w byte_14120-Ani_obj0A
00015EE0 0000                       		dc.w byte_14128-Ani_obj0A
00015EE2 0000                       		dc.w byte_14130-Ani_obj0A
00015EE4 0000                       		dc.w byte_14138-Ani_obj0A
00015EE6 0000                       		dc.w byte_14140-Ani_obj0A
00015EE8 0000                       		dc.w byte_14148-Ani_obj0A
00015EEA 0000                       		dc.w byte_1414A-Ani_obj0A
00015EEC 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015EF6 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015F00 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015F0A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015F14 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015F1E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015F28 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015F2E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015F36 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015F3E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015F46 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015F4E 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015F56 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015F5E 0EFC                       byte_14148:	dc.b $E, $FC
00015F60 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015F66                            		even
00015F66                            		even
00015F66                            
00015F66                            ; ---------------------------------------------------------------------------
00015F66                            ; Sprite mappings - drowning countdown numbers (LZ)
00015F66                            ; ---------------------------------------------------------------------------
00015F66                            Map_obj0A:
00015F66                            	include "_maps\obj0A.asm"
00015F66                            ; ---------------------------------------------------------------------------
00015F66                            ; Sprite mappings - drowning countdown numbers (LZ)
00015F66                            ; ---------------------------------------------------------------------------
00015F66 0000                       		dc.w byte_14152-Map_obj0A
00015F68 01                         byte_14152:	dc.b 1
00015F69 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015F6E                            		even
00015F6E                            		even
00015F6E                            
00015F6E                            ; ===========================================================================
00015F6E                            ; ---------------------------------------------------------------------------
00015F6E                            ; Object 38 - shield and invincibility stars
00015F6E                            ; ---------------------------------------------------------------------------
00015F6E                            
00015F6E                            Obj38:					; XREF: Obj_Index
00015F6E 7000                       		moveq	#0,d0
00015F70 1028 0024                  		move.b	$24(a0),d0
00015F74 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015F78 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015F7C                            ; ===========================================================================
00015F7C 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015F7E 0000                       		dc.w Obj38_Shield-Obj38_Index
00015F80 0000                       		dc.w Obj38_Stars-Obj38_Index
00015F82                            ; ===========================================================================
00015F82                            
00015F82                            Obj38_Main:				; XREF: Obj38_Index
00015F82 5428 0024                  		addq.b	#2,$24(a0)
00015F86 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015F8E 117C 0004 0001             		move.b	#4,1(a0)
00015F94 117C 0001 0018             		move.b	#1,$18(a0)
00015F9A 117C 0010 0019             		move.b	#$10,$19(a0)
00015FA0 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015FA4 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015FA6 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015FAC 4E75                       		rts	
00015FAE                            ; ===========================================================================
00015FAE                            
00015FAE                            Obj38_DoStars:
00015FAE 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015FB2 317C 055C 0002             		move.w	#$55C,2(a0)
00015FB8 4E75                       		rts	
00015FBA                            ; ===========================================================================
00015FBA                            
00015FBA                            Obj38_Shield:				; XREF: Obj38_Index
00015FBA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015FBE 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015FC0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015FC4 6700                       		beq.s	Obj38_Delete	; if not, branch
00015FC6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015FCC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015FD2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015FD8 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015FDE 4EB9 0000 C10C             		jsr	AnimateSprite
00015FE4 4EFA 902A                  		jmp	DisplaySprite
00015FE8                            ; ===========================================================================
00015FE8                            
00015FE8                            Obj38_RmvShield:
00015FE8 4E75                       		rts	
00015FEA                            ; ===========================================================================
00015FEA                            
00015FEA                            Obj38_Delete:
00015FEA 4EFA 9060                  		jmp	DeleteObject
00015FEE                            ; ===========================================================================
00015FEE                            
00015FEE                            Obj38_Stars:				; XREF: Obj38_Index
00015FEE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015FF2 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015FF4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00015FF8 1228 001C                  		move.b	$1C(a0),d1
00015FFC 5301                       		subq.b	#1,d1
00015FFE 6000                       		bra.s	Obj38_StarTrail
00016000                            ; ===========================================================================
00016000 E909                       		lsl.b	#4,d1
00016002 5801                       		addq.b	#4,d1
00016004 9001                       		sub.b	d1,d0
00016006 1228 0030                  		move.b	$30(a0),d1
0001600A 9001                       		sub.b	d1,d0
0001600C 5801                       		addq.b	#4,d1
0001600E 0201 000F                  		andi.b	#$F,d1
00016012 1141 0030                  		move.b	d1,$30(a0)
00016016 6000                       		bra.s	Obj38_StarTrail2a
00016018                            ; ===========================================================================
00016018                            
00016018                            Obj38_StarTrail:			; XREF: Obj38_Stars
00016018 E709                       		lsl.b	#3,d1
0001601A 1401                       		move.b	d1,d2
0001601C D201                       		add.b	d1,d1
0001601E D202                       		add.b	d2,d1
00016020 5801                       		addq.b	#4,d1
00016022 9001                       		sub.b	d1,d0
00016024 1228 0030                  		move.b	$30(a0),d1
00016028 9001                       		sub.b	d1,d0
0001602A 5801                       		addq.b	#4,d1
0001602C 0C01 0018                  		cmpi.b	#$18,d1
00016030 6500                       		bcs.s	Obj38_StarTrail2
00016032 7200                       		moveq	#0,d1
00016034                            
00016034                            Obj38_StarTrail2:
00016034 1141 0030                  		move.b	d1,$30(a0)
00016038                            
00016038                            Obj38_StarTrail2a:
00016038 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001603C 43F1 0000                  		lea	(a1,d0.w),a1
00016040 3159 0008                  		move.w	(a1)+,8(a0)
00016044 3159 000C                  		move.w	(a1)+,$C(a0)
00016048 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001604E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00016054 4EB9 0000 C10C             		jsr	AnimateSprite
0001605A 4EFA 8FB4                  		jmp	DisplaySprite
0001605E                            ; ===========================================================================
0001605E                            
0001605E                            Obj38_Delete2:				; XREF: Obj38_Stars
0001605E 4EFA 8FEC                  		jmp	DeleteObject
00016062                            ; ===========================================================================
00016062                            ; ---------------------------------------------------------------------------
00016062                            ; Object 4A - special stage entry from beta
00016062                            ; ---------------------------------------------------------------------------
00016062                            
00016062                            Obj4A:					; XREF: Obj_Index
00016062 7000                       		moveq	#0,d0
00016064 1028 0024                  		move.b	$24(a0),d0
00016068 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001606C 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00016070                            ; ===========================================================================
00016070 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00016072 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00016074 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00016076                            ; ===========================================================================
00016076                            
00016076                            Obj4A_Main:				; XREF: Obj4A_Index
00016076 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001607A 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001607C 4E75                       		rts	
0001607E                            ; ===========================================================================
0001607E                            
0001607E                            Obj4A_Main2:
0001607E 5428 0024                  		addq.b	#2,$24(a0)
00016082 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001608A 117C 0004 0001             		move.b	#4,1(a0)
00016090 117C 0001 0018             		move.b	#1,$18(a0)
00016096 117C 0038 0019             		move.b	#$38,$19(a0)
0001609C 317C 0541 0002             		move.w	#$541,2(a0)
000160A2 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000160A8                            
000160A8                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000160A8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000160AE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000160B4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000160BA 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000160C0 4EB9 0000 C10C             		jsr	AnimateSprite
000160C6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000160CC 6600                       		bne.s	Obj4A_Display
000160CE 4A38 D000                  		tst.b	($FFFFD000).w
000160D2 6700                       		beq.s	Obj4A_Display
000160D4 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000160DA 303C 00A8                  		move.w	#$A8,d0
000160DE 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000160E4                            
000160E4                            Obj4A_Display:
000160E4 4EFA 8F2A                  		jmp	DisplaySprite
000160E8                            ; ===========================================================================
000160E8                            
000160E8                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000160E8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000160EC 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000160EE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000160F4 4EFA 8F56                  		jmp	DeleteObject
000160F8                            ; ===========================================================================
000160F8                            
000160F8                            Obj4A_Wait:
000160F8 4E75                       		rts	
000160FA                            ; ===========================================================================
000160FA                            ; ---------------------------------------------------------------------------
000160FA                            ; Object 08 - water splash (LZ)
000160FA                            ; ---------------------------------------------------------------------------
000160FA                            
000160FA                            Obj08:					; XREF: Obj_Index
000160FA 7000                       		moveq	#0,d0
000160FC 1028 0024                  		move.b	$24(a0),d0
00016100 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00016104 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00016108                            ; ===========================================================================
00016108 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001610A 0000                       		dc.w Obj08_Display-Obj08_Index
0001610C 0000                       		dc.w Obj08_Delete-Obj08_Index
0001610E                            ; ===========================================================================
0001610E                            
0001610E                            Obj08_Main:				; XREF: Obj08_Index
0001610E 5428 0024                  		addq.b	#2,$24(a0)
00016112 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001611A 0028 0004 0001             		ori.b	#4,1(a0)
00016120 117C 0001 0018             		move.b	#1,$18(a0)
00016126 117C 0010 0019             		move.b	#$10,$19(a0)
0001612C 317C 4259 0002             		move.w	#$4259,2(a0)
00016132 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016138                            
00016138                            Obj08_Display:				; XREF: Obj08_Index
00016138 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001613E 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016144 4EB9 0000 C10C             		jsr	AnimateSprite
0001614A 4EFA 8EC4                  		jmp	DisplaySprite
0001614E                            ; ===========================================================================
0001614E                            
0001614E                            Obj08_Delete:				; XREF: Obj08_Index
0001614E 4EFA 8EFC                  		jmp	DeleteObject	; delete when animation	is complete
00016152                            ; ===========================================================================
00016152                            Ani_obj38:
00016152                            	include "_anim\obj38.asm"
00016152                            ; ---------------------------------------------------------------------------
00016152                            ; Animation script - shield and invincibility stars
00016152                            ; ---------------------------------------------------------------------------
00016152 0000                       		dc.w byte_14356-Ani_obj38
00016154 0000                       		dc.w byte_1435E-Ani_obj38
00016156 0000                       		dc.w byte_14364-Ani_obj38
00016158 0000                       		dc.w byte_1437E-Ani_obj38
0001615A 0000                       		dc.w byte_14398-Ani_obj38
0001615C 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00016164 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001616A 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001617B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00016184 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00016195 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001619E 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000161AF 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000161B8                            		even
000161B8                            		even
000161B8                            
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            ; Sprite mappings - shield and invincibility stars
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            Map_obj38:
000161B8                            	include "_maps\obj38.asm"
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            ; Sprite mappings - shield and invincibility stars
000161B8                            ; ---------------------------------------------------------------------------
000161B8 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000161BC 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000161C0 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000161C4 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000161C8 04                         byte_143C2:	dc.b 4
000161C9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000161CE E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000161D3 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000161D8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000161DD 04                         byte_143D7:	dc.b 4
000161DE E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000161E3 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000161E8 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000161ED 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000161F2 04                         byte_143EC:	dc.b 4
000161F3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000161F8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000161FD 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016202 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00016207 04                         byte_14401:	dc.b 4
00016208 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001620D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016212 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016217 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001621C 04                         byte_14416:	dc.b 4
0001621D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00016222 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00016227 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0001622C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016231 04                         byte_1442B:	dc.b 4
00016232 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00016237 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0001623C 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00016241 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00016246 04                         byte_14440:	dc.b 4
00016247 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0001624C E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00016251 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00016256 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0001625C 00                         		even
0001625C 00                         		even
0001625C                            
0001625C                            Ani_obj4A:
0001625C                            	include "_anim\obj4A.asm"
0001625C                            ; ---------------------------------------------------------------------------
0001625C                            ; Animation script - special stage entry effect from beta
0001625C                            ; ---------------------------------------------------------------------------
0001625C 0000                       		dc.w byte_14458-Ani_obj4A
0001625E 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00016272                            		even
00016272                            		even
00016272                            
00016272                            ; ---------------------------------------------------------------------------
00016272                            ; Sprite mappings - special stage entry	from beta
00016272                            ; ---------------------------------------------------------------------------
00016272                            Map_obj4A:
00016272                            	include "_maps\obj4A.asm"
00016272                            ; ---------------------------------------------------------------------------
00016272                            ; Sprite mappings - special stage entry	from beta
00016272                            ; ---------------------------------------------------------------------------
00016272 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00016276 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001627A 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
0001627E 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00016282 03                         byte_1447C:	dc.b 3
00016283 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00016288 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001628D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00016292 03                         byte_1448C:	dc.b 3
00016293 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00016298 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001629D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000162A2 05                         byte_1449C:	dc.b 5
000162A3 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000162A8 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000162AD FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000162B2 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000162B7 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000162BC 09                         byte_144B6:	dc.b 9
000162BD F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000162C2 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000162C7 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000162CC 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000162D1 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000162D6 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000162DB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000162E0 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000162E5 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000162EA 12                         byte_144E4:	dc.b $12
000162EB 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000162F0 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000162F5 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000162FA 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000162FF 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00016304 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00016309 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001630E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00016313 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00016318 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001631D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00016322 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00016327 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001632C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00016331 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00016336 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001633B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00016340 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00016345 11                         byte_1453F:	dc.b $11
00016346 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001634B F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00016350 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00016355 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001635A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001635F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00016364 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00016369 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001636E 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00016373 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00016378 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001637D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00016382 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00016387 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001638C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00016391 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00016396 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001639B 09                         byte_14595:	dc.b 9
0001639C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000163A1 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000163A6 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000163AB 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000163B0 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000163B5 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000163BA 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000163BF 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000163C4 04                         		dc.b 4
000163C5 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000163CA                            		even
000163CA                            		even
000163CA                            
000163CA                            Ani_obj08:
000163CA                            	include "_anim\obj08.asm"
000163CA                            ; ---------------------------------------------------------------------------
000163CA                            ; Animation script - water splash (LZ)
000163CA                            ; ---------------------------------------------------------------------------
000163CA 0000                       		dc.w byte_145C6-Ani_obj08
000163CC 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000163D2                            		even
000163D2                            		even
000163D2                            
000163D2                            ; ---------------------------------------------------------------------------
000163D2                            ; Sprite mappings - water splash (LZ)
000163D2                            ; ---------------------------------------------------------------------------
000163D2                            Map_obj08:
000163D2                            	include "_maps\obj08.asm"
000163D2                            ; ---------------------------------------------------------------------------
000163D2                            ; Sprite mappings - water splash (LZ)
000163D2                            ; ---------------------------------------------------------------------------
000163D2 0000                       		dc.w byte_145D2-Map_obj08
000163D4 0000                       		dc.w byte_145DD-Map_obj08
000163D6 0000                       		dc.w byte_145E8-Map_obj08
000163D8 02                         byte_145D2:	dc.b 2
000163D9 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000163DE FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000163E3 02                         byte_145DD:	dc.b 2
000163E4 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000163E9 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000163EE 01                         byte_145E8:	dc.b 1
000163EF E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000163F4                            		even
000163F4                            		even
000163F4                            
000163F4                            ; ---------------------------------------------------------------------------
000163F4                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000163F4                            ; ---------------------------------------------------------------------------
000163F4                            
000163F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163F4                            
000163F4                            
000163F4                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000163F4 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on an object?
000163FA 6700                       		beq.s	loc_14602	; if yes, branch
000163FC 7000                       		moveq	#0,d0
000163FE 11C0 F768                  		move.b	d0,($FFFFF768).w
00016402 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016406 4E75                       		rts	
00016408                            ; ===========================================================================
00016408                            
00016408                            loc_14602:
00016408 7003                       		moveq	#3,d0
0001640A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001640E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016412 1028 0026                  		move.b	$26(a0),d0
00016416 0600 0020                  		addi.b	#$20,d0
0001641A 6A00                       		bpl.s	loc_14624
0001641C 1028 0026                  		move.b	$26(a0),d0
00016420 6A00                       		bpl.s	loc_1461E
00016422 5300                       		subq.b	#1,d0
00016424                            
00016424                            loc_1461E:
00016424 0600 0020                  		addi.b	#$20,d0
00016428 6000                       		bra.s	loc_14630
0001642A                            ; ===========================================================================
0001642A                            
0001642A                            loc_14624:
0001642A 1028 0026                  		move.b	$26(a0),d0
0001642E 6A00                       		bpl.s	loc_1462C
00016430 5200                       		addq.b	#1,d0
00016432                            
00016432                            loc_1462C:
00016432 0600 001F                  		addi.b	#$1F,d0
00016436                            
00016436                            loc_14630:
00016436 0200 00C0                  		andi.b	#$C0,d0
0001643A 0C00 0040                  		cmpi.b	#$40,d0
0001643E 6700 0000                  		beq.w	Sonic_WalkVertL
00016442 0C00 0080                  		cmpi.b	#$80,d0
00016446 6700 0000                  		beq.w	Sonic_WalkCeiling
0001644A 0C00 00C0                  		cmpi.b	#$C0,d0
0001644E 6700 0000                  		beq.w	Sonic_WalkVertR
00016452 3428 000C                  		move.w	$C(a0),d2
00016456 3628 0008                  		move.w	8(a0),d3
0001645A 7000                       		moveq	#0,d0
0001645C 1028 0016                  		move.b	$16(a0),d0
00016460 4880                       		ext.w	d0
00016462 D440                       		add.w	d0,d2
00016464 1028 0017                  		move.b	$17(a0),d0
00016468 4880                       		ext.w	d0
0001646A D640                       		add.w	d0,d3
0001646C 49F8 F768                  		lea	($FFFFF768).w,a4
00016470 367C 0010                  		movea.w	#$10,a3
00016474 3C3C 0000                  		move.w	#0,d6
00016478 7A0D                       		moveq	#$D,d5
0001647A 6100 0000                  		bsr.w	FindFloor
0001647E 3F01                       		move.w	d1,-(sp)
00016480 3428 000C                  		move.w	$C(a0),d2
00016484 3628 0008                  		move.w	8(a0),d3
00016488 7000                       		moveq	#0,d0
0001648A 1028 0016                  		move.b	$16(a0),d0
0001648E 4880                       		ext.w	d0
00016490 D440                       		add.w	d0,d2
00016492 1028 0017                  		move.b	$17(a0),d0
00016496 4880                       		ext.w	d0
00016498 4440                       		neg.w	d0
0001649A D640                       		add.w	d0,d3
0001649C 49F8 F76A                  		lea	($FFFFF76A).w,a4
000164A0 367C 0010                  		movea.w	#$10,a3
000164A4 3C3C 0000                  		move.w	#0,d6
000164A8 7A0D                       		moveq	#$D,d5
000164AA 6100 0000                  		bsr.w	FindFloor
000164AE 301F                       		move.w	(sp)+,d0
000164B0 6100 0000                  		bsr.w	Sonic_Angle
000164B4 4A41                       		tst.w	d1
000164B6 6700                       		beq.s	locret_146BE
000164B8 6A00                       		bpl.s	loc_146C0
000164BA 0C41 FFF2                  		cmpi.w	#-$E,d1
000164BE 6D00                       		blt.s	locret_146E6
000164C0 D368 000C                  		add.w	d1,$C(a0)
000164C4                            
000164C4                            locret_146BE:
000164C4 4E75                       		rts	
000164C6                            ; ===========================================================================
000164C6                            
000164C6                            loc_146C0:
000164C6 0C41 000E                  		cmpi.w	#$E,d1
000164CA 6E00                       		bgt.s	loc_146CC
000164CC                            
000164CC                            loc_146C6:
000164CC D368 000C                  		add.w	d1,$C(a0)
000164D0 4E75                       		rts	
000164D2                            ; ===========================================================================
000164D2                            
000164D2                            loc_146CC:
000164D2 4A28 0038                  		tst.b	$38(a0)
000164D6 66F4                       		bne.s	loc_146C6
000164D8 08E8 0001 0022             		bset	#1,$22(a0)	; set Sonic's in the air flag
000164DE 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
000164E4 117C 0001 001D             		move.b	#1,$1D(a0)	; force animation reset
000164EA 4E75                       		rts
000164EC                            ; ===========================================================================
000164EC                            
000164EC                            locret_146E6:
000164EC 4E75                       		rts	
000164EE                            ; End of function Sonic_AnglePos
000164EE                            
000164EE                            ; ===========================================================================
000164EE 2428 0008                  		move.l	8(a0),d2
000164F2 3028 0010                  		move.w	$10(a0),d0
000164F6 48C0                       		ext.l	d0
000164F8 E180                       		asl.l	#8,d0
000164FA 9480                       		sub.l	d0,d2
000164FC 2142 0008                  		move.l	d2,8(a0)
00016500 303C 0038                  		move.w	#$38,d0
00016504 48C0                       		ext.l	d0
00016506 E180                       		asl.l	#8,d0
00016508 9680                       		sub.l	d0,d3
0001650A 2143 000C                  		move.l	d3,$C(a0)
0001650E 4E75                       		rts	
00016510                            ; ===========================================================================
00016510                            
00016510                            locret_1470A:
00016510 4E75                       		rts	
00016512                            ; ===========================================================================
00016512 2628 000C                  		move.l	$C(a0),d3
00016516 3028 0012                  		move.w	$12(a0),d0
0001651A 0440 0038                  		subi.w	#$38,d0
0001651E 3140 0012                  		move.w	d0,$12(a0)
00016522 48C0                       		ext.l	d0
00016524 E180                       		asl.l	#8,d0
00016526 9680                       		sub.l	d0,d3
00016528 2143 000C                  		move.l	d3,$C(a0)
0001652C 4E75                       		rts	
0001652E 4E75                       		rts	
00016530                            ; ===========================================================================
00016530 2428 0008                  		move.l	8(a0),d2
00016534 2628 000C                  		move.l	$C(a0),d3
00016538 3028 0010                  		move.w	$10(a0),d0
0001653C 48C0                       		ext.l	d0
0001653E E180                       		asl.l	#8,d0
00016540 9480                       		sub.l	d0,d2
00016542 3028 0012                  		move.w	$12(a0),d0
00016546 48C0                       		ext.l	d0
00016548 E180                       		asl.l	#8,d0
0001654A 9680                       		sub.l	d0,d3
0001654C 2142 0008                  		move.l	d2,8(a0)
00016550 2143 000C                  		move.l	d3,$C(a0)
00016554 4E75                       		rts	
00016556                            
00016556                            ; ---------------------------------------------------------------------------
00016556                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016556                            ; ---------------------------------------------------------------------------
00016556                            
00016556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016556                            
00016556                            
00016556                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016556 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001655A B240                       		cmp.w	d0,d1
0001655C 6F00                       		ble.s	loc_1475E
0001655E 1438 F768                  		move.b	($FFFFF768).w,d2
00016562 3200                       		move.w	d0,d1
00016564                            
00016564                            loc_1475E:
00016564 0802 0000                  		btst	#0,d2
00016568 6600                       		bne.s	loc_1476A
0001656A 1142 0026                  		move.b	d2,$26(a0)
0001656E 4E75                       		rts	
00016570                            ; ===========================================================================
00016570                            
00016570                            loc_1476A:
00016570 1428 0026                  		move.b	$26(a0),d2
00016574 0602 0020                  		addi.b	#$20,d2
00016578 0202 00C0                  		andi.b	#$C0,d2
0001657C 1142 0026                  		move.b	d2,$26(a0)
00016580 4E75                       		rts	
00016582                            ; End of function Sonic_Angle
00016582                            
00016582                            ; ---------------------------------------------------------------------------
00016582                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016582                            ; ---------------------------------------------------------------------------
00016582                            
00016582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016582                            
00016582                            
00016582                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016582 3428 000C                  		move.w	$C(a0),d2
00016586 3628 0008                  		move.w	8(a0),d3
0001658A 7000                       		moveq	#0,d0
0001658C 1028 0017                  		move.b	$17(a0),d0
00016590 4880                       		ext.w	d0
00016592 4440                       		neg.w	d0
00016594 D440                       		add.w	d0,d2
00016596 1028 0016                  		move.b	$16(a0),d0
0001659A 4880                       		ext.w	d0
0001659C D640                       		add.w	d0,d3
0001659E 49F8 F768                  		lea	($FFFFF768).w,a4
000165A2 367C 0010                  		movea.w	#$10,a3
000165A6 3C3C 0000                  		move.w	#0,d6
000165AA 7A0D                       		moveq	#$D,d5
000165AC 6100 0000                  		bsr.w	FindWall
000165B0 3F01                       		move.w	d1,-(sp)
000165B2 3428 000C                  		move.w	$C(a0),d2
000165B6 3628 0008                  		move.w	8(a0),d3
000165BA 7000                       		moveq	#0,d0
000165BC 1028 0017                  		move.b	$17(a0),d0
000165C0 4880                       		ext.w	d0
000165C2 D440                       		add.w	d0,d2
000165C4 1028 0016                  		move.b	$16(a0),d0
000165C8 4880                       		ext.w	d0
000165CA D640                       		add.w	d0,d3
000165CC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000165D0 367C 0010                  		movea.w	#$10,a3
000165D4 3C3C 0000                  		move.w	#0,d6
000165D8 7A0D                       		moveq	#$D,d5
000165DA 6100 0000                  		bsr.w	FindWall
000165DE 301F                       		move.w	(sp)+,d0
000165E0 6100 FF74                  		bsr.w	Sonic_Angle
000165E4 4A41                       		tst.w	d1
000165E6 6700                       		beq.s	locret_147F0
000165E8 6A00                       		bpl.s	loc_147F2
000165EA 0C41 FFF2                  		cmpi.w	#-$E,d1
000165EE 6D00 FF20                  		blt.w	locret_1470A
000165F2 D368 0008                  		add.w	d1,8(a0)
000165F6                            
000165F6                            locret_147F0:
000165F6 4E75                       		rts	
000165F8                            ; ===========================================================================
000165F8                            
000165F8                            loc_147F2:
000165F8 0C41 000E                  		cmpi.w	#$E,d1
000165FC 6E00                       		bgt.s	loc_147FE
000165FE                            
000165FE                            loc_147F8:
000165FE D368 0008                  		add.w	d1,8(a0)
00016602 4E75                       		rts	
00016604                            ; ===========================================================================
00016604                            
00016604                            loc_147FE:
00016604 4A28 0038                  		tst.b	$38(a0)
00016608 66F4                       		bne.s	loc_147F8
0001660A 08E8 0001 0022             		bset	#1,$22(a0)
00016610 08A8 0005 0022             		bclr	#5,$22(a0)
00016616 117C 0001 001D             		move.b	#1,$1D(a0)
0001661C 4E75                       		rts	
0001661E                            ; End of function Sonic_WalkVertR
0001661E                            
0001661E                            ; ---------------------------------------------------------------------------
0001661E                            ; Subroutine allowing Sonic to walk upside-down
0001661E                            ; ---------------------------------------------------------------------------
0001661E                            
0001661E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001661E                            
0001661E                            
0001661E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001661E 3428 000C                  		move.w	$C(a0),d2
00016622 3628 0008                  		move.w	8(a0),d3
00016626 7000                       		moveq	#0,d0
00016628 1028 0016                  		move.b	$16(a0),d0
0001662C 4880                       		ext.w	d0
0001662E 9440                       		sub.w	d0,d2
00016630 0A42 000F                  		eori.w	#$F,d2
00016634 1028 0017                  		move.b	$17(a0),d0
00016638 4880                       		ext.w	d0
0001663A D640                       		add.w	d0,d3
0001663C 49F8 F768                  		lea	($FFFFF768).w,a4
00016640 367C FFF0                  		movea.w	#-$10,a3
00016644 3C3C 1000                  		move.w	#$1000,d6
00016648 7A0D                       		moveq	#$D,d5
0001664A 6100 0000                  		bsr.w	FindFloor
0001664E 3F01                       		move.w	d1,-(sp)
00016650 3428 000C                  		move.w	$C(a0),d2
00016654 3628 0008                  		move.w	8(a0),d3
00016658 7000                       		moveq	#0,d0
0001665A 1028 0016                  		move.b	$16(a0),d0
0001665E 4880                       		ext.w	d0
00016660 9440                       		sub.w	d0,d2
00016662 0A42 000F                  		eori.w	#$F,d2
00016666 1028 0017                  		move.b	$17(a0),d0
0001666A 4880                       		ext.w	d0
0001666C 9640                       		sub.w	d0,d3
0001666E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016672 367C FFF0                  		movea.w	#-$10,a3
00016676 3C3C 1000                  		move.w	#$1000,d6
0001667A 7A0D                       		moveq	#$D,d5
0001667C 6100 0000                  		bsr.w	FindFloor
00016680 301F                       		move.w	(sp)+,d0
00016682 6100 FED2                  		bsr.w	Sonic_Angle
00016686 4A41                       		tst.w	d1
00016688 6700                       		beq.s	locret_14892
0001668A 6A00                       		bpl.s	loc_14894
0001668C 0C41 FFF2                  		cmpi.w	#-$E,d1
00016690 6D00 FE5A                  		blt.w	locret_146E6
00016694 9368 000C                  		sub.w	d1,$C(a0)
00016698                            
00016698                            locret_14892:
00016698 4E75                       		rts	
0001669A                            ; ===========================================================================
0001669A                            
0001669A                            loc_14894:
0001669A 0C41 000E                  		cmpi.w	#$E,d1
0001669E 6E00                       		bgt.s	loc_148A0
000166A0                            
000166A0                            loc_1489A:
000166A0 9368 000C                  		sub.w	d1,$C(a0)
000166A4 4E75                       		rts	
000166A6                            ; ===========================================================================
000166A6                            
000166A6                            loc_148A0:
000166A6 4A28 0038                  		tst.b	$38(a0)
000166AA 66F4                       		bne.s	loc_1489A
000166AC 08E8 0001 0022             		bset	#1,$22(a0)
000166B2 08A8 0005 0022             		bclr	#5,$22(a0)
000166B8 117C 0001 001D             		move.b	#1,$1D(a0)
000166BE 4E75                       		rts	
000166C0                            ; End of function Sonic_WalkCeiling
000166C0                            
000166C0                            ; ---------------------------------------------------------------------------
000166C0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000166C0                            ; ---------------------------------------------------------------------------
000166C0                            
000166C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166C0                            
000166C0                            
000166C0                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000166C0 3428 000C                  		move.w	$C(a0),d2
000166C4 3628 0008                  		move.w	8(a0),d3
000166C8 7000                       		moveq	#0,d0
000166CA 1028 0017                  		move.b	$17(a0),d0
000166CE 4880                       		ext.w	d0
000166D0 9440                       		sub.w	d0,d2
000166D2 1028 0016                  		move.b	$16(a0),d0
000166D6 4880                       		ext.w	d0
000166D8 9640                       		sub.w	d0,d3
000166DA 0A43 000F                  		eori.w	#$F,d3
000166DE 49F8 F768                  		lea	($FFFFF768).w,a4
000166E2 367C FFF0                  		movea.w	#-$10,a3
000166E6 3C3C 0800                  		move.w	#$800,d6
000166EA 7A0D                       		moveq	#$D,d5
000166EC 6100 0000                  		bsr.w	FindWall
000166F0 3F01                       		move.w	d1,-(sp)
000166F2 3428 000C                  		move.w	$C(a0),d2
000166F6 3628 0008                  		move.w	8(a0),d3
000166FA 7000                       		moveq	#0,d0
000166FC 1028 0017                  		move.b	$17(a0),d0
00016700 4880                       		ext.w	d0
00016702 D440                       		add.w	d0,d2
00016704 1028 0016                  		move.b	$16(a0),d0
00016708 4880                       		ext.w	d0
0001670A 9640                       		sub.w	d0,d3
0001670C 0A43 000F                  		eori.w	#$F,d3
00016710 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016714 367C FFF0                  		movea.w	#-$10,a3
00016718 3C3C 0800                  		move.w	#$800,d6
0001671C 7A0D                       		moveq	#$D,d5
0001671E 6100 0000                  		bsr.w	FindWall
00016722 301F                       		move.w	(sp)+,d0
00016724 6100 FE30                  		bsr.w	Sonic_Angle
00016728 4A41                       		tst.w	d1
0001672A 6700                       		beq.s	locret_14934
0001672C 6A00                       		bpl.s	loc_14936
0001672E 0C41 FFF2                  		cmpi.w	#-$E,d1
00016732 6D00 FDDC                  		blt.w	locret_1470A
00016736 9368 0008                  		sub.w	d1,8(a0)
0001673A                            
0001673A                            locret_14934:
0001673A 4E75                       		rts	
0001673C                            ; ===========================================================================
0001673C                            
0001673C                            loc_14936:
0001673C 0C41 000E                  		cmpi.w	#$E,d1
00016740 6E00                       		bgt.s	loc_14942
00016742                            
00016742                            loc_1493C:
00016742 9368 0008                  		sub.w	d1,8(a0)
00016746 4E75                       		rts	
00016748                            ; ===========================================================================
00016748                            
00016748                            loc_14942:
00016748 4A28 0038                  		tst.b	$38(a0)
0001674C 66F4                       		bne.s	loc_1493C
0001674E 08E8 0001 0022             		bset	#1,$22(a0)
00016754 08A8 0005 0022             		bclr	#5,$22(a0)
0001675A 117C 0001 001D             		move.b	#1,$1D(a0)
00016760 4E75                       		rts	
00016762                            ; End of function Sonic_WalkVertL
00016762                            
00016762                            ; ---------------------------------------------------------------------------
00016762                            ; Subroutine to	find which tile	the object is standing on
00016762                            ; ---------------------------------------------------------------------------
00016762                            
00016762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016762                            
00016762                            
00016762                            Floor_ChkTile:				; XREF: FindFloor; et al
00016762 3002                       		move.w	d2,d0
00016764 E248                       		lsr.w	#1,d0
00016766 0240 0380                  		andi.w	#$380,d0
0001676A 3203                       		move.w	d3,d1
0001676C E049                       		lsr.w	#8,d1
0001676E 0241 007F                  		andi.w	#$7F,d1
00016772 D041                       		add.w	d1,d0
00016774 72FF                       		moveq	#-1,d1
00016776 43F8 A400                  		lea	($FFFFA400).w,a1
0001677A 1231 0000                  		move.b	(a1,d0.w),d1
0001677E 6700                       		beq.s	loc_14996
00016780 6B00                       		bmi.s	loc_1499A
00016782 5301                       		subq.b	#1,d1
00016784 4881                       		ext.w	d1
00016786 EE59                       		ror.w	#7,d1
00016788 3002                       		move.w	d2,d0
0001678A D040                       		add.w	d0,d0
0001678C 0240 01E0                  		andi.w	#$1E0,d0
00016790 D240                       		add.w	d0,d1
00016792 3003                       		move.w	d3,d0
00016794 E648                       		lsr.w	#3,d0
00016796 0240 001E                  		andi.w	#$1E,d0
0001679A D240                       		add.w	d0,d1
0001679C                            
0001679C                            loc_14996:
0001679C 2241                       		movea.l	d1,a1
0001679E 4E75                       		rts	
000167A0                            ; ===========================================================================
000167A0                            
000167A0                            loc_1499A:
000167A0 0241 007F                  		andi.w	#$7F,d1
000167A4 0828 0006 0001             		btst	#6,1(a0)
000167AA 6700                       		beq.s	loc_149B2
000167AC 5241                       		addq.w	#1,d1
000167AE 0C41 0029                  		cmpi.w	#$29,d1
000167B2 6600                       		bne.s	loc_149B2
000167B4 323C 0051                  		move.w	#$51,d1
000167B8                            
000167B8                            loc_149B2:
000167B8 5301                       		subq.b	#1,d1
000167BA EE59                       		ror.w	#7,d1
000167BC 3002                       		move.w	d2,d0
000167BE D040                       		add.w	d0,d0
000167C0 0240 01E0                  		andi.w	#$1E0,d0
000167C4 D240                       		add.w	d0,d1
000167C6 3003                       		move.w	d3,d0
000167C8 E648                       		lsr.w	#3,d0
000167CA 0240 001E                  		andi.w	#$1E,d0
000167CE D240                       		add.w	d0,d1
000167D0 2241                       		movea.l	d1,a1
000167D2 4E75                       		rts	
000167D4                            ; End of function Floor_ChkTile
000167D4                            
000167D4                            
000167D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167D4                            
000167D4                            
000167D4                            FindFloor:				; XREF: Sonic_AnglePos; et al
000167D4 618C                       		bsr.s	Floor_ChkTile
000167D6 3011                       		move.w	(a1),d0
000167D8 3800                       		move.w	d0,d4
000167DA 0240 07FF                  		andi.w	#$7FF,d0
000167DE 6700                       		beq.s	loc_149DE
000167E0 0B04                       		btst	d5,d4
000167E2 6600                       		bne.s	loc_149EC
000167E4                            
000167E4                            loc_149DE:
000167E4 D44B                       		add.w	a3,d2
000167E6 6100 0000                  		bsr.w	FindFloor2
000167EA 944B                       		sub.w	a3,d2
000167EC 0641 0010                  		addi.w	#$10,d1
000167F0 4E75                       		rts	
000167F2                            ; ===========================================================================
000167F2                            
000167F2                            loc_149EC:
000167F2 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000167F6 1032 0000                  		move.b	(a2,d0.w),d0
000167FA 0240 00FF                  		andi.w	#$FF,d0
000167FE 67E4                       		beq.s	loc_149DE
00016800 45F9 0000 0000             		lea	(AngleMap).l,a2
00016806 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001680A E948                       		lsl.w	#4,d0
0001680C 3203                       		move.w	d3,d1
0001680E 0804 000B                  		btst	#$B,d4
00016812 6700                       		beq.s	loc_14A12
00016814 4641                       		not.w	d1
00016816 4414                       		neg.b	(a4)
00016818                            
00016818                            loc_14A12:
00016818 0804 000C                  		btst	#$C,d4
0001681C 6700                       		beq.s	loc_14A22
0001681E 0614 0040                  		addi.b	#$40,(a4)
00016822 4414                       		neg.b	(a4)
00016824 0414 0040                  		subi.b	#$40,(a4)
00016828                            
00016828                            loc_14A22:
00016828 0241 000F                  		andi.w	#$F,d1
0001682C D240                       		add.w	d0,d1
0001682E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016834 1032 1000                  		move.b	(a2,d1.w),d0
00016838 4880                       		ext.w	d0
0001683A BD44                       		eor.w	d6,d4
0001683C 0804 000C                  		btst	#$C,d4
00016840 6700                       		beq.s	loc_14A3E
00016842 4440                       		neg.w	d0
00016844                            
00016844                            loc_14A3E:
00016844 4A40                       		tst.w	d0
00016846 679C                       		beq.s	loc_149DE
00016848 6B00                       		bmi.s	loc_14A5A
0001684A 0C00 0010                  		cmpi.b	#$10,d0
0001684E 6700                       		beq.s	loc_14A66
00016850 3202                       		move.w	d2,d1
00016852 0241 000F                  		andi.w	#$F,d1
00016856 D041                       		add.w	d1,d0
00016858 323C 000F                  		move.w	#$F,d1
0001685C 9240                       		sub.w	d0,d1
0001685E 4E75                       		rts	
00016860                            ; ===========================================================================
00016860                            
00016860                            loc_14A5A:
00016860 3202                       		move.w	d2,d1
00016862 0241 000F                  		andi.w	#$F,d1
00016866 D041                       		add.w	d1,d0
00016868 6A00 FF7A                  		bpl.w	loc_149DE
0001686C                            
0001686C                            loc_14A66:
0001686C 944B                       		sub.w	a3,d2
0001686E 6100 0000                  		bsr.w	FindFloor2
00016872 D44B                       		add.w	a3,d2
00016874 0441 0010                  		subi.w	#$10,d1
00016878 4E75                       		rts	
0001687A                            ; End of function FindFloor
0001687A                            
0001687A                            
0001687A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001687A                            
0001687A                            
0001687A                            FindFloor2:				; XREF: FindFloor
0001687A 6100 FEE6                  		bsr.w	Floor_ChkTile
0001687E 3011                       		move.w	(a1),d0
00016880 3800                       		move.w	d0,d4
00016882 0240 07FF                  		andi.w	#$7FF,d0
00016886 6700                       		beq.s	loc_14A86
00016888 0B04                       		btst	d5,d4
0001688A 6600                       		bne.s	loc_14A94
0001688C                            
0001688C                            loc_14A86:
0001688C 323C 000F                  		move.w	#$F,d1
00016890 3002                       		move.w	d2,d0
00016892 0240 000F                  		andi.w	#$F,d0
00016896 9240                       		sub.w	d0,d1
00016898 4E75                       		rts	
0001689A                            ; ===========================================================================
0001689A                            
0001689A                            loc_14A94:
0001689A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001689E 1032 0000                  		move.b	(a2,d0.w),d0
000168A2 0240 00FF                  		andi.w	#$FF,d0
000168A6 67E4                       		beq.s	loc_14A86
000168A8 45F9 0000 0000             		lea	(AngleMap).l,a2
000168AE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000168B2 E948                       		lsl.w	#4,d0
000168B4 3203                       		move.w	d3,d1
000168B6 0804 000B                  		btst	#$B,d4
000168BA 6700                       		beq.s	loc_14ABA
000168BC 4641                       		not.w	d1
000168BE 4414                       		neg.b	(a4)
000168C0                            
000168C0                            loc_14ABA:
000168C0 0804 000C                  		btst	#$C,d4
000168C4 6700                       		beq.s	loc_14ACA
000168C6 0614 0040                  		addi.b	#$40,(a4)
000168CA 4414                       		neg.b	(a4)
000168CC 0414 0040                  		subi.b	#$40,(a4)
000168D0                            
000168D0                            loc_14ACA:
000168D0 0241 000F                  		andi.w	#$F,d1
000168D4 D240                       		add.w	d0,d1
000168D6 45F9 0000 0000             		lea	(CollArray1).l,a2
000168DC 1032 1000                  		move.b	(a2,d1.w),d0
000168E0 4880                       		ext.w	d0
000168E2 BD44                       		eor.w	d6,d4
000168E4 0804 000C                  		btst	#$C,d4
000168E8 6700                       		beq.s	loc_14AE6
000168EA 4440                       		neg.w	d0
000168EC                            
000168EC                            loc_14AE6:
000168EC 4A40                       		tst.w	d0
000168EE 679C                       		beq.s	loc_14A86
000168F0 6B00                       		bmi.s	loc_14AFC
000168F2 3202                       		move.w	d2,d1
000168F4 0241 000F                  		andi.w	#$F,d1
000168F8 D041                       		add.w	d1,d0
000168FA 323C 000F                  		move.w	#$F,d1
000168FE 9240                       		sub.w	d0,d1
00016900 4E75                       		rts	
00016902                            ; ===========================================================================
00016902                            
00016902                            loc_14AFC:
00016902 3202                       		move.w	d2,d1
00016904 0241 000F                  		andi.w	#$F,d1
00016908 D041                       		add.w	d1,d0
0001690A 6A00 FF80                  		bpl.w	loc_14A86
0001690E 4641                       		not.w	d1
00016910 4E75                       		rts	
00016912                            ; End of function FindFloor2
00016912                            
00016912                            
00016912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016912                            
00016912                            
00016912                            FindWall:				; XREF: Sonic_WalkVertR; et al
00016912 6100 FE4E                  		bsr.w	Floor_ChkTile
00016916 3011                       		move.w	(a1),d0
00016918 3800                       		move.w	d0,d4
0001691A 0240 07FF                  		andi.w	#$7FF,d0
0001691E 6700                       		beq.s	loc_14B1E
00016920 0B04                       		btst	d5,d4
00016922 6600                       		bne.s	loc_14B2C
00016924                            
00016924                            loc_14B1E:
00016924 D64B                       		add.w	a3,d3
00016926 6100 0000                  		bsr.w	FindWall2
0001692A 964B                       		sub.w	a3,d3
0001692C 0641 0010                  		addi.w	#$10,d1
00016930 4E75                       		rts	
00016932                            ; ===========================================================================
00016932                            
00016932                            loc_14B2C:
00016932 2478 F796                  		movea.l	($FFFFF796).w,a2
00016936 1032 0000                  		move.b	(a2,d0.w),d0
0001693A 0240 00FF                  		andi.w	#$FF,d0
0001693E 67E4                       		beq.s	loc_14B1E
00016940 45F9 0000 0000             		lea	(AngleMap).l,a2
00016946 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001694A E948                       		lsl.w	#4,d0
0001694C 3202                       		move.w	d2,d1
0001694E 0804 000C                  		btst	#$C,d4
00016952 6700                       		beq.s	loc_14B5A
00016954 4641                       		not.w	d1
00016956 0614 0040                  		addi.b	#$40,(a4)
0001695A 4414                       		neg.b	(a4)
0001695C 0414 0040                  		subi.b	#$40,(a4)
00016960                            
00016960                            loc_14B5A:
00016960 0804 000B                  		btst	#$B,d4
00016964 6700                       		beq.s	loc_14B62
00016966 4414                       		neg.b	(a4)
00016968                            
00016968                            loc_14B62:
00016968 0241 000F                  		andi.w	#$F,d1
0001696C D240                       		add.w	d0,d1
0001696E 45F9 0000 0000             		lea	(CollArray2).l,a2
00016974 1032 1000                  		move.b	(a2,d1.w),d0
00016978 4880                       		ext.w	d0
0001697A BD44                       		eor.w	d6,d4
0001697C 0804 000B                  		btst	#$B,d4
00016980 6700                       		beq.s	loc_14B7E
00016982 4440                       		neg.w	d0
00016984                            
00016984                            loc_14B7E:
00016984 4A40                       		tst.w	d0
00016986 679C                       		beq.s	loc_14B1E
00016988 6B00                       		bmi.s	loc_14B9A
0001698A 0C00 0010                  		cmpi.b	#$10,d0
0001698E 6700                       		beq.s	loc_14BA6
00016990 3203                       		move.w	d3,d1
00016992 0241 000F                  		andi.w	#$F,d1
00016996 D041                       		add.w	d1,d0
00016998 323C 000F                  		move.w	#$F,d1
0001699C 9240                       		sub.w	d0,d1
0001699E 4E75                       		rts	
000169A0                            ; ===========================================================================
000169A0                            
000169A0                            loc_14B9A:
000169A0 3203                       		move.w	d3,d1
000169A2 0241 000F                  		andi.w	#$F,d1
000169A6 D041                       		add.w	d1,d0
000169A8 6A00 FF7A                  		bpl.w	loc_14B1E
000169AC                            
000169AC                            loc_14BA6:
000169AC 964B                       		sub.w	a3,d3
000169AE 6100 0000                  		bsr.w	FindWall2
000169B2 D64B                       		add.w	a3,d3
000169B4 0441 0010                  		subi.w	#$10,d1
000169B8 4E75                       		rts	
000169BA                            ; End of function FindWall
000169BA                            
000169BA                            
000169BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169BA                            
000169BA                            
000169BA                            FindWall2:				; XREF: FindWall
000169BA 6100 FDA6                  		bsr.w	Floor_ChkTile
000169BE 3011                       		move.w	(a1),d0
000169C0 3800                       		move.w	d0,d4
000169C2 0240 07FF                  		andi.w	#$7FF,d0
000169C6 6700                       		beq.s	loc_14BC6
000169C8 0B04                       		btst	d5,d4
000169CA 6600                       		bne.s	loc_14BD4
000169CC                            
000169CC                            loc_14BC6:
000169CC 323C 000F                  		move.w	#$F,d1
000169D0 3003                       		move.w	d3,d0
000169D2 0240 000F                  		andi.w	#$F,d0
000169D6 9240                       		sub.w	d0,d1
000169D8 4E75                       		rts	
000169DA                            ; ===========================================================================
000169DA                            
000169DA                            loc_14BD4:
000169DA 2478 F796                  		movea.l	($FFFFF796).w,a2
000169DE 1032 0000                  		move.b	(a2,d0.w),d0
000169E2 0240 00FF                  		andi.w	#$FF,d0
000169E6 67E4                       		beq.s	loc_14BC6
000169E8 45F9 0000 0000             		lea	(AngleMap).l,a2
000169EE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000169F2 E948                       		lsl.w	#4,d0
000169F4 3202                       		move.w	d2,d1
000169F6 0804 000C                  		btst	#$C,d4
000169FA 6700                       		beq.s	loc_14C02
000169FC 4641                       		not.w	d1
000169FE 0614 0040                  		addi.b	#$40,(a4)
00016A02 4414                       		neg.b	(a4)
00016A04 0414 0040                  		subi.b	#$40,(a4)
00016A08                            
00016A08                            loc_14C02:
00016A08 0804 000B                  		btst	#$B,d4
00016A0C 6700                       		beq.s	loc_14C0A
00016A0E 4414                       		neg.b	(a4)
00016A10                            
00016A10                            loc_14C0A:
00016A10 0241 000F                  		andi.w	#$F,d1
00016A14 D240                       		add.w	d0,d1
00016A16 45F9 0000 0000             		lea	(CollArray2).l,a2
00016A1C 1032 1000                  		move.b	(a2,d1.w),d0
00016A20 4880                       		ext.w	d0
00016A22 BD44                       		eor.w	d6,d4
00016A24 0804 000B                  		btst	#$B,d4
00016A28 6700                       		beq.s	loc_14C26
00016A2A 4440                       		neg.w	d0
00016A2C                            
00016A2C                            loc_14C26:
00016A2C 4A40                       		tst.w	d0
00016A2E 679C                       		beq.s	loc_14BC6
00016A30 6B00                       		bmi.s	loc_14C3C
00016A32 3203                       		move.w	d3,d1
00016A34 0241 000F                  		andi.w	#$F,d1
00016A38 D041                       		add.w	d1,d0
00016A3A 323C 000F                  		move.w	#$F,d1
00016A3E 9240                       		sub.w	d0,d1
00016A40 4E75                       		rts	
00016A42                            ; ===========================================================================
00016A42                            
00016A42                            loc_14C3C:
00016A42 3203                       		move.w	d3,d1
00016A44 0241 000F                  		andi.w	#$F,d1
00016A48 D041                       		add.w	d1,d0
00016A4A 6A00 FF80                  		bpl.w	loc_14BC6
00016A4E 4641                       		not.w	d1
00016A50 4E75                       		rts	
00016A52                            ; End of function FindWall2
00016A52                            
00016A52                            ; ---------------------------------------------------------------------------
00016A52                            ; Unused floor/wall subroutine - logs something	to do with collision
00016A52                            ; ---------------------------------------------------------------------------
00016A52                            
00016A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A52                            
00016A52                            
00016A52                            FloorLog_Unk:				; XREF: Level
00016A52 4E75                       		rts	
00016A54                            
00016A54 43F9 0000 0000             		lea	(CollArray1).l,a1
00016A5A 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A60 363C 00FF                  		move.w	#$FF,d3
00016A64                            
00016A64                            loc_14C5E:
00016A64 7A10                       		moveq	#$10,d5
00016A66 343C 000F                  		move.w	#$F,d2
00016A6A                            
00016A6A                            loc_14C64:
00016A6A 7800                       		moveq	#0,d4
00016A6C 323C 000F                  		move.w	#$F,d1
00016A70                            
00016A70                            loc_14C6A:
00016A70 3019                       		move.w	(a1)+,d0
00016A72 EAA8                       		lsr.l	d5,d0
00016A74 D944                       		addx.w	d4,d4
00016A76 51C9 FFF8                  		dbf	d1,loc_14C6A
00016A7A                            
00016A7A 34C4                       		move.w	d4,(a2)+
00016A7C 92FC 0020                  		suba.w	#$20,a1
00016A80 5345                       		subq.w	#1,d5
00016A82 51CA FFE6                  		dbf	d2,loc_14C64
00016A86                            
00016A86 D2FC 0020                  		adda.w	#$20,a1
00016A8A 51CB FFD8                  		dbf	d3,loc_14C5E
00016A8E                            
00016A8E 43F9 0000 0000             		lea	(CollArray1).l,a1
00016A94 45F9 0000 0000             		lea	(CollArray2).l,a2
00016A9A 6100                       		bsr.s	FloorLog_Unk2
00016A9C 43F9 0000 0000             		lea	(CollArray1).l,a1
00016AA2 45F9 0000 0000             		lea	(CollArray1).l,a2
00016AA8                            
00016AA8                            ; End of function FloorLog_Unk
00016AA8                            
00016AA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AA8                            
00016AA8                            
00016AA8                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016AA8 363C 0FFF                  		move.w	#$FFF,d3
00016AAC                            
00016AAC                            loc_14CA6:
00016AAC 7400                       		moveq	#0,d2
00016AAE 323C 000F                  		move.w	#$F,d1
00016AB2 3019                       		move.w	(a1)+,d0
00016AB4 6700                       		beq.s	loc_14CD4
00016AB6 6B00                       		bmi.s	loc_14CBE
00016AB8                            
00016AB8                            loc_14CB2:
00016AB8 E248                       		lsr.w	#1,d0
00016ABA 6400                       		bcc.s	loc_14CB8
00016ABC 5202                       		addq.b	#1,d2
00016ABE                            
00016ABE                            loc_14CB8:
00016ABE 51C9 FFF8                  		dbf	d1,loc_14CB2
00016AC2                            
00016AC2 6000                       		bra.s	loc_14CD6
00016AC4                            ; ===========================================================================
00016AC4                            
00016AC4                            loc_14CBE:
00016AC4 0C40 FFFF                  		cmpi.w	#-1,d0
00016AC8 6700                       		beq.s	loc_14CD0
00016ACA                            
00016ACA                            loc_14CC4:
00016ACA E348                       		lsl.w	#1,d0
00016ACC 6400                       		bcc.s	loc_14CCA
00016ACE 5302                       		subq.b	#1,d2
00016AD0                            
00016AD0                            loc_14CCA:
00016AD0 51C9 FFF8                  		dbf	d1,loc_14CC4
00016AD4                            
00016AD4 6000                       		bra.s	loc_14CD6
00016AD6                            ; ===========================================================================
00016AD6                            
00016AD6                            loc_14CD0:
00016AD6 303C 0010                  		move.w	#$10,d0
00016ADA                            
00016ADA                            loc_14CD4:
00016ADA 3400                       		move.w	d0,d2
00016ADC                            
00016ADC                            loc_14CD6:
00016ADC 14C2                       		move.b	d2,(a2)+
00016ADE 51CB FFCC                  		dbf	d3,loc_14CA6
00016AE2                            
00016AE2 4E75                       		rts	
00016AE4                            
00016AE4                            ; End of function FloorLog_Unk2
00016AE4                            
00016AE4                            
00016AE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AE4                            
00016AE4                            
00016AE4                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016AE4 2628 0008                  		move.l	8(a0),d3
00016AE8 2428 000C                  		move.l	$C(a0),d2
00016AEC 3228 0010                  		move.w	$10(a0),d1
00016AF0 48C1                       		ext.l	d1
00016AF2 E181                       		asl.l	#8,d1
00016AF4 D681                       		add.l	d1,d3
00016AF6 3228 0012                  		move.w	$12(a0),d1
00016AFA 48C1                       		ext.l	d1
00016AFC E181                       		asl.l	#8,d1
00016AFE D481                       		add.l	d1,d2
00016B00 4842                       		swap	d2
00016B02 4843                       		swap	d3
00016B04 11C0 F768                  		move.b	d0,($FFFFF768).w
00016B08 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016B0C 1200                       		move.b	d0,d1
00016B0E 0600 0020                  		addi.b	#$20,d0
00016B12 6A00                       		bpl.s	loc_14D1A
00016B14 1001                       		move.b	d1,d0
00016B16 6A00                       		bpl.s	loc_14D14
00016B18 5300                       		subq.b	#1,d0
00016B1A                            
00016B1A                            loc_14D14:
00016B1A 0600 0020                  		addi.b	#$20,d0
00016B1E 6000                       		bra.s	loc_14D24
00016B20                            ; ===========================================================================
00016B20                            
00016B20                            loc_14D1A:
00016B20 1001                       		move.b	d1,d0
00016B22 6A00                       		bpl.s	loc_14D20
00016B24 5200                       		addq.b	#1,d0
00016B26                            
00016B26                            loc_14D20:
00016B26 0600 001F                  		addi.b	#$1F,d0
00016B2A                            
00016B2A                            loc_14D24:
00016B2A 0200 00C0                  		andi.b	#$C0,d0
00016B2E 6700 0000                  		beq.w	loc_14DF0
00016B32 0C00 0080                  		cmpi.b	#$80,d0
00016B36 6700 0000                  		beq.w	loc_14F7C
00016B3A 0201 0038                  		andi.b	#$38,d1
00016B3E 6600                       		bne.s	loc_14D3C
00016B40 5042                       		addq.w	#8,d2
00016B42                            
00016B42                            loc_14D3C:
00016B42 0C00 0040                  		cmpi.b	#$40,d0
00016B46 6700 0000                  		beq.w	loc_1504A
00016B4A 6000 0000                  		bra.w	loc_14EBC
00016B4E                            
00016B4E                            ; End of function Sonic_WalkSpeed
00016B4E                            
00016B4E                            
00016B4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B4E                            
00016B4E                            
00016B4E                            sub_14D48:				; XREF: Sonic_Jump
00016B4E 11C0 F768                  		move.b	d0,($FFFFF768).w
00016B52 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016B56 0600 0020                  		addi.b	#$20,d0
00016B5A 0200 00C0                  		andi.b	#$C0,d0
00016B5E 0C00 0040                  		cmpi.b	#$40,d0
00016B62 6700 0000                  		beq.w	loc_14FD6
00016B66 0C00 0080                  		cmpi.b	#$80,d0
00016B6A 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016B6E 0C00 00C0                  		cmpi.b	#$C0,d0
00016B72 6700 0000                  		beq.w	sub_14E50
00016B76                            
00016B76                            ; End of function sub_14D48
00016B76                            
00016B76                            ; ---------------------------------------------------------------------------
00016B76                            ; Subroutine to	make Sonic land	on the floor after jumping
00016B76                            ; ---------------------------------------------------------------------------
00016B76                            
00016B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B76                            
00016B76                            
00016B76                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016B76 3428 000C                  		move.w	$C(a0),d2	; load Sonic's Y-position
00016B7A 3628 0008                  		move.w	8(a0),d3	; load Sonic's X-postion
00016B7E 7000                       		moveq	#0,d0
00016B80 1028 0016                  		move.b	$16(a0),d0	; load Sonic's height
00016B84 4880                       		ext.w	d0
00016B86 D440                       		add.w	d0,d2		; add height to Y-position
00016B88 1028 0017                  		move.b	$17(a0),d0	; load Sonic's width
00016B8C 4880                       		ext.w	d0
00016B8E D640                       		add.w	d0,d3		; add width to X-postion
00016B90 49F8 F768                  		lea	($FFFFF768).w,a4
00016B94 367C 0010                  		movea.w	#$10,a3
00016B98 3C3C 0000                  		move.w	#0,d6
00016B9C 7A0D                       		moveq	#$D,d5
00016B9E 6100 FC34                  		bsr.w	FindFloor
00016BA2 3F01                       		move.w	d1,-(sp)
00016BA4 3428 000C                  		move.w	$C(a0),d2
00016BA8 3628 0008                  		move.w	8(a0),d3
00016BAC 7000                       		moveq	#0,d0
00016BAE 1028 0016                  		move.b	$16(a0),d0
00016BB2 4880                       		ext.w	d0
00016BB4 D440                       		add.w	d0,d2
00016BB6 1028 0017                  		move.b	$17(a0),d0
00016BBA 4880                       		ext.w	d0
00016BBC 9640                       		sub.w	d0,d3
00016BBE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016BC2 367C 0010                  		movea.w	#$10,a3
00016BC6 3C3C 0000                  		move.w	#0,d6
00016BCA 7A0D                       		moveq	#$D,d5
00016BCC 6100 FC06                  		bsr.w	FindFloor
00016BD0 301F                       		move.w	(sp)+,d0
00016BD2 143C 0000                  		move.b	#0,d2
00016BD6                            
00016BD6                            loc_14DD0:
00016BD6 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016BDA B240                       		cmp.w	d0,d1
00016BDC 6F00                       		ble.s	loc_14DDE
00016BDE 1638 F768                  		move.b	($FFFFF768).w,d3
00016BE2 C141                       		exg	d0,d1
00016BE4                            
00016BE4                            loc_14DDE:
00016BE4 0803 0000                  		btst	#0,d3
00016BE8 6700                       		beq.s	locret_14DE6
00016BEA 1602                       		move.b	d2,d3
00016BEC                            
00016BEC                            locret_14DE6:
00016BEC 4E75                       		rts	
00016BEE                            
00016BEE                            ; End of function Sonic_HitFloor
00016BEE                            
00016BEE                            ; ===========================================================================
00016BEE 3428 000C                  		move.w	$C(a0),d2
00016BF2 3628 0008                  		move.w	8(a0),d3
00016BF6                            
00016BF6                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016BF6 0642 000A                  		addi.w	#$A,d2
00016BFA 49F8 F768                  		lea	($FFFFF768).w,a4
00016BFE 367C 0010                  		movea.w	#$10,a3
00016C02 3C3C 0000                  		move.w	#0,d6
00016C06 7A0E                       		moveq	#$E,d5
00016C08 6100 FBCA                  		bsr.w	FindFloor
00016C0C 143C 0000                  		move.b	#0,d2
00016C10                            
00016C10                            loc_14E0A:				; XREF: sub_14EB4
00016C10 1638 F768                  		move.b	($FFFFF768).w,d3
00016C14 0803 0000                  		btst	#0,d3
00016C18 6700                       		beq.s	locret_14E16
00016C1A 1602                       		move.b	d2,d3
00016C1C                            
00016C1C                            locret_14E16:
00016C1C 4E75                       		rts	
00016C1E                            
00016C1E                            ; ---------------------------------------------------------------------------
00016C1E                            ; Subroutine allowing objects to interact with the floor
00016C1E                            ; ---------------------------------------------------------------------------
00016C1E                            
00016C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C1E                            
00016C1E                            
00016C1E                            ObjHitFloor:
00016C1E 3628 0008                  		move.w	8(a0),d3
00016C22                            
00016C22                            ObjHitFloor2:
00016C22 3428 000C                  		move.w	$C(a0),d2
00016C26 7000                       		moveq	#0,d0
00016C28 1028 0016                  		move.b	$16(a0),d0
00016C2C 4880                       		ext.w	d0
00016C2E D440                       		add.w	d0,d2
00016C30 49F8 F768                  		lea	($FFFFF768).w,a4
00016C34 18BC 0000                  		move.b	#0,(a4)
00016C38 367C 0010                  		movea.w	#$10,a3
00016C3C 3C3C 0000                  		move.w	#0,d6
00016C40 7A0D                       		moveq	#$D,d5
00016C42 6100 FB90                  		bsr.w	FindFloor
00016C46 1638 F768                  		move.b	($FFFFF768).w,d3
00016C4A 0803 0000                  		btst	#0,d3
00016C4E 6700                       		beq.s	locret_14E4E
00016C50 163C 0000                  		move.b	#0,d3
00016C54                            
00016C54                            locret_14E4E:
00016C54 4E75                       		rts	
00016C56                            ; End of function ObjHitFloor2
00016C56                            
00016C56                            
00016C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C56                            
00016C56                            
00016C56                            sub_14E50:				; XREF: sub_14D48
00016C56 3428 000C                  		move.w	$C(a0),d2
00016C5A 3628 0008                  		move.w	8(a0),d3
00016C5E 7000                       		moveq	#0,d0
00016C60 1028 0017                  		move.b	$17(a0),d0
00016C64 4880                       		ext.w	d0
00016C66 9440                       		sub.w	d0,d2
00016C68 1028 0016                  		move.b	$16(a0),d0
00016C6C 4880                       		ext.w	d0
00016C6E D640                       		add.w	d0,d3
00016C70 49F8 F768                  		lea	($FFFFF768).w,a4
00016C74 367C 0010                  		movea.w	#$10,a3
00016C78 3C3C 0000                  		move.w	#0,d6
00016C7C 7A0E                       		moveq	#$E,d5
00016C7E 6100 FC92                  		bsr.w	FindWall
00016C82 3F01                       		move.w	d1,-(sp)
00016C84 3428 000C                  		move.w	$C(a0),d2
00016C88 3628 0008                  		move.w	8(a0),d3
00016C8C 7000                       		moveq	#0,d0
00016C8E 1028 0017                  		move.b	$17(a0),d0
00016C92 4880                       		ext.w	d0
00016C94 D440                       		add.w	d0,d2
00016C96 1028 0016                  		move.b	$16(a0),d0
00016C9A 4880                       		ext.w	d0
00016C9C D640                       		add.w	d0,d3
00016C9E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016CA2 367C 0010                  		movea.w	#$10,a3
00016CA6 3C3C 0000                  		move.w	#0,d6
00016CAA 7A0E                       		moveq	#$E,d5
00016CAC 6100 FC64                  		bsr.w	FindWall
00016CB0 301F                       		move.w	(sp)+,d0
00016CB2 143C 00C0                  		move.b	#-$40,d2
00016CB6 6000 FF1E                  		bra.w	loc_14DD0
00016CBA                            
00016CBA                            ; End of function sub_14E50
00016CBA                            
00016CBA                            
00016CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CBA                            
00016CBA                            
00016CBA                            sub_14EB4:				; XREF: Sonic_Floor
00016CBA 3428 000C                  		move.w	$C(a0),d2
00016CBE 3628 0008                  		move.w	8(a0),d3
00016CC2                            
00016CC2                            loc_14EBC:
00016CC2 0643 000A                  		addi.w	#$A,d3
00016CC6 49F8 F768                  		lea	($FFFFF768).w,a4
00016CCA 367C 0010                  		movea.w	#$10,a3
00016CCE 3C3C 0000                  		move.w	#0,d6
00016CD2 7A0E                       		moveq	#$E,d5
00016CD4 6100 FC3C                  		bsr.w	FindWall
00016CD8 143C 00C0                  		move.b	#-$40,d2
00016CDC 6000 FF32                  		bra.w	loc_14E0A
00016CE0                            
00016CE0                            ; End of function sub_14EB4
00016CE0                            
00016CE0                            ; ---------------------------------------------------------------------------
00016CE0                            ; Subroutine to	detect when an object hits a wall to its right
00016CE0                            ; ---------------------------------------------------------------------------
00016CE0                            
00016CE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CE0                            
00016CE0                            
00016CE0                            ObjHitWallRight:
00016CE0 D668 0008                  		add.w	8(a0),d3
00016CE4 3428 000C                  		move.w	$C(a0),d2
00016CE8 49F8 F768                  		lea	($FFFFF768).w,a4
00016CEC 18BC 0000                  		move.b	#0,(a4)
00016CF0 367C 0010                  		movea.w	#$10,a3
00016CF4 3C3C 0000                  		move.w	#0,d6
00016CF8 7A0E                       		moveq	#$E,d5
00016CFA 6100 FC16                  		bsr.w	FindWall
00016CFE 1638 F768                  		move.b	($FFFFF768).w,d3
00016D02 0803 0000                  		btst	#0,d3
00016D06 6700                       		beq.s	locret_14F06
00016D08 163C 00C0                  		move.b	#-$40,d3
00016D0C                            
00016D0C                            locret_14F06:
00016D0C 4E75                       		rts	
00016D0E                            
00016D0E                            ; End of function ObjHitWallRight
00016D0E                            
00016D0E                            ; ---------------------------------------------------------------------------
00016D0E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016D0E                            ; touches them
00016D0E                            ; ---------------------------------------------------------------------------
00016D0E                            
00016D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D0E                            
00016D0E                            
00016D0E                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016D0E 3428 000C                  		move.w	$C(a0),d2
00016D12 3628 0008                  		move.w	8(a0),d3
00016D16 7000                       		moveq	#0,d0
00016D18 1028 0016                  		move.b	$16(a0),d0
00016D1C 4880                       		ext.w	d0
00016D1E 9440                       		sub.w	d0,d2
00016D20 0A42 000F                  		eori.w	#$F,d2
00016D24 1028 0017                  		move.b	$17(a0),d0
00016D28 4880                       		ext.w	d0
00016D2A D640                       		add.w	d0,d3
00016D2C 49F8 F768                  		lea	($FFFFF768).w,a4
00016D30 367C FFF0                  		movea.w	#-$10,a3
00016D34 3C3C 1000                  		move.w	#$1000,d6
00016D38 7A0E                       		moveq	#$E,d5
00016D3A 6100 FA98                  		bsr.w	FindFloor
00016D3E 3F01                       		move.w	d1,-(sp)
00016D40 3428 000C                  		move.w	$C(a0),d2
00016D44 3628 0008                  		move.w	8(a0),d3
00016D48 7000                       		moveq	#0,d0
00016D4A 1028 0016                  		move.b	$16(a0),d0
00016D4E 4880                       		ext.w	d0
00016D50 9440                       		sub.w	d0,d2
00016D52 0A42 000F                  		eori.w	#$F,d2
00016D56 1028 0017                  		move.b	$17(a0),d0
00016D5A 4880                       		ext.w	d0
00016D5C 9640                       		sub.w	d0,d3
00016D5E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016D62 367C FFF0                  		movea.w	#-$10,a3
00016D66 3C3C 1000                  		move.w	#$1000,d6
00016D6A 7A0E                       		moveq	#$E,d5
00016D6C 6100 FA66                  		bsr.w	FindFloor
00016D70 301F                       		move.w	(sp)+,d0
00016D72 143C 0080                  		move.b	#-$80,d2
00016D76 6000 FE5E                  		bra.w	loc_14DD0
00016D7A                            ; End of function Sonic_DontRunOnWalls
00016D7A                            
00016D7A                            ; ===========================================================================
00016D7A 3428 000C                  		move.w	$C(a0),d2
00016D7E 3628 0008                  		move.w	8(a0),d3
00016D82                            
00016D82                            loc_14F7C:
00016D82 0442 000A                  		subi.w	#$A,d2
00016D86 0A42 000F                  		eori.w	#$F,d2
00016D8A 49F8 F768                  		lea	($FFFFF768).w,a4
00016D8E 367C FFF0                  		movea.w	#-$10,a3
00016D92 3C3C 1000                  		move.w	#$1000,d6
00016D96 7A0E                       		moveq	#$E,d5
00016D98 6100 FA3A                  		bsr.w	FindFloor
00016D9C 143C 0080                  		move.b	#-$80,d2
00016DA0 6000 FE6E                  		bra.w	loc_14E0A
00016DA4                            
00016DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DA4                            
00016DA4                            
00016DA4                            ObjHitCeiling:
00016DA4 3428 000C                  		move.w	$C(a0),d2
00016DA8 3628 0008                  		move.w	8(a0),d3
00016DAC 7000                       		moveq	#0,d0
00016DAE 1028 0016                  		move.b	$16(a0),d0
00016DB2 4880                       		ext.w	d0
00016DB4 9440                       		sub.w	d0,d2
00016DB6 0A42 000F                  		eori.w	#$F,d2
00016DBA 49F8 F768                  		lea	($FFFFF768).w,a4
00016DBE 367C FFF0                  		movea.w	#-$10,a3
00016DC2 3C3C 1000                  		move.w	#$1000,d6
00016DC6 7A0E                       		moveq	#$E,d5
00016DC8 6100 FA0A                  		bsr.w	FindFloor
00016DCC 1638 F768                  		move.b	($FFFFF768).w,d3
00016DD0 0803 0000                  		btst	#0,d3
00016DD4 6700                       		beq.s	locret_14FD4
00016DD6 163C 0080                  		move.b	#-$80,d3
00016DDA                            
00016DDA                            locret_14FD4:
00016DDA 4E75                       		rts	
00016DDC                            ; End of function ObjHitCeiling
00016DDC                            
00016DDC                            ; ===========================================================================
00016DDC                            
00016DDC                            loc_14FD6:				; XREF: sub_14D48
00016DDC 3428 000C                  		move.w	$C(a0),d2
00016DE0 3628 0008                  		move.w	8(a0),d3
00016DE4 7000                       		moveq	#0,d0
00016DE6 1028 0017                  		move.b	$17(a0),d0
00016DEA 4880                       		ext.w	d0
00016DEC 9440                       		sub.w	d0,d2
00016DEE 1028 0016                  		move.b	$16(a0),d0
00016DF2 4880                       		ext.w	d0
00016DF4 9640                       		sub.w	d0,d3
00016DF6 0A43 000F                  		eori.w	#$F,d3
00016DFA 49F8 F768                  		lea	($FFFFF768).w,a4
00016DFE 367C FFF0                  		movea.w	#-$10,a3
00016E02 3C3C 0800                  		move.w	#$800,d6
00016E06 7A0E                       		moveq	#$E,d5
00016E08 6100 FB08                  		bsr.w	FindWall
00016E0C 3F01                       		move.w	d1,-(sp)
00016E0E 3428 000C                  		move.w	$C(a0),d2
00016E12 3628 0008                  		move.w	8(a0),d3
00016E16 7000                       		moveq	#0,d0
00016E18 1028 0017                  		move.b	$17(a0),d0
00016E1C 4880                       		ext.w	d0
00016E1E D440                       		add.w	d0,d2
00016E20 1028 0016                  		move.b	$16(a0),d0
00016E24 4880                       		ext.w	d0
00016E26 9640                       		sub.w	d0,d3
00016E28 0A43 000F                  		eori.w	#$F,d3
00016E2C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E30 367C FFF0                  		movea.w	#-$10,a3
00016E34 3C3C 0800                  		move.w	#$800,d6
00016E38 7A0E                       		moveq	#$E,d5
00016E3A 6100 FAD6                  		bsr.w	FindWall
00016E3E 301F                       		move.w	(sp)+,d0
00016E40 143C 0040                  		move.b	#$40,d2
00016E44 6000 FD90                  		bra.w	loc_14DD0
00016E48                            
00016E48                            ; ---------------------------------------------------------------------------
00016E48                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016E48                            ; ---------------------------------------------------------------------------
00016E48                            
00016E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E48                            
00016E48                            
00016E48                            Sonic_HitWall:				; XREF: Sonic_Floor
00016E48 3428 000C                  		move.w	$C(a0),d2
00016E4C 3628 0008                  		move.w	8(a0),d3
00016E50                            
00016E50                            loc_1504A:
00016E50 0443 000A                  		subi.w	#$A,d3
00016E54 0A43 000F                  		eori.w	#$F,d3
00016E58 49F8 F768                  		lea	($FFFFF768).w,a4
00016E5C 367C FFF0                  		movea.w	#-$10,a3
00016E60 3C3C 0800                  		move.w	#$800,d6
00016E64 7A0E                       		moveq	#$E,d5
00016E66 6100 FAAA                  		bsr.w	FindWall
00016E6A 143C 0040                  		move.b	#$40,d2
00016E6E 6000 FDA0                  		bra.w	loc_14E0A
00016E72                            ; End of function Sonic_HitWall
00016E72                            
00016E72                            ; ---------------------------------------------------------------------------
00016E72                            ; Subroutine to	detect when an object hits a wall to its left
00016E72                            ; ---------------------------------------------------------------------------
00016E72                            
00016E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E72                            
00016E72                            
00016E72                            ObjHitWallLeft:
00016E72 D668 0008                  		add.w	8(a0),d3
00016E76 3428 000C                  		move.w	$C(a0),d2
00016E7A 49F8 F768                  		lea	($FFFFF768).w,a4
00016E7E 18BC 0000                  		move.b	#0,(a4)
00016E82 367C FFF0                  		movea.w	#-$10,a3
00016E86 3C3C 0800                  		move.w	#$800,d6
00016E8A 7A0E                       		moveq	#$E,d5
00016E8C 6100 FA84                  		bsr.w	FindWall
00016E90 1638 F768                  		move.b	($FFFFF768).w,d3
00016E94 0803 0000                  		btst	#0,d3
00016E98 6700                       		beq.s	locret_15098
00016E9A 163C 0040                  		move.b	#$40,d3
00016E9E                            
00016E9E                            locret_15098:
00016E9E 4E75                       		rts	
00016EA0                            ; End of function ObjHitWallLeft
00016EA0                            
00016EA0                            ; ===========================================================================
00016EA0                            ; ---------------------------------------------------------------------------
00016EA0                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016EA0                            ; ---------------------------------------------------------------------------
00016EA0                            
00016EA0                            Obj66:					; XREF: Obj_Index
00016EA0 7000                       		moveq	#0,d0
00016EA2 1028 0024                  		move.b	$24(a0),d0
00016EA6 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016EAA 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016EAE                            ; ===========================================================================
00016EAE 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016EB0 0000                       		dc.w Obj66_Action-Obj66_Index
00016EB2 0000                       		dc.w Obj66_Display-Obj66_Index
00016EB4 0000                       		dc.w Obj66_Release-Obj66_Index
00016EB6                            ; ===========================================================================
00016EB6                            
00016EB6                            Obj66_Main:				; XREF: Obj66_Index
00016EB6 5428 0024                  		addq.b	#2,$24(a0)
00016EBA 323C 0001                  		move.w	#1,d1
00016EBE 2248                       		movea.l	a0,a1
00016EC0 6000                       		bra.s	Obj66_MakeItem
00016EC2                            ; ===========================================================================
00016EC2                            
00016EC2                            Obj66_Loop:
00016EC2 6100 85D2                  		bsr.w	SingleObjLoad
00016EC6 6600                       		bne.s	loc_150FE
00016EC8 12BC 0066                  		move.b	#$66,0(a1)
00016ECC 5829 0024                  		addq.b	#4,$24(a1)
00016ED0 3368 0008 0008             		move.w	8(a0),8(a1)
00016ED6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016EDC 137C 0003 0018             		move.b	#3,$18(a1)
00016EE2 137C 0010 001A             		move.b	#$10,$1A(a1)
00016EE8                            
00016EE8                            Obj66_MakeItem:				; XREF: Obj66_Main
00016EE8 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016EF0 337C 4348 0002             		move.w	#$4348,2(a1)
00016EF6 0029 0004 0001             		ori.b	#4,1(a1)
00016EFC 137C 0038 0019             		move.b	#$38,$19(a1)
00016F02                            
00016F02                            loc_150FE:
00016F02 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016F06                            
00016F06 117C 0030 0019             		move.b	#$30,$19(a0)
00016F0C 117C 0004 0018             		move.b	#4,$18(a0)
00016F12 317C 003C 0030             		move.w	#$3C,$30(a0)
00016F18 117C 0001 0034             		move.b	#1,$34(a0)
00016F1E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016F24                            
00016F24                            Obj66_Action:				; XREF: Obj66_Index
00016F24 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016F28 4A28 0001                  		tst.b	1(a0)
00016F2C 6A00 0000                  		bpl.w	Obj66_Display
00016F30 323C 0030                  		move.w	#$30,d1
00016F34 3401                       		move.w	d1,d2
00016F36 3602                       		move.w	d2,d3
00016F38 5243                       		addq.w	#1,d3
00016F3A 3828 0008                  		move.w	8(a0),d4
00016F3E 6100 A490                  		bsr.w	SolidObject
00016F42 0828 0005 0022             		btst	#5,$22(a0)
00016F48 6700 0000                  		beq.w	Obj66_Display
00016F4C 43F8 D000                  		lea	($FFFFD000).w,a1
00016F50 720E                       		moveq	#$E,d1
00016F52 3029 0008                  		move.w	8(a1),d0
00016F56 B068 0008                  		cmp.w	8(a0),d0
00016F5A 6500                       		bcs.s	Obj66_GrabSonic
00016F5C 7207                       		moveq	#7,d1
00016F5E                            
00016F5E                            Obj66_GrabSonic:
00016F5E B228 001A                  		cmp.b	$1A(a0),d1
00016F62 6600                       		bne.s	Obj66_Display
00016F64 1141 0032                  		move.b	d1,$32(a0)
00016F68 5828 0024                  		addq.b	#4,$24(a0)
00016F6C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016F72 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016F78 337C 0800 0014             		move.w	#$800,$14(a1)
00016F7E 337C 0000 0010             		move.w	#0,$10(a1)
00016F84 337C 0000 0012             		move.w	#0,$12(a1)
00016F8A 08A8 0005 0022             		bclr	#5,$22(a0)
00016F90 08A9 0005 0022             		bclr	#5,$22(a1)
00016F96 08E9 0001 0022             		bset	#1,$22(a1)
00016F9C 3429 0008                  		move.w	8(a1),d2
00016FA0 3629 000C                  		move.w	$C(a1),d3
00016FA4 6100 0000                  		bsr.w	Obj66_ChgPos
00016FA8 D569 0008                  		add.w	d2,8(a1)
00016FAC D769 000C                  		add.w	d3,$C(a1)
00016FB0 E0E9 0008                  		asr	8(a1)
00016FB4 E0E9 000C                  		asr	$C(a1)
00016FB8                            
00016FB8                            Obj66_Display:				; XREF: Obj66_Index
00016FB8 6000 A0EE                  		bra.w	MarkObjGone
00016FBC                            ; ===========================================================================
00016FBC                            
00016FBC                            Obj66_Release:				; XREF: Obj66_Index
00016FBC 1028 001A                  		move.b	$1A(a0),d0
00016FC0 0C00 0004                  		cmpi.b	#4,d0
00016FC4 6700                       		beq.s	loc_151C8
00016FC6 0C00 0007                  		cmpi.b	#7,d0
00016FCA 6600                       		bne.s	loc_151F8
00016FCC                            
00016FCC                            loc_151C8:
00016FCC B028 0032                  		cmp.b	$32(a0),d0
00016FD0 6700                       		beq.s	loc_151F8
00016FD2 43F8 D000                  		lea	($FFFFD000).w,a1
00016FD6 337C 0000 0010             		move.w	#0,$10(a1)
00016FDC 337C 0800 0012             		move.w	#$800,$12(a1)
00016FE2 0C00 0004                  		cmpi.b	#4,d0
00016FE6 6700                       		beq.s	loc_151F0
00016FE8 337C 0800 0010             		move.w	#$800,$10(a1)
00016FEE 337C 0800 0012             		move.w	#$800,$12(a1)
00016FF4                            
00016FF4                            loc_151F0:
00016FF4 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016FF8 5928 0024                  		subq.b	#4,$24(a0)
00016FFC                            
00016FFC                            loc_151F8:
00016FFC 6100                       		bsr.s	Obj66_ChkSwitch
00016FFE 6100                       		bsr.s	Obj66_ChgPos
00017000 6000 A0A6                  		bra.w	MarkObjGone
00017004                            
00017004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017004                            
00017004                            
00017004                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017004 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017008 7000                       		moveq	#0,d0
0001700A 1028 0038                  		move.b	$38(a0),d0
0001700E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017014 6700                       		beq.s	loc_15224	; if not, branch
00017016 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001701A 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001701C 4428 0034                  		neg.b	$34(a0)
00017020 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00017026 6000                       		bra.s	Obj66_Animate
00017028                            ; ===========================================================================
00017028                            
00017028                            loc_15224:
00017028 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001702C                            
0001702C                            Obj66_Animate:
0001702C 5328 001E                  		subq.b	#1,$1E(a0)
00017030 6A00                       		bpl.s	locret_15246
00017032 117C 0007 001E             		move.b	#7,$1E(a0)
00017038 1228 0034                  		move.b	$34(a0),d1
0001703C 1028 001A                  		move.b	$1A(a0),d0
00017040 D001                       		add.b	d1,d0
00017042 0200 000F                  		andi.b	#$F,d0
00017046 1140 001A                  		move.b	d0,$1A(a0)
0001704A                            
0001704A                            locret_15246:
0001704A 4E75                       		rts	
0001704C                            ; End of function Obj66_ChkSwitch
0001704C                            
0001704C                            
0001704C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001704C                            
0001704C                            
0001704C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001704C 43F8 D000                  		lea	($FFFFD000).w,a1
00017050 7000                       		moveq	#0,d0
00017052 1028 001A                  		move.b	$1A(a0),d0
00017056 D040                       		add.w	d0,d0
00017058 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001705C 101A                       		move.b	(a2)+,d0
0001705E 4880                       		ext.w	d0
00017060 D068 0008                  		add.w	8(a0),d0
00017064 3340 0008                  		move.w	d0,8(a1)
00017068 101A                       		move.b	(a2)+,d0
0001706A 4880                       		ext.w	d0
0001706C D068 000C                  		add.w	$C(a0),d0
00017070 3340 000C                  		move.w	d0,$C(a1)
00017074 4E75                       		rts	
00017076                            ; End of function Obj66_ChgPos
00017076                            
00017076                            ; ===========================================================================
00017076 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001707A E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001707E 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00017082 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00017086 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001708A 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001708E 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00017092 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00017096                            ; ---------------------------------------------------------------------------
00017096                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00017096                            ; ---------------------------------------------------------------------------
00017096                            Map_obj66:
00017096                            	include "_maps\obj66.asm"
00017096                            ; ---------------------------------------------------------------------------
00017096                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00017096                            ; ---------------------------------------------------------------------------
00017096 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001709A 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
0001709E 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000170A2 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000170A6 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000170AA 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000170AE 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000170B2 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000170B6 0000                       		dc.w byte_154A4-Map_obj66
000170B8 06                         byte_152B4:	dc.b 6
000170B9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000170BE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000170C3 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000170C8 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000170CD 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000170D2 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000170D7 06                         byte_152D3:	dc.b 6
000170D8 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000170DD 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000170E2 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000170E7 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000170EC 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000170F1 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000170F6 06                         byte_152F2:	dc.b 6
000170F7 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000170FC 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00017101 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017106 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001710B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00017110 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017115 06                         byte_15311:	dc.b 6
00017116 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001711B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00017120 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017125 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001712A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001712F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017134 06                         byte_15330:	dc.b 6
00017135 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001713A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001713F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017144 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00017149 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001714E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017153 06                         byte_1534F:	dc.b 6
00017154 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00017159 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001715E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00017163 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00017168 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001716D 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00017172 06                         byte_1536E:	dc.b 6
00017173 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00017178 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001717D 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00017182 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00017187 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001718C 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00017191 06                         byte_1538D:	dc.b 6
00017192 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00017197 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001719C F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000171A1 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000171A6 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000171AB 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000171B0 06                         byte_153AC:	dc.b 6
000171B1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000171B6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000171BB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000171C0 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000171C5 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000171CA 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000171CF 06                         byte_153CB:	dc.b 6
000171D0 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000171D5 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000171DA DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000171DF DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000171E4 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000171E9 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000171EE 06                         byte_153EA:	dc.b 6
000171EF D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000171F4 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000171F9 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000171FE D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00017203 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017208 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001720D 06                         byte_15409:	dc.b 6
0001720E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017213 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00017218 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001721D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017222 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00017227 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001722C 06                         byte_15428:	dc.b 6
0001722D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017232 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00017237 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001723C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00017241 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00017246 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001724B 06                         byte_15447:	dc.b 6
0001724C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00017251 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00017256 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001725B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00017260 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00017265 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001726A 06                         byte_15466:	dc.b 6
0001726B E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00017270 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00017275 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001727A D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
0001727F E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00017284 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00017289 06                         byte_15485:	dc.b 6
0001728A E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
0001728F D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00017294 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00017299 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
0001729E F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000172A3 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000172A8 0C                         byte_154A4:	dc.b $C
000172A9 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000172AE D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000172B3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000172B8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000172BD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000172C2 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000172C7 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000172CC 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000172D1 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000172D6 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000172DB 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000172E0 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000172E6 00                         		even
000172E6 00                         		even
000172E6                            
000172E6                            ; ===========================================================================
000172E6                            ; ---------------------------------------------------------------------------
000172E6                            ; Object 67 - disc that	you run	around (SBZ)
000172E6                            ; ---------------------------------------------------------------------------
000172E6                            
000172E6                            Obj67:					; XREF: Obj_Index
000172E6 7000                       		moveq	#0,d0
000172E8 1028 0024                  		move.b	$24(a0),d0
000172EC 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000172F0 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000172F4                            ; ===========================================================================
000172F4 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000172F6 0000                       		dc.w Obj67_Action-Obj67_Index
000172F8                            ; ===========================================================================
000172F8                            
000172F8                            Obj67_Main:				; XREF: Obj67_Index
000172F8 5428 0024                  		addq.b	#2,$24(a0)
000172FC 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017304 317C C344 0002             		move.w	#$C344,2(a0)
0001730A 117C 0004 0001             		move.b	#4,1(a0)
00017310 117C 0004 0018             		move.b	#4,$18(a0)
00017316 117C 0008 0019             		move.b	#8,$19(a0)
0001731C 3168 0008 0032             		move.w	8(a0),$32(a0)
00017322 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017328 117C 0018 0034             		move.b	#$18,$34(a0)
0001732E 117C 0048 0038             		move.b	#$48,$38(a0)
00017334 1228 0028                  		move.b	$28(a0),d1	; get object type
00017338 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001733C 6700                       		beq.s	loc_15546
0001733E 117C 0010 0034             		move.b	#$10,$34(a0)
00017344 117C 0038 0038             		move.b	#$38,$38(a0)
0001734A                            
0001734A                            loc_15546:
0001734A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001734E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017352 4881                       		ext.w	d1
00017354 E741                       		asl.w	#3,d1
00017356 3141 0036                  		move.w	d1,$36(a0)
0001735A 1028 0022                  		move.b	$22(a0),d0
0001735E E418                       		ror.b	#2,d0
00017360 0200 00C0                  		andi.b	#-$40,d0
00017364 1140 0026                  		move.b	d0,$26(a0)
00017368                            
00017368                            Obj67_Action:				; XREF: Obj67_Index
00017368 6100 0000                  		bsr.w	Obj67_MoveSonic
0001736C 6100 0000                  		bsr.w	Obj67_MoveSpot
00017370 6000 0000                  		bra.w	Obj67_ChkDel
00017374                            ; ===========================================================================
00017374                            
00017374                            Obj67_MoveSonic:			; XREF: Obj67_Action
00017374 7400                       		moveq	#0,d2
00017376 1428 0038                  		move.b	$38(a0),d2
0001737A 3602                       		move.w	d2,d3
0001737C D643                       		add.w	d3,d3
0001737E 43F8 D000                  		lea	($FFFFD000).w,a1
00017382 3029 0008                  		move.w	8(a1),d0
00017386 9068 0032                  		sub.w	$32(a0),d0
0001738A D042                       		add.w	d2,d0
0001738C B043                       		cmp.w	d3,d0
0001738E 6400                       		bcc.s	loc_155A8
00017390 3229 000C                  		move.w	$C(a1),d1
00017394 9268 0030                  		sub.w	$30(a0),d1
00017398 D242                       		add.w	d2,d1
0001739A B243                       		cmp.w	d3,d1
0001739C 6400                       		bcc.s	loc_155A8
0001739E 0829 0001 0022             		btst	#1,$22(a1)
000173A4 6700                       		beq.s	loc_155B8
000173A6 4228 003A                  		clr.b	$3A(a0)
000173AA 4E75                       		rts	
000173AC                            ; ===========================================================================
000173AC                            
000173AC                            loc_155A8:
000173AC 4A28 003A                  		tst.b	$3A(a0)
000173B0 6700                       		beq.s	locret_155B6
000173B2 4229 0038                  		clr.b	$38(a1)
000173B6 4228 003A                  		clr.b	$3A(a0)
000173BA                            
000173BA                            locret_155B6:
000173BA 4E75                       		rts	
000173BC                            ; ===========================================================================
000173BC                            
000173BC                            loc_155B8:
000173BC 4A28 003A                  		tst.b	$3A(a0)
000173C0 6600                       		bne.s	loc_155E2
000173C2 117C 0001 003A             		move.b	#1,$3A(a0)
000173C8 0829 0002 0022             		btst	#2,$22(a1)
000173CE 6600                       		bne.s	loc_155D0
000173D0 4229 001C                  		clr.b	$1C(a1)
000173D4                            
000173D4                            loc_155D0:
000173D4 08A9 0005 0022             		bclr	#5,$22(a1)
000173DA 137C 0001 001D             		move.b	#1,$1D(a1)
000173E0 137C 0001 0038             		move.b	#1,$38(a1)
000173E6                            
000173E6                            loc_155E2:
000173E6 3029 0014                  		move.w	$14(a1),d0
000173EA 4A68 0036                  		tst.w	$36(a0)
000173EE 6A00                       		bpl.s	loc_15608
000173F0 0C40 FC00                  		cmpi.w	#-$400,d0
000173F4 6F00                       		ble.s	loc_155FA
000173F6 337C FC00 0014             		move.w	#-$400,$14(a1)
000173FC 4E75                       		rts	
000173FE                            ; ===========================================================================
000173FE                            
000173FE                            loc_155FA:
000173FE 0C40 F100                  		cmpi.w	#-$F00,d0
00017402 6C00                       		bge.s	locret_15606
00017404 337C F100 0014             		move.w	#-$F00,$14(a1)
0001740A                            
0001740A                            locret_15606:
0001740A 4E75                       		rts	
0001740C                            ; ===========================================================================
0001740C                            
0001740C                            loc_15608:
0001740C 0C40 0400                  		cmpi.w	#$400,d0
00017410 6C00                       		bge.s	loc_15616
00017412 337C 0400 0014             		move.w	#$400,$14(a1)
00017418 4E75                       		rts	
0001741A                            ; ===========================================================================
0001741A                            
0001741A                            loc_15616:
0001741A 0C40 0F00                  		cmpi.w	#$F00,d0
0001741E 6F00                       		ble.s	locret_15622
00017420 337C 0F00 0014             		move.w	#$F00,$14(a1)
00017426                            
00017426                            locret_15622:
00017426 4E75                       		rts	
00017428                            ; ===========================================================================
00017428                            
00017428                            Obj67_MoveSpot:				; XREF: Obj67_Action
00017428 3028 0036                  		move.w	$36(a0),d0
0001742C D168 0026                  		add.w	d0,$26(a0)
00017430 1028 0026                  		move.b	$26(a0),d0
00017434 4EB9 0000 29AE             		jsr	(CalcSine).l
0001743A 3428 0030                  		move.w	$30(a0),d2
0001743E 3628 0032                  		move.w	$32(a0),d3
00017442 7800                       		moveq	#0,d4
00017444 1828 0034                  		move.b	$34(a0),d4
00017448 E14C                       		lsl.w	#8,d4
0001744A 2A04                       		move.l	d4,d5
0001744C C9C0                       		muls.w	d0,d4
0001744E 4844                       		swap	d4
00017450 CBC1                       		muls.w	d1,d5
00017452 4845                       		swap	d5
00017454 D842                       		add.w	d2,d4
00017456 DA43                       		add.w	d3,d5
00017458 3144 000C                  		move.w	d4,$C(a0)
0001745C 3145 0008                  		move.w	d5,8(a0)
00017460 4E75                       		rts	
00017462                            ; ===========================================================================
00017462                            
00017462                            Obj67_ChkDel:				; XREF: Obj67_Action
00017462 3028 0032                  		move.w	$32(a0),d0
00017466 0240 FF80                  		andi.w	#-$80,d0
0001746A 3238 F700                  		move.w	($FFFFF700).w,d1
0001746E 0441 0080                  		subi.w	#$80,d1
00017472 0241 FF80                  		andi.w	#-$80,d1
00017476 9041                       		sub.w	d1,d0
00017478 0C40 0280                  		cmpi.w	#$280,d0
0001747C 6200                       		bhi.s	Obj67_Delete
0001747E 4EF9 0000 F010             		jmp	DisplaySprite
00017484                            ; ===========================================================================
00017484                            
00017484                            Obj67_Delete:
00017484 4EF9 0000 F04C             		jmp	DeleteObject
0001748A                            ; ===========================================================================
0001748A                            ; ---------------------------------------------------------------------------
0001748A                            ; Sprite mappings - disc that you run around (SBZ)
0001748A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001748A                            ; part of the level tiles.)
0001748A                            ; ---------------------------------------------------------------------------
0001748A                            Map_obj67:
0001748A                            	include "_maps\obj67.asm"
0001748A                            ; ---------------------------------------------------------------------------
0001748A                            ; Sprite mappings - disc that you run around (SBZ)
0001748A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001748A                            ; part of the level tiles.)
0001748A                            ; ---------------------------------------------------------------------------
0001748A 0000                       		dc.w byte_15688-Map_obj67
0001748C 01                         byte_15688:	dc.b 1
0001748D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017492                            		even
00017492                            		even
00017492                            
00017492                            ; ===========================================================================
00017492                            ; ---------------------------------------------------------------------------
00017492                            ; Object 68 - conveyor belts (SBZ)
00017492                            ; ---------------------------------------------------------------------------
00017492                            
00017492                            Obj68:					; XREF: Obj_Index
00017492 7000                       		moveq	#0,d0
00017494 1028 0024                  		move.b	$24(a0),d0
00017498 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
0001749C 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000174A0                            ; ===========================================================================
000174A0 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000174A2 0000                       		dc.w Obj68_Action-Obj68_Index
000174A4                            ; ===========================================================================
000174A4                            
000174A4                            Obj68_Main:				; XREF: Obj68_Index
000174A4 5428 0024                  		addq.b	#2,$24(a0)
000174A8 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000174AE 1228 0028                  		move.b	$28(a0),d1	; get object type
000174B2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000174B6 6700                       		beq.s	loc_156BA	; if zero, branch
000174B8 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000174BE                            
000174BE                            loc_156BA:
000174BE 1228 0028                  		move.b	$28(a0),d1	; get object type
000174C2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000174C6 4881                       		ext.w	d1
000174C8 E841                       		asr.w	#4,d1
000174CA 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000174CE                            
000174CE                            Obj68_Action:				; XREF: Obj68_Index
000174CE 6100                       		bsr.s	Obj68_MoveSonic
000174D0 3028 0008                  		move.w	8(a0),d0
000174D4 0240 FF80                  		andi.w	#$FF80,d0
000174D8 3238 F700                  		move.w	($FFFFF700).w,d1
000174DC 0441 0080                  		subi.w	#$80,d1
000174E0 0241 FF80                  		andi.w	#$FF80,d1
000174E4 9041                       		sub.w	d1,d0
000174E6 0C40 0280                  		cmpi.w	#$280,d0
000174EA 6200                       		bhi.s	Obj68_Delete
000174EC 4E75                       		rts	
000174EE                            ; ===========================================================================
000174EE                            
000174EE                            Obj68_Delete:
000174EE 4EF9 0000 F04C             		jmp	DeleteObject
000174F4                            ; ===========================================================================
000174F4                            
000174F4                            Obj68_MoveSonic:			; XREF: Obj68_Action
000174F4 7400                       		moveq	#0,d2
000174F6 1428 0038                  		move.b	$38(a0),d2
000174FA 3602                       		move.w	d2,d3
000174FC D643                       		add.w	d3,d3
000174FE 43F8 D000                  		lea	($FFFFD000).w,a1
00017502 3029 0008                  		move.w	8(a1),d0
00017506 9068 0008                  		sub.w	8(a0),d0
0001750A D042                       		add.w	d2,d0
0001750C B043                       		cmp.w	d3,d0
0001750E 6400                       		bcc.s	locret_1572E
00017510 3229 000C                  		move.w	$C(a1),d1
00017514 9268 000C                  		sub.w	$C(a0),d1
00017518 0641 0030                  		addi.w	#$30,d1
0001751C 0C41 0030                  		cmpi.w	#$30,d1
00017520 6400                       		bcc.s	locret_1572E
00017522 0829 0001 0022             		btst	#1,$22(a1)
00017528 6600                       		bne.s	locret_1572E
0001752A 3028 0036                  		move.w	$36(a0),d0
0001752E D169 0008                  		add.w	d0,8(a1)
00017532                            
00017532                            locret_1572E:
00017532 4E75                       		rts	
00017534                            
00017534                            ; ===========================================================================
00017534                            ; ---------------------------------------------------------------------------
00017534                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017534                            ; ---------------------------------------------------------------------------
00017534                            
00017534                            Obj69:					; XREF: Obj_Index
00017534 7000                       		moveq	#0,d0
00017536 1028 0024                  		move.b	$24(a0),d0
0001753A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001753E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017542                            ; ===========================================================================
00017542 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017544 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017546 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017548                            ; ===========================================================================
00017548                            
00017548                            Obj69_Main:				; XREF: Obj69_Index
00017548 5428 0024                  		addq.b	#2,$24(a0)
0001754C 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017554 317C 4492 0002             		move.w	#$4492,2(a0)
0001755A 0028 0004 0001             		ori.b	#4,1(a0)
00017560 117C 0080 0019             		move.b	#$80,$19(a0)
00017566 7000                       		moveq	#0,d0
00017568 1028 0028                  		move.b	$28(a0),d0
0001756C 0240 000F                  		andi.w	#$F,d0
00017570 C0FC 003C                  		mulu.w	#$3C,d0
00017574 3140 0032                  		move.w	d0,$32(a0)
00017578 4A28 0028                  		tst.b	$28(a0)
0001757C 6A00                       		bpl.s	Obj69_Trapdoor
0001757E 5428 0024                  		addq.b	#2,$24(a0)
00017582 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001758A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017590 117C 0010 0019             		move.b	#$10,$19(a0)
00017596 117C 0002 001C             		move.b	#2,$1C(a0)
0001759C 7000                       		moveq	#0,d0
0001759E 1028 0028                  		move.b	$28(a0),d0	; get object type
000175A2 3200                       		move.w	d0,d1
000175A4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000175A8 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000175AC 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000175B0 3140 0032                  		move.w	d0,$32(a0)
000175B4 0241 0070                  		andi.w	#$70,d1
000175B8 0641 0010                  		addi.w	#$10,d1
000175BC E549                       		lsl.w	#2,d1
000175BE 5341                       		subq.w	#1,d1
000175C0 3141 0036                  		move.w	d1,$36(a0)
000175C4 6000                       		bra.s	Obj69_Spinner
000175C6                            ; ===========================================================================
000175C6                            
000175C6                            Obj69_Trapdoor:				; XREF: Obj69_Index
000175C6 5368 0030                  		subq.w	#1,$30(a0)
000175CA 6A00                       		bpl.s	Obj69_Animate
000175CC 3168 0032 0030             		move.w	$32(a0),$30(a0)
000175D2 0868 0000 001C             		bchg	#0,$1C(a0)
000175D8 4A28 0001                  		tst.b	1(a0)
000175DC 6A00                       		bpl.s	Obj69_Animate
000175DE 303C 00BB                  		move.w	#$BB,d0
000175E2 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play door sound
000175E8                            
000175E8                            Obj69_Animate:
000175E8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000175EE 4EB9 0000 C10C             		jsr	AnimateSprite
000175F4 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000175F8 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000175FA 323C 004B                  		move.w	#$4B,d1
000175FE 343C 000C                  		move.w	#$C,d2
00017602 3602                       		move.w	d2,d3
00017604 5243                       		addq.w	#1,d3
00017606 3828 0008                  		move.w	8(a0),d4
0001760A 6100 9DC4                  		bsr.w	SolidObject
0001760E 6000 9A98                  		bra.w	MarkObjGone
00017612                            ; ===========================================================================
00017612                            
00017612                            Obj69_NotSolid:
00017612 0828 0003 0022             		btst	#3,$22(a0)
00017618 6700                       		beq.s	Obj69_Display
0001761A 43F8 D000                  		lea	($FFFFD000).w,a1
0001761E 08A9 0003 0022             		bclr	#3,$22(a1)
00017624 08A8 0003 0022             		bclr	#3,$22(a0)
0001762A 4228 0025                  		clr.b	$25(a0)
0001762E                            
0001762E                            Obj69_Display:
0001762E 6000 9A78                  		bra.w	MarkObjGone
00017632                            ; ===========================================================================
00017632                            
00017632                            Obj69_Spinner:				; XREF: Obj69_Index
00017632 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017636 C068 0036                  		and.w	$36(a0),d0
0001763A 6600                       		bne.s	Obj69_Delay
0001763C 117C 0001 0034             		move.b	#1,$34(a0)
00017642                            
00017642                            Obj69_Delay:
00017642 4A28 0034                  		tst.b	$34(a0)
00017646 6700                       		beq.s	Obj69_Animate2
00017648 5368 0030                  		subq.w	#1,$30(a0)
0001764C 6A00                       		bpl.s	Obj69_Animate2
0001764E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017654 4228 0034                  		clr.b	$34(a0)
00017658 0868 0000 001C             		bchg	#0,$1C(a0)
0001765E                            
0001765E                            Obj69_Animate2:
0001765E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017664 4EB9 0000 C10C             		jsr	AnimateSprite
0001766A 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001766E 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017670 323C 001B                  		move.w	#$1B,d1
00017674 343C 0007                  		move.w	#7,d2
00017678 3602                       		move.w	d2,d3
0001767A 5243                       		addq.w	#1,d3
0001767C 3828 0008                  		move.w	8(a0),d4
00017680 6100 9D4E                  		bsr.w	SolidObject
00017684 6000 9A22                  		bra.w	MarkObjGone
00017688                            ; ===========================================================================
00017688                            
00017688                            Obj69_NotSolid2:
00017688 0828 0003 0022             		btst	#3,$22(a0)
0001768E 6700                       		beq.s	Obj69_Display2
00017690 43F8 D000                  		lea	($FFFFD000).w,a1
00017694 08A9 0003 0022             		bclr	#3,$22(a1)
0001769A 08A8 0003 0022             		bclr	#3,$22(a0)
000176A0 4228 0025                  		clr.b	$25(a0)
000176A4                            
000176A4                            Obj69_Display2:
000176A4 6000 9A02                  		bra.w	MarkObjGone
000176A8                            ; ===========================================================================
000176A8                            Ani_obj69:
000176A8                            	include "_anim\obj69.asm"
000176A8                            ; ---------------------------------------------------------------------------
000176A8                            ; Animation script - trapdoor (SBZ)
000176A8                            ; ---------------------------------------------------------------------------
000176A8 0000                       		dc.w byte_158AC-Ani_obj69
000176AA 0000                       		dc.w byte_158B2-Ani_obj69
000176AC 0000                       		dc.w byte_158B8-Ani_obj69
000176AE 0000                       		dc.w byte_158CC-Ani_obj69
000176B0 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000176B6 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000176BC 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000176C9 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000176D0 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000176DD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000176E4                            		even
000176E4                            		even
000176E4                            
000176E4                            ; ---------------------------------------------------------------------------
000176E4                            ; Sprite mappings - trapdoor (SBZ)
000176E4                            ; ---------------------------------------------------------------------------
000176E4                            Map_obj69:
000176E4                            	include "_maps\obj69.asm"
000176E4                            ; ---------------------------------------------------------------------------
000176E4                            ; Sprite mappings - trapdoor (SBZ)
000176E4                            ; ---------------------------------------------------------------------------
000176E4 0000                       		dc.w byte_158E6-Map_obj69
000176E6 0000                       		dc.w byte_158FB-Map_obj69
000176E8 0000                       		dc.w byte_15924-Map_obj69
000176EA 04                         byte_158E6:	dc.b 4
000176EB F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000176F0 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000176F5 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000176FA F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000176FF 08                         byte_158FB:	dc.b 8
00017700 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017705 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001770A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001770F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017714 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00017719 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001771E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017723 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017728 04                         byte_15924:	dc.b 4
00017729 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001772E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017733 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017738 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001773E 00                         		even
0001773E 00                         		even
0001773E                            
0001773E                            ; ---------------------------------------------------------------------------
0001773E                            ; Sprite mappings - spinning platforms (SBZ)
0001773E                            ; ---------------------------------------------------------------------------
0001773E                            Map_obj69a:
0001773E                            	include "_maps\obj69a.asm"
0001773E                            ; ---------------------------------------------------------------------------
0001773E                            ; Sprite mappings - spinning platforms (SBZ)
0001773E                            ; ---------------------------------------------------------------------------
0001773E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017742 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017746 0000                       		dc.w byte_15970-Map_obj69a
00017748 02                         byte_15944:	dc.b 2
00017749 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001774E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017753 02                         byte_1594F:	dc.b 2
00017754 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017759 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001775E 02                         byte_1595A:	dc.b 2
0001775F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017764 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017769 02                         byte_15965:	dc.b 2
0001776A F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001776F 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017774 02                         byte_15970:	dc.b 2
00017775 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001777A 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017780 00                         		even
00017780 00                         		even
00017780                            
00017780                            ; ===========================================================================
00017780                            ; ---------------------------------------------------------------------------
00017780                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017780                            ; ---------------------------------------------------------------------------
00017780                            
00017780                            Obj6A:					; XREF: Obj_Index
00017780 7000                       		moveq	#0,d0
00017782 1028 0024                  		move.b	$24(a0),d0
00017786 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001778A 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001778E                            ; ===========================================================================
0001778E 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017790 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017792                            ; ===========================================================================
00017792                            
00017792                            Obj6A_Main:				; XREF: Obj6A_Index
00017792 5428 0024                  		addq.b	#2,$24(a0)
00017796 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001779E 317C 43B5 0002             		move.w	#$43B5,2(a0)
000177A4 117C 0004 0001             		move.b	#4,1(a0)
000177AA 117C 0004 0018             		move.b	#4,$18(a0)
000177B0 117C 0020 0019             		move.b	#$20,$19(a0)
000177B6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000177BC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000177C2 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000177C8 6400                       		bcc.s	Obj6A_Action
000177CA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000177D0                            
000177D0                            Obj6A_Action:				; XREF: Obj6A_Index
000177D0 7000                       		moveq	#0,d0
000177D2 1028 0028                  		move.b	$28(a0),d0
000177D6 0240 0007                  		andi.w	#7,d0
000177DA D040                       		add.w	d0,d0
000177DC 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000177E0 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000177E4 3028 003A                  		move.w	$3A(a0),d0
000177E8 0240 FF80                  		andi.w	#$FF80,d0
000177EC 3238 F700                  		move.w	($FFFFF700).w,d1
000177F0 0441 0080                  		subi.w	#$80,d1
000177F4 0241 FF80                  		andi.w	#$FF80,d1
000177F8 9041                       		sub.w	d1,d0
000177FA 0C40 0280                  		cmpi.w	#$280,d0
000177FE 6200                       		bhi.s	Obj6A_Delete
00017800 4EF9 0000 F010             		jmp	DisplaySprite
00017806                            ; ===========================================================================
00017806                            
00017806                            Obj6A_Delete:
00017806 4EF9 0000 F04C             		jmp	DeleteObject
0001780C                            ; ===========================================================================
0001780C 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017810 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017814 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017816                            ; ===========================================================================
00017816                            
00017816                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017816 4E75                       		rts	
00017818                            ; ===========================================================================
00017818                            
00017818                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017818 323C 0060                  		move.w	#$60,d1
0001781C 7000                       		moveq	#0,d0
0001781E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017822 0828 0000 0022             		btst	#0,$22(a0)
00017828 6700                       		beq.s	Obj6A_Animate01
0001782A 4440                       		neg.w	d0
0001782C D041                       		add.w	d1,d0
0001782E                            
0001782E                            Obj6A_Animate01:
0001782E 3228 003A                  		move.w	$3A(a0),d1
00017832 9240                       		sub.w	d0,d1
00017834 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017838 5328 001E                  		subq.b	#1,$1E(a0)
0001783C 6A00                       		bpl.s	loc_15A46
0001783E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017844 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001784A                            
0001784A                            loc_15A46:
0001784A 4A28 0001                  		tst.b	1(a0)
0001784E 6A00                       		bpl.s	locret_15A60
00017850 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017854 0240 000F                  		andi.w	#$F,d0
00017858 6600                       		bne.s	locret_15A60
0001785A 303C 00B0                  		move.w	#$B0,d0
0001785E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play saw sound
00017864                            
00017864                            locret_15A60:
00017864 4E75                       		rts	
00017866                            ; ===========================================================================
00017866                            
00017866                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017866 323C 0030                  		move.w	#$30,d1
0001786A 7000                       		moveq	#0,d0
0001786C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017870 0828 0000 0022             		btst	#0,$22(a0)
00017876 6700                       		beq.s	Obj6A_Animate02
00017878 4440                       		neg.w	d0
0001787A 0640 0080                  		addi.w	#$80,d0
0001787E                            
0001787E                            Obj6A_Animate02:
0001787E 3228 0038                  		move.w	$38(a0),d1
00017882 9240                       		sub.w	d0,d1
00017884 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017888 5328 001E                  		subq.b	#1,$1E(a0)
0001788C 6A00                       		bpl.s	loc_15A96
0001788E 117C 0002 001E             		move.b	#2,$1E(a0)
00017894 0868 0000 001A             		bchg	#0,$1A(a0)
0001789A                            
0001789A                            loc_15A96:
0001789A 4A28 0001                  		tst.b	1(a0)
0001789E 6A00                       		bpl.s	locret_15AB0
000178A0 1038 FE64                  		move.b	($FFFFFE64).w,d0
000178A4 0C00 0018                  		cmpi.b	#$18,d0
000178A8 6600                       		bne.s	locret_15AB0
000178AA 303C 00B0                  		move.w	#$B0,d0
000178AE 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play saw sound
000178B4                            
000178B4                            locret_15AB0:
000178B4 4E75                       		rts	
000178B6                            ; ===========================================================================
000178B6                            
000178B6                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000178B6 4A28 003D                  		tst.b	$3D(a0)
000178BA 6600                       		bne.s	Obj6A_Animate03
000178BC 3038 D008                  		move.w	($FFFFD008).w,d0
000178C0 0440 00C0                  		subi.w	#$C0,d0
000178C4 6500                       		bcs.s	loc_15B02
000178C6 9068 0008                  		sub.w	8(a0),d0
000178CA 6500                       		bcs.s	loc_15B02
000178CC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000178D0 0440 0080                  		subi.w	#$80,d0
000178D4 B068 000C                  		cmp.w	$C(a0),d0
000178D8 6400                       		bcc.s	locret_15B04
000178DA 0640 0100                  		addi.w	#$100,d0
000178DE B068 000C                  		cmp.w	$C(a0),d0
000178E2 6500                       		bcs.s	locret_15B04
000178E4 117C 0001 003D             		move.b	#1,$3D(a0)
000178EA 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000178F0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000178F6 117C 0002 001A             		move.b	#2,$1A(a0)
000178FC 303C 00B0                  		move.w	#$B0,d0
00017900 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play saw sound
00017906                            
00017906                            loc_15B02:
00017906 588F                       		addq.l	#4,sp
00017908                            
00017908                            locret_15B04:
00017908 4E75                       		rts	
0001790A                            ; ===========================================================================
0001790A                            
0001790A                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001790A 4EB9 0000 EFEA             		jsr	SpeedToPos
00017910 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017916 5328 001E                  		subq.b	#1,$1E(a0)
0001791A 6A00                       		bpl.s	locret_15B24
0001791C 117C 0002 001E             		move.b	#2,$1E(a0)
00017922 0868 0000 001A             		bchg	#0,$1A(a0)
00017928                            
00017928                            locret_15B24:
00017928 4E75                       		rts	
0001792A                            ; ===========================================================================
0001792A                            
0001792A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001792A 4A28 003D                  		tst.b	$3D(a0)
0001792E 6600                       		bne.s	Obj6A_Animate04
00017930 3038 D008                  		move.w	($FFFFD008).w,d0
00017934 0640 00E0                  		addi.w	#$E0,d0
00017938 9068 0008                  		sub.w	8(a0),d0
0001793C 6400                       		bcc.s	loc_15B74
0001793E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017942 0440 0080                  		subi.w	#$80,d0
00017946 B068 000C                  		cmp.w	$C(a0),d0
0001794A 6400                       		bcc.s	locret_15B76
0001794C 0640 0100                  		addi.w	#$100,d0
00017950 B068 000C                  		cmp.w	$C(a0),d0
00017954 6500                       		bcs.s	locret_15B76
00017956 117C 0001 003D             		move.b	#1,$3D(a0)
0001795C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017962 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017968 117C 0002 001A             		move.b	#2,$1A(a0)
0001796E 303C 00B0                  		move.w	#$B0,d0
00017972 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play saw sound
00017978                            
00017978                            loc_15B74:
00017978 588F                       		addq.l	#4,sp
0001797A                            
0001797A                            locret_15B76:
0001797A 4E75                       		rts	
0001797C                            ; ===========================================================================
0001797C                            
0001797C                            Obj6A_Animate04:
0001797C 4EB9 0000 EFEA             		jsr	SpeedToPos
00017982 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017988 5328 001E                  		subq.b	#1,$1E(a0)
0001798C 6A00                       		bpl.s	locret_15B96
0001798E 117C 0002 001E             		move.b	#2,$1E(a0)
00017994 0868 0000 001A             		bchg	#0,$1A(a0)
0001799A                            
0001799A                            locret_15B96:
0001799A 4E75                       		rts	
0001799C                            ; ===========================================================================
0001799C                            ; ---------------------------------------------------------------------------
0001799C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001799C                            ; ---------------------------------------------------------------------------
0001799C                            Map_obj6A:
0001799C                            	include "_maps\obj6A.asm"
0001799C                            ; ---------------------------------------------------------------------------
0001799C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001799C                            ; ---------------------------------------------------------------------------
0001799C 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000179A0 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000179A4 07                         byte_15BA0:	dc.b 7
000179A5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000179AA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000179AF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000179B4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000179B9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000179BE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000179C3 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000179C8 07                         byte_15BC4:	dc.b 7
000179C9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000179CE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000179D3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000179D8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000179DD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000179E2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000179E7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000179EC 04                         byte_15BE8:	dc.b 4
000179ED E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000179F2 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000179F7 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000179FC 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017A01 04                         byte_15BFD:	dc.b 4
00017A02 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017A07 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017A0C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017A11 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017A16                            		even
00017A16                            		even
00017A16                            
00017A16                            ; ===========================================================================
00017A16                            ; ---------------------------------------------------------------------------
00017A16                            ; Object 6B - stomper (SBZ)
00017A16                            ; ---------------------------------------------------------------------------
00017A16                            
00017A16                            Obj6B:					; XREF: Obj_Index
00017A16 7000                       		moveq	#0,d0
00017A18 1028 0024                  		move.b	$24(a0),d0
00017A1C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017A20 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017A24                            ; ===========================================================================
00017A24 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017A26 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017A28                            
00017A28 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017A2C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017A30 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017A34 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017A38 8040 0005                  		dc.b  $80, $40,	  0,   5
00017A3C                            ; ===========================================================================
00017A3C                            
00017A3C                            Obj6B_Main:				; XREF: Obj6B_Index
00017A3C 5428 0024                  		addq.b	#2,$24(a0)
00017A40 7000                       		moveq	#0,d0
00017A42 1028 0028                  		move.b	$28(a0),d0
00017A46 E448                       		lsr.w	#2,d0
00017A48 0240 001C                  		andi.w	#$1C,d0
00017A4C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017A50 115B 0019                  		move.b	(a3)+,$19(a0)
00017A54 115B 0016                  		move.b	(a3)+,$16(a0)
00017A58 E448                       		lsr.w	#2,d0
00017A5A 1140 001A                  		move.b	d0,$1A(a0)
00017A5E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017A66 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017A6C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017A72 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017A74 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017A7A 6700                       		beq.s	Obj6B_SBZ3
00017A7C                            
00017A7C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017A7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A80 7000                       		moveq	#0,d0
00017A82 1028 0023                  		move.b	$23(a0),d0
00017A86 6700                       		beq.s	Obj6B_Delete
00017A88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017A8E                            
00017A8E                            Obj6B_Delete:
00017A8E 4EF9 0000 F04C             		jmp	DeleteObject
00017A94                            ; ===========================================================================
00017A94                            
00017A94                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017A94 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017A9A 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017AA0 6600                       		bne.s	Obj6B_SBZ12
00017AA2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017AA6 7000                       		moveq	#0,d0
00017AA8 1028 0023                  		move.b	$23(a0),d0
00017AAC 6700                       		beq.s	Obj6B_SBZ12
00017AAE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017AB4 6700                       		beq.s	Obj6B_SBZ12
00017AB6 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017ABA 60C0                       		bra.s	Obj6B_ChkGone
00017ABC                            ; ===========================================================================
00017ABC                            
00017ABC                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017ABC 0028 0004 0001             		ori.b	#4,1(a0)
00017AC2 117C 0004 0018             		move.b	#4,$18(a0)
00017AC8 3168 0008 0034             		move.w	8(a0),$34(a0)
00017ACE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017AD4 7000                       		moveq	#0,d0
00017AD6 101B                       		move.b	(a3)+,d0
00017AD8 3140 003C                  		move.w	d0,$3C(a0)
00017ADC 7000                       		moveq	#0,d0
00017ADE 1028 0028                  		move.b	$28(a0),d0
00017AE2 6A00                       		bpl.s	Obj6B_Action
00017AE4 0200 000F                  		andi.b	#$F,d0
00017AE8 1140 003E                  		move.b	d0,$3E(a0)
00017AEC 1153 0028                  		move.b	(a3),$28(a0)
00017AF0 0C13 0005                  		cmpi.b	#5,(a3)
00017AF4 6600                       		bne.s	Obj6B_ChkGone2
00017AF6 08E8 0004 0001             		bset	#4,1(a0)
00017AFC                            
00017AFC                            Obj6B_ChkGone2:
00017AFC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017B00 7000                       		moveq	#0,d0
00017B02 1028 0023                  		move.b	$23(a0),d0
00017B06 6700                       		beq.s	Obj6B_Action
00017B08 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017B0E                            
00017B0E                            Obj6B_Action:				; XREF: Obj6B_Index
00017B0E 3F28 0008                  		move.w	8(a0),-(sp)
00017B12 7000                       		moveq	#0,d0
00017B14 1028 0028                  		move.b	$28(a0),d0
00017B18 0240 000F                  		andi.w	#$F,d0
00017B1C D040                       		add.w	d0,d0
00017B1E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017B22 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017B26 381F                       		move.w	(sp)+,d4
00017B28 4A28 0001                  		tst.b	1(a0)
00017B2C 6A00                       		bpl.s	Obj6B_ChkDel
00017B2E 7200                       		moveq	#0,d1
00017B30 1228 0019                  		move.b	$19(a0),d1
00017B34 0641 000B                  		addi.w	#$B,d1
00017B38 7400                       		moveq	#0,d2
00017B3A 1428 0016                  		move.b	$16(a0),d2
00017B3E 3602                       		move.w	d2,d3
00017B40 5243                       		addq.w	#1,d3
00017B42 6100 988C                  		bsr.w	SolidObject
00017B46                            
00017B46                            Obj6B_ChkDel:
00017B46 3028 0034                  		move.w	$34(a0),d0
00017B4A 0240 FF80                  		andi.w	#$FF80,d0
00017B4E 3238 F700                  		move.w	($FFFFF700).w,d1
00017B52 0441 0080                  		subi.w	#$80,d1
00017B56 0241 FF80                  		andi.w	#$FF80,d1
00017B5A 9041                       		sub.w	d1,d0
00017B5C 0C40 0280                  		cmpi.w	#$280,d0
00017B60 6200                       		bhi.s	loc_15D64
00017B62 4EF9 0000 F010             		jmp	DisplaySprite
00017B68                            ; ===========================================================================
00017B68                            
00017B68                            loc_15D64:
00017B68 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017B6E 6600                       		bne.s	Obj6B_Delete2
00017B70 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017B74 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017B78 7000                       		moveq	#0,d0
00017B7A 1028 0023                  		move.b	$23(a0),d0
00017B7E 6700                       		beq.s	Obj6B_Delete2
00017B80 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017B86                            
00017B86                            Obj6B_Delete2:
00017B86 4EF9 0000 F04C             		jmp	DeleteObject
00017B8C                            ; ===========================================================================
00017B8C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017B90 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017B94 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017B98                            ; ===========================================================================
00017B98                            
00017B98                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017B98 4E75                       		rts	
00017B9A                            ; ===========================================================================
00017B9A                            
00017B9A                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017B9A 4A28 0038                  		tst.b	$38(a0)
00017B9E 6600                       		bne.s	loc_15DB4
00017BA0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017BA4 7000                       		moveq	#0,d0
00017BA6 1028 003E                  		move.b	$3E(a0),d0
00017BAA 0832 0000 0000             		btst	#0,(a2,d0.w)
00017BB0 6700                       		beq.s	loc_15DC2
00017BB2 117C 0001 0038             		move.b	#1,$38(a0)
00017BB8                            
00017BB8                            loc_15DB4:
00017BB8 3028 003C                  		move.w	$3C(a0),d0
00017BBC B068 003A                  		cmp.w	$3A(a0),d0
00017BC0 6700                       		beq.s	loc_15DE0
00017BC2 5468 003A                  		addq.w	#2,$3A(a0)
00017BC6                            
00017BC6                            loc_15DC2:
00017BC6 3028 003A                  		move.w	$3A(a0),d0
00017BCA 0828 0000 0022             		btst	#0,$22(a0)
00017BD0 6700                       		beq.s	loc_15DD4
00017BD2 4440                       		neg.w	d0
00017BD4 0640 0080                  		addi.w	#$80,d0
00017BD8                            
00017BD8                            loc_15DD4:
00017BD8 3228 0034                  		move.w	$34(a0),d1
00017BDC 9240                       		sub.w	d0,d1
00017BDE 3141 0008                  		move.w	d1,8(a0)
00017BE2 4E75                       		rts	
00017BE4                            ; ===========================================================================
00017BE4                            
00017BE4                            loc_15DE0:
00017BE4 5228 0028                  		addq.b	#1,$28(a0)
00017BE8 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017BEE 4228 0038                  		clr.b	$38(a0)
00017BF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017BF6 7000                       		moveq	#0,d0
00017BF8 1028 0023                  		move.b	$23(a0),d0
00017BFC 67C8                       		beq.s	loc_15DC2
00017BFE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017C04 60C0                       		bra.s	loc_15DC2
00017C06                            ; ===========================================================================
00017C06                            
00017C06                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017C06 4A28 0038                  		tst.b	$38(a0)
00017C0A 6600                       		bne.s	loc_15E14
00017C0C 5368 0036                  		subq.w	#1,$36(a0)
00017C10 6600                       		bne.s	loc_15E1E
00017C12 117C 0001 0038             		move.b	#1,$38(a0)
00017C18                            
00017C18                            loc_15E14:
00017C18 4A68 003A                  		tst.w	$3A(a0)
00017C1C 6700                       		beq.s	loc_15E3C
00017C1E 5568 003A                  		subq.w	#2,$3A(a0)
00017C22                            
00017C22                            loc_15E1E:
00017C22 3028 003A                  		move.w	$3A(a0),d0
00017C26 0828 0000 0022             		btst	#0,$22(a0)
00017C2C 6700                       		beq.s	loc_15E30
00017C2E 4440                       		neg.w	d0
00017C30 0640 0080                  		addi.w	#$80,d0
00017C34                            
00017C34                            loc_15E30:
00017C34 3228 0034                  		move.w	$34(a0),d1
00017C38 9240                       		sub.w	d0,d1
00017C3A 3141 0008                  		move.w	d1,8(a0)
00017C3E 4E75                       		rts	
00017C40                            ; ===========================================================================
00017C40                            
00017C40                            loc_15E3C:
00017C40 5328 0028                  		subq.b	#1,$28(a0)
00017C44 4228 0038                  		clr.b	$38(a0)
00017C48 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017C4C 7000                       		moveq	#0,d0
00017C4E 1028 0023                  		move.b	$23(a0),d0
00017C52 67CE                       		beq.s	loc_15E1E
00017C54 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017C5A 60C6                       		bra.s	loc_15E1E
00017C5C                            ; ===========================================================================
00017C5C                            
00017C5C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017C5C 4A28 0038                  		tst.b	$38(a0)
00017C60 6600                       		bne.s	loc_15E7C
00017C62 4A68 003A                  		tst.w	$3A(a0)
00017C66 6700                       		beq.s	loc_15E6A
00017C68 5368 003A                  		subq.w	#1,$3A(a0)
00017C6C 6000                       		bra.s	loc_15E8E
00017C6E                            ; ===========================================================================
00017C6E                            
00017C6E                            loc_15E6A:
00017C6E 5368 0036                  		subq.w	#1,$36(a0)
00017C72 6A00                       		bpl.s	loc_15E8E
00017C74 317C 003C 0036             		move.w	#$3C,$36(a0)
00017C7A 117C 0001 0038             		move.b	#1,$38(a0)
00017C80                            
00017C80                            loc_15E7C:
00017C80 5068 003A                  		addq.w	#8,$3A(a0)
00017C84 3028 003A                  		move.w	$3A(a0),d0
00017C88 B068 003C                  		cmp.w	$3C(a0),d0
00017C8C 6600                       		bne.s	loc_15E8E
00017C8E 4228 0038                  		clr.b	$38(a0)
00017C92                            
00017C92                            loc_15E8E:
00017C92 3028 003A                  		move.w	$3A(a0),d0
00017C96 0828 0000 0022             		btst	#0,$22(a0)
00017C9C 6700                       		beq.s	loc_15EA0
00017C9E 4440                       		neg.w	d0
00017CA0 0640 0038                  		addi.w	#$38,d0
00017CA4                            
00017CA4                            loc_15EA0:
00017CA4 3228 0030                  		move.w	$30(a0),d1
00017CA8 D240                       		add.w	d0,d1
00017CAA 3141 000C                  		move.w	d1,$C(a0)
00017CAE 4E75                       		rts	
00017CB0                            ; ===========================================================================
00017CB0                            
00017CB0                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017CB0 4A28 0038                  		tst.b	$38(a0)
00017CB4 6600                       		bne.s	loc_15ED0
00017CB6 4A68 003A                  		tst.w	$3A(a0)
00017CBA 6700                       		beq.s	loc_15EBE
00017CBC 5168 003A                  		subq.w	#8,$3A(a0)
00017CC0 6000                       		bra.s	loc_15EF0
00017CC2                            ; ===========================================================================
00017CC2                            
00017CC2                            loc_15EBE:
00017CC2 5368 0036                  		subq.w	#1,$36(a0)
00017CC6 6A00                       		bpl.s	loc_15EF0
00017CC8 317C 003C 0036             		move.w	#$3C,$36(a0)
00017CCE 117C 0001 0038             		move.b	#1,$38(a0)
00017CD4                            
00017CD4                            loc_15ED0:
00017CD4 3028 003A                  		move.w	$3A(a0),d0
00017CD8 B068 003C                  		cmp.w	$3C(a0),d0
00017CDC 6700                       		beq.s	loc_15EE0
00017CDE 5068 003A                  		addq.w	#8,$3A(a0)
00017CE2 6000                       		bra.s	loc_15EF0
00017CE4                            ; ===========================================================================
00017CE4                            
00017CE4                            loc_15EE0:
00017CE4 5368 0036                  		subq.w	#1,$36(a0)
00017CE8 6A00                       		bpl.s	loc_15EF0
00017CEA 317C 003C 0036             		move.w	#$3C,$36(a0)
00017CF0 4228 0038                  		clr.b	$38(a0)
00017CF4                            
00017CF4                            loc_15EF0:
00017CF4 3028 003A                  		move.w	$3A(a0),d0
00017CF8 0828 0000 0022             		btst	#0,$22(a0)
00017CFE 6700                       		beq.s	loc_15F02
00017D00 4440                       		neg.w	d0
00017D02 0640 0038                  		addi.w	#$38,d0
00017D06                            
00017D06                            loc_15F02:
00017D06 3228 0030                  		move.w	$30(a0),d1
00017D0A D240                       		add.w	d0,d1
00017D0C 3141 000C                  		move.w	d1,$C(a0)
00017D10 4E75                       		rts	
00017D12                            ; ===========================================================================
00017D12                            
00017D12                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017D12 4A28 0038                  		tst.b	$38(a0)
00017D16 6600                       		bne.s	loc_15F3E
00017D18 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017D1C 7000                       		moveq	#0,d0
00017D1E 1028 003E                  		move.b	$3E(a0),d0
00017D22 0832 0000 0000             		btst	#0,(a2,d0.w)
00017D28 6700                       		beq.s	locret_15F5C
00017D2A 117C 0001 0038             		move.b	#1,$38(a0)
00017D30 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D34 7000                       		moveq	#0,d0
00017D36 1028 0023                  		move.b	$23(a0),d0
00017D3A 6700                       		beq.s	loc_15F3E
00017D3C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017D42                            
00017D42                            loc_15F3E:
00017D42 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017D4A 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017D52 3168 0008 0034             		move.w	8(a0),$34(a0)
00017D58 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017D5E 6700                       		beq.s	loc_15F5E
00017D60                            
00017D60                            locret_15F5C:
00017D60 4E75                       		rts	
00017D62                            ; ===========================================================================
00017D62                            
00017D62                            loc_15F5E:
00017D62 4228 0028                  		clr.b	$28(a0)
00017D66 4228 0038                  		clr.b	$38(a0)
00017D6A 4E75                       		rts	
00017D6C                            ; ===========================================================================
00017D6C                            ; ---------------------------------------------------------------------------
00017D6C                            ; Sprite mappings - stomper and	platforms (SBZ)
00017D6C                            ; ---------------------------------------------------------------------------
00017D6C                            Map_obj6B:
00017D6C                            	include "_maps\obj6B.asm"
00017D6C                            ; ---------------------------------------------------------------------------
00017D6C                            ; Sprite mappings - stomper and	platforms (SBZ)
00017D6C                            ; ---------------------------------------------------------------------------
00017D6C 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017D70 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017D74 0000                       		dc.w byte_15FB0-Map_obj6B
00017D76 04                         byte_15F72:	dc.b 4
00017D77 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017D7C F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017D81 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017D86 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017D8B 08                         byte_15F87:	dc.b 8
00017D8C E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017D91 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017D96 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017D9B E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017DA0 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017DA5 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017DAA 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017DAF 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017DB4 0E                         byte_15FB0:	dc.b $E
00017DB5 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017DBA C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017DBF C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017DC4 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017DC9 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017DCE C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017DD3 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017DD8 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017DDD E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017DE2 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017DE7 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017DEC 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017DF1 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017DF6 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017DFC 00                         		even
00017DFC 00                         		even
00017DFC                            
00017DFC                            ; ===========================================================================
00017DFC                            ; ---------------------------------------------------------------------------
00017DFC                            ; Object 6C - vanishing	platforms (SBZ)
00017DFC                            ; ---------------------------------------------------------------------------
00017DFC                            
00017DFC                            Obj6C:					; XREF: Obj_Index
00017DFC 7000                       		moveq	#0,d0
00017DFE 1028 0024                  		move.b	$24(a0),d0
00017E02 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00017E06 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00017E0A                            ; ===========================================================================
00017E0A 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017E0C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017E0E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017E10 0000                       		dc.w loc_16068-Obj6C_Index
00017E12                            ; ===========================================================================
00017E12                            
00017E12                            Obj6C_Main:				; XREF: Obj6C_Index
00017E12 5C28 0024                  		addq.b	#6,$24(a0)
00017E16 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017E1E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00017E24 0028 0004 0001             		ori.b	#4,1(a0)
00017E2A 117C 0010 0019             		move.b	#$10,$19(a0)
00017E30 117C 0004 0018             		move.b	#4,$18(a0)
00017E36 7000                       		moveq	#0,d0
00017E38 1028 0028                  		move.b	$28(a0),d0	; get object type
00017E3C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017E40 5240                       		addq.w	#1,d0		; add 1
00017E42 EF48                       		lsl.w	#7,d0		; multiply by $80
00017E44 3200                       		move.w	d0,d1
00017E46 5340                       		subq.w	#1,d0
00017E48 3140 0030                  		move.w	d0,$30(a0)
00017E4C 3140 0032                  		move.w	d0,$32(a0)
00017E50 7000                       		moveq	#0,d0
00017E52 1028 0028                  		move.b	$28(a0),d0	; get object type
00017E56 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017E5A 0641 0080                  		addi.w	#$80,d1
00017E5E C0C1                       		mulu.w	d1,d0
00017E60 E088                       		lsr.l	#8,d0
00017E62 3140 0036                  		move.w	d0,$36(a0)
00017E66 5341                       		subq.w	#1,d1
00017E68 3141 0038                  		move.w	d1,$38(a0)
00017E6C                            
00017E6C                            loc_16068:				; XREF: Obj6C_Index
00017E6C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017E70 9068 0036                  		sub.w	$36(a0),d0
00017E74 C068 0038                  		and.w	$38(a0),d0
00017E78 6600                       		bne.s	Obj6C_Animate
00017E7A 5928 0024                  		subq.b	#4,$24(a0)
00017E7E 6000                       		bra.s	Obj6C_Vanish
00017E80                            ; ===========================================================================
00017E80                            
00017E80                            Obj6C_Animate:
00017E80 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017E86 4EB9 0000 C10C             		jsr	AnimateSprite
00017E8C 6000 921A                  		bra.w	MarkObjGone
00017E90                            ; ===========================================================================
00017E90                            
00017E90                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017E90 5368 0030                  		subq.w	#1,$30(a0)
00017E94 6A00                       		bpl.s	loc_160AA
00017E96 317C 007F 0030             		move.w	#127,$30(a0)
00017E9C 4A28 001C                  		tst.b	$1C(a0)
00017EA0 6700                       		beq.s	loc_160A4
00017EA2 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017EA8                            
00017EA8                            loc_160A4:
00017EA8 0868 0000 001C             		bchg	#0,$1C(a0)
00017EAE                            
00017EAE                            loc_160AA:
00017EAE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017EB4 4EB9 0000 C10C             		jsr	AnimateSprite
00017EBA 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017EC0 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017EC2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017EC8 6600                       		bne.s	loc_160D6
00017ECA 7200                       		moveq	#0,d1
00017ECC 1228 0019                  		move.b	$19(a0),d1
00017ED0 4EB9 0000 8E64             		jsr	(PlatformObject).l
00017ED6 6000 91D0                  		bra.w	MarkObjGone
00017EDA                            ; ===========================================================================
00017EDA                            
00017EDA                            loc_160D6:
00017EDA 7200                       		moveq	#0,d1
00017EDC 1228 0019                  		move.b	$19(a0),d1
00017EE0 4EB9 0000 8FD8             		jsr	(ExitPlatform).l
00017EE6 3428 0008                  		move.w	8(a0),d2
00017EEA 4EB9 0000 9542             		jsr	(MvSonicOnPtfm2).l
00017EF0 6000 91B6                  		bra.w	MarkObjGone
00017EF4                            ; ===========================================================================
00017EF4                            
00017EF4                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017EF4 0828 0003 0022             		btst	#3,$22(a0)
00017EFA 6700                       		beq.s	Obj6C_Display
00017EFC 43F8 D000                  		lea	($FFFFD000).w,a1
00017F00 08A9 0003 0022             		bclr	#3,$22(a1)
00017F06 08A8 0003 0022             		bclr	#3,$22(a0)
00017F0C 117C 0002 0024             		move.b	#2,$24(a0)
00017F12 4228 0025                  		clr.b	$25(a0)
00017F16                            
00017F16                            Obj6C_Display:
00017F16 6000 9190                  		bra.w	MarkObjGone
00017F1A                            ; ===========================================================================
00017F1A                            Ani_obj6C:
00017F1A                            	include "_anim\obj6C.asm"
00017F1A                            ; ---------------------------------------------------------------------------
00017F1A                            ; Animation script - vanishing platforms (SBZ)
00017F1A                            ; ---------------------------------------------------------------------------
00017F1A 0000                       		dc.w byte_1611A-Ani_obj6C
00017F1C 0000                       		dc.w byte_16122-Ani_obj6C
00017F1E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017F26 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017F2E                            		even
00017F2E                            		even
00017F2E                            
00017F2E                            ; ---------------------------------------------------------------------------
00017F2E                            ; Sprite mappings - vanishing platforms	(SBZ)
00017F2E                            ; ---------------------------------------------------------------------------
00017F2E                            Map_obj6C:
00017F2E                            	include "_maps\obj6C.asm"
00017F2E                            ; ---------------------------------------------------------------------------
00017F2E                            ; Sprite mappings - vanishing platforms	(SBZ)
00017F2E                            ; ---------------------------------------------------------------------------
00017F2E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017F32 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017F36 01                         byte_16132:	dc.b 1
00017F37 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017F3C 01                         byte_16138:	dc.b 1
00017F3D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017F42 01                         byte_1613E:	dc.b 1
00017F43 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017F48 00                         byte_16144:	dc.b 0
00017F4A 00                         		even
00017F4A 00                         		even
00017F4A                            
00017F4A                            ; ===========================================================================
00017F4A                            ; ---------------------------------------------------------------------------
00017F4A                            ; Object 6E - electrocution orbs (SBZ)
00017F4A                            ; ---------------------------------------------------------------------------
00017F4A                            
00017F4A                            Obj6E:					; XREF: Obj_Index
00017F4A 7000                       		moveq	#0,d0
00017F4C 1028 0024                  		move.b	$24(a0),d0
00017F50 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017F54 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017F58                            ; ===========================================================================
00017F58 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017F5A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017F5C                            ; ===========================================================================
00017F5C                            
00017F5C                            Obj6E_Main:				; XREF: Obj6E_Index
00017F5C 5428 0024                  		addq.b	#2,$24(a0)
00017F60 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017F68 317C 047E 0002             		move.w	#$47E,2(a0)
00017F6E 0028 0004 0001             		ori.b	#4,1(a0)
00017F74 117C 0028 0019             		move.b	#$28,$19(a0)
00017F7A 7000                       		moveq	#0,d0
00017F7C 1028 0028                  		move.b	$28(a0),d0	; read object type
00017F80 E948                       		lsl.w	#4,d0		; multiply by $10
00017F82 5340                       		subq.w	#1,d0
00017F84 3140 0034                  		move.w	d0,$34(a0)
00017F88                            
00017F88                            Obj6E_Shock:				; XREF: Obj6E_Index
00017F88 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017F8C C068 0034                  		and.w	$34(a0),d0
00017F90 6600                       		bne.s	Obj6E_Animate
00017F92 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017F98 4A28 0001                  		tst.b	1(a0)
00017F9C 6A00                       		bpl.s	Obj6E_Animate
00017F9E 303C 00B1                  		move.w	#$B1,d0
00017FA2 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play electricity sound
00017FA8                            
00017FA8                            Obj6E_Animate:
00017FA8 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017FAE 4EB9 0000 C10C             		jsr	AnimateSprite
00017FB4 117C 0000 0020             		move.b	#0,$20(a0)
00017FBA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017FC0 6600                       		bne.s	Obj6E_Display	; if not, branch
00017FC2 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017FC8                            
00017FC8                            Obj6E_Display:
00017FC8 6000 90DE                  		bra.w	MarkObjGone
00017FCC                            ; ===========================================================================
00017FCC                            Ani_obj6E:
00017FCC                            	include "_anim\obj6E.asm"
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            ; Animation script - electrocution orbs (SBZ)
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC 0000                       		dc.w byte_161CC-Ani_obj6E
00017FCE 0000                       		dc.w byte_161D0-Ani_obj6E
00017FD0 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017FD4 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017FE4                            		even
00017FE4                            		even
00017FE4                            
00017FE4                            ; ---------------------------------------------------------------------------
00017FE4                            ; Sprite mappings - electrocution orbs (SBZ)
00017FE4                            ; ---------------------------------------------------------------------------
00017FE4                            Map_obj6E:
00017FE4                            	include "_maps\obj6E.asm"
00017FE4                            ; ---------------------------------------------------------------------------
00017FE4                            ; Sprite mappings - electrocution orbs (SBZ)
00017FE4                            ; ---------------------------------------------------------------------------
00017FE4 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017FE8 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017FEC 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017FF0 02                         byte_161EC:	dc.b 2
00017FF1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017FF6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017FFB 03                         byte_161F7:	dc.b 3
00017FFC F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018001 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018006 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001800B 05                         byte_16207:	dc.b 5
0001800C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018011 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018016 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001801B F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018020 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018025 04                         byte_16221:	dc.b 4
00018026 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001802B 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018030 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018035 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001803A 06                         byte_16236:	dc.b 6
0001803B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018040 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018045 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001804A F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
0001804F F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00018054 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00018059 04                         byte_16255:	dc.b 4
0001805A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001805F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018064 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00018069 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
0001806E                            		even
0001806E                            		even
0001806E                            
0001806E                            ; ===========================================================================
0001806E                            ; ---------------------------------------------------------------------------
0001806E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001806E                            ; ---------------------------------------------------------------------------
0001806E                            
0001806E                            Obj6F:					; XREF: Obj_Index
0001806E 7000                       		moveq	#0,d0
00018070 1028 0024                  		move.b	$24(a0),d0
00018074 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00018078 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001807C 3028 0030                  		move.w	$30(a0),d0
00018080 0240 FF80                  		andi.w	#$FF80,d0
00018084 3238 F700                  		move.w	($FFFFF700).w,d1
00018088 0441 0080                  		subi.w	#$80,d1
0001808C 0241 FF80                  		andi.w	#$FF80,d1
00018090 9041                       		sub.w	d1,d0
00018092 0C40 0280                  		cmpi.w	#$280,d0
00018096 6200                       		bhi.s	loc_1629A
00018098                            
00018098                            Obj6F_Display:
00018098 4EF9 0000 F010             		jmp	DisplaySprite
0001809E                            ; ===========================================================================
0001809E                            
0001809E                            loc_1629A:
0001809E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000180A4 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000180A6 0C40 FF80                  		cmpi.w	#-$80,d0
000180AA 64EC                       		bcc.s	Obj6F_Display
000180AC                            
000180AC                            Obj6F_Act1or2:
000180AC 1028 002F                  		move.b	$2F(a0),d0
000180B0 6A00                       		bpl.s	Obj6F_Delete
000180B2 0240 007F                  		andi.w	#$7F,d0
000180B6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000180BA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000180C0                            
000180C0                            Obj6F_Delete:
000180C0 4EF9 0000 F04C             		jmp	DeleteObject
000180C6                            ; ===========================================================================
000180C6 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000180C8 0000                       		dc.w loc_163D8-Obj6F_Index
000180CA                            ; ===========================================================================
000180CA                            
000180CA                            Obj6F_Main:				; XREF: Obj6F_Index
000180CA 1028 0028                  		move.b	$28(a0),d0
000180CE 6B00 0000                  		bmi.w	loc_16380
000180D2 5428 0024                  		addq.b	#2,$24(a0)
000180D6 217C 0001 773E 0004        		move.l	#Map_obj69a,4(a0)
000180DE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000180E4 117C 0010 0019             		move.b	#$10,$19(a0)
000180EA 0028 0004 0001             		ori.b	#4,1(a0)
000180F0 117C 0004 0018             		move.b	#4,$18(a0)
000180F6 7000                       		moveq	#0,d0
000180F8 1028 0028                  		move.b	$28(a0),d0
000180FC 3200                       		move.w	d0,d1
000180FE E648                       		lsr.w	#3,d0
00018100 0240 001E                  		andi.w	#$1E,d0
00018104 45FA 0000                  		lea	off_164A6(pc),a2
00018108 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001810C 315A 0038                  		move.w	(a2)+,$38(a0)
00018110 315A 0030                  		move.w	(a2)+,$30(a0)
00018114 214A 003C                  		move.l	a2,$3C(a0)
00018118 0241 000F                  		andi.w	#$F,d1
0001811C E549                       		lsl.w	#2,d1
0001811E 1141 0038                  		move.b	d1,$38(a0)
00018122 117C 0004 003A             		move.b	#4,$3A(a0)
00018128 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001812C 6700                       		beq.s	loc_16356
0001812E 117C 0001 003B             		move.b	#1,$3B(a0)
00018134 4428 003A                  		neg.b	$3A(a0)
00018138 7200                       		moveq	#0,d1
0001813A 1228 0038                  		move.b	$38(a0),d1
0001813E D228 003A                  		add.b	$3A(a0),d1
00018142 B228 0039                  		cmp.b	$39(a0),d1
00018146 6500                       		bcs.s	loc_16352
00018148 1001                       		move.b	d1,d0
0001814A 7200                       		moveq	#0,d1
0001814C 4A00                       		tst.b	d0
0001814E 6A00                       		bpl.s	loc_16352
00018150 1228 0039                  		move.b	$39(a0),d1
00018154 5901                       		subq.b	#4,d1
00018156                            
00018156                            loc_16352:
00018156 1141 0038                  		move.b	d1,$38(a0)
0001815A                            
0001815A                            loc_16356:
0001815A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00018160 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00018166 4A41                       		tst.w	d1
00018168 6600                       		bne.s	loc_1636C
0001816A 117C 0001 001C             		move.b	#1,$1C(a0)
00018170                            
00018170                            loc_1636C:
00018170 0C41 0008                  		cmpi.w	#8,d1
00018174 6600                       		bne.s	loc_16378
00018176 117C 0000 001C             		move.b	#0,$1C(a0)
0001817C                            
0001817C                            loc_16378:
0001817C 6100 BDCA                  		bsr.w	Obj63_ChangeDir
00018180 6000 0000                  		bra.w	loc_163D8
00018184                            ; ===========================================================================
00018184                            
00018184                            loc_16380:				; XREF: Obj6F_Main
00018184 1140 002F                  		move.b	d0,$2F(a0)
00018188 0240 007F                  		andi.w	#$7F,d0
0001818C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00018190 08F2 0000 0000             		bset	#0,(a2,d0.w)
00018196 6700                       		beq.s	loc_1639A
00018198 4EF9 0000 F04C             		jmp	DeleteObject
0001819E                            ; ===========================================================================
0001819E                            
0001819E                            loc_1639A:
0001819E D040                       		add.w	d0,d0
000181A0 0240 001E                  		andi.w	#$1E,d0
000181A4 0640 0080                  		addi.w	#$80,d0
000181A8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000181AE D4F2 0000                  		adda.w	(a2,d0.w),a2
000181B2 321A                       		move.w	(a2)+,d1
000181B4 2248                       		movea.l	a0,a1
000181B6 6000                       		bra.s	Obj6F_LoadPform
000181B8                            ; ===========================================================================
000181B8                            
000181B8                            Obj6F_Loop:
000181B8 4EB9 0000 F496             		jsr	SingleObjLoad
000181BE 6600                       		bne.s	loc_163D0
000181C0                            
000181C0                            Obj6F_LoadPform:			; XREF: loc_1639A
000181C0 12BC 006F                  		move.b	#$6F,0(a1)
000181C4 335A 0008                  		move.w	(a2)+,8(a1)
000181C8 335A 000C                  		move.w	(a2)+,$C(a1)
000181CC 301A                       		move.w	(a2)+,d0
000181CE 1340 0028                  		move.b	d0,$28(a1)
000181D2                            
000181D2                            loc_163D0:
000181D2 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000181D6                            
000181D6 588F                       		addq.l	#4,sp
000181D8 4E75                       		rts	
000181DA                            ; ===========================================================================
000181DA                            
000181DA                            loc_163D8:				; XREF: Obj6F_Index
000181DA 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000181E0 4EB9 0000 C10C             		jsr	AnimateSprite
000181E6 4A28 001A                  		tst.b	$1A(a0)
000181EA 6600                       		bne.s	loc_16404
000181EC 3F28 0008                  		move.w	8(a0),-(sp)
000181F0 6100 0000                  		bsr.w	loc_16424
000181F4 323C 001B                  		move.w	#$1B,d1
000181F8 343C 0007                  		move.w	#7,d2
000181FC 3602                       		move.w	d2,d3
000181FE 5243                       		addq.w	#1,d3
00018200 381F                       		move.w	(sp)+,d4
00018202 6000 91CC                  		bra.w	SolidObject
00018206                            ; ===========================================================================
00018206                            
00018206                            loc_16404:
00018206 0828 0003 0022             		btst	#3,$22(a0)
0001820C 6700                       		beq.s	loc_16420
0001820E 43F8 D000                  		lea	($FFFFD000).w,a1
00018212 08A9 0003 0022             		bclr	#3,$22(a1)
00018218 08A8 0003 0022             		bclr	#3,$22(a0)
0001821E 4228 0025                  		clr.b	$25(a0)
00018222                            
00018222                            loc_16420:
00018222 6000 0002                  		bra.w	*+4
00018226                            
00018226                            loc_16424:
00018226 3028 0008                  		move.w	8(a0),d0
0001822A B068 0034                  		cmp.w	$34(a0),d0
0001822E 6600                       		bne.s	loc_16484
00018230 3028 000C                  		move.w	$C(a0),d0
00018234 B068 0036                  		cmp.w	$36(a0),d0
00018238 6600                       		bne.s	loc_16484
0001823A 7200                       		moveq	#0,d1
0001823C 1228 0038                  		move.b	$38(a0),d1
00018240 D228 003A                  		add.b	$3A(a0),d1
00018244 B228 0039                  		cmp.b	$39(a0),d1
00018248 6500                       		bcs.s	loc_16456
0001824A 1001                       		move.b	d1,d0
0001824C 7200                       		moveq	#0,d1
0001824E 4A00                       		tst.b	d0
00018250 6A00                       		bpl.s	loc_16456
00018252 1228 0039                  		move.b	$39(a0),d1
00018256 5901                       		subq.b	#4,d1
00018258                            
00018258                            loc_16456:
00018258 1141 0038                  		move.b	d1,$38(a0)
0001825C 2268 003C                  		movea.l	$3C(a0),a1
00018260 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00018266 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001826C 4A41                       		tst.w	d1
0001826E 6600                       		bne.s	loc_16474
00018270 117C 0001 001C             		move.b	#1,$1C(a0)
00018276                            
00018276                            loc_16474:
00018276 0C41 0008                  		cmpi.w	#8,d1
0001827A 6600                       		bne.s	loc_16480
0001827C 117C 0000 001C             		move.b	#0,$1C(a0)
00018282                            
00018282                            loc_16480:
00018282 6100 BCC4                  		bsr.w	Obj63_ChangeDir
00018286                            
00018286                            loc_16484:
00018286 4EF9 0000 EFEA             		jmp	SpeedToPos
0001828C                            ; ===========================================================================
0001828C                            Ani_obj6F:
0001828C                            	include "_anim\obj6F.asm"
0001828C                            ; ---------------------------------------------------------------------------
0001828C                            ; Animation script - platform on conveyor belt (SBZ)
0001828C                            ; ---------------------------------------------------------------------------
0001828C 0000                       		dc.w byte_1648E-Ani_obj6F
0001828E 0000                       		dc.w byte_164A2-Ani_obj6F
00018290 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001829D 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000182A4 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000182A8 00                         		even
000182A8 00                         		even
000182A8                            
000182A8 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000182AE 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000182B4 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000182C8 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000182DC 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000182F0 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018304 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00018318 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001832C                            ; ===========================================================================
0001832C                            ; ---------------------------------------------------------------------------
0001832C                            ; Object 70 - large girder block (SBZ)
0001832C                            ; ---------------------------------------------------------------------------
0001832C                            
0001832C                            Obj70:					; XREF: Obj_Index
0001832C 7000                       		moveq	#0,d0
0001832E 1028 0024                  		move.b	$24(a0),d0
00018332 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00018336 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001833A                            ; ===========================================================================
0001833A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001833C 0000                       		dc.w Obj70_Action-Obj70_Index
0001833E                            ; ===========================================================================
0001833E                            
0001833E                            Obj70_Main:				; XREF: Obj70_Index
0001833E 5428 0024                  		addq.b	#2,$24(a0)
00018342 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001834A 317C 42F0 0002             		move.w	#$42F0,2(a0)
00018350 0028 0004 0001             		ori.b	#4,1(a0)
00018356 117C 0004 0018             		move.b	#4,$18(a0)
0001835C 117C 0060 0019             		move.b	#$60,$19(a0)
00018362 117C 0018 0016             		move.b	#$18,$16(a0)
00018368 3168 0008 0032             		move.w	8(a0),$32(a0)
0001836E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018374 6100 0000                  		bsr.w	Obj70_Move2
00018378                            
00018378                            Obj70_Action:				; XREF: Obj70_Index
00018378 3F28 0008                  		move.w	8(a0),-(sp)
0001837C 4A68 003A                  		tst.w	$3A(a0)
00018380 6700                       		beq.s	Obj70_Move
00018382 5368 003A                  		subq.w	#1,$3A(a0)
00018386 6600                       		bne.s	Obj70_Solid
00018388                            
00018388                            Obj70_Move:
00018388 4EB9 0000 EFEA             		jsr	SpeedToPos
0001838E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00018392 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00018394 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00018398                            
00018398                            Obj70_Solid:
00018398 381F                       		move.w	(sp)+,d4
0001839A 4A28 0001                  		tst.b	1(a0)
0001839E 6A00                       		bpl.s	Obj70_ChkDel
000183A0 7200                       		moveq	#0,d1
000183A2 1228 0019                  		move.b	$19(a0),d1
000183A6 0641 000B                  		addi.w	#$B,d1
000183AA 7400                       		moveq	#0,d2
000183AC 1428 0016                  		move.b	$16(a0),d2
000183B0 3602                       		move.w	d2,d3
000183B2 5243                       		addq.w	#1,d3
000183B4 6100 901A                  		bsr.w	SolidObject
000183B8                            
000183B8                            Obj70_ChkDel:
000183B8 3028 0032                  		move.w	$32(a0),d0
000183BC 0240 FF80                  		andi.w	#$FF80,d0
000183C0 3238 F700                  		move.w	($FFFFF700).w,d1
000183C4 0441 0080                  		subi.w	#$80,d1
000183C8 0241 FF80                  		andi.w	#$FF80,d1
000183CC 9041                       		sub.w	d1,d0
000183CE 0C40 0280                  		cmpi.w	#$280,d0
000183D2 6200                       		bhi.s	Obj70_Delete
000183D4 4EF9 0000 F010             		jmp	DisplaySprite
000183DA                            ; ===========================================================================
000183DA                            
000183DA                            Obj70_Delete:
000183DA 4EF9 0000 F04C             		jmp	DeleteObject
000183E0                            ; ===========================================================================
000183E0                            
000183E0                            Obj70_Move2:				; XREF: Obj70_Main
000183E0 1028 0038                  		move.b	$38(a0),d0
000183E4 0240 0018                  		andi.w	#$18,d0
000183E8 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000183EE 43F1 0000                  		lea	(a1,d0.w),a1
000183F2 3159 0010                  		move.w	(a1)+,$10(a0)
000183F6 3159 0012                  		move.w	(a1)+,$12(a0)
000183FA 3159 0034                  		move.w	(a1)+,$34(a0)
000183FE 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00018402 317C 0007 003A             		move.w	#7,$3A(a0)
00018408 4E75                       		rts	
0001840A                            ; ===========================================================================
0001840A 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00018412 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001841A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00018422 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001842A                            ; ---------------------------------------------------------------------------
0001842A                            ; Sprite mappings - large girder block (SBZ)
0001842A                            ; ---------------------------------------------------------------------------
0001842A                            Map_obj70:
0001842A                            	include "_maps\obj70.asm"
0001842A                            ; ---------------------------------------------------------------------------
0001842A                            ; Sprite mappings - large girder block (SBZ)
0001842A                            ; ---------------------------------------------------------------------------
0001842A 0000                       		dc.w byte_1662A-Map_obj70
0001842C 0C                         byte_1662A:	dc.b $C
0001842D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018432 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018437 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001843C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00018441 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018446 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001844B E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018450 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018455 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001845A 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001845F E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018464 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001846A 00                         		even
0001846A 00                         		even
0001846A                            
0001846A                            ; ===========================================================================
0001846A                            ; ---------------------------------------------------------------------------
0001846A                            ; Object 72 - teleporter (SBZ)
0001846A                            ; ---------------------------------------------------------------------------
0001846A                            
0001846A                            Obj72:					; XREF: Obj_Index
0001846A 7000                       		moveq	#0,d0
0001846C 1028 0024                  		move.b	$24(a0),d0
00018470 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018474 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018478 3028 0008                  		move.w	8(a0),d0
0001847C 0240 FF80                  		andi.w	#$FF80,d0
00018480 3238 F700                  		move.w	($FFFFF700).w,d1
00018484 0441 0080                  		subi.w	#$80,d1
00018488 0241 FF80                  		andi.w	#$FF80,d1
0001848C 9041                       		sub.w	d1,d0
0001848E 0C40 0280                  		cmpi.w	#$280,d0
00018492 6200                       		bhi.s	Obj72_Delete
00018494 4E75                       		rts	
00018496                            ; ===========================================================================
00018496                            
00018496                            Obj72_Delete:
00018496 4EF9 0000 F04C             		jmp	DeleteObject
0001849C                            ; ===========================================================================
0001849C 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001849E 0000                       		dc.w loc_166C8-Obj72_Index
000184A0 0000                       		dc.w loc_1675E-Obj72_Index
000184A2 0000                       		dc.w loc_16798-Obj72_Index
000184A4                            ; ===========================================================================
000184A4                            
000184A4                            Obj72_Main:				; XREF: Obj72_Index
000184A4 5428 0024                  		addq.b	#2,$24(a0)
000184A8 1028 0028                  		move.b	$28(a0),d0
000184AC D040                       		add.w	d0,d0
000184AE 0240 001E                  		andi.w	#$1E,d0
000184B2 45FA 0000                  		lea	Obj72_Data(pc),a2
000184B6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000184BA 315A 003A                  		move.w	(a2)+,$3A(a0)
000184BE 214A 003C                  		move.l	a2,$3C(a0)
000184C2 315A 0036                  		move.w	(a2)+,$36(a0)
000184C6 315A 0038                  		move.w	(a2)+,$38(a0)
000184CA                            
000184CA                            loc_166C8:				; XREF: Obj72_Index
000184CA 43F8 D000                  		lea	($FFFFD000).w,a1
000184CE 3029 0008                  		move.w	8(a1),d0
000184D2 9068 0008                  		sub.w	8(a0),d0
000184D6 0828 0000 0022             		btst	#0,$22(a0)
000184DC 6700                       		beq.s	loc_166E0
000184DE 0640 000F                  		addi.w	#$F,d0
000184E2                            
000184E2                            loc_166E0:
000184E2 0C40 0010                  		cmpi.w	#$10,d0
000184E6 6400                       		bcc.s	locret_1675C
000184E8 3229 000C                  		move.w	$C(a1),d1
000184EC 9268 000C                  		sub.w	$C(a0),d1
000184F0 0641 0020                  		addi.w	#$20,d1
000184F4 0C41 0040                  		cmpi.w	#$40,d1
000184F8 6400                       		bcc.s	locret_1675C
000184FA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000184FE 6600                       		bne.s	locret_1675C
00018500 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018506 6600                       		bne.s	loc_1670E
00018508 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001850E 6500                       		bcs.s	locret_1675C
00018510                            
00018510                            loc_1670E:
00018510 5428 0024                  		addq.b	#2,$24(a0)
00018514 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001851A 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00018520 337C 0800 0014             		move.w	#$800,$14(a1)
00018526 337C 0000 0010             		move.w	#0,$10(a1)
0001852C 337C 0000 0012             		move.w	#0,$12(a1)
00018532 08A8 0005 0022             		bclr	#5,$22(a0)
00018538 08A9 0005 0022             		bclr	#5,$22(a1)
0001853E 08E9 0001 0022             		bset	#1,$22(a1)
00018544 3368 0008 0008             		move.w	8(a0),8(a1)
0001854A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018550 4228 0032                  		clr.b	$32(a0)
00018554 303C 00BE                  		move.w	#$BE,d0
00018558 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001855E                            
0001855E                            locret_1675C:
0001855E 4E75                       		rts	
00018560                            ; ===========================================================================
00018560                            
00018560                            loc_1675E:				; XREF: Obj72_Index
00018560 43F8 D000                  		lea	($FFFFD000).w,a1
00018564 1028 0032                  		move.b	$32(a0),d0
00018568 5428 0032                  		addq.b	#2,$32(a0)
0001856C 4EB9 0000 29AE             		jsr	(CalcSine).l
00018572 EA40                       		asr.w	#5,d0
00018574 3428 000C                  		move.w	$C(a0),d2
00018578 9440                       		sub.w	d0,d2
0001857A 3342 000C                  		move.w	d2,$C(a1)
0001857E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018584 6600                       		bne.s	locret_16796
00018586 6100 0000                  		bsr.w	sub_1681C
0001858A 5428 0024                  		addq.b	#2,$24(a0)
0001858E 303C 00BC                  		move.w	#$BC,d0
00018592 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play teleport sound
00018598                            
00018598                            locret_16796:
00018598 4E75                       		rts	
0001859A                            ; ===========================================================================
0001859A                            
0001859A                            loc_16798:				; XREF: Obj72_Index
0001859A 588F                       		addq.l	#4,sp
0001859C 43F8 D000                  		lea	($FFFFD000).w,a1
000185A0 5328 002E                  		subq.b	#1,$2E(a0)
000185A4 6A00                       		bpl.s	loc_167DA
000185A6 3368 0036 0008             		move.w	$36(a0),8(a1)
000185AC 3368 0038 000C             		move.w	$38(a0),$C(a1)
000185B2 7200                       		moveq	#0,d1
000185B4 1228 003A                  		move.b	$3A(a0),d1
000185B8 5801                       		addq.b	#4,d1
000185BA B228 003B                  		cmp.b	$3B(a0),d1
000185BE 6500                       		bcs.s	loc_167C2
000185C0 7200                       		moveq	#0,d1
000185C2 6000                       		bra.s	loc_16800
000185C4                            ; ===========================================================================
000185C4                            
000185C4                            loc_167C2:
000185C4 1141 003A                  		move.b	d1,$3A(a0)
000185C8 2468 003C                  		movea.l	$3C(a0),a2
000185CC 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000185D2 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000185D8 6000 0000                  		bra.w	sub_1681C
000185DC                            ; ===========================================================================
000185DC                            
000185DC                            loc_167DA:
000185DC 2429 0008                  		move.l	8(a1),d2
000185E0 2629 000C                  		move.l	$C(a1),d3
000185E4 3029 0010                  		move.w	$10(a1),d0
000185E8 48C0                       		ext.l	d0
000185EA E180                       		asl.l	#8,d0
000185EC D480                       		add.l	d0,d2
000185EE 3029 0012                  		move.w	$12(a1),d0
000185F2 48C0                       		ext.l	d0
000185F4 E180                       		asl.l	#8,d0
000185F6 D680                       		add.l	d0,d3
000185F8 2342 0008                  		move.l	d2,8(a1)
000185FC 2343 000C                  		move.l	d3,$C(a1)
00018600 4E75                       		rts	
00018602                            ; ===========================================================================
00018602                            
00018602                            loc_16800:
00018602 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018608 4228 0024                  		clr.b	$24(a0)
0001860C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018610 337C 0000 0010             		move.w	#0,$10(a1)
00018616 337C 0200 0012             		move.w	#$200,$12(a1)
0001861C 4E75                       		rts	
0001861E                            
0001861E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001861E                            
0001861E                            
0001861E                            sub_1681C:
0001861E 7000                       		moveq	#0,d0
00018620 343C 1000                  		move.w	#$1000,d2
00018624 3028 0036                  		move.w	$36(a0),d0
00018628 9069 0008                  		sub.w	8(a1),d0
0001862C 6C00                       		bge.s	loc_16830
0001862E 4440                       		neg.w	d0
00018630 4442                       		neg.w	d2
00018632                            
00018632                            loc_16830:
00018632 7200                       		moveq	#0,d1
00018634 363C 1000                  		move.w	#$1000,d3
00018638 3228 0038                  		move.w	$38(a0),d1
0001863C 9269 000C                  		sub.w	$C(a1),d1
00018640 6C00                       		bge.s	loc_16844
00018642 4441                       		neg.w	d1
00018644 4443                       		neg.w	d3
00018646                            
00018646                            loc_16844:
00018646 B240                       		cmp.w	d0,d1
00018648 6500                       		bcs.s	loc_1687A
0001864A 7200                       		moveq	#0,d1
0001864C 3228 0038                  		move.w	$38(a0),d1
00018650 9269 000C                  		sub.w	$C(a1),d1
00018654 4841                       		swap	d1
00018656 83C3                       		divs.w	d3,d1
00018658 7000                       		moveq	#0,d0
0001865A 3028 0036                  		move.w	$36(a0),d0
0001865E 9069 0008                  		sub.w	8(a1),d0
00018662 6700                       		beq.s	loc_16866
00018664 4840                       		swap	d0
00018666 81C1                       		divs.w	d1,d0
00018668                            
00018668                            loc_16866:
00018668 3340 0010                  		move.w	d0,$10(a1)
0001866C 3343 0012                  		move.w	d3,$12(a1)
00018670 4A41                       		tst.w	d1
00018672 6A00                       		bpl.s	loc_16874
00018674 4441                       		neg.w	d1
00018676                            
00018676                            loc_16874:
00018676 3141 002E                  		move.w	d1,$2E(a0)
0001867A 4E75                       		rts	
0001867C                            ; ===========================================================================
0001867C                            
0001867C                            loc_1687A:
0001867C 7000                       		moveq	#0,d0
0001867E 3028 0036                  		move.w	$36(a0),d0
00018682 9069 0008                  		sub.w	8(a1),d0
00018686 4840                       		swap	d0
00018688 81C2                       		divs.w	d2,d0
0001868A 7200                       		moveq	#0,d1
0001868C 3228 0038                  		move.w	$38(a0),d1
00018690 9269 000C                  		sub.w	$C(a1),d1
00018694 6700                       		beq.s	loc_16898
00018696 4841                       		swap	d1
00018698 83C0                       		divs.w	d0,d1
0001869A                            
0001869A                            loc_16898:
0001869A 3341 0012                  		move.w	d1,$12(a1)
0001869E 3342 0010                  		move.w	d2,$10(a1)
000186A2 4A40                       		tst.w	d0
000186A4 6A00                       		bpl.s	loc_168A6
000186A6 4440                       		neg.w	d0
000186A8                            
000186A8                            loc_168A6:
000186A8 3140 002E                  		move.w	d0,$2E(a0)
000186AC 4E75                       		rts	
000186AE                            ; End of function sub_1681C
000186AE                            
000186AE                            ; ===========================================================================
000186AE 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000186B4 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000186BA 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000186BE 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000186C4 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000186CA 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000186D0 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000186D6 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000186DC 0884 0298 0894             		dc.w $884, $298, $894
000186E2 0270 0894 0190             		dc.w $270, $894, $190
000186E8 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000186EE 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000186F4 1184 0498 1158             		dc.w $1184, $498, $1158
000186FA 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018700 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018706 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001870C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00018712 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018718 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001871E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018724 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001872A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018730 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018736                            ; ===========================================================================
00018736                            ; ---------------------------------------------------------------------------
00018736                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018736                            ; ---------------------------------------------------------------------------
00018736                            
00018736                            Obj78:					; XREF: Obj_Index
00018736 7000                       		moveq	#0,d0
00018738 1028 0024                  		move.b	$24(a0),d0
0001873C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018740 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018744                            ; ===========================================================================
00018744 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018746 0000                       		dc.w Obj78_Action-Obj78_Index
00018748 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001874A 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001874C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001874E 0000                       		dc.w Obj78_Delete-Obj78_Index
00018750 0000                       		dc.w loc_16CC0-Obj78_Index
00018752                            ; ===========================================================================
00018752                            
00018752                            locret_16950:
00018752 4E75                       		rts	
00018754                            ; ===========================================================================
00018754                            
00018754                            Obj78_Main:				; XREF: Obj78_Index
00018754 117C 0007 0016             		move.b	#7,$16(a0)
0001875A 117C 0008 0017             		move.b	#8,$17(a0)
00018760 4EB9 0000 EFBE             		jsr	ObjectFall
00018766 4EBA E4B6                  		jsr	ObjHitFloor
0001876A 4A41                       		tst.w	d1
0001876C 6AE4                       		bpl.s	locret_16950
0001876E D368 000C                  		add.w	d1,$C(a0)
00018772 4268 0012                  		clr.w	$12(a0)
00018776 5428 0024                  		addq.b	#2,$24(a0)
0001877A 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018782 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018788 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001878E 6700                       		beq.s	loc_16996
00018790 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018796                            
00018796                            loc_16996:
00018796 0228 0003 0001             		andi.b	#3,1(a0)
0001879C 0028 0004 0001             		ori.b	#4,1(a0)
000187A2 1168 0001 0022             		move.b	1(a0),$22(a0)
000187A8 117C 0004 0018             		move.b	#4,$18(a0)
000187AE 117C 0008 0019             		move.b	#8,$19(a0)
000187B4 117C 000B 0020             		move.b	#$B,$20(a0)
000187BA 3428 0008                  		move.w	8(a0),d2
000187BE 7A0C                       		moveq	#$C,d5
000187C0 0828 0000 0022             		btst	#0,$22(a0)
000187C6 6700                       		beq.s	loc_169CA
000187C8 4445                       		neg.w	d5
000187CA                            
000187CA                            loc_169CA:
000187CA 1C3C 0004                  		move.b	#4,d6
000187CE 7600                       		moveq	#0,d3
000187D0 7804                       		moveq	#4,d4
000187D2 2448                       		movea.l	a0,a2
000187D4 7202                       		moveq	#2,d1
000187D6                            
000187D6                            Obj78_LoadBody:
000187D6 4EB9 0000 F4AC             		jsr	SingleObjLoad2
000187DC 6600                       		bne.s	Obj78_QuitLoad
000187DE 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000187E2 1346 0024                  		move.b	d6,$24(a1)
000187E6 5406                       		addq.b	#2,d6
000187E8 2368 0004 0004             		move.l	4(a0),4(a1)
000187EE 3368 0002 0002             		move.w	2(a0),2(a1)
000187F4 137C 0005 0018             		move.b	#5,$18(a1)
000187FA 137C 0008 0019             		move.b	#8,$19(a1)
00018800 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018806 D445                       		add.w	d5,d2
00018808 3342 0008                  		move.w	d2,8(a1)
0001880C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018812 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018818 1368 0022 0001             		move.b	$22(a0),1(a1)
0001881E 137C 0008 001A             		move.b	#8,$1A(a1)
00018824 234A 003C                  		move.l	a2,$3C(a1)
00018828 1344 003C                  		move.b	d4,$3C(a1)
0001882C 5804                       		addq.b	#4,d4
0001882E 2449                       		movea.l	a1,a2
00018830                            
00018830                            Obj78_QuitLoad:
00018830 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018834                            
00018834 117C 0007 002A             		move.b	#7,$2A(a0)
0001883A 4228 003C                  		clr.b	$3C(a0)
0001883E                            
0001883E                            Obj78_Action:				; XREF: Obj78_Index
0001883E 4A28 0022                  		tst.b	$22(a0)
00018842 6B00 0000                  		bmi.w	loc_16C96
00018846 7000                       		moveq	#0,d0
00018848 1028 0025                  		move.b	$25(a0),d0
0001884C 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018850 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018854 1228 002B                  		move.b	$2B(a0),d1
00018858 6A00                       		bpl.s	Obj78_Display
0001885A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018860 1028 0026                  		move.b	$26(a0),d0
00018864 0240 007F                  		andi.w	#$7F,d0
00018868 5828 0026                  		addq.b	#4,$26(a0)
0001886C 1031 0000                  		move.b	(a1,d0.w),d0
00018870 6A00                       		bpl.s	Obj78_AniHead
00018872 08A8 0007 002B             		bclr	#7,$2B(a0)
00018878 6000                       		bra.s	Obj78_Display
0001887A                            ; ===========================================================================
0001887A                            
0001887A                            Obj78_AniHead:
0001887A 0201 0010                  		andi.b	#$10,d1
0001887E D001                       		add.b	d1,d0
00018880 1140 001A                  		move.b	d0,$1A(a0)
00018884                            
00018884                            Obj78_Display:
00018884 3028 0008                  		move.w	8(a0),d0
00018888 0240 FF80                  		andi.w	#$FF80,d0
0001888C 3238 F700                  		move.w	($FFFFF700).w,d1
00018890 0441 0080                  		subi.w	#$80,d1
00018894 0241 FF80                  		andi.w	#$FF80,d1
00018898 9041                       		sub.w	d1,d0
0001889A 0C40 0280                  		cmpi.w	#$280,d0
0001889E 6200 0000                  		bhi.w	Obj78_ChkGone
000188A2 4EF9 0000 F010             		jmp	DisplaySprite
000188A8                            ; ===========================================================================
000188A8                            
000188A8                            Obj78_ChkGone:
000188A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000188AC 7000                       		moveq	#0,d0
000188AE 1028 0023                  		move.b	$23(a0),d0
000188B2 6700                       		beq.s	loc_16ABC
000188B4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000188BA                            
000188BA                            loc_16ABC:
000188BA 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000188C0 4E75                       		rts	
000188C2                            ; ===========================================================================
000188C2                            
000188C2                            Obj78_Delete:				; XREF: Obj78_Index
000188C2 4EF9 0000 F04C             		jmp	DeleteObject
000188C8                            ; ===========================================================================
000188C8 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000188CA 0000                       		dc.w loc_16B02-Obj78_Index2
000188CC                            ; ===========================================================================
000188CC                            
000188CC                            Obj78_Move:				; XREF: Obj78_Index2
000188CC 5328 002A                  		subq.b	#1,$2A(a0)
000188D0 6B00                       		bmi.s	Obj78_Move2
000188D2 4E75                       		rts	
000188D4                            ; ===========================================================================
000188D4                            
000188D4                            Obj78_Move2:
000188D4 5428 0025                  		addq.b	#2,$25(a0)
000188D8 117C 0010 002A             		move.b	#$10,$2A(a0)
000188DE 317C FF40 0010             		move.w	#-$C0,$10(a0)
000188E4 317C 0040 0014             		move.w	#$40,$14(a0)
000188EA 0868 0004 002B             		bchg	#4,$2B(a0)
000188F0 6600                       		bne.s	loc_16AFC
000188F2 4268 0010                  		clr.w	$10(a0)
000188F6 4468 0014                  		neg.w	$14(a0)
000188FA                            
000188FA                            loc_16AFC:
000188FA 08E8 0007 002B             		bset	#7,$2B(a0)
00018900                            
00018900                            loc_16B02:				; XREF: Obj78_Index2
00018900 5328 002A                  		subq.b	#1,$2A(a0)
00018904 6B00                       		bmi.s	loc_16B5E
00018906 2F28 0008                  		move.l	8(a0),-(sp)
0001890A 2428 0008                  		move.l	8(a0),d2
0001890E 3028 0010                  		move.w	$10(a0),d0
00018912 0828 0000 0022             		btst	#0,$22(a0)
00018918 6700                       		beq.s	loc_16B1E
0001891A 4440                       		neg.w	d0
0001891C                            
0001891C                            loc_16B1E:
0001891C 48C0                       		ext.l	d0
0001891E E180                       		asl.l	#8,d0
00018920 D480                       		add.l	d0,d2
00018922 2142 0008                  		move.l	d2,8(a0)
00018926 4EBA E2F6                  		jsr	ObjHitFloor
0001892A 241F                       		move.l	(sp)+,d2
0001892C 0C41 FFF8                  		cmpi.w	#-8,d1
00018930 6D00                       		blt.s	loc_16B70
00018932 0C41 000C                  		cmpi.w	#$C,d1
00018936 6C00                       		bge.s	loc_16B70
00018938 D368 000C                  		add.w	d1,$C(a0)
0001893C 4842                       		swap	d2
0001893E B468 0008                  		cmp.w	8(a0),d2
00018942 6700                       		beq.s	locret_16B5C
00018944 7000                       		moveq	#0,d0
00018946 1028 003C                  		move.b	$3C(a0),d0
0001894A 5228 003C                  		addq.b	#1,$3C(a0)
0001894E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018954 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018958                            
00018958                            locret_16B5C:
00018958 4E75                       		rts	
0001895A                            ; ===========================================================================
0001895A                            
0001895A                            loc_16B5E:
0001895A 5528 0025                  		subq.b	#2,$25(a0)
0001895E 117C 0007 002A             		move.b	#7,$2A(a0)
00018964 317C 0000 0010             		move.w	#0,$10(a0)
0001896A 4E75                       		rts	
0001896C                            ; ===========================================================================
0001896C                            
0001896C                            loc_16B70:
0001896C 2142 0008                  		move.l	d2,8(a0)
00018970 0868 0000 0022             		bchg	#0,$22(a0)
00018976 1168 0022 0001             		move.b	$22(a0),1(a0)
0001897C 7000                       		moveq	#0,d0
0001897E 1028 003C                  		move.b	$3C(a0),d0
00018982 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018988 5228 003C                  		addq.b	#1,$3C(a0)
0001898C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018992 4E75                       		rts	
00018994                            ; ===========================================================================
00018994                            
00018994                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018994 2268 003C                  		movea.l	$3C(a0),a1
00018998 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001899E 6A00                       		bpl.s	Obj78_BodySeg1
000189A0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000189A6 1028 0026                  		move.b	$26(a0),d0
000189AA 0240 007F                  		andi.w	#$7F,d0
000189AE 5828 0026                  		addq.b	#4,$26(a0)
000189B2 4A31 0004                  		tst.b	4(a1,d0.w)
000189B6 6A00                       		bpl.s	Obj78_AniBody
000189B8 5828 0026                  		addq.b	#4,$26(a0)
000189BC                            
000189BC                            Obj78_AniBody:
000189BC 1031 0000                  		move.b	(a1,d0.w),d0
000189C0 5000                       		addq.b	#8,d0
000189C2 1140 001A                  		move.b	d0,$1A(a0)
000189C6                            
000189C6                            Obj78_BodySeg1:				; XREF: Obj78_Index
000189C6 2268 003C                  		movea.l	$3C(a0),a1
000189CA 4A28 0022                  		tst.b	$22(a0)
000189CE 6B00 0000                  		bmi.w	loc_16C90
000189D2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000189D8 1169 0025 0025             		move.b	$25(a1),$25(a0)
000189DE 6700 0000                  		beq.w	loc_16C64
000189E2 3169 0014 0014             		move.w	$14(a1),$14(a0)
000189E8 3029 0010                  		move.w	$10(a1),d0
000189EC D069 0014                  		add.w	$14(a1),d0
000189F0 3140 0010                  		move.w	d0,$10(a0)
000189F4 2428 0008                  		move.l	8(a0),d2
000189F8 2602                       		move.l	d2,d3
000189FA 3028 0010                  		move.w	$10(a0),d0
000189FE 0828 0000 0022             		btst	#0,$22(a0)
00018A04 6700                       		beq.s	loc_16C0C
00018A06 4440                       		neg.w	d0
00018A08                            
00018A08                            loc_16C0C:
00018A08 48C0                       		ext.l	d0
00018A0A E180                       		asl.l	#8,d0
00018A0C D480                       		add.l	d0,d2
00018A0E 2142 0008                  		move.l	d2,8(a0)
00018A12 4843                       		swap	d3
00018A14 B668 0008                  		cmp.w	8(a0),d3
00018A18 6700                       		beq.s	loc_16C64
00018A1A 7000                       		moveq	#0,d0
00018A1C 1028 003C                  		move.b	$3C(a0),d0
00018A20 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018A24 0C01 0080                  		cmpi.b	#-$80,d1
00018A28 6600                       		bne.s	loc_16C50
00018A2A 4843                       		swap	d3
00018A2C 2143 0008                  		move.l	d3,8(a0)
00018A30 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018A34 0868 0000 0022             		bchg	#0,$22(a0)
00018A3A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018A40 5228 003C                  		addq.b	#1,$3C(a0)
00018A44 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018A4A 6000                       		bra.s	loc_16C64
00018A4C                            ; ===========================================================================
00018A4C                            
00018A4C                            loc_16C50:
00018A4C 4881                       		ext.w	d1
00018A4E D368 000C                  		add.w	d1,$C(a0)
00018A52 5228 003C                  		addq.b	#1,$3C(a0)
00018A56 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018A5C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018A60                            
00018A60                            loc_16C64:
00018A60 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018A66 6700                       		beq.s	loc_16C90
00018A68 0C11 0027                  		cmpi.b	#$27,0(a1)
00018A6C 6700                       		beq.s	loc_16C7C
00018A6E 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018A74 6600                       		bne.s	loc_16C82
00018A76                            
00018A76                            loc_16C7C:
00018A76 117C 000A 0024             		move.b	#$A,$24(a0)
00018A7C                            
00018A7C                            loc_16C82:
00018A7C 4EF9 0000 F010             		jmp	DisplaySprite
00018A82                            
00018A82                            ; ===========================================================================
00018A82 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018A8A                            ; ===========================================================================
00018A8A                            
00018A8A                            loc_16C90:
00018A8A 08E9 0007 0022             		bset	#7,$22(a1)
00018A90                            
00018A90                            loc_16C96:
00018A90 7000                       		moveq	#0,d0
00018A92 1028 0024                  		move.b	$24(a0),d0
00018A96 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018A9A 0828 0000 0022             		btst	#0,$22(a0)
00018AA0 6700                       		beq.s	loc_16CAA
00018AA2 4440                       		neg.w	d0
00018AA4                            
00018AA4                            loc_16CAA:
00018AA4 3140 0010                  		move.w	d0,$10(a0)
00018AA8 317C FC00 0012             		move.w	#-$400,$12(a0)
00018AAE 117C 000C 0024             		move.b	#$C,$24(a0)
00018AB4 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018ABA                            
00018ABA                            loc_16CC0:				; XREF: Obj78_Index
00018ABA 4EB9 0000 EFBE             		jsr	ObjectFall
00018AC0 4A68 0012                  		tst.w	$12(a0)
00018AC4 6B00                       		bmi.s	loc_16CE0
00018AC6 4EBA E156                  		jsr	ObjHitFloor
00018ACA 4A41                       		tst.w	d1
00018ACC 6A00                       		bpl.s	loc_16CE0
00018ACE D368 000C                  		add.w	d1,$C(a0)
00018AD2 317C FC00 0012             		move.w	#-$400,$12(a0)
00018AD8                            
00018AD8                            loc_16CE0:
00018AD8 4A28 0001                  		tst.b	1(a0)
00018ADC 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00018AE0 4EF9 0000 F010             		jmp	DisplaySprite
00018AE6                            ; ===========================================================================
00018AE6                            Ani_obj78:
00018AE6                            	include "_anim\obj78.asm"
00018AE6                            ; ---------------------------------------------------------------------------
00018AE6                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018AE6                            ; ---------------------------------------------------------------------------
00018AE6 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018AF6 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018B06 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018B16 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018B26 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018B36 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018B46 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018B56 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018B66                            	even
00018B66                            	even
00018B66                            
00018B66                            ; ---------------------------------------------------------------------------
00018B66                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018B66                            ; ---------------------------------------------------------------------------
00018B66                            Map_obj78:
00018B66                            	include "_maps\obj78.asm"
00018B66                            ; ---------------------------------------------------------------------------
00018B66                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018B66                            ; ---------------------------------------------------------------------------
00018B66 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018B6A 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018B6E 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018B72 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018B76 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018B7A 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018B7E 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018B82 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018B86 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018B8A 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018B8E 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018B92 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018B96 01                         byte_16D9E:	dc.b 1
00018B97 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018B9C 01                         byte_16DA4:	dc.b 1
00018B9D F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018BA2 01                         byte_16DAA:	dc.b 1
00018BA3 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018BA8 01                         byte_16DB0:	dc.b 1
00018BA9 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018BAE 01                         byte_16DB6:	dc.b 1
00018BAF EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018BB4 01                         byte_16DBC:	dc.b 1
00018BB5 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018BBA 01                         byte_16DC2:	dc.b 1
00018BBB EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018BC0 01                         byte_16DC8:	dc.b 1
00018BC1 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018BC6 01                         byte_16DCE:	dc.b 1
00018BC7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018BCC 01                         byte_16DD4:	dc.b 1
00018BCD F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018BD2 01                         byte_16DDA:	dc.b 1
00018BD3 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018BD8 01                         byte_16DE0:	dc.b 1
00018BD9 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018BDE 01                         byte_16DE6:	dc.b 1
00018BDF F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018BE4 01                         byte_16DEC:	dc.b 1
00018BE5 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018BEA 01                         byte_16DF2:	dc.b 1
00018BEB F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018BF0 01                         byte_16DF8:	dc.b 1
00018BF1 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018BF6 01                         byte_16DFE:	dc.b 1
00018BF7 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018BFC 01                         byte_16E04:	dc.b 1
00018BFD F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018C02 01                         byte_16E0A:	dc.b 1
00018C03 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018C08 01                         byte_16E10:	dc.b 1
00018C09 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018C0E 01                         byte_16E16:	dc.b 1
00018C0F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018C14 01                         byte_16E1C:	dc.b 1
00018C15 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018C1A 01                         byte_16E22:	dc.b 1
00018C1B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018C20 01                         byte_16E28:	dc.b 1
00018C21 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018C26                            		even
00018C26                            		even
00018C26                            
00018C26                            ; ===========================================================================
00018C26                            ; ---------------------------------------------------------------------------
00018C26                            ; Object 79 - lamppost
00018C26                            ; ---------------------------------------------------------------------------
00018C26                            
00018C26                            Obj79:					; XREF: Obj_Index
00018C26 7000                       		moveq	#0,d0
00018C28 1028 0024                  		move.b	$24(a0),d0
00018C2C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018C30 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018C34 4EFA 8472                  		jmp	MarkObjGone
00018C38                            ; ===========================================================================
00018C38 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018C3A 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018C3C 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018C3E 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            Obj79_Main:				; XREF: Obj79_Index
00018C40 5428 0024                  		addq.b	#2,$24(a0)
00018C44 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018C4C 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018C52 117C 0004 0001             		move.b	#4,1(a0)
00018C58 117C 0008 0019             		move.b	#8,$19(a0)
00018C5E 117C 0005 0018             		move.b	#5,$18(a0)
00018C64 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018C68 7000                       		moveq	#0,d0
00018C6A 1028 0023                  		move.b	$23(a0),d0
00018C6E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C74 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018C7A 6600                       		bne.s	Obj79_RedLamp
00018C7C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018C80 0201 007F                  		andi.b	#$7F,d1
00018C84 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018C88 0202 007F                  		andi.b	#$7F,d2
00018C8C B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018C8E 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018C90                            
00018C90                            Obj79_RedLamp:
00018C90 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018C96 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018C9C 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018CA2 4E75                       		rts	
00018CA4                            ; ===========================================================================
00018CA4                            
00018CA4                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018CA4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018CA8 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018CAC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018CB0 6B00 0000                  		bmi.w	locret_16F90
00018CB4 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018CB8 0201 007F                  		andi.b	#$7F,d1
00018CBC 1428 0028                  		move.b	$28(a0),d2
00018CC0 0202 007F                  		andi.b	#$7F,d2
00018CC4 B202                       		cmp.b	d2,d1
00018CC6 6500                       		bcs.s	Obj79_HitLamp
00018CC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018CCC 7000                       		moveq	#0,d0
00018CCE 1028 0023                  		move.b	$23(a0),d0
00018CD2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018CD8 117C 0004 0024             		move.b	#4,$24(a0)
00018CDE 117C 0003 001A             		move.b	#3,$1A(a0)
00018CE4 6000 0000                  		bra.w	locret_16F90
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            Obj79_HitLamp:
00018CE8 3038 D008                  		move.w	($FFFFD008).w,d0
00018CEC 9068 0008                  		sub.w	8(a0),d0
00018CF0 5040                       		addq.w	#8,d0
00018CF2 0C40 0010                  		cmpi.w	#$10,d0
00018CF6 6400 0000                  		bcc.w	locret_16F90
00018CFA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018CFE 9068 000C                  		sub.w	$C(a0),d0
00018D02 0640 0040                  		addi.w	#$40,d0
00018D06 0C40 0068                  		cmpi.w	#$68,d0
00018D0A 6400                       		bcc.s	locret_16F90
00018D0C 303C 00A1                  		move.w	#$A1,d0
00018D10 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018D16 5428 0024                  		addq.b	#2,$24(a0)
00018D1A 4EB9 0000 F496             		jsr	SingleObjLoad
00018D20 6600                       		bne.s	loc_16F76
00018D22 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018D26 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018D2C 3368 0008 0030             		move.w	8(a0),$30(a1)
00018D32 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018D38 0469 0018 0032             		subi.w	#$18,$32(a1)
00018D3E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018D46 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018D4C 137C 0004 0001             		move.b	#4,1(a1)
00018D52 137C 0008 0019             		move.b	#8,$19(a1)
00018D58 137C 0004 0018             		move.b	#4,$18(a1)
00018D5E 137C 0002 001A             		move.b	#2,$1A(a1)
00018D64 337C 0020 0036             		move.w	#$20,$36(a1)
00018D6A                            
00018D6A                            loc_16F76:
00018D6A 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018D70 6100 0000                  		bsr.w	Obj79_StoreInfo
00018D74 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018D78 7000                       		moveq	#0,d0
00018D7A 1028 0023                  		move.b	$23(a0),d0
00018D7E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018D84                            
00018D84                            locret_16F90:
00018D84 4E75                       		rts	
00018D86                            ; ===========================================================================
00018D86                            
00018D86                            Obj79_AfterHit:				; XREF: Obj79_Index
00018D86 4E75                       		rts	
00018D88                            ; ===========================================================================
00018D88                            
00018D88                            Obj79_Twirl:				; XREF: Obj79_Index
00018D88 5368 0036                  		subq.w	#1,$36(a0)
00018D8C 6A00                       		bpl.s	loc_16FA0
00018D8E 117C 0004 0024             		move.b	#4,$24(a0)
00018D94                            
00018D94                            loc_16FA0:
00018D94 1028 0026                  		move.b	$26(a0),d0
00018D98 0428 0010 0026             		subi.b	#$10,$26(a0)
00018D9E 0400 0040                  		subi.b	#$40,d0
00018DA2 4EB9 0000 29AE             		jsr	(CalcSine).l
00018DA8 C3FC 0C00                  		muls.w	#$C00,d1
00018DAC 4841                       		swap	d1
00018DAE D268 0030                  		add.w	$30(a0),d1
00018DB2 3141 0008                  		move.w	d1,8(a0)
00018DB6 C1FC 0C00                  		muls.w	#$C00,d0
00018DBA 4840                       		swap	d0
00018DBC D068 0032                  		add.w	$32(a0),d0
00018DC0 3140 000C                  		move.w	d0,$C(a0)
00018DC4 4E75                       		rts	
00018DC6                            ; ===========================================================================
00018DC6                            ; ---------------------------------------------------------------------------
00018DC6                            ; Subroutine to	store information when you hit a lamppost
00018DC6                            ; ---------------------------------------------------------------------------
00018DC6                            
00018DC6                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018DC6 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018DCC 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018DD2 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018DD8 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018DDE 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018DE4 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018DEA 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018DF0 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018DF6 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018DFC 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018E02 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018E08 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018E0E 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018E14 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00018E1A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018E20 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018E26 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018E2C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018E32 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018E38 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018E3E 4E75                       		rts	
00018E40                            
00018E40                            ; ---------------------------------------------------------------------------
00018E40                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018E40                            ; ---------------------------------------------------------------------------
00018E40                            
00018E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018E40                            
00018E40                            
00018E40                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018E40 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018E46 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018E4C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018E52 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018E58 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018E5E 4278 FE20                  		clr.w	($FFFFFE20).w
00018E62 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018E66 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018E6C 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018E72 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018E76 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018E7C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018E82 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018E88 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018E8E 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018E94 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018E9A 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018EA0 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018EA6 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018EAC 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018EB2 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018EB8 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018EBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018EC4 6600                       		bne.s	loc_170E4
00018EC6 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018ECC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018ED2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018ED8                            
00018ED8                            loc_170E4:
00018ED8 4A38 FE30                  		tst.b	($FFFFFE30).w
00018EDC 6A00                       		bpl.s	locret_170F6
00018EDE 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018EE2 0440 00A0                  		subi.w	#$A0,d0
00018EE6 31C0 F728                  		move.w	d0,($FFFFF728).w
00018EEA                            
00018EEA                            locret_170F6:
00018EEA 4E75                       		rts	
00018EEC                            ; End of function Obj79_LoadInfo
00018EEC                            
00018EEC                            ; ===========================================================================
00018EEC                            ; ---------------------------------------------------------------------------
00018EEC                            ; Sprite mappings - lamppost
00018EEC                            ; ---------------------------------------------------------------------------
00018EEC                            Map_obj79:
00018EEC                            	include "_maps\obj79.asm"
00018EEC                            ; ---------------------------------------------------------------------------
00018EEC                            ; Sprite mappings - lamppost
00018EEC                            ; ---------------------------------------------------------------------------
00018EEC 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018EF0 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018EF4 06                         byte_17100:	dc.b 6
00018EF5 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018EFA E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018EFF F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018F04 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018F09 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018F0E D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018F13 04                         byte_1711F:	dc.b 4
00018F14 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018F19 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018F1E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018F23 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018F28 02                         byte_17134:	dc.b 2
00018F29 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018F2E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018F33 06                         byte_1713F:	dc.b 6
00018F34 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018F39 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018F3E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018F43 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018F48 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018F4D D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018F52                            		even
00018F52                            		even
00018F52                            
00018F52                            ; ===========================================================================
00018F52                            ; ---------------------------------------------------------------------------
00018F52                            ; Object 7D - hidden points at the end of a level
00018F52                            ; ---------------------------------------------------------------------------
00018F52                            
00018F52                            Obj7D:					; XREF: Obj_Index
00018F52 7000                       		moveq	#0,d0
00018F54 1028 0024                  		move.b	$24(a0),d0
00018F58 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018F5C 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018F60                            ; ===========================================================================
00018F60 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018F62 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018F64                            ; ===========================================================================
00018F64                            
00018F64                            Obj7D_Main:				; XREF: Obj7D_Index
00018F64 7410                       		moveq	#$10,d2
00018F66 3602                       		move.w	d2,d3
00018F68 D643                       		add.w	d3,d3
00018F6A 43F8 D000                  		lea	($FFFFD000).w,a1
00018F6E 3029 0008                  		move.w	8(a1),d0
00018F72 9068 0008                  		sub.w	8(a0),d0
00018F76 D042                       		add.w	d2,d0
00018F78 B043                       		cmp.w	d3,d0
00018F7A 6400                       		bcc.s	Obj7D_ChkDel
00018F7C 3229 000C                  		move.w	$C(a1),d1
00018F80 9268 000C                  		sub.w	$C(a0),d1
00018F84 D242                       		add.w	d2,d1
00018F86 B243                       		cmp.w	d3,d1
00018F88 6400                       		bcc.s	Obj7D_ChkDel
00018F8A 4A78 FE08                  		tst.w	($FFFFFE08).w
00018F8E 6600                       		bne.s	Obj7D_ChkDel
00018F90 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018F94 6600                       		bne.s	Obj7D_ChkDel
00018F96 5428 0024                  		addq.b	#2,$24(a0)
00018F9A 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018FA2 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018FA8 0028 0004 0001             		ori.b	#4,1(a0)
00018FAE 117C 0000 0018             		move.b	#0,$18(a0)
00018FB4 117C 0010 0019             		move.b	#$10,$19(a0)
00018FBA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018FC0 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018FC6 303C 00C9                  		move.w	#$C9,d0
00018FCA 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play bonus sound
00018FD0 7000                       		moveq	#0,d0
00018FD2 1028 0028                  		move.b	$28(a0),d0
00018FD6 D040                       		add.w	d0,d0
00018FD8 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018FDC 4EB9 0000 0000             		jsr	AddPoints
00018FE2                            
00018FE2                            Obj7D_ChkDel:
00018FE2 3028 0008                  		move.w	8(a0),d0
00018FE6 0240 FF80                  		andi.w	#$FF80,d0
00018FEA 3238 F700                  		move.w	($FFFFF700).w,d1
00018FEE 0441 0080                  		subi.w	#$80,d1
00018FF2 0241 FF80                  		andi.w	#$FF80,d1
00018FF6 9041                       		sub.w	d1,d0
00018FF8 0C40 0280                  		cmpi.w	#$280,d0
00018FFC 6200                       		bhi.s	Obj7D_Delete
00018FFE 4E75                       		rts	
00019000                            ; ===========================================================================
00019000                            
00019000                            Obj7D_Delete:
00019000 4EF9 0000 F04C             		jmp	DeleteObject
00019006                            ; ===========================================================================
00019006 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00019008 03E8                       		dc.w 1000
0001900A 0064                       		dc.w 100
0001900C 0001                       		dc.w 1
0001900E                            ; ===========================================================================
0001900E                            
0001900E                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001900E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00019012 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00019014 3028 0008                  		move.w	8(a0),d0
00019018 0240 FF80                  		andi.w	#-$80,d0
0001901C 3238 F700                  		move.w	($FFFFF700).w,d1
00019020 0441 0080                  		subi.w	#$80,d1
00019024 0241 FF80                  		andi.w	#-$80,d1
00019028 9041                       		sub.w	d1,d0
0001902A 0C40 0280                  		cmpi.w	#$280,d0
0001902E 6200                       		bhi.s	Obj7D_Delete2
00019030 4EF9 0000 F010             		jmp	DisplaySprite
00019036                            ; ===========================================================================
00019036                            
00019036                            Obj7D_Delete2:
00019036 4EF9 0000 F04C             		jmp	DeleteObject
0001903C                            ; ===========================================================================
0001903C                            ; ---------------------------------------------------------------------------
0001903C                            ; Sprite mappings - hidden points at the end of	a level
0001903C                            ; ---------------------------------------------------------------------------
0001903C                            Map_obj7D:
0001903C                            	include "_maps\obj7D.asm"
0001903C                            ; ---------------------------------------------------------------------------
0001903C                            ; Sprite mappings - hidden points at the end of	a level
0001903C                            ; ---------------------------------------------------------------------------
0001903C 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00019040 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00019044 00                         byte_17250:	dc.b 0
00019045 01                         byte_17251:	dc.b 1
00019046 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001904B 01                         byte_17257:	dc.b 1
0001904C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00019051 01                         byte_1725D:	dc.b 1
00019052 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00019058 00                         		even
00019058 00                         		even
00019058                            
00019058                            ; ===========================================================================
00019058                            ; ---------------------------------------------------------------------------
00019058                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00019058                            ; ---------------------------------------------------------------------------
00019058                            
00019058                            Obj8A:					; XREF: Obj_Index
00019058 7000                       		moveq	#0,d0
0001905A 1028 0024                  		move.b	$24(a0),d0
0001905E 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00019062 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00019066                            ; ===========================================================================
00019066 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00019068 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001906A                            ; ===========================================================================
0001906A                            
0001906A                            Obj8A_Main:				; XREF: Obj8A_Index
0001906A 5428 0024                  		addq.b	#2,$24(a0)
0001906E 317C 0120 0008             		move.w	#$120,8(a0)
00019074 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001907A 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00019082 317C 0580 0002             		move.w	#$580,2(a0)	; fixed from $5A0
00019088 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001908C 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00019090 117C 0000 0001             		move.b	#0,1(a0)
00019096 117C 0000 0018             		move.b	#0,$18(a0)
0001909C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000190A2 6600                       		bne.s	Obj8A_Display	; if not, branch
000190A4 317C 00A6 0002             		move.w	#$A6,2(a0)
000190AA 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000190B0 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000190B4 6700                       		beq.s	Obj8A_Display	; if not, branch
000190B6 0C38 00E2 F604             		cmpi.b	#Start+A+C+Down,(Joypad|Held)	; is Start, A, C or Down being pressed?
000190BC 6600                       		bne.s	Obj8A_Display			; if not, branch
000190BE 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000190C4 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000190CA 4EF9 0000 F04C             		jmp	DeleteObject
000190D0                            ; ===========================================================================
000190D0                            
000190D0                            Obj8A_Display:				; XREF: Obj8A_Index
000190D0 4EF9 0000 F010             		jmp	DisplaySprite
000190D6                            ; ===========================================================================
000190D6                            ; ---------------------------------------------------------------------------
000190D6                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000190D6                            ; ---------------------------------------------------------------------------
000190D6                            Map_obj8A:
000190D6 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000190DA 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000190DE 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000190E2 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000190E6 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000190EA 0000                       		dc.w byte_176A9-Map_obj8A
000190EC                            byte_172F8:	incbin "mapbin\credits_map_1.bin"
00019134 00                         		even
00019134                            byte_1733F:	incbin "mapbin\credits_map_2.bin"
00019186 00                         		even
00019186                            byte_17390:	incbin "mapbin\credits_map_3.bin"
000191BA 00                         		even
000191BA                            byte_173C3:	incbin "mapbin\credits_map_4.bin"
00019234 00                         		even
00019234                            byte_1743C:	incbin "mapbin\credits_map_5.bin"
0001929A 00                         		even
0001929A                            byte_174A1:	incbin "mapbin\credits_map_6.bin"
0001931E 00                         		even
0001931E                            byte_17524:	incbin "mapbin\credits_map_7.bin"
00019398 00                         		even
00019398                            byte_17598:	incbin "mapbin\credits_map_8.bin"
00019434                            		even
00019434                            byte_17634:	incbin "mapbin\credits_map_9.bin"
00019480                            		even
00019480                            byte_17680:	incbin "mapbin\credits_map_10.bin"
000194AA 00                         		even
000194AA                            byte_176A9:	incbin "mapbin\credits_map_0.bin"
00019500                            		even
00019500                            
00019500                            ; ===========================================================================
00019500                            ; ---------------------------------------------------------------------------
00019500                            ; Object 3D - Eggman (GHZ)
00019500                            ; ---------------------------------------------------------------------------
00019500                            
00019500                            Obj3D:					; XREF: Obj_Index
00019500 7000                       		moveq	#0,d0
00019502 1028 0024                  		move.b	$24(a0),d0
00019506 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001950A 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001950E                            ; ===========================================================================
0001950E 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00019510 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index	 ; for ship object
00019512 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index  ; for face object
00019514 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index ; for flame object
00019516                            
00019516                            		; routine counter, animation:
00019516 0200                       Obj3D_ObjData:	dc.b 2,	0	; for ship
00019518 0401                       		dc.b 4,	1	; for face
0001951A 0607                       		dc.b 6,	7	; for flame
0001951C                            ; ===========================================================================
0001951C                            
0001951C                            Obj3D_Main:				; XREF: Obj3D_Index
0001951C 45F9 0001 9516             		lea	(Obj3D_ObjData).l,a2
00019522 2248                       		movea.l	a0,a1
00019524 7202                       		moveq	#2,d1
00019526 6000                       		bra.s	Obj3D_LoadBoss	; boss consists of 3 objects
00019528                            ; ===========================================================================
00019528                            
00019528                            Obj3D_Loop:
00019528 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001952E 6600                       		bne.s	Obj3D_LoadShip
00019530                            
00019530                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019530 135A 0024                  		move.b	(a2)+,$24(a1)	; set routine number
00019534 12BC 003D                  		move.b	#$3D,0(a1)	; set obj to $3D
00019538 3368 0008 0008             		move.w	8(a0),8(a1)	; copy X
0001953E 3368 000C 000C             		move.w	$C(a0),$C(a1)	; copy Y
00019544 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001954C 337C 0400 0002             		move.w	#$400,2(a1)
00019552 137C 0004 0001             		move.b	#4,1(a1)
00019558 137C 0020 0019             		move.b	#$20,$19(a1)
0001955E 137C 0003 0018             		move.b	#3,$18(a1)
00019564 135A 001C                  		move.b	(a2)+,$1C(a1)	; set animation
00019568 2348 0034                  		move.l	a0,$34(a1)	; parent addr
0001956C 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00019570                            
00019570                            ;loc_17772:
00019570                            Obj3D_LoadShip:
00019570 3168 0008 0030             		move.w	8(a0),$30(a0)	; copy X-pos to secondary X-pos
00019576 3168 000C 0038             		move.w	$C(a0),$38(a0)	; copy Y-pos to secondary Y-pos
0001957C 117C 000F 0020             		move.b	#$F,$20(a0)	; set touch response
00019582 117C 0008 0021             		move.b  #var_BHits_GHZ,$21(a0)
00019588                            
00019588                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019588 7000                       		moveq	#0,d0
0001958A 1028 0025                  		move.b	$25(a0),d0
0001958E 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019592 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019596 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001959C 4EB9 0000 C10C             		jsr	AnimateSprite
000195A2 1028 0022                  		move.b	$22(a0),d0
000195A6 0200 0003                  		andi.b	#3,d0
000195AA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000195B0 8128 0001                  		or.b	d0,1(a0)
000195B4 4EF9 0000 F010             		jmp	DisplaySprite
000195BA                            ; ===========================================================================
000195BA 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex	; 0
000195BC 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex	; 2
000195BE 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex	; 4
000195C0 0000                       		dc.w Obj3D_ShipMove2-Obj3D_ShipIndex	; 6
000195C2 0000                       		dc.w Obj3D_Explode-Obj3D_ShipIndex	; 8
000195C4 0000                       		dc.w Obj3D_ShipFall-Obj3D_ShipIndex	; $A
000195C6 0000                       		dc.w Obj3D_RunAway-Obj3D_ShipIndex	; $C
000195C8                            ; ===========================================================================
000195C8                            
000195C8                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000195C8 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000195CE 6100 0000                  		bsr.w	BossMove
000195D2 0C68 0338 0038             		cmpi.w	#$338,$38(a0)	; has the ship reached $338 on Y-axis?
000195D8 6600                       		bne.s	Obj3D_ShipProcess ; if not, branch
000195DA 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000195E0 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000195E4                            
000195E4                            
000195E4                            ; This routine does the main ship stuff
000195E4                            
000195E4                            Obj3D_ShipProcess:
000195E4                            		; Move ship slightly up and down during the flight
000195E4 1028 003F                  		move.b	$3F(a0),d0	; Y-amplitude
000195E8 4EB9 0000 29AE             		jsr	(CalcSine).l
000195EE EC40                       		asr.w	#6,d0		; d0 contains sine
000195F0 D068 0038                  		add.w	$38(a0),d0	; add secondary Y-pos to d0
000195F4 3140 000C                  		move.w	d0,$C(a0)	; and we've got Y-pos with the amplitude
000195F8 3168 0030 0008             		move.w	$30(a0),8(a0)
000195FE 5428 003F                  		addq.b	#2,$3F(a0)	; reduce the amplitude
00019602                            		
00019602                            		; Touch repsonse stuff
00019602 0C28 0008 0025             		cmpi.b	#8,$25(a0)	; is routine more or equals to 8?
00019608 6400                       		bcc.s	locret_1784A	; if yes, branch
0001960A 4A28 0022                  		tst.b	$22(a0)		; was boss defeated?
0001960E 6B00                       		bmi.s	Obj3D_ShipGone	; if yes, branch
00019610 4A28 0020                  		tst.b	$20(a0)		; is touch response zero?
00019614 6600                       		bne.s	locret_1784A	; if not, branch
00019616 4A28 003E                  		tst.b	$3E(a0)		; is flashes counter zero?
0001961A 6600                       		bne.s	Obj3D_ShipFlash	; if not, branch
0001961C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times to flash
00019622 303C 00AC                  		move.w	#$AC,d0
00019626 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001962C                            
0001962C                            Obj3D_ShipFlash:
0001962C 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019630 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019632 4A51                       		tst.w	(a1)		; is colour in pallete black?
00019634 6600                       		bne.s	loc_1783C	; if not, branch
00019636 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001963A                            
0001963A                            loc_1783C:
0001963A 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001963C 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
00019640 6600                       		bne.s	locret_1784A	; if flashes counter is not zero, branch
00019642 117C 000F 0020             		move.b	#$F,$20(a0)	; restore touch responsibility
00019648                            
00019648                            locret_1784A:
00019648 4E75                       		rts	
0001964A                            ; ===========================================================================
0001964A                            ;loc_1784C:
0001964A                            Obj3D_ShipGone:				; XREF: Obj3D_ShipProcess
0001964A 7064                       		moveq	#100,d0
0001964C 6100 0000                  		bsr.w	AddPoints	; add 1000 points
00019650 117C 0008 0025             		move.b	#8,$25(a0)	; set routine to 8 (Obj3D_Explode)
00019656 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001965C 4E75                       		rts
0001965E                            
0001965E                            ; ---------------------------------------------------------------------------
0001965E                            ; Subroutine to generate explosions arround the boss
0001965E                            ; ---------------------------------------------------------------------------
0001965E                            
0001965E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001965E                            
0001965E                            BossDefeated:
0001965E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019662 0200 0007                  		andi.b	#7,d0
00019666 6600                       		bne.s	locret_178A2
00019668 4EB9 0000 F496             		jsr	SingleObjLoad
0001966E 6600                       		bne.s	locret_178A2
00019670 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019674 3368 0008 0008             		move.w	8(a0),8(a1)
0001967A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019680 4EB9 0000 2988             		jsr	(RandomNumber).l
00019686 3200                       		move.w	d0,d1
00019688 7200                       		moveq	#0,d1
0001968A 1200                       		move.b	d0,d1
0001968C E409                       		lsr.b	#2,d1
0001968E 0441 0020                  		subi.w	#$20,d1
00019692 D369 0008                  		add.w	d1,8(a1)
00019696 E048                       		lsr.w	#8,d0
00019698 E608                       		lsr.b	#3,d0
0001969A D169 000C                  		add.w	d0,$C(a1)
0001969E                            
0001969E                            locret_178A2:
0001969E 4E75                       		rts	
000196A0                            ; End of function BossDefeated
000196A0                            
000196A0                            ; ---------------------------------------------------------------------------
000196A0                            ; Subroutine to	move a boss
000196A0                            ; ---------------------------------------------------------------------------
000196A0                            
000196A0                            ; Like SpeedToPos, but outputs coordinates into $30(a0) and $38(a0)
000196A0                            
000196A0                            BossMove:
000196A0 2428 0030                  		move.l	$30(a0),d2
000196A4 2628 0038                  		move.l	$38(a0),d3
000196A8 3028 0010                  		move.w	$10(a0),d0
000196AC 48C0                       		ext.l	d0
000196AE E180                       		asl.l	#8,d0
000196B0 D480                       		add.l	d0,d2
000196B2 3028 0012                  		move.w	$12(a0),d0
000196B6 48C0                       		ext.l	d0
000196B8 E180                       		asl.l	#8,d0
000196BA D680                       		add.l	d0,d3
000196BC 2142 0030                  		move.l	d2,$30(a0)
000196C0 2143 0038                  		move.l	d3,$38(a0)
000196C4 4E75                       		rts	
000196C6                            ; End of function BossMove
000196C6                            
000196C6                            ; ===========================================================================
000196C6                            
000196C6                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000196C6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move left
000196CC 317C FFC0 0012             		move.w	#-$40,$12(a0)	; move slightly up
000196D2 6100 FFCC                  		bsr.w	BossMove
000196D6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)	; has the boss reached $2A00 on X-axis?
000196DC 6600                       		bne.s	loc_17916	; if not, branch
000196DE 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
000196E4 317C 0000 0012             		move.w	#0,$12(a0)	;
000196EA 5428 0025                  		addq.b	#2,$25(a0)
000196EE 4EB9 0000 F4AC             		jsr	SingleObjLoad2
000196F4 6600                       		bne.s	loc_17910
000196F6 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000196FA 3368 0030 0008             		move.w	$30(a0),8(a1)
00019700 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019706 2348 0034                  		move.l	a0,$34(a1)
0001970A                            
0001970A                            loc_17910:
0001970A 317C 0077 003C             		move.w	#$77,$3C(a0)	; set timer to $77
00019710                            
00019710                            loc_17916:
00019710 6000 FED2                  		bra.w	Obj3D_ShipProcess
00019714                            ; ===========================================================================
00019714                            
00019714                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019714 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
00019718 6A00                       		bpl.s	Obj3D_Reverse	; if time remains, branch
0001971A 5428 0025                  		addq.b	#2,$25(a0)
0001971E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019724 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
0001972A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)	; has the boss reached $2A00 on X-axis?
00019730 6600                       		bne.s	Obj3D_Reverse	; if not, branch
00019732 317C 007F 003C             		move.w	#$7F,$3C(a0)	; set timer to $7F
00019738 317C 0040 0010             		move.w	#$40,$10(a0)
0001973E                            
0001973E                            Obj3D_Reverse:
0001973E 0828 0000 0022             		btst	#0,$22(a0)	; is ship facing right?
00019744 6600                       		bne.s	loc_17950	; if yes, branch
00019746 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001974A                            
0001974A                            loc_17950:
0001974A 6000 FE98                  		bra.w	Obj3D_ShipProcess
0001974E                            ; ===========================================================================
0001974E                            
0001974E                            ;loc_17954:
0001974E                            Obj3D_ShipMove2:			; XREF: Obj3D_ShipIndex
0001974E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
00019752 6B00                       		bmi.s	loc_17960	; if timer is over, branch
00019754 6100 FF4A                  		bsr.w	BossMove
00019758 6000                       		bra.s	loc_17976
0001975A                            
0001975A                            loc_17960:
0001975A 0868 0000 0022             		bchg	#0,$22(a0)	; reverse direction of the ship
00019760 317C 003F 003C             		move.w	#$3F,$3C(a0)	; set timer to $3F
00019766 5528 0025                  		subq.b	#2,$25(a0)	; switch to "Obj3D_ShipMove" routine
0001976A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the ship
00019770                            
00019770                            loc_17976:
00019770 6000 FE72                  		bra.w	Obj3D_ShipProcess
00019774                            ; ===========================================================================
00019774                            
00019774                            ;loc_1797A:
00019774                            Obj3D_Explode:				; XREF: Obj3D_ShipIndex
00019774 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
00019778 6B00                       		bmi.s	loc_17984	; if timer is over, branch
0001977A 6000 FEE2                  		bra.w	BossDefeated
0001977E                            
0001977E                            loc_17984:
0001977E 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
00019784 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001978A 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001978E 5428 0025                  		addq.b	#2,$25(a0)
00019792 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
00019798 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001979C 6600                       		bne.s	locret_179AA
0001979E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000197A4                            
000197A4                            locret_179AA:
000197A4 4E75                       		rts	
000197A6                            ; ===========================================================================
000197A6                            
000197A6                            ;loc_179AC:
000197A6                            Obj3D_ShipFall:				; XREF: Obj3D_ShipIndex
000197A6 5268 003C                  		addq.w	#1,$3C(a0)	; add 1 to timer
000197AA 6700                       		beq.s	@StopFall	; if timer is zero, branch
000197AC 6A00                       		bpl.s	Obj3D_ShipRise	; if timer is postive, branch
000197AE 0668 0018 0012             		addi.w	#$18,$12(a0)	; add $18 to Y-velocity to make ship fall
000197B4 6000                       		bra.s	loc_179EE
000197B6                            
000197B6                            @StopFall:
000197B6 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
000197BA 6000                       		bra.s	loc_179EE
000197BC                            
000197BC                            Obj3D_ShipRise:
000197BC 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)	; is timer's value $30?
000197C2 6500                       		bcs.s	@RiseShip	; if it's less than, branch
000197C4 6700                       		beq.s	@StopRise	; if it equals, branch
000197C6 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)	; is timer's value less than $38?
000197CC 6500                       		bcs.s	loc_179EE	; if yes, branch
000197CE 5428 0025                  		addq.b	#2,$25(a0)
000197D2 6000                       		bra.s	loc_179EE
000197D4                            
000197D4                            @RiseShip:
000197D4 5168 0012                  		subq.w	#8,$12(a0)	; subtract 8 from Y-vel to make ship rise
000197D8 6000                       		bra.s	loc_179EE
000197DA                            
000197DA                            @StopRise:
000197DA 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
000197DE 303C 0083                  		move.w	#$83,d0
000197E2 4EB9 0000 12C2             		jsr	(PlaySound).l	; play GHZ music
000197E8                            
000197E8                            loc_179EE:
000197E8 6100 FEB6                  		bsr.w	BossMove
000197EC 6000 FDF6                  		bra.w	Obj3D_ShipProcess
000197F0                            ; ===========================================================================
000197F0                            
000197F0                            ;loc_179F6:
000197F0                            Obj3D_RunAway:				; XREF: Obj3D_ShipIndex
000197F0 317C 0400 0010             		move.w	#$400,$10(a0)	; move ship right
000197F6 317C FFC0 0012             		move.w	#-$40,$12(a0)	; move ship slightly up
000197FC 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019802 6700                       		beq.s	loc_17A10
00019804 5478 F72A                  		addq.w	#2,($FFFFF72A).w ; add 2 to camera's right boundary
00019808 6000                       		bra.s	loc_17A16
0001980A                            
0001980A                            loc_17A10:
0001980A 4A28 0001                  		tst.b	1(a0)		; is object out of screen?
0001980E 6A00                       		bpl.s	Obj3D_ShipDel	; if yes, branch
00019810                            
00019810                            loc_17A16:
00019810 6100 FE8E                  		bsr.w	BossMove
00019814 6000 FDCE                  		bra.w	Obj3D_ShipProcess
00019818                            
00019818                            Obj3D_ShipDel:
00019818 4EF9 0000 F04C             		jmp	DeleteObject
0001981E                            
0001981E                            ; ===========================================================================
0001981E                            ; ===========================================================================
0001981E                            
0001981E                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001981E 7000                       		moveq	#0,d0
00019820 7201                       		moveq	#1,d1
00019822 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
00019826 1029 0025                  		move.b	$25(a1),d0	; get ship's secondary routine counter
0001982A 5900                       		subq.b	#4,d0
0001982C 6600                       		bne.s	loc_17A3E	; if it's more than 4, branch
0001982E 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)	; is ship's X-position $2A00?
00019834 6600                       		bne.s	loc_17A46	; if not, branch
00019836 7204                       		moveq	#4,d1		; use laughing animation
00019838                            
00019838                            loc_17A3E:
00019838 5D00                       		subq.b	#6,d0
0001983A 6B00                       		bmi.s	loc_17A46
0001983C 720A                       		moveq	#$A,d1
0001983E 6000                       		bra.s	Obj3D_FaceApply
00019840                            
00019840                            loc_17A46:
00019840 4A29 0020                  		tst.b	$20(a1)		; has the ship been hurt?
00019844 6600                       		bne.s	loc_17A50	; if not, branch
00019846 7205                       		moveq	#5,d1		; use hurting animation
00019848 6000                       		bra.s	Obj3D_FaceApply
0001984A                            
0001984A                            loc_17A50:
0001984A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w ; is Sonic hurt?
00019850 6500                       		bcs.s	Obj3D_FaceApply	 ; if not, branch
00019852 7204                       		moveq	#4,d1		 ; use laughing animation, haha!
00019854                            
00019854                            ;loc_17A5A:
00019854                            Obj3D_FaceApply:
00019854 1141 001C                  		move.b	d1,$1C(a0)	; apply face animation
00019858 5500                       		subq.b	#2,d0
0001985A 6600                       		bne.s	Obj3D_FaceDisp
0001985C 117C 0006 001C             		move.b	#6,$1C(a0)	; correct animation
00019862 4A28 0001                  		tst.b	1(a0)		; is object on screen?
00019866 6A00                       		bpl.s	Obj3D_FaceDel	; if not, branch
00019868                            
00019868                            Obj3D_FaceDisp:
00019868 6000                       		bra.s	Obj3D_Display
0001986A                            
0001986A                            Obj3D_FaceDel:
0001986A 4EF9 0000 F04C             		jmp	DeleteObject
00019870                            
00019870                            ; ===========================================================================
00019870                            ; ===========================================================================
00019870                            
00019870                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019870 117C 0007 001C             		move.b	#7,$1C(a0)
00019876 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
0001987A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)	; is ship's secondary routine $C (Obj3D_RunAway)?
00019880 6600                       		bne.s	loc_17A96	; if not, branch
00019882 117C 000B 001C             		move.b	#$B,$1C(a0)
00019888 4A28 0001                  		tst.b	1(a0)		; is object on screen?
0001988C 6A00                       		bpl.s	Obj3D_FlameDel	; if not, branch
0001988E 6000                       		bra.s	Obj3D_FlameDisp
00019890                            
00019890                            loc_17A96:
00019890 3029 0010                  		move.w	$10(a1),d0
00019894 6700                       		beq.s	Obj3D_FlameDisp
00019896 117C 0008 001C             		move.b	#8,$1C(a0)
0001989C                            
0001989C                            Obj3D_FlameDisp:
0001989C 6000                       		bra.s	Obj3D_Display
0001989E                            
0001989E                            Obj3D_FlameDel:
0001989E 4EF9 0000 F04C             		jmp	DeleteObject
000198A4                            ; ===========================================================================
000198A4                            
000198A4                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000198A4 2268 0034                  		movea.l	$34(a0),a1
000198A8 3169 0008 0008             		move.w	8(a1),8(a0)
000198AE 3169 000C 000C             		move.w	$C(a1),$C(a0)
000198B4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000198BA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000198C0 4EB9 0000 C10C             		jsr	AnimateSprite
000198C6 1028 0022                  		move.b	$22(a0),d0
000198CA 0200 0003                  		andi.b	#3,d0
000198CE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198D4 8128 0001                  		or.b	d0,1(a0)
000198D8 4EF9 0000 F010             		jmp	DisplaySprite
000198DE                            
000198DE                            ; ===========================================================================
000198DE                            ; ---------------------------------------------------------------------------
000198DE                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000198DE                            ; ---------------------------------------------------------------------------
000198DE                            
000198DE                            Obj48:					; XREF: Obj_Index
000198DE 7000                       		moveq	#0,d0
000198E0 1028 0024                  		move.b	$24(a0),d0
000198E4 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000198E8 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000198EC                            ; ===========================================================================
000198EC 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index	; 0
000198EE 0000                       		dc.w Obj48_Base-Obj48_Index	; 2
000198F0 0000                       		dc.w Obj48_Display2-Obj48_Index	; 4
000198F2 0000                       		dc.w Obj48_Chain-Obj48_Index	; 6
000198F4 0000                       		dc.w Obj48_Ball-Obj48_Index	; 8
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            Obj48_Main:				; XREF: Obj48_Index
000198F6 5428 0024                  		addq.b	#2,$24(a0)
000198FA 317C 4080 0026             		move.w	#$4080,$26(a0)
00019900 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019906 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001990E 317C 046C 0002             		move.w	#$46C,2(a0)
00019914 45E8 0028                  		lea	$28(a0),a2	; load chain objects array
00019918 14FC 0000                  		move.b	#0,(a2)+	; first item will contain the amount of objects
0001991C 7205                       		moveq	#5,d1
0001991E 2248                       		movea.l	a0,a1		; copy object addr to a1
00019920 6000                       		bra.s	loc_17B60
00019922                            ; ===========================================================================
00019922                            
00019922                            Obj48_MakeLinks:
00019922 4EB9 0000 F4AC             		jsr	SingleObjLoad2
00019928 6600                       		bne.s	Obj48_MakeBall
0001992A 3368 0008 0008             		move.w	8(a0),8(a1)
00019930 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019936 12BC 0048                  		move.b	#$48,(a1)	; load chain link object
0001993A 137C 0006 0024             		move.b	#6,$24(a1)	; set routine to #6 (loc_17C68)
00019940 237C 0000 965C 0004        		move.l	#Map_obj15,4(a1)
00019948 337C 0380 0002             		move.w	#$380,2(a1)
0001994E 137C 0001 001A             		move.b	#1,$1A(a1)
00019954 5228 0028                  		addq.b	#1,$28(a0)	; add 1 to the amount of object in chain
00019958                            
00019958                            loc_17B60:				; XREF: Obj48_Main
00019958 3A09                       		move.w	a1,d5		; move object addr to d5
0001995A 0445 D000                  		subi.w	#$D000,d5	; subtract $D000 from it
0001995E EC4D                       		lsr.w	#6,d5		; divide by $40 (obj STT size)
00019960 0245 007F                  		andi.w	#$7F,d5		; apply mask
00019964 14C5                       		move.b	d5,(a2)+	; put d5 into objects addresses array
00019966 137C 0004 0001             		move.b	#4,1(a1)
0001996C 137C 0008 0019             		move.b	#8,$19(a1)
00019972 137C 0006 0018             		move.b	#6,$18(a1)
00019978 2368 0034 0034             		move.l	$34(a0),$34(a1)	; parent object (Eggman's ship)
0001997E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019982                            
00019982                            Obj48_MakeBall:
00019982 137C 0008 0024             		move.b	#8,$24(a1)
00019988 237C 0000 9BBA 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019990 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019996 137C 0001 001A             		move.b	#1,$1A(a1)
0001999C 137C 0005 0018             		move.b	#5,$18(a1)
000199A2 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000199A8 4E75                       		rts	
000199AA                            ; ===========================================================================
000199AA                            
000199AA 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000199B0                            
000199B0                            ; ===========================================================================
000199B0                            
000199B0                            Obj48_Base:				; XREF: Obj48_Index
000199B0 47F9 0001 99AA             		lea	(Obj48_PosData).l,a3
000199B6 45E8 0028                  		lea	$28(a0),a2	; load chain objects array
000199BA 7C00                       		moveq	#0,d6
000199BC 1C1A                       		move.b	(a2)+,d6	; get the amount of object
000199BE                            
000199BE                            ;loc_17BC6:
000199BE                            Obj48_LowerChain:
000199BE 7800                       		moveq	#0,d4
000199C0 181A                       		move.b	(a2)+,d4	; load array item to d4
000199C2 ED4C                       		lsl.w	#6,d4		; multiply by $40
000199C4 0684 00FF D000             		addi.l	#$FFD000,d4	; add $FFD000 to get a proper address
000199CA 2244                       		movea.l	d4,a1		; load object
000199CC 101B                       		move.b	(a3)+,d0	; load object's target Y-position
000199CE B029 003C                  		cmp.b	$3C(a1),d0	; has object reached it?
000199D2 6700                       		beq.s	@NextObject	; if yes, branch
000199D4 5229 003C                  		addq.b	#1,$3C(a1)	; add 1 to Y-position
000199D8                            
000199D8                            @NextObject:	
000199D8 51CE FFE4                  		dbf	d6,Obj48_LowerChain	; repeat for the amount of objects in chain
000199DC                            
000199DC B029 003C                  		cmp.b	$3C(a1),d0
000199E0 6600                       		bne.s	loc_17BFA
000199E2 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's Ship)
000199E6 0C29 0006 0025             		cmpi.b	#6,$25(a1)	; is secondary routine set to #6 (Obj3D_ShipMove2)?
000199EC 6600                       		bne.s	loc_17BFA	; if not, branch
000199EE 5428 0024                  		addq.b	#2,$24(a0)
000199F2                            
000199F2                            loc_17BFA:
000199F2 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000199F8 6700                       		beq.s	Obj48_Display
000199FA 5268 0032                  		addq.w	#1,$32(a0)
000199FE                            
000199FE                            Obj48_Display:
000199FE 6100 0000                  		bsr.w	Obj48_FollowShip
00019A02 1028 0026                  		move.b	$26(a0),d0	; load angle to d0
00019A06 4EB9 0000 95CE             		jsr	Obj15_Move2	; subroutine to move chain
00019A0C 4EF9 0000 F010             		jmp	DisplaySprite
00019A12                            ; ===========================================================================
00019A12                            
00019A12                            Obj48_Display2:				; XREF: Obj48_Index
00019A12 6100 0000                  		bsr.w	Obj48_FollowShip
00019A16 4EB9 0000 958E             		jsr	Obj48_Move
00019A1C 4EF9 0000 F010             		jmp	DisplaySprite
00019A22                            
00019A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A22                            
00019A22                            
00019A22                            ;sub_17C2A:
00019A22                            Obj48_FollowShip:			; XREF: Obj48_Display; Obj48_Display2
00019A22 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's ship)
00019A26 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019A2C 6400                       		bcc.s	loc_17C3C
00019A2E 0868 0000 001A             		bchg	#0,$1A(a0)	; change $1A every 8 frames
00019A34                            
00019A34                            loc_17C3C:
00019A34 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019A3A 3029 000C                  		move.w	$C(a1),d0
00019A3E D068 0032                  		add.w	$32(a0),d0
00019A42 3140 0038                  		move.w	d0,$38(a0)
00019A46 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A4C 4A29 0022                  		tst.b	$22(a1)		; was the boss defeated?
00019A50 6A00                       		bpl.s	locret_17C66	; if not, branch
00019A52 10BC 003F                  		move.b	#$3F,0(a0)	; replace chain base with Obj3D (red explosion)
00019A56 117C 0000 0024             		move.b	#0,$24(a0)
00019A5C                            
00019A5C                            locret_17C66:
00019A5C 4E75                       		rts	
00019A5E                            ; End of function sub_17C2A
00019A5E                            
00019A5E                            ; ===========================================================================
00019A5E                            
00019A5E                            Obj48_Chain:				; XREF: Obj48_Index
00019A5E 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's ship)
00019A62 4A29 0022                  		tst.b	$22(a1)		; was the boss defeated?
00019A66 6A00                       		bpl.s	Obj48_Display3	; if not, branch
00019A68 10BC 003F                  		move.b	#$3F,0(a0)	; replace chain link with Obj3F (red explosion)
00019A6C 117C 0000 0024             		move.b	#0,$24(a0)
00019A72                            
00019A72                            Obj48_Display3:
00019A72 4EF9 0000 F010             		jmp	DisplaySprite
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            Obj48_Ball:				; XREF: Obj48_Index
00019A78 7000                       		moveq	#0,d0		; use frame #0
00019A7A 4A28 001A                  		tst.b	$1A(a0)		; test ball mapping frame
00019A7E 6600                       		bne.s	Obj48_Vanish	; if its not zero, branch
00019A80 5200                       		addq.b	#1,d0		; use frame #1
00019A82                            
00019A82                            Obj48_Vanish:
00019A82 1140 001A                  		move.b	d0,$1A(a0)	; update mapping frame
00019A86 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's ship)
00019A8A 4A29 0022                  		tst.b	$22(a1)		; was the boss defeated?
00019A8E 6A00                       		bpl.s	Obj48_Display4	; if not, branch
00019A90 117C 0000 0020             		move.b	#0,$20(a0)	; clear touch response, the ball can't hurt Sonic anymore
00019A96 6100 FBC6                  		bsr.w	BossDefeated	; make ball explode
00019A9A 5328 003C                  		subq.b	#1,$3C(a0)	; subtract 1 from timer
00019A9E 6A00                       		bpl.s	Obj48_Display4	; if time remains, branch
00019AA0 10BC 003F                  		move.b	#$3F,(a0)	; replace the ball with Obj3F (red explosion)
00019AA4 117C 0000 0024             		move.b	#0,$24(a0)
00019AAA                            
00019AAA                            Obj48_Display4:
00019AAA 4EF9 0000 F010             		jmp	DisplaySprite
00019AB0                            ; ===========================================================================
00019AB0                            Ani_Eggman:
00019AB0                            	include "_anim\Eggman.asm"
00019AB0                            ; ---------------------------------------------------------------------------
00019AB0                            ; Animation script - Eggman (bosses)
00019AB0                            ; ---------------------------------------------------------------------------
00019AB0 0000                       		dc.w byte_17CD4-Ani_Eggman
00019AB2 0000                       		dc.w byte_17CD8-Ani_Eggman
00019AB4 0000                       		dc.w byte_17CDC-Ani_Eggman
00019AB6 0000                       		dc.w byte_17CE0-Ani_Eggman
00019AB8 0000                       		dc.w byte_17CE4-Ani_Eggman
00019ABA 0000                       		dc.w byte_17CE8-Ani_Eggman
00019ABC 0000                       		dc.w byte_17CEC-Ani_Eggman
00019ABE 0000                       		dc.w byte_17CF0-Ani_Eggman
00019AC0 0000                       		dc.w byte_17CF4-Ani_Eggman
00019AC2 0000                       		dc.w byte_17CF8-Ani_Eggman
00019AC4 0000                       		dc.w byte_17CFC-Ani_Eggman
00019AC6 0000                       		dc.w byte_17D00-Ani_Eggman
00019AC8 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019ACC 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019AD0 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019AD4 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019AD8 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019ADC 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019AE0 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019AE4 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019AE8 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019AEC 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019AF0 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019AF4 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019B00                            		even
00019B00                            		even
00019B00                            
00019B00                            ; ---------------------------------------------------------------------------
00019B00                            ; Sprite mappings - Eggman (boss levels)
00019B00                            ; ---------------------------------------------------------------------------
00019B00                            Map_Eggman:
00019B00                            	include "_maps\Eggman.asm"
00019B00                            ; ---------------------------------------------------------------------------
00019B00                            ; Sprite mappings - Eggman (boss levels)
00019B00                            ; ---------------------------------------------------------------------------
00019B00 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019B04 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019B08 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019B0C 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019B10 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019B14 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019B18 0000                       		dc.w byte_17DC8-Map_Eggman
00019B1A 06                         byte_17D26:	dc.b 6
00019B1B EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019B20 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00019B25 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019B2A FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019B2F 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019B34 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019B39 02                         byte_17D45:	dc.b 2
00019B3A E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019B3F EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019B44 02                         byte_17D50:	dc.b 2
00019B45 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019B4A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019B4F 03                         byte_17D5B:	dc.b 3
00019B50 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019B55 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019B5A EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019B5F 03                         byte_17D6B:	dc.b 3
00019B60 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019B65 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019B6A EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019B6F 03                         byte_17D7B:	dc.b 3
00019B70 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019B75 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019B7A EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019B7F 03                         byte_17D8B:	dc.b 3
00019B80 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019B85 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019B8A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019B8F 04                         byte_17D9B:	dc.b 4
00019B90 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019B95 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019B9A EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019B9F EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019BA4 01                         byte_17DB0:	dc.b 1
00019BA5 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019BAA 01                         byte_17DB6:	dc.b 1
00019BAB 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019BB0 00                         byte_17DBC:	dc.b 0
00019BB1 02                         byte_17DBD:	dc.b 2
00019BB2 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019BB7 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019BBC 02                         byte_17DC8:	dc.b 2
00019BBD F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019BC2 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019BC8 00                         		even
00019BC8 00                         		even
00019BC8                            
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8                            Map_BossItems:
00019BC8                            	include "_maps\Boss items.asm"
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019BCC 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019BD0 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019BD4 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019BD8 01                         byte_17DE4:	dc.b 1
00019BD9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019BDE 02                         byte_17DEA:	dc.b 2
00019BDF FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019BE4 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019BE9 00                         		dc.b 0
00019BEA 01                         byte_17DF6:	dc.b 1
00019BEB FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019BF0 01                         byte_17DFC:	dc.b 1
00019BF1 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019BF6 01                         byte_17E02:	dc.b 1
00019BF7 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019BFC 04                         byte_17E08:	dc.b 4
00019BFD F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019C02 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019C07 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019C0C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019C11 00                         		dc.b 0
00019C12 02                         byte_17E1E:	dc.b 2
00019C13 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019C18 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019C1D 00                         		dc.b 0
00019C1E 02                         byte_17E2A:	dc.b 2
00019C1F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019C24 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019C2A 00                         		even
00019C2A 00                         		even
00019C2A                            
00019C2A                            ; ===========================================================================
00019C2A                            ; ---------------------------------------------------------------------------
00019C2A                            ; Object 77 - Eggman (LZ)
00019C2A                            ; ---------------------------------------------------------------------------
00019C2A                            
00019C2A                            Obj77:					; XREF: Obj_Index
00019C2A 7000                       		moveq	#0,d0
00019C2C 1028 0024                  		move.b	$24(a0),d0
00019C30 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019C34 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019C38                            ; ===========================================================================
00019C38 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019C3A 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019C3C 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019C3E 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019C40                            
00019C40 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019C42 0401                       		dc.b 4,	1
00019C44 0607                       		dc.b 6,	7
00019C46                            ; ===========================================================================
00019C46                            
00019C46                            Obj77_Main:				; XREF: Obj77_Index
00019C46 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019C4C 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019C52 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C58 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C5E 117C 000F 0020             		move.b	#$F,$20(a0)
00019C64 117C 0008 0021             		move.b	#var_BHits_LZ,$21(a0)
00019C6A 117C 0004 0018             		move.b	#4,$18(a0)
00019C70 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019C74 2248                       		movea.l	a0,a1
00019C76 7202                       		moveq	#2,d1
00019C78 6000                       		bra.s	Obj77_LoadBoss
00019C7A                            ; ===========================================================================
00019C7A                            
00019C7A                            Obj77_Loop:
00019C7A 4EB9 0000 F4AC             		jsr	SingleObjLoad2
00019C80 6600                       		bne.s	Obj77_ShipMain
00019C82 12BC 0077                  		move.b	#$77,0(a1)
00019C86 3368 0008 0008             		move.w	8(a0),8(a1)
00019C8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C92                            
00019C92                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019C92 08A8 0000 0022             		bclr	#0,$22(a0)
00019C98 4229 0025                  		clr.b	$25(a1)
00019C9C 135A 0024                  		move.b	(a2)+,$24(a1)
00019CA0 135A 001C                  		move.b	(a2)+,$1C(a1)
00019CA4 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019CAA 237C 0001 9B00 0004        		move.l	#Map_Eggman,4(a1)
00019CB2 337C 0400 0002             		move.w	#$400,2(a1)
00019CB8 137C 0004 0001             		move.b	#4,1(a1)
00019CBE 137C 0020 0019             		move.b	#$20,$19(a1)
00019CC4 2348 0034                  		move.l	a0,$34(a1)
00019CC8 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019CCC                            
00019CCC                            Obj77_ShipMain:
00019CCC 43F8 D000                  		lea	($FFFFD000).w,a1
00019CD0 7000                       		moveq	#0,d0
00019CD2 1028 0025                  		move.b	$25(a0),d0
00019CD6 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019CDA 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019CDE 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
00019CE4 4EB9 0000 C10C             		jsr	AnimateSprite
00019CEA 7003                       		moveq	#3,d0
00019CEC C028 0022                  		and.b	$22(a0),d0
00019CF0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CF6 8128 0001                  		or.b	d0,1(a0)
00019CFA 4EF9 0000 F010             		jmp	DisplaySprite
00019D00                            ; ===========================================================================
00019D00 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019D04 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019D08 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019D0C 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019D10                            ; ===========================================================================
00019D10                            
00019D10                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019D10 3029 0008                  		move.w	8(a1),d0
00019D14 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019D18 6500                       		bcs.s	loc_17F38
00019D1A 317C FE80 0012             		move.w	#-$180,$12(a0)
00019D20 317C 0060 0010             		move.w	#$60,$10(a0)
00019D26 5428 0025                  		addq.b	#2,$25(a0)
00019D2A                            
00019D2A                            loc_17F38:
00019D2A 6100 F974                  		bsr.w	BossMove
00019D2E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D34 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D3A                            
00019D3A                            loc_17F48:
00019D3A 4A28 003D                  		tst.b	$3D(a0)
00019D3E 6600                       		bne.s	loc_17F8E
00019D40 4A28 0022                  		tst.b	$22(a0)
00019D44 6B00                       		bmi.s	loc_17F92
00019D46 4A28 0020                  		tst.b	$20(a0)
00019D4A 6600                       		bne.s	locret_17F8C
00019D4C 4A28 003E                  		tst.b	$3E(a0)
00019D50 6600                       		bne.s	loc_17F70
00019D52 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D58 303C 00AC                  		move.w	#$AC,d0
00019D5C 4EB9 0000 12C8             		jsr	(PlaySound_Special).l
00019D62                            
00019D62                            loc_17F70:
00019D62 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D66 7000                       		moveq	#0,d0
00019D68 4A51                       		tst.w	(a1)
00019D6A 6600                       		bne.s	loc_17F7E
00019D6C 303C 0EEE                  		move.w	#$EEE,d0
00019D70                            
00019D70                            loc_17F7E:
00019D70 3280                       		move.w	d0,(a1)
00019D72 5328 003E                  		subq.b	#1,$3E(a0)
00019D76 6600                       		bne.s	locret_17F8C
00019D78 117C 000F 0020             		move.b	#$F,$20(a0)
00019D7E                            
00019D7E                            locret_17F8C:
00019D7E 4E75                       		rts	
00019D80                            ; ===========================================================================
00019D80                            
00019D80                            loc_17F8E:				; XREF: loc_17F48
00019D80 6000 F8DC                  		bra.w	BossDefeated
00019D84                            ; ===========================================================================
00019D84                            
00019D84                            loc_17F92:				; XREF: loc_17F48
00019D84 7064                       		moveq	#100,d0
00019D86 6100 0000                  		bsr.w	AddPoints
00019D8A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019D90 4E75                       		rts	
00019D92                            ; ===========================================================================
00019D92                            
00019D92                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019D92 70FE                       		moveq	#-2,d0
00019D94 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019D9A 6500                       		bcs.s	loc_17FB6
00019D9C 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019DA2 4268 0010                  		clr.w	$10(a0)
00019DA6 5240                       		addq.w	#1,d0
00019DA8                            
00019DA8                            loc_17FB6:
00019DA8 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019DAE 6E00                       		bgt.s	loc_17FCA
00019DB0 317C 0500 0038             		move.w	#$500,$38(a0)
00019DB6 4268 0012                  		clr.w	$12(a0)
00019DBA 5240                       		addq.w	#1,d0
00019DBC                            
00019DBC                            loc_17FCA:
00019DBC 6600                       		bne.s	loc_17FDC
00019DBE 317C 0140 0010             		move.w	#$140,$10(a0)
00019DC4 317C FE00 0012             		move.w	#-$200,$12(a0)
00019DCA 5428 0025                  		addq.b	#2,$25(a0)
00019DCE                            
00019DCE                            loc_17FDC:
00019DCE 6000 FF5A                  		bra.w	loc_17F38
00019DD2                            ; ===========================================================================
00019DD2                            
00019DD2                            loc_17FE0:				; XREF: Obj77_ShipIndex
00019DD2 70FE                       		moveq	#-2,d0
00019DD4 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00019DDA 6500                       		bcs.s	loc_17FF6
00019DDC 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00019DE2 4268 0010                  		clr.w	$10(a0)
00019DE6 5240                       		addq.w	#1,d0
00019DE8                            
00019DE8                            loc_17FF6:
00019DE8 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00019DEE 6E00                       		bgt.s	loc_1800A
00019DF0 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00019DF6 4268 0012                  		clr.w	$12(a0)
00019DFA 5240                       		addq.w	#1,d0
00019DFC                            
00019DFC                            loc_1800A:
00019DFC 6600                       		bne.s	loc_1801A
00019DFE 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E04 5428 0025                  		addq.b	#2,$25(a0)
00019E08 4228 003F                  		clr.b	$3F(a0)
00019E0C                            
00019E0C                            loc_1801A:
00019E0C 6000 FF1C                  		bra.w	loc_17F38
00019E10                            ; ===========================================================================
00019E10                            
00019E10                            loc_1801E:				; XREF: Obj77_ShipIndex
00019E10 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00019E16 6E00                       		bgt.s	loc_1804E
00019E18 317C 0100 0038             		move.w	#$100,$38(a0)
00019E1E 317C 0140 0010             		move.w	#$140,$10(a0)
00019E24 317C FF80 0012             		move.w	#-$80,$12(a0)
00019E2A 4A28 003D                  		tst.b	$3D(a0)
00019E2E 6700                       		beq.s	loc_18046
00019E30 E1E8 0010                  		asl	$10(a0)
00019E34 E1E8 0012                  		asl	$12(a0)
00019E38                            
00019E38                            loc_18046:
00019E38 5428 0025                  		addq.b	#2,$25(a0)
00019E3C 6000 FEEC                  		bra.w	loc_17F38
00019E40                            ; ===========================================================================
00019E40                            
00019E40                            loc_1804E:
00019E40 08E8 0000 0022             		bset	#0,$22(a0)
00019E46 5428 003F                  		addq.b	#2,$3F(a0)
00019E4A 1028 003F                  		move.b	$3F(a0),d0
00019E4E 4EB9 0000 29AE             		jsr	(CalcSine).l
00019E54 4A41                       		tst.w	d1
00019E56 6A00                       		bpl.s	loc_1806C
00019E58 08A8 0000 0022             		bclr	#0,$22(a0)
00019E5E                            
00019E5E                            loc_1806C:
00019E5E E840                       		asr.w	#4,d0
00019E60 4840                       		swap	d0
00019E62 4240                       		clr.w	d0
00019E64 D0A8 0030                  		add.l	$30(a0),d0
00019E68 4840                       		swap	d0
00019E6A 3140 0008                  		move.w	d0,8(a0)
00019E6E 3028 0012                  		move.w	$12(a0),d0
00019E72 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019E76 9268 000C                  		sub.w	$C(a0),d1
00019E7A 6500                       		bcs.s	loc_180A2
00019E7C 0441 0048                  		subi.w	#$48,d1
00019E80 6500                       		bcs.s	loc_180A2
00019E82 E240                       		asr.w	#1,d0
00019E84 0441 0028                  		subi.w	#$28,d1
00019E88 6500                       		bcs.s	loc_180A2
00019E8A E240                       		asr.w	#1,d0
00019E8C 0441 0028                  		subi.w	#$28,d1
00019E90 6500                       		bcs.s	loc_180A2
00019E92 7000                       		moveq	#0,d0
00019E94                            
00019E94                            loc_180A2:
00019E94 48C0                       		ext.l	d0
00019E96 E180                       		asl.l	#8,d0
00019E98 4A28 003D                  		tst.b	$3D(a0)
00019E9C 6700                       		beq.s	loc_180AE
00019E9E D080                       		add.l	d0,d0
00019EA0                            
00019EA0                            loc_180AE:
00019EA0 D1A8 0038                  		add.l	d0,$38(a0)
00019EA4 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019EAA 6000 FE8E                  		bra.w	loc_17F48
00019EAE                            ; ===========================================================================
00019EAE                            
00019EAE                            loc_180BC:				; XREF: Obj77_ShipIndex
00019EAE 70FE                       		moveq	#-2,d0
00019EB0 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019EB6 6500                       		bcs.s	loc_180D2
00019EB8 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019EBE 4268 0010                  		clr.w	$10(a0)
00019EC2 5240                       		addq.w	#1,d0
00019EC4                            
00019EC4                            loc_180D2:
00019EC4 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019ECA 6E00                       		bgt.s	loc_180E6
00019ECC 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019ED2 4268 0012                  		clr.w	$12(a0)
00019ED6 5240                       		addq.w	#1,d0
00019ED8                            
00019ED8                            loc_180E6:
00019ED8 6600                       		bne.s	loc_180F2
00019EDA 5428 0025                  		addq.b	#2,$25(a0)
00019EDE 08A8 0000 0022             		bclr	#0,$22(a0)
00019EE4                            
00019EE4                            loc_180F2:
00019EE4 6000 FE44                  		bra.w	loc_17F38
00019EE8                            ; ===========================================================================
00019EE8                            
00019EE8                            loc_180F6:				; XREF: Obj77_ShipIndex
00019EE8 4A28 003D                  		tst.b	$3D(a0)
00019EEC 6600                       		bne.s	loc_18112
00019EEE 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019EF4 6D00                       		blt.s	loc_18126
00019EF6 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019EFC 6E00                       		bgt.s	loc_18126
00019EFE 117C 0032 003C             		move.b	#$32,$3C(a0)
00019F04                            
00019F04                            loc_18112:
00019F04 303C 0086                  		move.w	#$86,d0
00019F08 4EB9 0000 12C2             		jsr	(PlaySound).l	; play LZ music
00019F0E 08E8 0000 0022             		bset	#0,$22(a0)
00019F14 5428 0025                  		addq.b	#2,$25(a0)
00019F18                            
00019F18                            loc_18126:
00019F18 6000 FE10                  		bra.w	loc_17F38
00019F1C                            ; ===========================================================================
00019F1C                            
00019F1C                            loc_1812A:				; XREF: Obj77_ShipIndex
00019F1C 4A28 003D                  		tst.b	$3D(a0)
00019F20 6600                       		bne.s	loc_18136
00019F22 5328 003C                  		subq.b	#1,$3C(a0)
00019F26 6600                       		bne.s	loc_1814E
00019F28                            
00019F28                            loc_18136:
00019F28 4228 003C                  		clr.b	$3C(a0)
00019F2C 317C 0400 0010             		move.w	#$400,$10(a0)
00019F32 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F38 4228 003D                  		clr.b	$3D(a0)
00019F3C 5428 0025                  		addq.b	#2,$25(a0)
00019F40                            
00019F40                            loc_1814E:
00019F40 6000 FDE8                  		bra.w	loc_17F38
00019F44                            ; ===========================================================================
00019F44                            
00019F44                            loc_18152:				; XREF: Obj77_ShipIndex
00019F44 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019F4A 6400                       		bcc.s	loc_18160
00019F4C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F50 6000                       		bra.s	loc_18166
00019F52                            ; ===========================================================================
00019F52                            
00019F52                            loc_18160:
00019F52 4A28 0001                  		tst.b	1(a0)
00019F56 6A00                       		bpl.s	Obj77_ShipDel
00019F58                            
00019F58                            loc_18166:
00019F58 6000 FDD0                  		bra.w	loc_17F38
00019F5C                            ; ===========================================================================
00019F5C                            
00019F5C                            Obj77_ShipDel:
00019F5C 4EF9 0000 F04C             		jmp	DeleteObject
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            Obj77_FaceMain:				; XREF: Obj77_Index
00019F62 2268 0034                  		movea.l	$34(a0),a1
00019F66 1011                       		move.b	(a1),d0
00019F68 B010                       		cmp.b	(a0),d0
00019F6A 6600                       		bne.s	Obj77_FaceDel
00019F6C 7000                       		moveq	#0,d0
00019F6E 1029 0025                  		move.b	$25(a1),d0
00019F72 7201                       		moveq	#1,d1
00019F74 4A28 003D                  		tst.b	$3D(a0)
00019F78 6700                       		beq.s	loc_1818C
00019F7A 720A                       		moveq	#$A,d1
00019F7C 6000                       		bra.s	loc_181A0
00019F7E                            ; ===========================================================================
00019F7E                            
00019F7E                            loc_1818C:
00019F7E 4A29 0020                  		tst.b	$20(a1)
00019F82 6600                       		bne.s	loc_18196
00019F84 7205                       		moveq	#5,d1
00019F86 6000                       		bra.s	loc_181A0
00019F88                            ; ===========================================================================
00019F88                            
00019F88                            loc_18196:
00019F88 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F8E 6500                       		bcs.s	loc_181A0
00019F90 7204                       		moveq	#4,d1
00019F92                            
00019F92                            loc_181A0:
00019F92 1141 001C                  		move.b	d1,$1C(a0)
00019F96 0C00 000E                  		cmpi.b	#$E,d0
00019F9A 6600                       		bne.s	loc_181B6
00019F9C 117C 0006 001C             		move.b	#6,$1C(a0)
00019FA2 4A28 0001                  		tst.b	1(a0)
00019FA6 6A00                       		bpl.s	Obj77_FaceDel
00019FA8                            
00019FA8                            loc_181B6:
00019FA8 6000                       		bra.s	Obj77_Display
00019FAA                            ; ===========================================================================
00019FAA                            
00019FAA                            Obj77_FaceDel:
00019FAA 4EF9 0000 F04C             		jmp	DeleteObject
00019FB0                            ; ===========================================================================
00019FB0                            
00019FB0                            Obj77_FlameMain:			; XREF: Obj77_Index
00019FB0 117C 0007 001C             		move.b	#7,$1C(a0)
00019FB6 2268 0034                  		movea.l	$34(a0),a1
00019FBA 1011                       		move.b	(a1),d0
00019FBC B010                       		cmp.b	(a0),d0
00019FBE 6600                       		bne.s	Obj77_FlameDel
00019FC0 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019FC6 6600                       		bne.s	loc_181F0
00019FC8 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FCE 4A28 0001                  		tst.b	1(a0)
00019FD2 6A00                       		bpl.s	Obj77_FlameDel
00019FD4 6000                       		bra.s	loc_181F0
00019FD6                            ; ===========================================================================
00019FD6 4A69 0010                  		tst.w	$10(a1)
00019FDA 6700                       		beq.s	loc_181F0
00019FDC 117C 0008 001C             		move.b	#8,$1C(a0)
00019FE2                            
00019FE2                            loc_181F0:
00019FE2 6000                       		bra.s	Obj77_Display
00019FE4                            ; ===========================================================================
00019FE4                            
00019FE4                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019FE4 4EF9 0000 F04C             		jmp	DeleteObject
00019FEA                            ; ===========================================================================
00019FEA                            
00019FEA                            Obj77_Display:
00019FEA 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
00019FF0 4EB9 0000 C10C             		jsr	AnimateSprite
00019FF6 2268 0034                  		movea.l	$34(a0),a1
00019FFA 3169 0008 0008             		move.w	8(a1),8(a0)
0001A000 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A006 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A00C 7003                       		moveq	#3,d0
0001A00E C028 0022                  		and.b	$22(a0),d0
0001A012 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A018 8128 0001                  		or.b	d0,1(a0)
0001A01C 4EF9 0000 F010             		jmp	DisplaySprite
0001A022                            ; ===========================================================================
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            ; Object 73 - Eggman (MZ)
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            
0001A022                            Obj73:					; XREF: Obj_Index
0001A022 7000                       		moveq	#0,d0
0001A024 1028 0024                  		move.b	$24(a0),d0
0001A028 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A02C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A030                            ; ===========================================================================
0001A030 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A032 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A034 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A036 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A038 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A03A                            
0001A03A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A03D 0401 04                    		dc.b 4,	1, 4
0001A040 0607 04                    		dc.b 6,	7, 4
0001A043 0800 03                    		dc.b 8,	0, 3
0001A046                            ; ===========================================================================
0001A046                            
0001A046                            Obj73_Main:				; XREF: Obj73_Index
0001A046 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A04C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A052 117C 000F 0020             		move.b	#$F,$20(a0)
0001A058 117C 0008 0021             		move.b	#var_BHits_MZ,$21(a0)
0001A05E 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A062 2248                       		movea.l	a0,a1
0001A064 7203                       		moveq	#3,d1
0001A066 6000                       		bra.s	Obj73_LoadBoss
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            Obj73_Loop:
0001A068 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001A06E 6600                       		bne.s	Obj73_ShipMain
0001A070 12BC 0073                  		move.b	#$73,0(a1)
0001A074 3368 0008 0008             		move.w	8(a0),8(a1)
0001A07A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A080                            
0001A080                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A080 08A8 0000 0022             		bclr	#0,$22(a0)
0001A086 4229 0025                  		clr.b	$25(a1)
0001A08A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A08E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A092 135A 0018                  		move.b	(a2)+,$18(a1)
0001A096 237C 0001 9B00 0004        		move.l	#Map_Eggman,4(a1)
0001A09E 337C 0400 0002             		move.w	#$400,2(a1)
0001A0A4 137C 0004 0001             		move.b	#4,1(a1)
0001A0AA 137C 0020 0019             		move.b	#$20,$19(a1)
0001A0B0 2348 0034                  		move.l	a0,$34(a1)
0001A0B4 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A0B8                            
0001A0B8                            Obj73_ShipMain:
0001A0B8 7000                       		moveq	#0,d0
0001A0BA 1028 0025                  		move.b	$25(a0),d0
0001A0BE 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A0C2 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A0C6 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
0001A0CC 4EB9 0000 C10C             		jsr	AnimateSprite
0001A0D2 7003                       		moveq	#3,d0
0001A0D4 C028 0022                  		and.b	$22(a0),d0
0001A0D8 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A0DE 8128 0001                  		or.b	d0,1(a0)
0001A0E2 4EF9 0000 F010             		jmp	DisplaySprite
0001A0E8                            ; ===========================================================================
0001A0E8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A0EA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A0EC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A0EE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A0F0 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A0F2                            ; ===========================================================================
0001A0F2                            
0001A0F2                            loc_18302:				; XREF: Obj73_ShipIndex
0001A0F2 1028 003F                  		move.b	$3F(a0),d0
0001A0F6 5428 003F                  		addq.b	#2,$3F(a0)
0001A0FA 4EB9 0000 29AE             		jsr	(CalcSine).l
0001A100 E440                       		asr.w	#2,d0
0001A102 3140 0012                  		move.w	d0,$12(a0)
0001A106 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A10C 6100 F592                  		bsr.w	BossMove
0001A110 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A116 6600                       		bne.s	loc_18334
0001A118 5428 0025                  		addq.b	#2,$25(a0)
0001A11C 4228 0028                  		clr.b	$28(a0)
0001A120 42A8 0010                  		clr.l	$10(a0)
0001A124                            
0001A124                            loc_18334:
0001A124 4EB9 0000 2988             		jsr	(RandomNumber).l
0001A12A 1140 0034                  		move.b	d0,$34(a0)
0001A12E                            
0001A12E                            loc_1833E:
0001A12E 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A134 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A13A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A140 6400                       		bcc.s	locret_18390
0001A142 4A28 0022                  		tst.b	$22(a0)
0001A146 6B00                       		bmi.s	loc_18392
0001A148 4A28 0020                  		tst.b	$20(a0)
0001A14C 6600                       		bne.s	locret_18390
0001A14E 4A28 003E                  		tst.b	$3E(a0)
0001A152 6600                       		bne.s	loc_18374
0001A154 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A15A 303C 00AC                  		move.w	#$AC,d0
0001A15E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A164                            
0001A164                            loc_18374:
0001A164 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A168 7000                       		moveq	#0,d0
0001A16A 4A51                       		tst.w	(a1)
0001A16C 6600                       		bne.s	loc_18382
0001A16E 303C 0EEE                  		move.w	#$EEE,d0
0001A172                            
0001A172                            loc_18382:
0001A172 3280                       		move.w	d0,(a1)
0001A174 5328 003E                  		subq.b	#1,$3E(a0)
0001A178 6600                       		bne.s	locret_18390
0001A17A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A180                            
0001A180                            locret_18390:
0001A180 4E75                       		rts	
0001A182                            ; ===========================================================================
0001A182                            
0001A182                            loc_18392:				; XREF: loc_1833E
0001A182 7064                       		moveq	#100,d0
0001A184 6100 0000                  		bsr.w	AddPoints
0001A188 117C 0004 0025             		move.b	#4,$25(a0)
0001A18E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A194 4268 0010                  		clr.w	$10(a0)
0001A198 4E75                       		rts	
0001A19A                            ; ===========================================================================
0001A19A                            
0001A19A                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A19A 7000                       		moveq	#0,d0
0001A19C 1028 0028                  		move.b	$28(a0),d0
0001A1A0 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A1A4 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A1A8 0228 0006 0028             		andi.b	#6,$28(a0)
0001A1AE 6000 FF7E                  		bra.w	loc_1833E
0001A1B2                            ; ===========================================================================
0001A1B2 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A1B4 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A1B6 0000                       		dc.w loc_183CA-off_183C2
0001A1B8 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A1BA                            ; ===========================================================================
0001A1BA                            
0001A1BA                            loc_183CA:				; XREF: off_183C2
0001A1BA 4A68 0010                  		tst.w	$10(a0)
0001A1BE 6600                       		bne.s	loc_183FE
0001A1C0 7040                       		moveq	#$40,d0
0001A1C2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A1C8 6700                       		beq.s	loc_183E6
0001A1CA 6500                       		bcs.s	loc_183DE
0001A1CC 4440                       		neg.w	d0
0001A1CE                            
0001A1CE                            loc_183DE:
0001A1CE 3140 0012                  		move.w	d0,$12(a0)
0001A1D2 6000 F4CC                  		bra.w	BossMove
0001A1D6                            ; ===========================================================================
0001A1D6                            
0001A1D6                            loc_183E6:
0001A1D6 317C 0200 0010             		move.w	#$200,$10(a0)
0001A1DC 317C 0100 0012             		move.w	#$100,$12(a0)
0001A1E2 0828 0000 0022             		btst	#0,$22(a0)
0001A1E8 6600                       		bne.s	loc_183FE
0001A1EA 4468 0010                  		neg.w	$10(a0)
0001A1EE                            
0001A1EE                            loc_183FE:
0001A1EE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A1F4 6400                       		bcc.s	Obj73_MakeLava
0001A1F6 6100 F4A8                  		bsr.w	BossMove
0001A1FA 5968 0012                  		subq.w	#4,$12(a0)
0001A1FE                            
0001A1FE                            Obj73_MakeLava:
0001A1FE 5328 0034                  		subq.b	#1,$34(a0)
0001A202 6400                       		bcc.s	loc_1845C
0001A204 4EB9 0000 F496             		jsr	SingleObjLoad
0001A20A 6600                       		bne.s	loc_1844A
0001A20C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A210 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A216 4EB9 0000 2988             		jsr	(RandomNumber).l
0001A21C 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A222 80FC 0050                  		divu.w	#$50,d0
0001A226 4840                       		swap	d0
0001A228 0640 1878                  		addi.w	#$1878,d0
0001A22C 3340 0008                  		move.w	d0,8(a1)
0001A230 EE09                       		lsr.b	#7,d1
0001A232 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A238                            
0001A238                            loc_1844A:
0001A238 4EB9 0000 2988             		jsr	(RandomNumber).l
0001A23E 0200 001F                  		andi.b	#$1F,d0
0001A242 0600 0040                  		addi.b	#$40,d0
0001A246 1140 0034                  		move.b	d0,$34(a0)
0001A24A                            
0001A24A                            loc_1845C:
0001A24A 0828 0000 0022             		btst	#0,$22(a0)
0001A250 6700                       		beq.s	loc_18474
0001A252 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A258 6D00                       		blt.s	locret_1849C
0001A25A 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A260 6000                       		bra.s	loc_18482
0001A262                            ; ===========================================================================
0001A262                            
0001A262                            loc_18474:
0001A262 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A268 6E00                       		bgt.s	locret_1849C
0001A26A 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A270                            
0001A270                            loc_18482:
0001A270 4268 0010                  		clr.w	$10(a0)
0001A274 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A27A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A280 6400                       		bcc.s	loc_18498
0001A282 4468 0012                  		neg.w	$12(a0)
0001A286                            
0001A286                            loc_18498:
0001A286 5428 0028                  		addq.b	#2,$28(a0)
0001A28A                            
0001A28A                            locret_1849C:
0001A28A 4E75                       		rts	
0001A28C                            ; ===========================================================================
0001A28C                            
0001A28C                            Obj73_MakeLava2:			; XREF: off_183C2
0001A28C 6100 F412                  		bsr.w	BossMove
0001A290 3028 0038                  		move.w	$38(a0),d0
0001A294 0440 022C                  		subi.w	#$22C,d0
0001A298 6E00                       		bgt.s	locret_184F4
0001A29A 303C 022C                  		move.w	#$22C,d0
0001A29E 4A68 0012                  		tst.w	$12(a0)
0001A2A2 6700                       		beq.s	loc_184EA
0001A2A4 4268 0012                  		clr.w	$12(a0)
0001A2A8 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A2AE 0868 0000 0022             		bchg	#0,$22(a0)
0001A2B4 4EB9 0000 F496             		jsr	SingleObjLoad
0001A2BA 6600                       		bne.s	loc_184EA
0001A2BC 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A2C2 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A2C8 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A2CE 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A2D2 137C 0001 0028             		move.b	#1,$28(a1)
0001A2D8                            
0001A2D8                            loc_184EA:
0001A2D8 5368 003C                  		subq.w	#1,$3C(a0)
0001A2DC 6600                       		bne.s	locret_184F4
0001A2DE 5428 0028                  		addq.b	#2,$28(a0)
0001A2E2                            
0001A2E2                            locret_184F4:
0001A2E2 4E75                       		rts	
0001A2E4                            ; ===========================================================================
0001A2E4                            
0001A2E4                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A2E4 5368 003C                  		subq.w	#1,$3C(a0)
0001A2E8 6B00                       		bmi.s	loc_18500
0001A2EA 6000 F372                  		bra.w	BossDefeated
0001A2EE                            ; ===========================================================================
0001A2EE                            
0001A2EE                            loc_18500:
0001A2EE 08E8 0000 0022             		bset	#0,$22(a0)
0001A2F4 08A8 0007 0022             		bclr	#7,$22(a0)
0001A2FA 4268 0010                  		clr.w	$10(a0)
0001A2FE 5428 0025                  		addq.b	#2,$25(a0)
0001A302 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A308 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A30C 6600                       		bne.s	locret_1852A
0001A30E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A314 4268 0012                  		clr.w	$12(a0)
0001A318                            
0001A318                            locret_1852A:
0001A318 4E75                       		rts	
0001A31A                            ; ===========================================================================
0001A31A                            
0001A31A                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A31A 5268 003C                  		addq.w	#1,$3C(a0)
0001A31E 6700                       		beq.s	loc_18544
0001A320 6A00                       		bpl.s	loc_1854E
0001A322 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A328 6400                       		bcc.s	loc_18544
0001A32A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A330 6000                       		bra.s	loc_1857A
0001A332                            ; ===========================================================================
0001A332                            
0001A332                            loc_18544:
0001A332 4268 0012                  		clr.w	$12(a0)
0001A336 4268 003C                  		clr.w	$3C(a0)
0001A33A 6000                       		bra.s	loc_1857A
0001A33C                            ; ===========================================================================
0001A33C                            
0001A33C                            loc_1854E:
0001A33C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A342 6500                       		bcs.s	loc_18566
0001A344 6700                       		beq.s	loc_1856C
0001A346 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A34C 6500                       		bcs.s	loc_1857A
0001A34E 5428 0025                  		addq.b	#2,$25(a0)
0001A352 6000                       		bra.s	loc_1857A
0001A354                            ; ===========================================================================
0001A354                            
0001A354                            loc_18566:
0001A354 5168 0012                  		subq.w	#8,$12(a0)
0001A358 6000                       		bra.s	loc_1857A
0001A35A                            ; ===========================================================================
0001A35A                            
0001A35A                            loc_1856C:
0001A35A 4268 0012                  		clr.w	$12(a0)
0001A35E 303C 0089                  		move.w	#$89,d0
0001A362 4EB9 0000 12C2             		jsr	(PlaySound).l	; play MZ music
0001A368                            
0001A368                            loc_1857A:
0001A368 6100 F336                  		bsr.w	BossMove
0001A36C 6000 FDC0                  		bra.w	loc_1833E
0001A370                            ; ===========================================================================
0001A370                            
0001A370                            loc_18582:				; XREF: Obj73_ShipIndex
0001A370 317C 0500 0010             		move.w	#$500,$10(a0)
0001A376 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A37C 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A382 6400                       		bcc.s	loc_1859C
0001A384 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A388 6000                       		bra.s	loc_185A2
0001A38A                            ; ===========================================================================
0001A38A                            
0001A38A                            loc_1859C:
0001A38A 4A28 0001                  		tst.b	1(a0)
0001A38E 6A00                       		bpl.s	Obj73_ShipDel
0001A390                            
0001A390                            loc_185A2:
0001A390 6100 F30E                  		bsr.w	BossMove
0001A394 6000 FD98                  		bra.w	loc_1833E
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            Obj73_ShipDel:
0001A398 4EF9 0000 F04C             		jmp	DeleteObject
0001A39E                            ; ===========================================================================
0001A39E                            
0001A39E                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A39E 7000                       		moveq	#0,d0
0001A3A0 7201                       		moveq	#1,d1
0001A3A2 2268 0034                  		movea.l	$34(a0),a1
0001A3A6 1029 0025                  		move.b	$25(a1),d0
0001A3AA 5540                       		subq.w	#2,d0
0001A3AC 6600                       		bne.s	loc_185D2
0001A3AE 0829 0001 0028             		btst	#1,$28(a1)
0001A3B4 6700                       		beq.s	loc_185DA
0001A3B6 4A69 0012                  		tst.w	$12(a1)
0001A3BA 6600                       		bne.s	loc_185DA
0001A3BC 7204                       		moveq	#4,d1
0001A3BE 6000                       		bra.s	loc_185EE
0001A3C0                            ; ===========================================================================
0001A3C0                            
0001A3C0                            loc_185D2:
0001A3C0 5500                       		subq.b	#2,d0
0001A3C2 6B00                       		bmi.s	loc_185DA
0001A3C4 720A                       		moveq	#$A,d1
0001A3C6 6000                       		bra.s	loc_185EE
0001A3C8                            ; ===========================================================================
0001A3C8                            
0001A3C8                            loc_185DA:
0001A3C8 4A29 0020                  		tst.b	$20(a1)
0001A3CC 6600                       		bne.s	loc_185E4
0001A3CE 7205                       		moveq	#5,d1
0001A3D0 6000                       		bra.s	loc_185EE
0001A3D2                            ; ===========================================================================
0001A3D2                            
0001A3D2                            loc_185E4:
0001A3D2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A3D8 6500                       		bcs.s	loc_185EE
0001A3DA 7204                       		moveq	#4,d1
0001A3DC                            
0001A3DC                            loc_185EE:
0001A3DC 1141 001C                  		move.b	d1,$1C(a0)
0001A3E0 5900                       		subq.b	#4,d0
0001A3E2 6600                       		bne.s	loc_18602
0001A3E4 117C 0006 001C             		move.b	#6,$1C(a0)
0001A3EA 4A28 0001                  		tst.b	1(a0)
0001A3EE 6A00                       		bpl.s	Obj73_FaceDel
0001A3F0                            
0001A3F0                            loc_18602:
0001A3F0 6000                       		bra.s	Obj73_Display
0001A3F2                            ; ===========================================================================
0001A3F2                            
0001A3F2                            Obj73_FaceDel:
0001A3F2 4EF9 0000 F04C             		jmp	DeleteObject
0001A3F8                            ; ===========================================================================
0001A3F8                            
0001A3F8                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A3F8 117C 0007 001C             		move.b	#7,$1C(a0)
0001A3FE 2268 0034                  		movea.l	$34(a0),a1
0001A402 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A408 6D00                       		blt.s	loc_1862A
0001A40A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A410 4A28 0001                  		tst.b	1(a0)
0001A414 6A00                       		bpl.s	Obj73_FlameDel
0001A416 6000                       		bra.s	loc_18636
0001A418                            ; ===========================================================================
0001A418                            
0001A418                            loc_1862A:
0001A418 4A69 0010                  		tst.w	$10(a1)
0001A41C 6700                       		beq.s	loc_18636
0001A41E 117C 0008 001C             		move.b	#8,$1C(a0)
0001A424                            
0001A424                            loc_18636:
0001A424 6000                       		bra.s	Obj73_Display
0001A426                            ; ===========================================================================
0001A426                            
0001A426                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A426 4EF9 0000 F04C             		jmp	DeleteObject
0001A42C                            ; ===========================================================================
0001A42C                            
0001A42C                            Obj73_Display:
0001A42C 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
0001A432 4EB9 0000 C10C             		jsr	AnimateSprite
0001A438                            
0001A438                            loc_1864A:
0001A438 2268 0034                  		movea.l	$34(a0),a1
0001A43C 3169 0008 0008             		move.w	8(a1),8(a0)
0001A442 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A448 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A44E 7003                       		moveq	#3,d0
0001A450 C028 0022                  		and.b	$22(a0),d0
0001A454 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A45A 8128 0001                  		or.b	d0,1(a0)
0001A45E 4EF9 0000 F010             		jmp	DisplaySprite
0001A464                            ; ===========================================================================
0001A464                            
0001A464                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A464 2268 0034                  		movea.l	$34(a0),a1
0001A468 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A46E 6600                       		bne.s	loc_18688
0001A470 4A28 0001                  		tst.b	1(a0)
0001A474 6A00                       		bpl.s	Obj73_TubeDel
0001A476                            
0001A476                            loc_18688:
0001A476 217C 0001 9BC8 0004        		move.l	#Map_BossItems,4(a0)
0001A47E 317C 246C 0002             		move.w	#$246C,2(a0)
0001A484 117C 0004 001A             		move.b	#4,$1A(a0)
0001A48A 60AC                       		bra.s	loc_1864A
0001A48C                            ; ===========================================================================
0001A48C                            
0001A48C                            Obj73_TubeDel:
0001A48C 4EF9 0000 F04C             		jmp	DeleteObject
0001A492                            ; ===========================================================================
0001A492                            ; ---------------------------------------------------------------------------
0001A492                            ; Object 74 - lava that	Eggman drops (MZ)
0001A492                            ; ---------------------------------------------------------------------------
0001A492                            
0001A492                            Obj74:					; XREF: Obj_Index
0001A492 7000                       		moveq	#0,d0
0001A494 1028 0024                  		move.b	$24(a0),d0
0001A498 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A49C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A4A0 4EF9 0000 F010             		jmp	DisplaySprite
0001A4A6                            ; ===========================================================================
0001A4A6 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A4A8 0000                       		dc.w Obj74_Action-Obj74_Index
0001A4AA 0000                       		dc.w loc_18886-Obj74_Index
0001A4AC 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A4AE                            ; ===========================================================================
0001A4AE                            
0001A4AE                            Obj74_Main:				; XREF: Obj74_Index
0001A4AE 117C 0008 0016             		move.b	#8,$16(a0)
0001A4B4 117C 0008 0017             		move.b	#8,$17(a0)
0001A4BA 217C 0000 CD5E 0004        		move.l	#Map_obj14,4(a0)
0001A4C2 317C 0345 0002             		move.w	#$345,2(a0)
0001A4C8 117C 0004 0001             		move.b	#4,1(a0)
0001A4CE 117C 0005 0018             		move.b	#5,$18(a0)
0001A4D4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A4DA 117C 0008 0019             		move.b	#8,$19(a0)
0001A4E0 5428 0024                  		addq.b	#2,$24(a0)
0001A4E4 4A28 0028                  		tst.b	$28(a0)
0001A4E8 6600                       		bne.s	loc_1870A
0001A4EA 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A4F0 5428 0024                  		addq.b	#2,$24(a0)
0001A4F4 6000 0000                  		bra.w	loc_18886
0001A4F8                            ; ===========================================================================
0001A4F8                            
0001A4F8                            loc_1870A:
0001A4F8 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A4FE 303C 00AE                  		move.w	#$AE,d0
0001A502 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play lava sound
0001A508                            
0001A508                            Obj74_Action:				; XREF: Obj74_Index
0001A508 7000                       		moveq	#0,d0
0001A50A 1028 0025                  		move.b	$25(a0),d0
0001A50E 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A512 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A516 4EB9 0000 EFEA             		jsr	SpeedToPos
0001A51C 43F9 0000 FECA             		lea	(Ani_obj14).l,a1
0001A522 4EB9 0000 C10C             		jsr	AnimateSprite
0001A528 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A52E 6200                       		bhi.s	Obj74_Delete
0001A530 4E75                       		rts	
0001A532                            ; ===========================================================================
0001A532                            
0001A532                            Obj74_Delete:
0001A532 4EF9 0000 F04C             		jmp	DeleteObject
0001A538                            ; ===========================================================================
0001A538 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A53A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A53C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A53E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A540                            ; ===========================================================================
0001A540                            
0001A540                            Obj74_Drop:				; XREF: Obj74_Index2
0001A540 08E8 0001 0022             		bset	#1,$22(a0)
0001A546 5328 0029                  		subq.b	#1,$29(a0)
0001A54A 6A00                       		bpl.s	locret_18780
0001A54C 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A552 4228 0028                  		clr.b	$28(a0)
0001A556 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A55C 08A8 0001 0022             		bclr	#1,$22(a0)
0001A562 6100 C6BA                  		bsr.w	ObjHitFloor
0001A566 4A41                       		tst.w	d1
0001A568 6A00                       		bpl.s	locret_18780
0001A56A 5428 0025                  		addq.b	#2,$25(a0)
0001A56E                            
0001A56E                            locret_18780:
0001A56E 4E75                       		rts	
0001A570                            ; ===========================================================================
0001A570                            
0001A570                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A570 5568 000C                  		subq.w	#2,$C(a0)
0001A574 08E8 0007 0002             		bset	#7,2(a0)
0001A57A 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A580 4268 0012                  		clr.w	$12(a0)
0001A584 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A58A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A590 117C 0003 0029             		move.b	#3,$29(a0)
0001A596 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001A59C 6600                       		bne.s	loc_187CA
0001A59E 47D1                       		lea	(a1),a3
0001A5A0 45D0                       		lea	(a0),a2
0001A5A2 7003                       		moveq	#3,d0
0001A5A4                            
0001A5A4                            Obj74_Loop:
0001A5A4 26DA                       		move.l	(a2)+,(a3)+
0001A5A6 26DA                       		move.l	(a2)+,(a3)+
0001A5A8 26DA                       		move.l	(a2)+,(a3)+
0001A5AA 26DA                       		move.l	(a2)+,(a3)+
0001A5AC 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A5B0                            
0001A5B0 4469 0010                  		neg.w	$10(a1)
0001A5B4 5429 0025                  		addq.b	#2,$25(a1)
0001A5B8                            
0001A5B8                            loc_187CA:
0001A5B8 5428 0025                  		addq.b	#2,$25(a0)
0001A5BC 4E75                       		rts	
0001A5BE                            
0001A5BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A5BE                            
0001A5BE                            
0001A5BE                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A5BE 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001A5C4 6600                       		bne.s	locret_187EE
0001A5C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001A5CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A5D2 12BC 0074                  		move.b	#$74,(a1)
0001A5D6 337C 0067 0028             		move.w	#$67,$28(a1)
0001A5DC                            
0001A5DC                            locret_187EE:
0001A5DC 4E75                       		rts	
0001A5DE                            ; End of function Obj74_Duplicate2
0001A5DE                            
0001A5DE                            ; ===========================================================================
0001A5DE                            
0001A5DE                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A5DE 6100 C63E                  		bsr.w	ObjHitFloor
0001A5E2 4A41                       		tst.w	d1
0001A5E4 6A00                       		bpl.s	loc_18826
0001A5E6 3028 0008                  		move.w	8(a0),d0
0001A5EA 0C40 1940                  		cmpi.w	#$1940,d0
0001A5EE 6E00                       		bgt.s	loc_1882C
0001A5F0 3228 0030                  		move.w	$30(a0),d1
0001A5F4 B240                       		cmp.w	d0,d1
0001A5F6 6700                       		beq.s	loc_1881E
0001A5F8 0240 0010                  		andi.w	#$10,d0
0001A5FC 0241 0010                  		andi.w	#$10,d1
0001A600 B240                       		cmp.w	d0,d1
0001A602 6700                       		beq.s	loc_1881E
0001A604 61B8                       		bsr.s	Obj74_Duplicate2
0001A606 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A60C                            
0001A60C                            loc_1881E:
0001A60C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A612 4E75                       		rts	
0001A614                            ; ===========================================================================
0001A614                            
0001A614                            loc_18826:
0001A614 5428 0025                  		addq.b	#2,$25(a0)
0001A618 4E75                       		rts	
0001A61A                            ; ===========================================================================
0001A61A                            
0001A61A                            loc_1882C:
0001A61A 5428 0024                  		addq.b	#2,$24(a0)
0001A61E 4E75                       		rts	
0001A620                            ; ===========================================================================
0001A620                            
0001A620                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A620 08A8 0001 0022             		bclr	#1,$22(a0)
0001A626 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A62C 3028 0008                  		move.w	8(a0),d0
0001A630 9068 0032                  		sub.w	$32(a0),d0
0001A634 6A00                       		bpl.s	loc_1884A
0001A636 4440                       		neg.w	d0
0001A638                            
0001A638                            loc_1884A:
0001A638 0C40 0012                  		cmpi.w	#$12,d0
0001A63C 6600                       		bne.s	loc_18856
0001A63E 08A8 0007 0002             		bclr	#7,2(a0)
0001A644                            
0001A644                            loc_18856:
0001A644 6100 C5D8                  		bsr.w	ObjHitFloor
0001A648 4A41                       		tst.w	d1
0001A64A 6A00                       		bpl.s	locret_1887E
0001A64C 5328 0029                  		subq.b	#1,$29(a0)
0001A650 6700                       		beq.s	Obj74_Delete2
0001A652 4268 0012                  		clr.w	$12(a0)
0001A656 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A65C 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A662 08E8 0007 0002             		bset	#7,2(a0)
0001A668 5528 0025                  		subq.b	#2,$25(a0)
0001A66C                            
0001A66C                            locret_1887E:
0001A66C 4E75                       		rts	
0001A66E                            ; ===========================================================================
0001A66E                            
0001A66E                            Obj74_Delete2:
0001A66E 4EF9 0000 F04C             		jmp	DeleteObject
0001A674                            ; ===========================================================================
0001A674                            
0001A674                            loc_18886:				; XREF: Obj74_Index
0001A674 08E8 0007 0002             		bset	#7,2(a0)
0001A67A 5328 0029                  		subq.b	#1,$29(a0)
0001A67E 6600                       		bne.s	Obj74_Animate
0001A680 117C 0001 001C             		move.b	#1,$1C(a0)
0001A686 5968 000C                  		subq.w	#4,$C(a0)
0001A68A 4228 0020                  		clr.b	$20(a0)
0001A68E                            
0001A68E                            Obj74_Animate:
0001A68E 43F9 0000 FECA             		lea	(Ani_obj14).l,a1
0001A694 4EF9 0000 C10C             		jmp	AnimateSprite
0001A69A                            ; ===========================================================================
0001A69A                            
0001A69A                            Obj74_Delete3:				; XREF: Obj74_Index
0001A69A 4EF9 0000 F04C             		jmp	DeleteObject
0001A6A0                            ; ===========================================================================
0001A6A0                            
0001A6A0                            Obj7A_Delete:
0001A6A0 4EF9 0000 F04C             		jmp	DeleteObject
0001A6A6                            ; ===========================================================================
0001A6A6                            ; ---------------------------------------------------------------------------
0001A6A6                            ; Object 7A - Eggman (SLZ)
0001A6A6                            ; ---------------------------------------------------------------------------
0001A6A6                            
0001A6A6                            Obj7A:					; XREF: Obj_Index
0001A6A6 7000                       		moveq	#0,d0
0001A6A8 1028 0024                  		move.b	$24(a0),d0
0001A6AC 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A6B0 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A6B4                            ; ===========================================================================
0001A6B4 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A6B6 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A6B8 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A6BA 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A6BC 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A6BE                            
0001A6BE 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A6C1 0401 04                    		dc.b 4,	1, 4
0001A6C4 0607 04                    		dc.b 6,	7, 4
0001A6C7 0800 03                    		dc.b 8,	0, 3
0001A6CA                            ; ===========================================================================
0001A6CA                            
0001A6CA                            Obj7A_Main:				; XREF: Obj7A_Index
0001A6CA 317C 2188 0008             		move.w	#$2188,8(a0)
0001A6D0 317C 0228 000C             		move.w	#$228,$C(a0)
0001A6D6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A6DC 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A6E2 117C 000F 0020             		move.b	#$F,$20(a0)
0001A6E8 117C 0008 0021             		move.b	#var_BHits_SLZ,$21(a0)
0001A6EE 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A6F2 2248                       		movea.l	a0,a1
0001A6F4 7203                       		moveq	#3,d1
0001A6F6 6000                       		bra.s	Obj7A_LoadBoss
0001A6F8                            ; ===========================================================================
0001A6F8                            
0001A6F8                            Obj7A_Loop:
0001A6F8 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001A6FE 6600                       		bne.s	loc_1895C
0001A700 12BC 007A                  		move.b	#$7A,0(a1)
0001A704 3368 0008 0008             		move.w	8(a0),8(a1)
0001A70A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A710                            
0001A710                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A710 08A8 0000 0022             		bclr	#0,$22(a0)
0001A716 4229 0025                  		clr.b	$25(a1)
0001A71A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A71E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A722 135A 0018                  		move.b	(a2)+,$18(a1)
0001A726 237C 0001 9B00 0004        		move.l	#Map_Eggman,4(a1)
0001A72E 337C 0400 0002             		move.w	#$400,2(a1)
0001A734 137C 0004 0001             		move.b	#4,1(a1)
0001A73A 137C 0020 0019             		move.b	#$20,$19(a1)
0001A740 2348 0034                  		move.l	a0,$34(a1)
0001A744 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A748                            
0001A748                            loc_1895C:
0001A748 43F8 D040                  		lea	($FFFFD040).w,a1
0001A74C 45E8 002A                  		lea	$2A(a0),a2
0001A750 705E                       		moveq	#$5E,d0
0001A752 723E                       		moveq	#$3E,d1
0001A754                            
0001A754                            loc_18968:
0001A754 B011                       		cmp.b	(a1),d0
0001A756 6600                       		bne.s	loc_18974
0001A758 4A29 0028                  		tst.b	$28(a1)
0001A75C 6700                       		beq.s	loc_18974
0001A75E 34C9                       		move.w	a1,(a2)+
0001A760                            
0001A760                            loc_18974:
0001A760 D2FC 0040                  		adda.w	#$40,a1
0001A764 51C9 FFEE                  		dbf	d1,loc_18968
0001A768                            
0001A768                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A768 7000                       		moveq	#0,d0
0001A76A 1028 0025                  		move.b	$25(a0),d0
0001A76E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A772 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A776 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
0001A77C 4EB9 0000 C10C             		jsr	AnimateSprite
0001A782 7003                       		moveq	#3,d0
0001A784 C028 0022                  		and.b	$22(a0),d0
0001A788 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A78E 8128 0001                  		or.b	d0,1(a0)
0001A792 4EF9 0000 F010             		jmp	DisplaySprite
0001A798                            ; ===========================================================================
0001A798 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A79A 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A79C 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A79E 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A7A0 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A7A2 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A7A4                            ; ===========================================================================
0001A7A4                            
0001A7A4                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A7A4 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A7AA 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A7B0 6400                       		bcc.s	loc_189CA
0001A7B2 5428 0025                  		addq.b	#2,$25(a0)
0001A7B6                            
0001A7B6                            loc_189CA:
0001A7B6 6100 EEE8                  		bsr.w	BossMove
0001A7BA 1028 003F                  		move.b	$3F(a0),d0
0001A7BE 5428 003F                  		addq.b	#2,$3F(a0)
0001A7C2 4EB9 0000 29AE             		jsr	(CalcSine).l
0001A7C8 EC40                       		asr.w	#6,d0
0001A7CA D068 0038                  		add.w	$38(a0),d0
0001A7CE 3140 000C                  		move.w	d0,$C(a0)
0001A7D2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A7D8 6000                       		bra.s	loc_189FE
0001A7DA                            ; ===========================================================================
0001A7DA                            
0001A7DA                            loc_189EE:
0001A7DA 6100 EEC4                  		bsr.w	BossMove
0001A7DE 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A7E4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A7EA                            
0001A7EA                            loc_189FE:
0001A7EA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A7F0 6400                       		bcc.s	locret_18A44
0001A7F2 4A28 0022                  		tst.b	$22(a0)
0001A7F6 6B00                       		bmi.s	loc_18A46
0001A7F8 4A28 0020                  		tst.b	$20(a0)
0001A7FC 6600                       		bne.s	locret_18A44
0001A7FE 4A28 003E                  		tst.b	$3E(a0)
0001A802 6600                       		bne.s	loc_18A28
0001A804 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A80A 303C 00AC                  		move.w	#$AC,d0
0001A80E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A814                            
0001A814                            loc_18A28:
0001A814 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A818 7000                       		moveq	#0,d0
0001A81A 4A51                       		tst.w	(a1)
0001A81C 6600                       		bne.s	loc_18A36
0001A81E 303C 0EEE                  		move.w	#$EEE,d0
0001A822                            
0001A822                            loc_18A36:
0001A822 3280                       		move.w	d0,(a1)
0001A824 5328 003E                  		subq.b	#1,$3E(a0)
0001A828 6600                       		bne.s	locret_18A44
0001A82A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A830                            
0001A830                            locret_18A44:
0001A830 4E75                       		rts	
0001A832                            ; ===========================================================================
0001A832                            
0001A832                            loc_18A46:
0001A832 7064                       		moveq	#100,d0
0001A834 6100 0000                  		bsr.w	AddPoints
0001A838 117C 0006 0025             		move.b	#6,$25(a0)
0001A83E 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A844 4268 0010                  		clr.w	$10(a0)
0001A848 4E75                       		rts	
0001A84A                            ; ===========================================================================
0001A84A                            
0001A84A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A84A 3028 0030                  		move.w	$30(a0),d0
0001A84E 317C 0200 0010             		move.w	#$200,$10(a0)
0001A854 0828 0000 0022             		btst	#0,$22(a0)
0001A85A 6600                       		bne.s	loc_18A7C
0001A85C 4468 0010                  		neg.w	$10(a0)
0001A860 0C40 2008                  		cmpi.w	#$2008,d0
0001A864 6E00                       		bgt.s	loc_18A88
0001A866 6000                       		bra.s	loc_18A82
0001A868                            ; ===========================================================================
0001A868                            
0001A868                            loc_18A7C:
0001A868 0C40 2138                  		cmpi.w	#$2138,d0
0001A86C 6D00                       		blt.s	loc_18A88
0001A86E                            
0001A86E                            loc_18A82:
0001A86E 0868 0000 0022             		bchg	#0,$22(a0)
0001A874                            
0001A874                            loc_18A88:
0001A874 3028 0008                  		move.w	8(a0),d0
0001A878 72FF                       		moveq	#-1,d1
0001A87A 7402                       		moveq	#2,d2
0001A87C 45E8 002A                  		lea	$2A(a0),a2
0001A880 7828                       		moveq	#$28,d4
0001A882 4A68 0010                  		tst.w	$10(a0)
0001A886 6A00                       		bpl.s	loc_18A9E
0001A888 4444                       		neg.w	d4
0001A88A                            
0001A88A                            loc_18A9E:
0001A88A 321A                       		move.w	(a2)+,d1
0001A88C 2641                       		movea.l	d1,a3
0001A88E 082B 0003 0022             		btst	#3,$22(a3)
0001A894 6600                       		bne.s	loc_18AB4
0001A896 362B 0008                  		move.w	8(a3),d3
0001A89A D644                       		add.w	d4,d3
0001A89C 9640                       		sub.w	d0,d3
0001A89E 6700                       		beq.s	loc_18AC0
0001A8A0                            
0001A8A0                            loc_18AB4:
0001A8A0 51CA FFE8                  		dbf	d2,loc_18A9E
0001A8A4                            
0001A8A4 1142 0028                  		move.b	d2,$28(a0)
0001A8A8 6000 FF0C                  		bra.w	loc_189CA
0001A8AC                            ; ===========================================================================
0001A8AC                            
0001A8AC                            loc_18AC0:
0001A8AC 1142 0028                  		move.b	d2,$28(a0)
0001A8B0 5428 0025                  		addq.b	#2,$25(a0)
0001A8B4 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A8BA 6000 FEFA                  		bra.w	loc_189CA
0001A8BE                            ; ===========================================================================
0001A8BE                            
0001A8BE                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A8BE 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A8C4 6600                       		bne.s	loc_18B36
0001A8C6 70FF                       		moveq	#-1,d0
0001A8C8 1028 0028                  		move.b	$28(a0),d0
0001A8CC 4880                       		ext.w	d0
0001A8CE 6B00                       		bmi.s	loc_18B40
0001A8D0 5540                       		subq.w	#2,d0
0001A8D2 4440                       		neg.w	d0
0001A8D4 D040                       		add.w	d0,d0
0001A8D6 43E8 002A                  		lea	$2A(a0),a1
0001A8DA 3031 0000                  		move.w	(a1,d0.w),d0
0001A8DE 2440                       		movea.l	d0,a2
0001A8E0 43F8 D040                  		lea	($FFFFD040).w,a1
0001A8E4 723E                       		moveq	#$3E,d1
0001A8E6                            
0001A8E6                            loc_18AFA:
0001A8E6 B0A9 003C                  		cmp.l	$3C(a1),d0
0001A8EA 6700                       		beq.s	loc_18B40
0001A8EC D2FC 0040                  		adda.w	#$40,a1
0001A8F0 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A8F4                            
0001A8F4 2F08                       		move.l	a0,-(sp)
0001A8F6 41D2                       		lea	(a2),a0
0001A8F8 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001A8FE 205F                       		movea.l	(sp)+,a0
0001A900 6600                       		bne.s	loc_18B40
0001A902 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A906 3368 0008 0008             		move.w	8(a0),8(a1)
0001A90C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A912 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A918 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A91E 234A 003C                  		move.l	a2,$3C(a1)
0001A922                            
0001A922                            loc_18B36:
0001A922 5328 003C                  		subq.b	#1,$3C(a0)
0001A926 6700                       		beq.s	loc_18B40
0001A928 6000 FEC0                  		bra.w	loc_189FE
0001A92C                            ; ===========================================================================
0001A92C                            
0001A92C                            loc_18B40:
0001A92C 5528 0025                  		subq.b	#2,$25(a0)
0001A930 6000 FE84                  		bra.w	loc_189CA
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A934 5328 003C                  		subq.b	#1,$3C(a0)
0001A938 6B00                       		bmi.s	loc_18B52
0001A93A 6000 ED22                  		bra.w	BossDefeated
0001A93E                            ; ===========================================================================
0001A93E                            
0001A93E                            loc_18B52:
0001A93E 5428 0025                  		addq.b	#2,$25(a0)
0001A942 4268 0012                  		clr.w	$12(a0)
0001A946 08E8 0000 0022             		bset	#0,$22(a0)
0001A94C 08A8 0007 0022             		bclr	#7,$22(a0)
0001A952 4268 0010                  		clr.w	$10(a0)
0001A956 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A95C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A960 6600                       		bne.s	loc_18B7C
0001A962 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A968                            
0001A968                            loc_18B7C:
0001A968 6000 FE80                  		bra.w	loc_189FE
0001A96C                            ; ===========================================================================
0001A96C                            
0001A96C                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A96C 5228 003C                  		addq.b	#1,$3C(a0)
0001A970 6700                       		beq.s	loc_18B90
0001A972 6A00                       		bpl.s	loc_18B96
0001A974 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A97A 6000                       		bra.s	loc_18BC2
0001A97C                            ; ===========================================================================
0001A97C                            
0001A97C                            loc_18B90:
0001A97C 4268 0012                  		clr.w	$12(a0)
0001A980 6000                       		bra.s	loc_18BC2
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            loc_18B96:
0001A982 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A988 6500                       		bcs.s	loc_18BAE
0001A98A 6700                       		beq.s	loc_18BB4
0001A98C 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A992 6500                       		bcs.s	loc_18BC2
0001A994 5428 0025                  		addq.b	#2,$25(a0)
0001A998 6000                       		bra.s	loc_18BC2
0001A99A                            ; ===========================================================================
0001A99A                            
0001A99A                            loc_18BAE:
0001A99A 5168 0012                  		subq.w	#8,$12(a0)
0001A99E 6000                       		bra.s	loc_18BC2
0001A9A0                            ; ===========================================================================
0001A9A0                            
0001A9A0                            loc_18BB4:
0001A9A0 4268 0012                  		clr.w	$12(a0)
0001A9A4 303C 008C                  		move.w	#$8C,d0
0001A9A8 4EB9 0000 12C2             		jsr	(PlaySound).l	; play SLZ music
0001A9AE                            
0001A9AE                            loc_18BC2:
0001A9AE 6000 FE2A                  		bra.w	loc_189EE
0001A9B2                            ; ===========================================================================
0001A9B2                            
0001A9B2                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A9B2 317C 0400 0010             		move.w	#$400,$10(a0)
0001A9B8 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A9BE 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A9C4 6400                       		bcc.s	loc_18BE0
0001A9C6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A9CA 6000                       		bra.s	loc_18BE8
0001A9CC                            ; ===========================================================================
0001A9CC                            
0001A9CC                            loc_18BE0:
0001A9CC 4A28 0001                  		tst.b	1(a0)
0001A9D0 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A9D4                            
0001A9D4                            loc_18BE8:
0001A9D4 6100 ECCA                  		bsr.w	BossMove
0001A9D8 6000 FDDC                  		bra.w	loc_189CA
0001A9DC                            ; ===========================================================================
0001A9DC                            
0001A9DC                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A9DC 7000                       		moveq	#0,d0
0001A9DE 7201                       		moveq	#1,d1
0001A9E0 2268 0034                  		movea.l	$34(a0),a1
0001A9E4 1029 0025                  		move.b	$25(a1),d0
0001A9E8 0C00 0006                  		cmpi.b	#6,d0
0001A9EC 6B00                       		bmi.s	loc_18C06
0001A9EE 720A                       		moveq	#$A,d1
0001A9F0 6000                       		bra.s	loc_18C1A
0001A9F2                            ; ===========================================================================
0001A9F2                            
0001A9F2                            loc_18C06:
0001A9F2 4A29 0020                  		tst.b	$20(a1)
0001A9F6 6600                       		bne.s	loc_18C10
0001A9F8 7205                       		moveq	#5,d1
0001A9FA 6000                       		bra.s	loc_18C1A
0001A9FC                            ; ===========================================================================
0001A9FC                            
0001A9FC                            loc_18C10:
0001A9FC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AA02 6500                       		bcs.s	loc_18C1A
0001AA04 7204                       		moveq	#4,d1
0001AA06                            
0001AA06                            loc_18C1A:
0001AA06 1141 001C                  		move.b	d1,$1C(a0)
0001AA0A 0C00 000A                  		cmpi.b	#$A,d0
0001AA0E 6600                       		bne.s	loc_18C32
0001AA10 117C 0006 001C             		move.b	#6,$1C(a0)
0001AA16 4A28 0001                  		tst.b	1(a0)
0001AA1A 6A00 FC84                  		bpl.w	Obj7A_Delete
0001AA1E                            
0001AA1E                            loc_18C32:
0001AA1E 6000                       		bra.s	loc_18C6C
0001AA20                            ; ===========================================================================
0001AA20                            
0001AA20                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AA20 117C 0008 001C             		move.b	#8,$1C(a0)
0001AA26 2268 0034                  		movea.l	$34(a0),a1
0001AA2A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AA30 6600                       		bne.s	loc_18C56
0001AA32 4A28 0001                  		tst.b	1(a0)
0001AA36 6A00 FC68                  		bpl.w	Obj7A_Delete
0001AA3A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AA40 6000                       		bra.s	loc_18C6C
0001AA42                            ; ===========================================================================
0001AA42                            
0001AA42                            loc_18C56:
0001AA42 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001AA48 6E00                       		bgt.s	loc_18C6C
0001AA4A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AA50 6D00                       		blt.s	loc_18C6C
0001AA52 117C 0007 001C             		move.b	#7,$1C(a0)
0001AA58                            
0001AA58                            loc_18C6C:
0001AA58 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
0001AA5E 4EB9 0000 C10C             		jsr	AnimateSprite
0001AA64                            
0001AA64                            loc_18C78:
0001AA64 2268 0034                  		movea.l	$34(a0),a1
0001AA68 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA6E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA74 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AA7A 7003                       		moveq	#3,d0
0001AA7C C028 0022                  		and.b	$22(a0),d0
0001AA80 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AA86 8128 0001                  		or.b	d0,1(a0)
0001AA8A 4EF9 0000 F010             		jmp	DisplaySprite
0001AA90                            ; ===========================================================================
0001AA90                            
0001AA90                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AA90 2268 0034                  		movea.l	$34(a0),a1
0001AA94 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AA9A 6600                       		bne.s	loc_18CB8
0001AA9C 4A28 0001                  		tst.b	1(a0)
0001AAA0 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001AAA4                            
0001AAA4                            loc_18CB8:
0001AAA4 217C 0001 9BC8 0004        		move.l	#Map_BossItems,4(a0)
0001AAAC 317C 246C 0002             		move.w	#$246C,2(a0)
0001AAB2 117C 0003 001A             		move.b	#3,$1A(a0)
0001AAB8 60AA                       		bra.s	loc_18C78
0001AABA                            ; ===========================================================================
0001AABA                            ; ---------------------------------------------------------------------------
0001AABA                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AABA                            ; ---------------------------------------------------------------------------
0001AABA                            
0001AABA                            Obj7B:					; XREF: Obj_Index
0001AABA 7000                       		moveq	#0,d0
0001AABC 1028 0024                  		move.b	$24(a0),d0
0001AAC0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AAC4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AAC8 3028 0030                  		move.w	$30(a0),d0
0001AACC 0240 FF80                  		andi.w	#$FF80,d0
0001AAD0 3238 F700                  		move.w	($FFFFF700).w,d1
0001AAD4 0441 0080                  		subi.w	#$80,d1
0001AAD8 0241 FF80                  		andi.w	#$FF80,d1
0001AADC 9041                       		sub.w	d1,d0
0001AADE 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001AAE2 0C40 0280                  		cmpi.w	#$280,d0
0001AAE6 6200 FBB8                  		bhi.w	Obj7A_Delete
0001AAEA 4EF9 0000 F010             		jmp	DisplaySprite
0001AAF0                            ; ===========================================================================
0001AAF0 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AAF2 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AAF4 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AAF6 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AAF8 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AAFA 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AAFC                            ; ===========================================================================
0001AAFC                            
0001AAFC                            Obj7B_Main:				; XREF: Obj7B_Index
0001AAFC 217C 0001 33CE 0004        		move.l	#Map_obj5Ea,4(a0)
0001AB04 317C 0518 0002             		move.w	#$518,2(a0)
0001AB0A 117C 0001 001A             		move.b	#1,$1A(a0)
0001AB10 0028 0004 0001             		ori.b	#4,1(a0)
0001AB16 117C 0004 0018             		move.b	#4,$18(a0)
0001AB1C 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AB22 117C 000C 0019             		move.b	#$C,$19(a0)
0001AB28 2268 003C                  		movea.l	$3C(a0),a1
0001AB2C 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AB32 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AB38 08E8 0000 0022             		bset	#0,$22(a0)
0001AB3E 3028 0008                  		move.w	8(a0),d0
0001AB42 B069 0008                  		cmp.w	8(a1),d0
0001AB46 6E00                       		bgt.s	loc_18D68
0001AB48 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB4E 117C 0002 003A             		move.b	#2,$3A(a0)
0001AB54                            
0001AB54                            loc_18D68:
0001AB54 5428 0024                  		addq.b	#2,$24(a0)
0001AB58                            
0001AB58                            Obj7B_Fall:				; XREF: Obj7B_Index
0001AB58 4EB9 0000 EFBE             		jsr	ObjectFall
0001AB5E 2268 003C                  		movea.l	$3C(a0),a1
0001AB62 45F9 0000 0000             		lea	(word_19018).l,a2
0001AB68 7000                       		moveq	#0,d0
0001AB6A 1029 001A                  		move.b	$1A(a1),d0
0001AB6E 3228 0008                  		move.w	8(a0),d1
0001AB72 9268 0030                  		sub.w	$30(a0),d1
0001AB76 6400                       		bcc.s	loc_18D8E
0001AB78 5440                       		addq.w	#2,d0
0001AB7A                            
0001AB7A                            loc_18D8E:
0001AB7A D040                       		add.w	d0,d0
0001AB7C 3228 0034                  		move.w	$34(a0),d1
0001AB80 D272 0000                  		add.w	(a2,d0.w),d1
0001AB84 B268 000C                  		cmp.w	$C(a0),d1
0001AB88 6E00                       		bgt.s	locret_18DC4
0001AB8A 2268 003C                  		movea.l	$3C(a0),a1
0001AB8E 7202                       		moveq	#2,d1
0001AB90 0828 0000 0022             		btst	#0,$22(a0)
0001AB96 6700                       		beq.s	loc_18DAE
0001AB98 7200                       		moveq	#0,d1
0001AB9A                            
0001AB9A                            loc_18DAE:
0001AB9A 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001ABA0 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001ABA6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001ABAC 6000 0000                  		bra.w	loc_18FA2
0001ABB0                            ; ===========================================================================
0001ABB0                            
0001ABB0                            locret_18DC4:
0001ABB0 4E75                       		rts	
0001ABB2                            ; ===========================================================================
0001ABB2                            
0001ABB2                            loc_18DC6:				; XREF: Obj7B_Index
0001ABB2 2268 003C                  		movea.l	$3C(a0),a1
0001ABB6 7000                       		moveq	#0,d0
0001ABB8 1028 003A                  		move.b	$3A(a0),d0
0001ABBC 9029 003A                  		sub.b	$3A(a1),d0
0001ABC0 6700                       		beq.s	loc_18E2A
0001ABC2 6400                       		bcc.s	loc_18DDA
0001ABC4 4400                       		neg.b	d0
0001ABC6                            
0001ABC6                            loc_18DDA:
0001ABC6 323C F7E8                  		move.w	#-$818,d1
0001ABCA 343C FEEC                  		move.w	#-$114,d2
0001ABCE 0C00 0001                  		cmpi.b	#1,d0
0001ABD2 6700                       		beq.s	loc_18E00
0001ABD4 323C F6A0                  		move.w	#-$960,d1
0001ABD8 343C FF0C                  		move.w	#-$F4,d2
0001ABDC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001ABE2 6D00                       		blt.s	loc_18E00
0001ABE4 323C F5E0                  		move.w	#-$A20,d1
0001ABE8 343C FF80                  		move.w	#-$80,d2
0001ABEC                            
0001ABEC                            loc_18E00:
0001ABEC 3141 0012                  		move.w	d1,$12(a0)
0001ABF0 3142 0010                  		move.w	d2,$10(a0)
0001ABF4 3028 0008                  		move.w	8(a0),d0
0001ABF8 9068 0030                  		sub.w	$30(a0),d0
0001ABFC 6400                       		bcc.s	loc_18E16
0001ABFE 4468 0010                  		neg.w	$10(a0)
0001AC02                            
0001AC02                            loc_18E16:
0001AC02 117C 0001 001A             		move.b	#1,$1A(a0)
0001AC08 317C 0020 0028             		move.w	#$20,$28(a0)
0001AC0E 5428 0024                  		addq.b	#2,$24(a0)
0001AC12 6000 0000                  		bra.w	loc_18EAA
0001AC16                            ; ===========================================================================
0001AC16                            
0001AC16                            loc_18E2A:				; XREF: loc_18DC6
0001AC16 45F9 0000 0000             		lea	(word_19018).l,a2
0001AC1C 7000                       		moveq	#0,d0
0001AC1E 1029 001A                  		move.b	$1A(a1),d0
0001AC22 343C 0028                  		move.w	#$28,d2
0001AC26 3228 0008                  		move.w	8(a0),d1
0001AC2A 9268 0030                  		sub.w	$30(a0),d1
0001AC2E 6400                       		bcc.s	loc_18E48
0001AC30 4442                       		neg.w	d2
0001AC32 5440                       		addq.w	#2,d0
0001AC34                            
0001AC34                            loc_18E48:
0001AC34 D040                       		add.w	d0,d0
0001AC36 3228 0034                  		move.w	$34(a0),d1
0001AC3A D272 0000                  		add.w	(a2,d0.w),d1
0001AC3E 3141 000C                  		move.w	d1,$C(a0)
0001AC42 D468 0030                  		add.w	$30(a0),d2
0001AC46 3142 0008                  		move.w	d2,8(a0)
0001AC4A 4268 000E                  		clr.w	$E(a0)
0001AC4E 4268 000A                  		clr.w	$A(a0)
0001AC52 5368 0028                  		subq.w	#1,$28(a0)
0001AC56 6600                       		bne.s	loc_18E7A
0001AC58 317C 0020 0028             		move.w	#$20,$28(a0)
0001AC5E 117C 0008 0024             		move.b	#8,$24(a0)
0001AC64 4E75                       		rts	
0001AC66                            ; ===========================================================================
0001AC66                            
0001AC66                            loc_18E7A:
0001AC66 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AC6C 6600                       		bne.s	loc_18E88
0001AC6E 117C 0005 001F             		move.b	#5,$1F(a0)
0001AC74                            
0001AC74                            loc_18E88:
0001AC74 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AC7A 6600                       		bne.s	loc_18E96
0001AC7C 117C 0002 001F             		move.b	#2,$1F(a0)
0001AC82                            
0001AC82                            loc_18E96:
0001AC82 5328 001E                  		subq.b	#1,$1E(a0)
0001AC86 6E00                       		bgt.s	locret_18EA8
0001AC88 0868 0000 001A             		bchg	#0,$1A(a0)
0001AC8E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AC94                            
0001AC94                            locret_18EA8:
0001AC94 4E75                       		rts	
0001AC96                            ; ===========================================================================
0001AC96                            
0001AC96                            loc_18EAA:				; XREF: Obj7B_Index
0001AC96 43F8 D040                  		lea	($FFFFD040).w,a1
0001AC9A 707A                       		moveq	#$7A,d0
0001AC9C 7240                       		moveq	#$40,d1
0001AC9E 743E                       		moveq	#$3E,d2
0001ACA0                            
0001ACA0                            loc_18EB4:
0001ACA0 B011                       		cmp.b	(a1),d0
0001ACA2 6700                       		beq.s	loc_18EC0
0001ACA4 D2C1                       		adda.w	d1,a1
0001ACA6 51CA FFF8                  		dbf	d2,loc_18EB4
0001ACAA                            
0001ACAA 6000                       		bra.s	loc_18F38
0001ACAC                            ; ===========================================================================
0001ACAC                            
0001ACAC                            loc_18EC0:
0001ACAC 3029 0008                  		move.w	8(a1),d0
0001ACB0 3229 000C                  		move.w	$C(a1),d1
0001ACB4 3428 0008                  		move.w	8(a0),d2
0001ACB8 3628 000C                  		move.w	$C(a0),d3
0001ACBC 45FA 0000                  		lea	byte_19022(pc),a2
0001ACC0 47FA 0000                  		lea	byte_19026(pc),a3
0001ACC4 181A                       		move.b	(a2)+,d4
0001ACC6 4884                       		ext.w	d4
0001ACC8 D044                       		add.w	d4,d0
0001ACCA 181B                       		move.b	(a3)+,d4
0001ACCC 4884                       		ext.w	d4
0001ACCE D444                       		add.w	d4,d2
0001ACD0 B440                       		cmp.w	d0,d2
0001ACD2 6500                       		bcs.s	loc_18F38
0001ACD4 181A                       		move.b	(a2)+,d4
0001ACD6 4884                       		ext.w	d4
0001ACD8 D044                       		add.w	d4,d0
0001ACDA 181B                       		move.b	(a3)+,d4
0001ACDC 4884                       		ext.w	d4
0001ACDE D444                       		add.w	d4,d2
0001ACE0 B042                       		cmp.w	d2,d0
0001ACE2 6500                       		bcs.s	loc_18F38
0001ACE4 181A                       		move.b	(a2)+,d4
0001ACE6 4884                       		ext.w	d4
0001ACE8 D244                       		add.w	d4,d1
0001ACEA 181B                       		move.b	(a3)+,d4
0001ACEC 4884                       		ext.w	d4
0001ACEE D644                       		add.w	d4,d3
0001ACF0 B641                       		cmp.w	d1,d3
0001ACF2 6500                       		bcs.s	loc_18F38
0001ACF4 181A                       		move.b	(a2)+,d4
0001ACF6 4884                       		ext.w	d4
0001ACF8 D244                       		add.w	d4,d1
0001ACFA 181B                       		move.b	(a3)+,d4
0001ACFC 4884                       		ext.w	d4
0001ACFE D644                       		add.w	d4,d3
0001AD00 B243                       		cmp.w	d3,d1
0001AD02 6500                       		bcs.s	loc_18F38
0001AD04 5428 0024                  		addq.b	#2,$24(a0)
0001AD08 4268 0028                  		clr.w	$28(a0)
0001AD0C 4229 0020                  		clr.b	$20(a1)
0001AD10 5329 0021                  		subq.b	#1,$21(a1)
0001AD14 6600                       		bne.s	loc_18F38
0001AD16 08E9 0007 0022             		bset	#7,$22(a1)
0001AD1C 4268 0010                  		clr.w	$10(a0)
0001AD20 4268 0012                  		clr.w	$12(a0)
0001AD24                            
0001AD24                            loc_18F38:
0001AD24 4A68 0012                  		tst.w	$12(a0)
0001AD28 6A00                       		bpl.s	loc_18F5C
0001AD2A 4EB9 0000 EFBE             		jsr	ObjectFall
0001AD30 3028 0034                  		move.w	$34(a0),d0
0001AD34 0440 002F                  		subi.w	#$2F,d0
0001AD38 B068 000C                  		cmp.w	$C(a0),d0
0001AD3C 6E00                       		bgt.s	loc_18F58
0001AD3E 4EB9 0000 EFBE             		jsr	ObjectFall
0001AD44                            
0001AD44                            loc_18F58:
0001AD44 6000 FF20                  		bra.w	loc_18E7A
0001AD48                            ; ===========================================================================
0001AD48                            
0001AD48                            loc_18F5C:
0001AD48 4EB9 0000 EFBE             		jsr	ObjectFall
0001AD4E 2268 003C                  		movea.l	$3C(a0),a1
0001AD52 45F9 0000 0000             		lea	(word_19018).l,a2
0001AD58 7000                       		moveq	#0,d0
0001AD5A 1029 001A                  		move.b	$1A(a1),d0
0001AD5E 3228 0008                  		move.w	8(a0),d1
0001AD62 9268 0030                  		sub.w	$30(a0),d1
0001AD66 6400                       		bcc.s	loc_18F7E
0001AD68 5440                       		addq.w	#2,d0
0001AD6A                            
0001AD6A                            loc_18F7E:
0001AD6A D040                       		add.w	d0,d0
0001AD6C 3228 0034                  		move.w	$34(a0),d1
0001AD70 D272 0000                  		add.w	(a2,d0.w),d1
0001AD74 B268 000C                  		cmp.w	$C(a0),d1
0001AD78 6ECA                       		bgt.s	loc_18F58
0001AD7A 2268 003C                  		movea.l	$3C(a0),a1
0001AD7E 7202                       		moveq	#2,d1
0001AD80 4A68 0010                  		tst.w	$10(a0)
0001AD84 6B00                       		bmi.s	loc_18F9C
0001AD86 7200                       		moveq	#0,d1
0001AD88                            
0001AD88                            loc_18F9C:
0001AD88 317C 0000 0028             		move.w	#0,$28(a0)
0001AD8E                            
0001AD8E                            loc_18FA2:
0001AD8E 1341 003A                  		move.b	d1,$3A(a1)
0001AD92 1141 003A                  		move.b	d1,$3A(a0)
0001AD96 B229 001A                  		cmp.b	$1A(a1),d1
0001AD9A 6700                       		beq.s	loc_19008
0001AD9C 08A9 0003 0022             		bclr	#3,$22(a1)
0001ADA2 6700                       		beq.s	loc_19008
0001ADA4 4229 0025                  		clr.b	$25(a1)
0001ADA8 137C 0002 0024             		move.b	#2,$24(a1)
0001ADAE 45F8 D000                  		lea	($FFFFD000).w,a2
0001ADB2 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001ADB8 446A 0012                  		neg.w	$12(a2)
0001ADBC 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001ADC2 6600                       		bne.s	loc_18FDC
0001ADC4 E0EA 0012                  		asr	$12(a2)
0001ADC8                            
0001ADC8                            loc_18FDC:
0001ADC8 08EA 0001 0022             		bset	#1,$22(a2)
0001ADCE 08AA 0003 0022             		bclr	#3,$22(a2)
0001ADD4 422A 003C                  		clr.b	$3C(a2)
0001ADD8 2F08                       		move.l	a0,-(sp)
0001ADDA 41D2                       		lea	(a2),a0
0001ADDC 4EBA A1F2                  		jsr	Obj01_ChkRoll
0001ADE0 205F                       		movea.l	(sp)+,a0
0001ADE2 157C 0002 0024             		move.b	#2,$24(a2)
0001ADE8 303C 00CC                  		move.w	#$CC,d0
0001ADEC 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001ADF2                            
0001ADF2                            loc_19008:
0001ADF2 4268 0010                  		clr.w	$10(a0)
0001ADF6 4268 0012                  		clr.w	$12(a0)
0001ADFA 5428 0024                  		addq.b	#2,$24(a0)
0001ADFE 6000 FE66                  		bra.w	loc_18E7A
0001AE02                            ; ===========================================================================
0001AE02 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001AE0C                            		even
0001AE0C E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001AE10                            		even
0001AE10 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001AE14                            		even
0001AE14                            ; ===========================================================================
0001AE14                            
0001AE14                            Obj7B_Explode:				; XREF: Obj7B_Index
0001AE14 10BC 003F                  		move.b	#$3F,(a0)
0001AE18 4228 0024                  		clr.b	$24(a0)
0001AE1C 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001AE22 6700                       		beq.s	Obj7B_MakeFrag
0001AE24 4E75                       		rts	
0001AE26                            ; ===========================================================================
0001AE26                            
0001AE26                            Obj7B_MakeFrag:
0001AE26 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001AE2C 7203                       		moveq	#3,d1
0001AE2E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001AE32                            
0001AE32                            Obj7B_Loop:
0001AE32 4EB9 0000 F496             		jsr	SingleObjLoad
0001AE38 6600                       		bne.s	loc_1909A
0001AE3A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001AE3E 137C 000A 0024             		move.b	#$A,$24(a1)
0001AE44 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001AE4C 137C 0003 0018             		move.b	#3,$18(a1)
0001AE52 337C 0518 0002             		move.w	#$518,2(a1)
0001AE58 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE64 335A 0010                  		move.w	(a2)+,$10(a1)
0001AE68 335A 0012                  		move.w	(a2)+,$12(a1)
0001AE6C 137C 0098 0020             		move.b	#$98,$20(a1)
0001AE72 0029 0004 0001             		ori.b	#4,1(a1)
0001AE78 08E9 0007 0001             		bset	#7,1(a1)
0001AE7E 137C 000C 0019             		move.b	#$C,$19(a1)
0001AE84                            
0001AE84                            loc_1909A:
0001AE84 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AE88                            
0001AE88 4E75                       		rts	
0001AE8A                            ; ===========================================================================
0001AE8A FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AE8E FF60 FDC0                  		dc.w $FF60, $FDC0
0001AE92 0100 FCC0                  		dc.w $100, $FCC0
0001AE96 00A0 FDC0                  		dc.w $A0, $FDC0
0001AE9A                            ; ===========================================================================
0001AE9A                            
0001AE9A                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AE9A 4EB9 0000 EFEA             		jsr	SpeedToPos
0001AEA0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AEA6 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AEAC 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AEB2 7004                       		moveq	#4,d0
0001AEB4 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AEB8 E448                       		lsr.w	#2,d0
0001AEBA 1140 001A                  		move.b	d0,$1A(a0)
0001AEBE 4A28 0001                  		tst.b	1(a0)
0001AEC2 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001AEC6 4E75                       		rts	
0001AEC8                            ; ===========================================================================
0001AEC8                            ; ---------------------------------------------------------------------------
0001AEC8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AEC8                            ; ---------------------------------------------------------------------------
0001AEC8                            Map_obj7B:
0001AEC8                            	include "_maps\obj7B.asm"
0001AEC8                            ; ---------------------------------------------------------------------------
0001AEC8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AEC8                            ; ---------------------------------------------------------------------------
0001AEC8 0000                       		dc.w byte_190E2-Map_obj7B
0001AECA 0000                       		dc.w byte_190E8-Map_obj7B
0001AECC 01                         byte_190E2:	dc.b 1
0001AECD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AED2 01                         byte_190E8:	dc.b 1
0001AED3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AED8                            		even
0001AED8                            		even
0001AED8                            
0001AED8                            ; ===========================================================================
0001AED8                            ; ---------------------------------------------------------------------------
0001AED8                            ; Object 75 - Eggman (SYZ)
0001AED8                            ; ---------------------------------------------------------------------------
0001AED8                            
0001AED8                            Obj75:					; XREF: Obj_Index
0001AED8 7000                       		moveq	#0,d0
0001AEDA 1028 0024                  		move.b	$24(a0),d0
0001AEDE 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AEE2 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AEE6                            ; ===========================================================================
0001AEE6 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AEE8 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AEEA 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AEEC 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AEEE 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AEF0                            
0001AEF0 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AEF3 0401 05                    		dc.b 4,	1, 5
0001AEF6 0607 05                    		dc.b 6,	7, 5
0001AEF9 0800 05                    		dc.b 8,	0, 5
0001AEFC                            ; ===========================================================================
0001AEFC                            
0001AEFC                            Obj75_Main:				; XREF: Obj75_Index
0001AEFC 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AF02 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AF08 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AF0E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AF14 117C 000F 0020             		move.b	#$F,$20(a0)
0001AF1A 117C 0008 0021             		move.b	#var_BHits_SYZ,$21(a0)
0001AF20 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AF24 2248                       		movea.l	a0,a1
0001AF26 7203                       		moveq	#3,d1
0001AF28 6000                       		bra.s	Obj75_LoadBoss
0001AF2A                            ; ===========================================================================
0001AF2A                            
0001AF2A                            Obj75_Loop:
0001AF2A 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001AF30 6600                       		bne.s	Obj75_ShipMain
0001AF32 12BC 0075                  		move.b	#$75,(a1)
0001AF36 3368 0008 0008             		move.w	8(a0),8(a1)
0001AF3C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AF42                            
0001AF42                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AF42 08A8 0000 0022             		bclr	#0,$22(a0)
0001AF48 4229 0025                  		clr.b	$25(a1)
0001AF4C 135A 0024                  		move.b	(a2)+,$24(a1)
0001AF50 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AF54 135A 0018                  		move.b	(a2)+,$18(a1)
0001AF58 237C 0001 9B00 0004        		move.l	#Map_Eggman,4(a1)
0001AF60 337C 0400 0002             		move.w	#$400,2(a1)
0001AF66 137C 0004 0001             		move.b	#4,1(a1)
0001AF6C 137C 0020 0019             		move.b	#$20,$19(a1)
0001AF72 2348 0034                  		move.l	a0,$34(a1)
0001AF76 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AF7A                            
0001AF7A                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AF7A 7000                       		moveq	#0,d0
0001AF7C 1028 0025                  		move.b	$25(a0),d0
0001AF80 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AF84 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AF88 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
0001AF8E 4EB9 0000 C10C             		jsr	AnimateSprite
0001AF94 7003                       		moveq	#3,d0
0001AF96 C028 0022                  		and.b	$22(a0),d0
0001AF9A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AFA0 8128 0001                  		or.b	d0,1(a0)
0001AFA4 4EF9 0000 F010             		jmp	DisplaySprite
0001AFAA                            ; ===========================================================================
0001AFAA 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AFAE 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AFB2 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AFB6                            ; ===========================================================================
0001AFB6                            
0001AFB6                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AFB6 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AFBC 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AFC2 6400                       		bcc.s	loc_191DE
0001AFC4 5428 0025                  		addq.b	#2,$25(a0)
0001AFC8                            
0001AFC8                            loc_191DE:
0001AFC8 1028 003F                  		move.b	$3F(a0),d0
0001AFCC 5428 003F                  		addq.b	#2,$3F(a0)
0001AFD0 4EB9 0000 29AE             		jsr	(CalcSine).l
0001AFD6 E440                       		asr.w	#2,d0
0001AFD8 3140 0012                  		move.w	d0,$12(a0)
0001AFDC                            
0001AFDC                            loc_191F2:
0001AFDC 6100 E6C2                  		bsr.w	BossMove
0001AFE0 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AFE6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AFEC                            
0001AFEC                            loc_19202:
0001AFEC 3028 0008                  		move.w	8(a0),d0
0001AFF0 0440 2C00                  		subi.w	#$2C00,d0
0001AFF4 EA48                       		lsr.w	#5,d0
0001AFF6 1140 0034                  		move.b	d0,$34(a0)
0001AFFA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B000 6400                       		bcc.s	locret_19256
0001B002 4A28 0022                  		tst.b	$22(a0)
0001B006 6B00                       		bmi.s	loc_19258
0001B008 4A28 0020                  		tst.b	$20(a0)
0001B00C 6600                       		bne.s	locret_19256
0001B00E 4A28 003E                  		tst.b	$3E(a0)
0001B012 6600                       		bne.s	loc_1923A
0001B014 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B01A 303C 00AC                  		move.w	#$AC,d0
0001B01E 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B024                            
0001B024                            loc_1923A:
0001B024 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B028 7000                       		moveq	#0,d0
0001B02A 4A51                       		tst.w	(a1)
0001B02C 6600                       		bne.s	loc_19248
0001B02E 303C 0EEE                  		move.w	#$EEE,d0
0001B032                            
0001B032                            loc_19248:
0001B032 3280                       		move.w	d0,(a1)
0001B034 5328 003E                  		subq.b	#1,$3E(a0)
0001B038 6600                       		bne.s	locret_19256
0001B03A 117C 000F 0020             		move.b	#$F,$20(a0)
0001B040                            
0001B040                            locret_19256:
0001B040 4E75                       		rts	
0001B042                            ; ===========================================================================
0001B042                            
0001B042                            loc_19258:				; XREF: loc_19202
0001B042 7064                       		moveq	#100,d0
0001B044 6100 0000                  		bsr.w	AddPoints
0001B048 117C 0006 0025             		move.b	#6,$25(a0)
0001B04E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B054 4268 0010                  		clr.w	$10(a0)
0001B058 4E75                       		rts	
0001B05A                            ; ===========================================================================
0001B05A                            
0001B05A                            loc_19270:				; XREF: Obj75_ShipIndex
0001B05A 3028 0030                  		move.w	$30(a0),d0
0001B05E 317C 0140 0010             		move.w	#$140,$10(a0)
0001B064 0828 0000 0022             		btst	#0,$22(a0)
0001B06A 6600                       		bne.s	loc_1928E
0001B06C 4468 0010                  		neg.w	$10(a0)
0001B070 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B074 6E00                       		bgt.s	loc_1929E
0001B076 6000                       		bra.s	loc_19294
0001B078                            ; ===========================================================================
0001B078                            
0001B078                            loc_1928E:
0001B078 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B07C 6D00                       		blt.s	loc_1929E
0001B07E                            
0001B07E                            loc_19294:
0001B07E 0868 0000 0022             		bchg	#0,$22(a0)
0001B084 4228 003D                  		clr.b	$3D(a0)
0001B088                            
0001B088                            loc_1929E:
0001B088 0440 2C10                  		subi.w	#$2C10,d0
0001B08C 0240 001F                  		andi.w	#$1F,d0
0001B090 0440 001F                  		subi.w	#$1F,d0
0001B094 6A00                       		bpl.s	loc_192AE
0001B096 4440                       		neg.w	d0
0001B098                            
0001B098                            loc_192AE:
0001B098 5340                       		subq.w	#1,d0
0001B09A 6E00                       		bgt.s	loc_192E8
0001B09C 4A28 003D                  		tst.b	$3D(a0)
0001B0A0 6600                       		bne.s	loc_192E8
0001B0A2 3238 D008                  		move.w	($FFFFD008).w,d1
0001B0A6 0441 2C00                  		subi.w	#$2C00,d1
0001B0AA EA41                       		asr.w	#5,d1
0001B0AC B228 0034                  		cmp.b	$34(a0),d1
0001B0B0 6600                       		bne.s	loc_192E8
0001B0B2 7000                       		moveq	#0,d0
0001B0B4 1028 0034                  		move.b	$34(a0),d0
0001B0B8 EB40                       		asl.w	#5,d0
0001B0BA 0640 2C10                  		addi.w	#$2C10,d0
0001B0BE 3140 0030                  		move.w	d0,$30(a0)
0001B0C2 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B0C6 5428 0025                  		addq.b	#2,$25(a0)
0001B0CA 4268 0028                  		clr.w	$28(a0)
0001B0CE 4268 0010                  		clr.w	$10(a0)
0001B0D2                            
0001B0D2                            loc_192E8:
0001B0D2 6000 FEF4                  		bra.w	loc_191DE
0001B0D6                            ; ===========================================================================
0001B0D6                            
0001B0D6                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B0D6 7000                       		moveq	#0,d0
0001B0D8 1028 0028                  		move.b	$28(a0),d0
0001B0DC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B0E0 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B0E4                            ; ===========================================================================
0001B0E4 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B0E6 0000                       		dc.w loc_19348-off_192FA
0001B0E8 0000                       		dc.w loc_1938E-off_192FA
0001B0EA 0000                       		dc.w loc_193D0-off_192FA
0001B0EC                            ; ===========================================================================
0001B0EC                            
0001B0EC                            loc_19302:				; XREF: off_192FA
0001B0EC 317C 0180 0012             		move.w	#$180,$12(a0)
0001B0F2 3028 0038                  		move.w	$38(a0),d0
0001B0F6 0C40 0556                  		cmpi.w	#$556,d0
0001B0FA 6500                       		bcs.s	loc_19344
0001B0FC 317C 0556 0038             		move.w	#$556,$38(a0)
0001B102 4268 003C                  		clr.w	$3C(a0)
0001B106 70FF                       		moveq	#-1,d0
0001B108 3028 0036                  		move.w	$36(a0),d0
0001B10C 6700                       		beq.s	loc_1933C
0001B10E 2240                       		movea.l	d0,a1
0001B110 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B116 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B11C 2348 0034                  		move.l	a0,$34(a1)
0001B120 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B126                            
0001B126                            loc_1933C:
0001B126 4268 0012                  		clr.w	$12(a0)
0001B12A 5428 0028                  		addq.b	#2,$28(a0)
0001B12E                            
0001B12E                            loc_19344:
0001B12E 6000 FEAC                  		bra.w	loc_191F2
0001B132                            ; ===========================================================================
0001B132                            
0001B132                            loc_19348:				; XREF: off_192FA
0001B132 5368 003C                  		subq.w	#1,$3C(a0)
0001B136 6A00                       		bpl.s	loc_19366
0001B138 5428 0028                  		addq.b	#2,$28(a0)
0001B13C 317C F800 0012             		move.w	#-$800,$12(a0)
0001B142 4A68 0036                  		tst.w	$36(a0)
0001B146 6600                       		bne.s	loc_19362
0001B148 E0E8 0012                  		asr	$12(a0)
0001B14C                            
0001B14C                            loc_19362:
0001B14C 7000                       		moveq	#0,d0
0001B14E 6000                       		bra.s	loc_1937C
0001B150                            ; ===========================================================================
0001B150                            
0001B150                            loc_19366:
0001B150 7000                       		moveq	#0,d0
0001B152 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B158 6E00                       		bgt.s	loc_1937C
0001B15A 7002                       		moveq	#2,d0
0001B15C 0828 0001 003D             		btst	#1,$3D(a0)
0001B162 6700                       		beq.s	loc_1937C
0001B164 4440                       		neg.w	d0
0001B166                            
0001B166                            loc_1937C:
0001B166 D068 0038                  		add.w	$38(a0),d0
0001B16A 3140 000C                  		move.w	d0,$C(a0)
0001B16E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B174 6000 FE76                  		bra.w	loc_19202
0001B178                            ; ===========================================================================
0001B178                            
0001B178                            loc_1938E:				; XREF: off_192FA
0001B178 303C 04DA                  		move.w	#$4DA,d0
0001B17C 4A68 0036                  		tst.w	$36(a0)
0001B180 6700                       		beq.s	loc_1939C
0001B182 0440 0018                  		subi.w	#$18,d0
0001B186                            
0001B186                            loc_1939C:
0001B186 B068 0038                  		cmp.w	$38(a0),d0
0001B18A 6D00                       		blt.s	loc_193BE
0001B18C 317C 0008 003C             		move.w	#8,$3C(a0)
0001B192 4A68 0036                  		tst.w	$36(a0)
0001B196 6700                       		beq.s	loc_193B4
0001B198 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B19E                            
0001B19E                            loc_193B4:
0001B19E 5428 0028                  		addq.b	#2,$28(a0)
0001B1A2 4268 0012                  		clr.w	$12(a0)
0001B1A6 6000                       		bra.s	loc_193CC
0001B1A8                            ; ===========================================================================
0001B1A8                            
0001B1A8                            loc_193BE:
0001B1A8 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B1AE 6C00                       		bge.s	loc_193CC
0001B1B0 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B1B6                            
0001B1B6                            loc_193CC:
0001B1B6 6000 FE24                  		bra.w	loc_191F2
0001B1BA                            ; ===========================================================================
0001B1BA                            
0001B1BA                            loc_193D0:				; XREF: off_192FA
0001B1BA 5368 003C                  		subq.w	#1,$3C(a0)
0001B1BE 6E00                       		bgt.s	loc_19406
0001B1C0 6B00                       		bmi.s	loc_193EE
0001B1C2 70FF                       		moveq	#-1,d0
0001B1C4 3028 0036                  		move.w	$36(a0),d0
0001B1C8 6700                       		beq.s	loc_193E8
0001B1CA 2240                       		movea.l	d0,a1
0001B1CC 137C 000A 0029             		move.b	#$A,$29(a1)
0001B1D2                            
0001B1D2                            loc_193E8:
0001B1D2 4268 0036                  		clr.w	$36(a0)
0001B1D6 6000                       		bra.s	loc_19406
0001B1D8                            ; ===========================================================================
0001B1D8                            
0001B1D8                            loc_193EE:
0001B1D8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B1DE 6600                       		bne.s	loc_19406
0001B1E0 4228 0029                  		clr.b	$29(a0)
0001B1E4 5528 0025                  		subq.b	#2,$25(a0)
0001B1E8 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B1EE 6000                       		bra.s	loc_19446
0001B1F0                            ; ===========================================================================
0001B1F0                            
0001B1F0                            loc_19406:
0001B1F0 7001                       		moveq	#1,d0
0001B1F2 4A68 0036                  		tst.w	$36(a0)
0001B1F6 6700                       		beq.s	loc_19410
0001B1F8 7002                       		moveq	#2,d0
0001B1FA                            
0001B1FA                            loc_19410:
0001B1FA 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B200 6700                       		beq.s	loc_19424
0001B202 6D00                       		blt.s	loc_1941C
0001B204 4440                       		neg.w	d0
0001B206                            
0001B206                            loc_1941C:
0001B206 4A68 0036                  		tst.w	$36(a0)
0001B20A D168 0038                  		add.w	d0,$38(a0)
0001B20E                            
0001B20E                            loc_19424:
0001B20E 7000                       		moveq	#0,d0
0001B210 4A68 0036                  		tst.w	$36(a0)
0001B214 6700                       		beq.s	loc_19438
0001B216 7002                       		moveq	#2,d0
0001B218 0828 0000 003D             		btst	#0,$3D(a0)
0001B21E 6700                       		beq.s	loc_19438
0001B220 4440                       		neg.w	d0
0001B222                            
0001B222                            loc_19438:
0001B222 D068 0038                  		add.w	$38(a0),d0
0001B226 3140 000C                  		move.w	d0,$C(a0)
0001B22A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B230                            
0001B230                            loc_19446:
0001B230 6000 FDBA                  		bra.w	loc_19202
0001B234                            
0001B234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B234                            
0001B234                            
0001B234                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B234 4268 0036                  		clr.w	$36(a0)
0001B238 43F8 D040                  		lea	($FFFFD040).w,a1
0001B23C 703E                       		moveq	#$3E,d0
0001B23E 7276                       		moveq	#$76,d1
0001B240 1428 0034                  		move.b	$34(a0),d2
0001B244                            
0001B244                            Obj75_FindLoop:
0001B244 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B246 6600                       		bne.s	loc_1946A	; if not, branch
0001B248 B429 0028                  		cmp.b	$28(a1),d2
0001B24C 6600                       		bne.s	loc_1946A
0001B24E 3149 0036                  		move.w	a1,$36(a0)
0001B252 6000                       		bra.s	locret_19472
0001B254                            ; ===========================================================================
0001B254                            
0001B254                            loc_1946A:
0001B254 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B258 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B25C                            
0001B25C                            locret_19472:
0001B25C 4E75                       		rts	
0001B25E                            ; End of function Obj75_FindBlocks
0001B25E                            
0001B25E                            ; ===========================================================================
0001B25E                            
0001B25E                            loc_19474:				; XREF: Obj75_ShipIndex
0001B25E 5368 003C                  		subq.w	#1,$3C(a0)
0001B262 6B00                       		bmi.s	loc_1947E
0001B264 6000 E3F8                  		bra.w	BossDefeated
0001B268                            ; ===========================================================================
0001B268                            
0001B268                            loc_1947E:
0001B268 5428 0025                  		addq.b	#2,$25(a0)
0001B26C 4268 0012                  		clr.w	$12(a0)
0001B270 08E8 0000 0022             		bset	#0,$22(a0)
0001B276 08A8 0007 0022             		bclr	#7,$22(a0)
0001B27C 4268 0010                  		clr.w	$10(a0)
0001B280 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B286 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B28A 6600                       		bne.s	loc_194A8
0001B28C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B292                            
0001B292                            loc_194A8:
0001B292 6000 FD58                  		bra.w	loc_19202
0001B296                            ; ===========================================================================
0001B296                            
0001B296                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B296 5268 003C                  		addq.w	#1,$3C(a0)
0001B29A 6700                       		beq.s	loc_194BC
0001B29C 6A00                       		bpl.s	loc_194C2
0001B29E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B2A4 6000                       		bra.s	loc_194EE
0001B2A6                            ; ===========================================================================
0001B2A6                            
0001B2A6                            loc_194BC:
0001B2A6 4268 0012                  		clr.w	$12(a0)
0001B2AA 6000                       		bra.s	loc_194EE
0001B2AC                            ; ===========================================================================
0001B2AC                            
0001B2AC                            loc_194C2:
0001B2AC 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B2B2 6500                       		bcs.s	loc_194DA
0001B2B4 6700                       		beq.s	loc_194E0
0001B2B6 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B2BC 6500                       		bcs.s	loc_194EE
0001B2BE 5428 0025                  		addq.b	#2,$25(a0)
0001B2C2 6000                       		bra.s	loc_194EE
0001B2C4                            ; ===========================================================================
0001B2C4                            
0001B2C4                            loc_194DA:
0001B2C4 5168 0012                  		subq.w	#8,$12(a0)
0001B2C8 6000                       		bra.s	loc_194EE
0001B2CA                            ; ===========================================================================
0001B2CA                            
0001B2CA                            loc_194E0:
0001B2CA 4268 0012                  		clr.w	$12(a0)
0001B2CE 303C 008F                  		move.w	#$8F,d0
0001B2D2 4EB9 0000 12C2             		jsr	(PlaySound).l	; play SYZ music
0001B2D8                            
0001B2D8                            loc_194EE:
0001B2D8 6000 FD02                  		bra.w	loc_191F2
0001B2DC                            ; ===========================================================================
0001B2DC                            
0001B2DC                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B2DC 317C 0400 0010             		move.w	#$400,$10(a0)
0001B2E2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B2E8 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B2EE 6400                       		bcc.s	loc_1950C
0001B2F0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B2F4 6000                       		bra.s	loc_19512
0001B2F6                            ; ===========================================================================
0001B2F6                            
0001B2F6                            loc_1950C:
0001B2F6 4A28 0001                  		tst.b	1(a0)
0001B2FA 6A00                       		bpl.s	Obj75_ShipDelete
0001B2FC                            
0001B2FC                            loc_19512:
0001B2FC 6100 E3A2                  		bsr.w	BossMove
0001B300 6000 FCC6                  		bra.w	loc_191DE
0001B304                            ; ===========================================================================
0001B304                            
0001B304                            Obj75_ShipDelete:
0001B304 4EF9 0000 F04C             		jmp	DeleteObject
0001B30A                            ; ===========================================================================
0001B30A                            
0001B30A                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B30A 7201                       		moveq	#1,d1
0001B30C 2268 0034                  		movea.l	$34(a0),a1
0001B310 7000                       		moveq	#0,d0
0001B312 1029 0025                  		move.b	$25(a1),d0
0001B316 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B31A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B31E 1141 001C                  		move.b	d1,$1C(a0)
0001B322 1010                       		move.b	(a0),d0
0001B324 B011                       		cmp.b	(a1),d0
0001B326 6600                       		bne.s	Obj75_FaceDelete
0001B328 6000                       		bra.s	loc_195BE
0001B32A                            ; ===========================================================================
0001B32A                            
0001B32A                            Obj75_FaceDelete:
0001B32A 4EF9 0000 F04C             		jmp	DeleteObject
0001B330                            ; ===========================================================================
0001B330 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B334 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B338 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B33C                            ; ===========================================================================
0001B33C                            
0001B33C                            loc_19552:				; XREF: off_19546
0001B33C 720A                       		moveq	#$A,d1
0001B33E 4E75                       		rts	
0001B340                            ; ===========================================================================
0001B340                            
0001B340                            loc_19556:				; XREF: off_19546
0001B340 7206                       		moveq	#6,d1
0001B342 4E75                       		rts	
0001B344                            ; ===========================================================================
0001B344                            
0001B344                            loc_1955A:				; XREF: off_19546
0001B344 7000                       		moveq	#0,d0
0001B346 1029 0028                  		move.b	$28(a1),d0
0001B34A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B34E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B352                            ; ===========================================================================
0001B352 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B356 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B35A                            ; ===========================================================================
0001B35A                            
0001B35A                            loc_19570:				; XREF: off_19568
0001B35A 6000                       		bra.s	loc_19574
0001B35C                            ; ===========================================================================
0001B35C                            
0001B35C                            loc_19572:				; XREF: off_19568
0001B35C 7206                       		moveq	#6,d1
0001B35E                            
0001B35E                            loc_19574:				; XREF: off_19546
0001B35E 4A29 0020                  		tst.b	$20(a1)
0001B362 6600                       		bne.s	loc_1957E
0001B364 7205                       		moveq	#5,d1
0001B366 4E75                       		rts	
0001B368                            ; ===========================================================================
0001B368                            
0001B368                            loc_1957E:
0001B368 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B36E 6500                       		bcs.s	locret_19588
0001B370 7204                       		moveq	#4,d1
0001B372                            
0001B372                            locret_19588:
0001B372 4E75                       		rts	
0001B374                            ; ===========================================================================
0001B374                            
0001B374                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B374 117C 0007 001C             		move.b	#7,$1C(a0)
0001B37A 2268 0034                  		movea.l	$34(a0),a1
0001B37E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B384 6600                       		bne.s	loc_195AA
0001B386 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B38C 4A28 0001                  		tst.b	1(a0)
0001B390 6A00                       		bpl.s	Obj75_FlameDelete
0001B392 6000                       		bra.s	loc_195B6
0001B394                            ; ===========================================================================
0001B394                            
0001B394                            loc_195AA:
0001B394 4A69 0010                  		tst.w	$10(a1)
0001B398 6700                       		beq.s	loc_195B6
0001B39A 117C 0008 001C             		move.b	#8,$1C(a0)
0001B3A0                            
0001B3A0                            loc_195B6:
0001B3A0 6000                       		bra.s	loc_195BE
0001B3A2                            ; ===========================================================================
0001B3A2                            
0001B3A2                            Obj75_FlameDelete:
0001B3A2 4EF9 0000 F04C             		jmp	DeleteObject
0001B3A8                            ; ===========================================================================
0001B3A8                            
0001B3A8                            loc_195BE:
0001B3A8 43F9 0001 9AB0             		lea	(Ani_Eggman).l,a1
0001B3AE 4EB9 0000 C10C             		jsr	AnimateSprite
0001B3B4 2268 0034                  		movea.l	$34(a0),a1
0001B3B8 3169 0008 0008             		move.w	8(a1),8(a0)
0001B3BE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B3C4                            
0001B3C4                            loc_195DA:
0001B3C4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B3CA 7003                       		moveq	#3,d0
0001B3CC C028 0022                  		and.b	$22(a0),d0
0001B3D0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B3D6 8128 0001                  		or.b	d0,1(a0)
0001B3DA 4EF9 0000 F010             		jmp	DisplaySprite
0001B3E0                            ; ===========================================================================
0001B3E0                            
0001B3E0                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B3E0 217C 0001 9BC8 0004        		move.l	#Map_BossItems,4(a0)
0001B3E8 317C 246C 0002             		move.w	#$246C,2(a0)
0001B3EE 117C 0005 001A             		move.b	#5,$1A(a0)
0001B3F4 2268 0034                  		movea.l	$34(a0),a1
0001B3F8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B3FE 6600                       		bne.s	loc_1961C
0001B400 4A28 0001                  		tst.b	1(a0)
0001B404 6A00                       		bpl.s	Obj75_SpikeDelete
0001B406                            
0001B406                            loc_1961C:
0001B406 3169 0008 0008             		move.w	8(a1),8(a0)
0001B40C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B412 3028 003C                  		move.w	$3C(a0),d0
0001B416 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B41C 6600                       		bne.s	loc_19652
0001B41E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B424 6700                       		beq.s	loc_1964C
0001B426 4A29 0028                  		tst.b	$28(a1)
0001B42A 6600                       		bne.s	loc_19658
0001B42C 0C40 0094                  		cmpi.w	#$94,d0
0001B430 6C00                       		bge.s	loc_19658
0001B432 5E40                       		addq.w	#7,d0
0001B434 6000                       		bra.s	loc_19658
0001B436                            ; ===========================================================================
0001B436                            
0001B436                            loc_1964C:
0001B436 4A69 003C                  		tst.w	$3C(a1)
0001B43A 6A00                       		bpl.s	loc_19658
0001B43C                            
0001B43C                            loc_19652:
0001B43C 4A40                       		tst.w	d0
0001B43E 6F00                       		ble.s	loc_19658
0001B440 5B40                       		subq.w	#5,d0
0001B442                            
0001B442                            loc_19658:
0001B442 3140 003C                  		move.w	d0,$3C(a0)
0001B446 E440                       		asr.w	#2,d0
0001B448 D168 000C                  		add.w	d0,$C(a0)
0001B44C 117C 0008 0019             		move.b	#8,$19(a0)
0001B452 117C 000C 0016             		move.b	#$C,$16(a0)
0001B458 4228 0020                  		clr.b	$20(a0)
0001B45C 2268 0034                  		movea.l	$34(a0),a1
0001B460 4A29 0020                  		tst.b	$20(a1)
0001B464 6700                       		beq.s	loc_19688
0001B466 4A29 0029                  		tst.b	$29(a1)
0001B46A 6600                       		bne.s	loc_19688
0001B46C 117C 0084 0020             		move.b	#$84,$20(a0)
0001B472                            
0001B472                            loc_19688:
0001B472 6000 FF50                  		bra.w	loc_195DA
0001B476                            ; ===========================================================================
0001B476                            
0001B476                            Obj75_SpikeDelete:
0001B476 4EF9 0000 F04C             		jmp	DeleteObject
0001B47C                            ; ===========================================================================
0001B47C                            ; ---------------------------------------------------------------------------
0001B47C                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B47C                            ; ---------------------------------------------------------------------------
0001B47C                            
0001B47C                            Obj76:					; XREF: Obj_Index
0001B47C 7000                       		moveq	#0,d0
0001B47E 1028 0024                  		move.b	$24(a0),d0
0001B482 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B486 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B48A                            ; ===========================================================================
0001B48A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B48C 0000                       		dc.w Obj76_Action-Obj76_Index
0001B48E 0000                       		dc.w loc_19762-Obj76_Index
0001B490                            ; ===========================================================================
0001B490                            
0001B490                            Obj76_Main:				; XREF: Obj76_Index
0001B490 7800                       		moveq	#0,d4
0001B492 3A3C 2C10                  		move.w	#$2C10,d5
0001B496 7C09                       		moveq	#9,d6
0001B498 43D0                       		lea	(a0),a1
0001B49A 6000                       		bra.s	Obj76_MakeBlock
0001B49C                            ; ===========================================================================
0001B49C                            
0001B49C                            Obj76_Loop:
0001B49C 4EB9 0000 F496             		jsr	SingleObjLoad
0001B4A2 6600                       		bne.s	Obj76_ExitLoop
0001B4A4                            
0001B4A4                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B4A4 12BC 0076                  		move.b	#$76,(a1)
0001B4A8 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B4B0 337C 4000 0002             		move.w	#$4000,2(a1)
0001B4B6 137C 0004 0001             		move.b	#4,1(a1)
0001B4BC 137C 0010 0019             		move.b	#$10,$19(a1)
0001B4C2 137C 0010 0016             		move.b	#$10,$16(a1)
0001B4C8 137C 0003 0018             		move.b	#3,$18(a1)
0001B4CE 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B4D2 337C 0582 000C             		move.w	#$582,$C(a1)
0001B4D8 3344 0028                  		move.w	d4,$28(a1)
0001B4DC 0644 0101                  		addi.w	#$101,d4
0001B4E0 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B4E4 5429 0024                  		addq.b	#2,$24(a1)
0001B4E8 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B4EC                            
0001B4EC                            Obj76_ExitLoop:
0001B4EC 4E75                       		rts	
0001B4EE                            ; ===========================================================================
0001B4EE                            
0001B4EE                            Obj76_Action:				; XREF: Obj76_Index
0001B4EE 1028 0029                  		move.b	$29(a0),d0
0001B4F2 B028 0028                  		cmp.b	$28(a0),d0
0001B4F6 6700                       		beq.s	Obj76_Solid
0001B4F8 4A00                       		tst.b	d0
0001B4FA 6B00                       		bmi.s	loc_19718
0001B4FC                            
0001B4FC                            loc_19712:
0001B4FC 6100 0000                  		bsr.w	Obj76_Break
0001B500 6000                       		bra.s	Obj76_Display
0001B502                            ; ===========================================================================
0001B502                            
0001B502                            loc_19718:
0001B502 2268 0034                  		movea.l	$34(a0),a1
0001B506 4A29 0021                  		tst.b	$21(a1)
0001B50A 67F0                       		beq.s	loc_19712
0001B50C 3169 0008 0008             		move.w	8(a1),8(a0)
0001B512 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B518 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B51E B2C8                       		cmpa.w	a0,a1
0001B520 6500                       		bcs.s	Obj76_Display
0001B522 3029 0012                  		move.w	$12(a1),d0
0001B526 48C0                       		ext.l	d0
0001B528 E080                       		asr.l	#8,d0
0001B52A D168 000C                  		add.w	d0,$C(a0)
0001B52E 6000                       		bra.s	Obj76_Display
0001B530                            ; ===========================================================================
0001B530                            
0001B530                            Obj76_Solid:				; XREF: Obj76_Action
0001B530 323C 001B                  		move.w	#$1B,d1
0001B534 343C 0010                  		move.w	#$10,d2
0001B538 363C 0011                  		move.w	#$11,d3
0001B53C 3828 0008                  		move.w	8(a0),d4
0001B540 4EB9 0001 13D0             		jsr	SolidObject
0001B546                            
0001B546                            Obj76_Display:				; XREF: Obj76_Action
0001B546 4EF9 0000 F010             		jmp	DisplaySprite
0001B54C                            ; ===========================================================================
0001B54C                            
0001B54C                            loc_19762:				; XREF: Obj76_Index
0001B54C 4A28 0001                  		tst.b	1(a0)
0001B550 6A00                       		bpl.s	Obj76_Delete
0001B552 4EB9 0000 EFBE             		jsr	ObjectFall
0001B558 4EF9 0000 F010             		jmp	DisplaySprite
0001B55E                            ; ===========================================================================
0001B55E                            
0001B55E                            Obj76_Delete:
0001B55E 4EF9 0000 F04C             		jmp	DeleteObject
0001B564                            
0001B564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B564                            
0001B564                            
0001B564                            Obj76_Break:				; XREF: Obj76_Action
0001B564 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B568 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B56C 7801                       		moveq	#1,d4
0001B56E 7203                       		moveq	#3,d1
0001B570 7438                       		moveq	#$38,d2
0001B572 5428 0024                  		addq.b	#2,$24(a0)
0001B576 117C 0008 0019             		move.b	#8,$19(a0)
0001B57C 117C 0008 0016             		move.b	#8,$16(a0)
0001B582 43D0                       		lea	(a0),a1
0001B584 6000                       		bra.s	Obj76_MakeFrag
0001B586                            ; ===========================================================================
0001B586                            
0001B586                            Obj76_LoopFrag:
0001B586 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001B58C 6600                       		bne.s	loc_197D4
0001B58E                            
0001B58E                            Obj76_MakeFrag:
0001B58E 45D0                       		lea	(a0),a2
0001B590 47D1                       		lea	(a1),a3
0001B592 7603                       		moveq	#3,d3
0001B594                            
0001B594                            loc_197AA:
0001B594 26DA                       		move.l	(a2)+,(a3)+
0001B596 26DA                       		move.l	(a2)+,(a3)+
0001B598 26DA                       		move.l	(a2)+,(a3)+
0001B59A 26DA                       		move.l	(a2)+,(a3)+
0001B59C 51CB FFF6                  		dbf	d3,loc_197AA
0001B5A0                            
0001B5A0 335C 0010                  		move.w	(a4)+,$10(a1)
0001B5A4 335C 0012                  		move.w	(a4)+,$12(a1)
0001B5A8 361D                       		move.w	(a5)+,d3
0001B5AA D769 0008                  		add.w	d3,8(a1)
0001B5AE 361D                       		move.w	(a5)+,d3
0001B5B0 D769 000C                  		add.w	d3,$C(a1)
0001B5B4 1344 001A                  		move.b	d4,$1A(a1)
0001B5B8 5244                       		addq.w	#1,d4
0001B5BA 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B5BE                            
0001B5BE                            loc_197D4:
0001B5BE 303C 00CB                  		move.w	#$CB,d0
0001B5C2 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B5C8                            ; End of function Obj76_Break
0001B5C8                            
0001B5C8                            ; ===========================================================================
0001B5C8 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B5CC 0180 FE00                  		dc.w $180, $FE00
0001B5D0 FF00 FF00                  		dc.w $FF00, $FF00
0001B5D4 0100 FF00                  		dc.w $100, $FF00
0001B5D8 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B5DC 0010 0000                  		dc.w $10, 0
0001B5E0 0000 0010                  		dc.w 0,	$10
0001B5E4 0010 0010                  		dc.w $10, $10
0001B5E8                            ; ---------------------------------------------------------------------------
0001B5E8                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B5E8                            ; ---------------------------------------------------------------------------
0001B5E8                            Map_obj76:
0001B5E8                            	include "_maps\obj76.asm"
0001B5E8                            ; ---------------------------------------------------------------------------
0001B5E8                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B5E8                            ; ---------------------------------------------------------------------------
0001B5E8 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B5EC 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B5F0 0000                       		dc.w byte_19826-Map_obj76
0001B5F2 02                         byte_19808:	dc.b 2
0001B5F3 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B5F8 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B5FD 00                         		dc.b 0
0001B5FE 01                         byte_19814:	dc.b 1
0001B5FF F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B604 01                         byte_1981A:	dc.b 1
0001B605 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B60A 01                         byte_19820:	dc.b 1
0001B60B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B610 01                         byte_19826:	dc.b 1
0001B611 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B616                            		even
0001B616                            		even
0001B616                            
0001B616                            ; ===========================================================================
0001B616                            
0001B616                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B616 4EF9 0000 F04C             		jmp	DeleteObject
0001B61C                            ; ===========================================================================
0001B61C                            ; ---------------------------------------------------------------------------
0001B61C                            ; Object 82 - Eggman (SBZ2)
0001B61C                            ; ---------------------------------------------------------------------------
0001B61C                            
0001B61C                            Obj82:					; XREF: Obj_Index
0001B61C 7000                       		moveq	#0,d0
0001B61E 1028 0024                  		move.b	$24(a0),d0
0001B622 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B626 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B62A                            ; ===========================================================================
0001B62A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B62C 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B62E 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B630                            
0001B630 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B633 0400 03                    		dc.b 4,	0, 3
0001B636                            ; ===========================================================================
0001B636                            
0001B636                            Obj82_Main:				; XREF: Obj82_Index
0001B636 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B63A 317C 2160 0008             		move.w	#$2160,8(a0)
0001B640 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B646 117C 000F 0020             		move.b	#$F,$20(a0)
0001B64C 117C 0010 0021             		move.b	#$10,$21(a0)
0001B652 08A8 0000 0022             		bclr	#0,$22(a0)
0001B658 4228 0025                  		clr.b	$25(a0)
0001B65C 115A 0024                  		move.b	(a2)+,$24(a0)
0001B660 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B664 115A 0018                  		move.b	(a2)+,$18(a0)
0001B668 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B670 317C 0400 0002             		move.w	#$400,2(a0)
0001B676 117C 0004 0001             		move.b	#4,1(a0)
0001B67C 08E8 0007 0001             		bset	#7,1(a0)
0001B682 117C 0020 0019             		move.b	#$20,$19(a0)
0001B688 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001B68E 6600                       		bne.s	Obj82_Eggman
0001B690 2348 0034                  		move.l	a0,$34(a1)
0001B694 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B698 337C 2130 0008             		move.w	#$2130,8(a1)
0001B69E 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B6A4 4228 0025                  		clr.b	$25(a0)
0001B6A8 135A 0024                  		move.b	(a2)+,$24(a1)
0001B6AC 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B6B0 135A 0018                  		move.b	(a2)+,$18(a1)
0001B6B4 237C 0000 D88E 0004        		move.l	#Map_obj32,4(a1)
0001B6BC 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B6C2 137C 0004 0001             		move.b	#4,1(a1)
0001B6C8 08E9 0007 0001             		bset	#7,1(a1)
0001B6CE 137C 0010 0019             		move.b	#$10,$19(a1)
0001B6D4 137C 0000 001A             		move.b	#0,$1A(a1)
0001B6DA                            
0001B6DA                            Obj82_Eggman:				; XREF: Obj82_Index
0001B6DA 7000                       		moveq	#0,d0
0001B6DC 1028 0025                  		move.b	$25(a0),d0
0001B6E0 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B6E4 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B6E8 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B6EC 4EB9 0000 C10C             		jsr	AnimateSprite
0001B6F2 4EF9 0000 F010             		jmp	DisplaySprite
0001B6F8                            ; ===========================================================================
0001B6F8 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B6FA 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B6FC 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B6FE 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B700                            ; ===========================================================================
0001B700                            
0001B700                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B700 3028 0008                  		move.w	8(a0),d0
0001B704 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B708 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B70C 6400                       		bcc.s	loc_19934	; if not, branch
0001B70E 5428 0025                  		addq.b	#2,$25(a0)
0001B712 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B718 117C 0001 001C             		move.b	#1,$1C(a0)
0001B71E                            
0001B71E                            loc_19934:				; XREF: Obj82_EggIndex
0001B71E 4EF9 0000 EFEA             		jmp	SpeedToPos
0001B724                            ; ===========================================================================
0001B724                            
0001B724                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B724 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B728 6600                       		bne.s	loc_19954	; if time remains, branch
0001B72A 5428 0025                  		addq.b	#2,$25(a0)
0001B72E 117C 0002 001C             		move.b	#2,$1C(a0)
0001B734 5868 000C                  		addq.w	#4,$C(a0)
0001B738 317C 000F 003C             		move.w	#15,$3C(a0)
0001B73E                            
0001B73E                            loc_19954:
0001B73E 60DE                       		bra.s	loc_19934
0001B740                            ; ===========================================================================
0001B740                            
0001B740                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B740 5368 003C                  		subq.w	#1,$3C(a0)
0001B744 6E00                       		bgt.s	loc_199D0
0001B746 6600                       		bne.s	loc_1996A
0001B748 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B74E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B754                            
0001B754                            loc_1996A:
0001B754 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B75A 6E00                       		bgt.s	loc_19976
0001B75C 4268 0010                  		clr.w	$10(a0)
0001B760                            
0001B760                            loc_19976:
0001B760 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B766 4A68 0012                  		tst.w	$12(a0)
0001B76A 6B00                       		bmi.s	Obj82_FindBlocks
0001B76C 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B772 6500                       		bcs.s	Obj82_FindBlocks
0001B774 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B77A 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B780 6500                       		bcs.s	Obj82_FindBlocks
0001B782 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B788 4268 0012                  		clr.w	$12(a0)
0001B78C                            
0001B78C                            Obj82_FindBlocks:
0001B78C 3028 0010                  		move.w	$10(a0),d0
0001B790 8068 0012                  		or.w	$12(a0),d0
0001B794 6600                       		bne.s	loc_199D0
0001B796 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B79A 703E                       		moveq	#$3E,d0
0001B79C 7240                       		moveq	#$40,d1
0001B79E                            
0001B79E                            Obj82_FindLoop:	
0001B79E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B7A0 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B7A4 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B7A8                            
0001B7A8 6600                       		bne.s	loc_199D0
0001B7AA 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B7B0 5428 0025                  		addq.b	#2,$25(a0)
0001B7B4 117C 0001 001C             		move.b	#1,$1C(a0)
0001B7BA                            
0001B7BA                            loc_199D0:
0001B7BA 6000 FF62                  		bra.w	loc_19934
0001B7BE                            ; ===========================================================================
0001B7BE                            
0001B7BE                            Obj82_Switch:				; XREF: Obj82_Index
0001B7BE 7000                       		moveq	#0,d0
0001B7C0 1028 0025                  		move.b	$25(a0),d0
0001B7C4 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B7C8 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B7CC                            ; ===========================================================================
0001B7CC 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B7CE 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B7D0                            ; ===========================================================================
0001B7D0                            
0001B7D0                            loc_199E6:				; XREF: Obj82_SwIndex
0001B7D0 2268 0034                  		movea.l	$34(a0),a1
0001B7D4 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B7DA 6600                       		bne.s	Obj82_SwDisplay
0001B7DC 117C 0001 001A             		move.b	#1,$1A(a0)
0001B7E2 5428 0025                  		addq.b	#2,$25(a0)
0001B7E6                            
0001B7E6                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B7E6 4EF9 0000 F010             		jmp	DisplaySprite
0001B7EC                            ; ===========================================================================
0001B7EC                            Ani_obj82:
0001B7EC                            	include "_anim\obj82.asm"
0001B7EC                            ; ---------------------------------------------------------------------------
0001B7EC                            ; Animation script - Eggman (SBZ2)
0001B7EC                            ; ---------------------------------------------------------------------------
0001B7EC 0000                       		dc.w byte_19A10-Ani_obj82
0001B7EE 0000                       		dc.w byte_19A14-Ani_obj82
0001B7F0 0000                       		dc.w byte_19A18-Ani_obj82
0001B7F2 0000                       		dc.w byte_19A20-Ani_obj82
0001B7F4 0000                       		dc.w byte_19A24-Ani_obj82
0001B7F6 0000                       		dc.w byte_19A2A-Ani_obj82
0001B7F8 0000                       		dc.w byte_19A30-Ani_obj82
0001B7FA 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B7FE 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B802 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B80A 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B80E 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B814 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B81A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B81E                            		even
0001B81E                            		even
0001B81E                            
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            ; Sprite mappings - Eggman (SBZ2)
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            Map_obj82:
0001B81E                            	include "_maps\obj82.asm"
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            ; Sprite mappings - Eggman (SBZ2)
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B822 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B826 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B82A 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B82E 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B832 0000                       		dc.w byte_19B4F-Map_obj82
0001B834 03                         byte_19A4A:	dc.b 3
0001B835 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B83A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B83F 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B844 04                         byte_19A5A:	dc.b 4
0001B845 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B84A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B84F 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B854 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B859 00                         		dc.b 0
0001B85A 04                         byte_19A70:	dc.b 4
0001B85B E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B860 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B865 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B86A FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B86F 00                         		dc.b 0
0001B870 04                         byte_19A86:	dc.b 4
0001B871 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B876 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B87B 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B880 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B885 00                         		dc.b 0
0001B886 04                         byte_19A9C:	dc.b 4
0001B887 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B88C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B891 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B896 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B89B 00                         		dc.b 0
0001B89C 04                         byte_19AB2:	dc.b 4
0001B89D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B8A2 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B8A7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B8AC 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B8B1 00                         		dc.b 0
0001B8B2 07                         byte_19AC8:	dc.b 7
0001B8B3 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B8B8 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B8BD 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B8C2 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B8C7 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B8CC F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B8D1 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B8D6 05                         byte_19AEC:	dc.b 5
0001B8D7 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B8DC F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B8E1 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B8E6 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B8EB E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B8F0 06                         byte_19B06:	dc.b 6
0001B8F1 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B8F6 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B8FB 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B900 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B905 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B90A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B90F 00                         		dc.b 0
0001B910 08                         byte_19B26:	dc.b 8
0001B911 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B916 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B91B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B920 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B925 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B92A F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B92F 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B934 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B939 03                         byte_19B4F:	dc.b 3
0001B93A EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B93F F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B944 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B94A 00                         		even
0001B94A 00                         		even
0001B94A                            
0001B94A                            ; ===========================================================================
0001B94A                            ; ---------------------------------------------------------------------------
0001B94A                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B94A                            ; ---------------------------------------------------------------------------
0001B94A                            
0001B94A                            Obj83:					; XREF: Obj_Index
0001B94A 7000                       		moveq	#0,d0
0001B94C 1028 0024                  		move.b	$24(a0),d0
0001B950 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B954 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B958                            ; ===========================================================================
0001B958 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B95A 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B95C 0000                       		dc.w loc_19C36-Obj83_Index
0001B95E 0000                       		dc.w loc_19C62-Obj83_Index
0001B960 0000                       		dc.w loc_19C72-Obj83_Index
0001B962 0000                       		dc.w loc_19C80-Obj83_Index
0001B964                            ; ===========================================================================
0001B964                            
0001B964                            Obj83_Main:				; XREF: Obj83_Index
0001B964 317C 2080 0008             		move.w	#$2080,8(a0)
0001B96A 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B970 117C 0080 0019             		move.b	#$80,$19(a0)
0001B976 117C 0010 0016             		move.b	#$10,$16(a0)
0001B97C 117C 0004 0001             		move.b	#4,1(a0)
0001B982 08E8 0007 0001             		bset	#7,1(a0)
0001B988 7800                       		moveq	#0,d4
0001B98A 3A3C 2010                  		move.w	#$2010,d5
0001B98E 7C07                       		moveq	#7,d6
0001B990 45E8 0030                  		lea	$30(a0),a2
0001B994                            
0001B994                            Obj83_MakeBlock:
0001B994 4EB9 0000 F496             		jsr	SingleObjLoad
0001B99A 6600                       		bne.s	Obj83_ExitMake
0001B99C 34C9                       		move.w	a1,(a2)+
0001B99E 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B9A2 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B9AA 337C 4518 0002             		move.w	#$4518,2(a1)
0001B9B0 137C 0004 0001             		move.b	#4,1(a1)
0001B9B6 137C 0010 0019             		move.b	#$10,$19(a1)
0001B9BC 137C 0010 0016             		move.b	#$10,$16(a1)
0001B9C2 137C 0003 0018             		move.b	#3,$18(a1)
0001B9C8 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B9CC 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B9D2 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B9D6 137C 0008 0024             		move.b	#8,$24(a1)
0001B9DC 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B9E0                            
0001B9E0                            Obj83_ExitMake:
0001B9E0 5428 0024                  		addq.b	#2,$24(a0)
0001B9E4 4E75                       		rts	
0001B9E6                            ; ===========================================================================
0001B9E6                            
0001B9E6                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B9E6 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B9EC 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B9EE 4228 001A                  		clr.b	$1A(a0)
0001B9F2 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B9F6                            
0001B9F6                            Obj83_Solid:
0001B9F6 7000                       		moveq	#0,d0
0001B9F8 1028 001A                  		move.b	$1A(a0),d0
0001B9FC 4400                       		neg.b	d0
0001B9FE 4880                       		ext.w	d0
0001BA00 5040                       		addq.w	#8,d0
0001BA02 E940                       		asl.w	#4,d0
0001BA04 383C 2100                  		move.w	#$2100,d4
0001BA08 9840                       		sub.w	d0,d4
0001BA0A 1140 0019                  		move.b	d0,$19(a0)
0001BA0E 3144 0008                  		move.w	d4,8(a0)
0001BA12 720B                       		moveq	#$B,d1
0001BA14 D240                       		add.w	d0,d1
0001BA16 7410                       		moveq	#$10,d2
0001BA18 7611                       		moveq	#$11,d3
0001BA1A 4EF9 0001 13D0             		jmp	SolidObject
0001BA20                            ; ===========================================================================
0001BA20                            
0001BA20                            loc_19C36:				; XREF: Obj83_Index
0001BA20 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BA26 6400                       		bcc.s	Obj83_Solid2
0001BA28 70FF                       		moveq	#-1,d0
0001BA2A 1028 001A                  		move.b	$1A(a0),d0
0001BA2E 4880                       		ext.w	d0
0001BA30 D040                       		add.w	d0,d0
0001BA32 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BA36 2240                       		movea.l	d0,a1
0001BA38 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BA3E 5228 001A                  		addq.b	#1,$1A(a0)
0001BA42 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BA48 6700                       		beq.s	loc_19C62
0001BA4A                            
0001BA4A                            Obj83_Solid2:
0001BA4A 60AA                       		bra.s	Obj83_Solid
0001BA4C                            ; ===========================================================================
0001BA4C                            
0001BA4C                            loc_19C62:				; XREF: Obj83_Index
0001BA4C 08A8 0003 0022             		bclr	#3,$22(a0)
0001BA52 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BA58 6000 FBBC                  		bra.w	loc_1982C
0001BA5C                            ; ===========================================================================
0001BA5C                            
0001BA5C                            loc_19C72:				; XREF: Obj83_Index
0001BA5C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BA62 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BA64 4EF9 0000 F010             		jmp	DisplaySprite
0001BA6A                            ; ===========================================================================
0001BA6A                            
0001BA6A                            loc_19C80:				; XREF: Obj83_Index
0001BA6A 4A28 0001                  		tst.b	1(a0)
0001BA6E 6A00 FBA6                  		bpl.w	loc_1982C
0001BA72 4EB9 0000 EFBE             		jsr	ObjectFall
0001BA78 4EF9 0000 F010             		jmp	DisplaySprite
0001BA7E                            ; ===========================================================================
0001BA7E                            
0001BA7E                            Obj83_Break:				; XREF: loc_19C72
0001BA7E 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BA82 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BA86 7801                       		moveq	#1,d4
0001BA88 7203                       		moveq	#3,d1
0001BA8A 7438                       		moveq	#$38,d2
0001BA8C 5428 0024                  		addq.b	#2,$24(a0)
0001BA90 117C 0008 0019             		move.b	#8,$19(a0)
0001BA96 117C 0008 0016             		move.b	#8,$16(a0)
0001BA9C 43D0                       		lea	(a0),a1
0001BA9E 6000                       		bra.s	Obj83_MakeFrag
0001BAA0                            ; ===========================================================================
0001BAA0                            
0001BAA0                            Obj83_LoopFrag:
0001BAA0 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001BAA6 6600                       		bne.s	Obj83_BreakSnd
0001BAA8                            
0001BAA8                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BAA8 45D0                       		lea	(a0),a2
0001BAAA 47D1                       		lea	(a1),a3
0001BAAC 7603                       		moveq	#3,d3
0001BAAE                            
0001BAAE                            loc_19CC4:
0001BAAE 26DA                       		move.l	(a2)+,(a3)+
0001BAB0 26DA                       		move.l	(a2)+,(a3)+
0001BAB2 26DA                       		move.l	(a2)+,(a3)+
0001BAB4 26DA                       		move.l	(a2)+,(a3)+
0001BAB6 51CB FFF6                  		dbf	d3,loc_19CC4
0001BABA                            
0001BABA 335C 0012                  		move.w	(a4)+,$12(a1)
0001BABE 361D                       		move.w	(a5)+,d3
0001BAC0 D769 0008                  		add.w	d3,8(a1)
0001BAC4 361D                       		move.w	(a5)+,d3
0001BAC6 D769 000C                  		add.w	d3,$C(a1)
0001BACA 1344 001A                  		move.b	d4,$1A(a1)
0001BACE 5244                       		addq.w	#1,d4
0001BAD0 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BAD4                            
0001BAD4                            Obj83_BreakSnd:
0001BAD4 303C 00CB                  		move.w	#$CB,d0
0001BAD8 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BADE 4EF9 0000 F010             		jmp	DisplaySprite
0001BAE4                            ; ===========================================================================
0001BAE4 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BAE8 0120 00C0                  		dc.w $120, $C0
0001BAEC FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BAF0 0010 0000                  		dc.w $10, 0
0001BAF4 0000 0010                  		dc.w 0,	$10
0001BAF8 0010 0010                  		dc.w $10, $10
0001BAFC                            ; ---------------------------------------------------------------------------
0001BAFC                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BAFC                            ; ---------------------------------------------------------------------------
0001BAFC                            Map_obj83:
0001BAFC                            	include "_maps\obj83.asm"
0001BAFC                            ; ---------------------------------------------------------------------------
0001BAFC                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BAFC                            ; ---------------------------------------------------------------------------
0001BAFC 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BB00 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BB04 0000                       		dc.w byte_19D46-Map_obj83
0001BB06 01                         byte_19D1C:	dc.b 1
0001BB07 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BB0C 02                         byte_19D22:	dc.b 2
0001BB0D F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BB12 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BB17 00                         		dc.b 0
0001BB18 02                         byte_19D2E:	dc.b 2
0001BB19 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BB1E F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BB23 00                         		dc.b 0
0001BB24 02                         byte_19D3A:	dc.b 2
0001BB25 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BB2A F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BB2F 00                         		dc.b 0
0001BB30 02                         byte_19D46:	dc.b 2
0001BB31 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BB36 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BB3C 00                         		even
0001BB3C 00                         		even
0001BB3C                            
0001BB3C                            ; ===========================================================================
0001BB3C                            ; ---------------------------------------------------------------------------
0001BB3C                            ; Object 85 - Eggman (FZ)
0001BB3C                            ; ---------------------------------------------------------------------------
0001BB3C                            
0001BB3C                            Obj85_Delete:
0001BB3C 4EF9 0000 F04C             		jmp	DeleteObject
0001BB42                            ; ===========================================================================
0001BB42                            
0001BB42                            Obj85:					; XREF: Obj_Index
0001BB42 7000                       		moveq	#0,d0
0001BB44 1028 0024                  		move.b	$24(a0),d0
0001BB48 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BB4C 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BB50                            ; ===========================================================================
0001BB50 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BB52 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BB54 0000                       		dc.w loc_1A38E-Obj85_Index
0001BB56 0000                       		dc.w loc_1A346-Obj85_Index
0001BB58 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BB5A 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BB5C 0000                       		dc.w loc_1A264-Obj85_Index
0001BB5E                            
0001BB5E 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BB64 0001 B81E                  		dc.l Map_obj82		; mappings pointer
0001BB68 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BB6E 0000 0000                  		dc.l Map_obj84
0001BB72 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BB78 0000 0000                  		dc.l Map_FZBoss
0001BB7C 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BB82 0001 B81E                  		dc.l Map_obj82
0001BB86 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BB8C 0001 9B00                  		dc.l Map_Eggman
0001BB90 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BB96 0001 9B00                  		dc.l Map_Eggman
0001BB9A                            
0001BB9A 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BB9F 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BBA4 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BBA9 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BBAE 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BBB3 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BBB8                            ; ===========================================================================
0001BBB8                            
0001BBB8                            Obj85_Main:				; XREF: Obj85_Index
0001BBB8 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BBBC 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BBC0 2248                       		movea.l	a0,a1
0001BBC2 7205                       		moveq	#5,d1
0001BBC4 6000                       		bra.s	Obj85_LoadBoss
0001BBC6                            ; ===========================================================================
0001BBC6                            
0001BBC6                            Obj85_Loop:
0001BBC6 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001BBCC 6600                       		bne.s	loc_19E20
0001BBCE                            
0001BBCE                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BBCE 12BC 0085                  		move.b	#$85,(a1)
0001BBD2 335A 0008                  		move.w	(a2)+,8(a1)
0001BBD6 335A 000C                  		move.w	(a2)+,$C(a1)
0001BBDA 335A 0002                  		move.w	(a2)+,2(a1)
0001BBDE 235A 0004                  		move.l	(a2)+,4(a1)
0001BBE2 135B 0024                  		move.b	(a3)+,$24(a1)
0001BBE6 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BBEA 135B 0018                  		move.b	(a3)+,$18(a1)
0001BBEE 135B 0017                  		move.b	(a3)+,$17(a1)
0001BBF2 135B 0016                  		move.b	(a3)+,$16(a1)
0001BBF6 137C 0004 0001             		move.b	#4,1(a1)
0001BBFC 08E8 0007 0001             		bset	#7,1(a0)
0001BC02 2348 0034                  		move.l	a0,$34(a1)
0001BC06 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BC0A                            
0001BC0A                            loc_19E20:
0001BC0A 45E8 0036                  		lea	$36(a0),a2
0001BC0E 4EB9 0000 F496             		jsr	SingleObjLoad
0001BC14 6600                       		bne.s	loc_19E5A
0001BC16 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BC1A 3489                       		move.w	a1,(a2)
0001BC1C 2348 0034                  		move.l	a0,$34(a1)
0001BC20 45E8 0038                  		lea	$38(a0),a2
0001BC24 7400                       		moveq	#0,d2
0001BC26 7203                       		moveq	#3,d1
0001BC28                            
0001BC28                            loc_19E3E:
0001BC28 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001BC2E 6600                       		bne.s	loc_19E5A
0001BC30 34C9                       		move.w	a1,(a2)+
0001BC32 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BC36 2348 0034                  		move.l	a0,$34(a1)
0001BC3A 1342 0028                  		move.b	d2,$28(a1)
0001BC3E 5442                       		addq.w	#2,d2
0001BC40 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BC44                            
0001BC44                            loc_19E5A:
0001BC44 317C 0000 0034             		move.w	#0,$34(a0)
0001BC4A 117C 0008 0021             		move.b	#var_BHits_FZ,$21(a0)
0001BC50 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BC56                            
0001BC56                            Obj85_Eggman:				; XREF: Obj85_Index
0001BC56 7000                       		moveq	#0,d0
0001BC58 1028 0034                  		move.b	$34(a0),d0
0001BC5C 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BC60 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BC64 4EF9 0000 F010             		jmp	DisplaySprite
0001BC6A                            ; ===========================================================================
0001BC6A 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BC6E 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BC72 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BC76 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BC7A                            ; ===========================================================================
0001BC7A                            
0001BC7A                            loc_19E90:				; XREF: off_19E80
0001BC7A 4AB8 F680                  		tst.l	($FFFFF680).w
0001BC7E 6600                       		bne.s	loc_19EA2
0001BC80 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BC86 6500                       		bcs.s	loc_19EA2
0001BC88 5428 0034                  		addq.b	#2,$34(a0)
0001BC8C                            
0001BC8C                            loc_19EA2:
0001BC8C 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BC90 4E75                       		rts	
0001BC92                            ; ===========================================================================
0001BC92                            
0001BC92                            loc_19EA8:				; XREF: off_19E80
0001BC92 4A68 0030                  		tst.w	$30(a0)
0001BC96 6A00                       		bpl.s	loc_19F10
0001BC98 4268 0030                  		clr.w	$30(a0)
0001BC9C 4EB9 0000 2988             		jsr	(RandomNumber).l
0001BCA2 0240 000C                  		andi.w	#$C,d0
0001BCA6 3200                       		move.w	d0,d1
0001BCA8 5441                       		addq.w	#2,d1
0001BCAA 4A80                       		tst.l	d0
0001BCAC 6A00                       		bpl.s	loc_19EC6
0001BCAE C141                       		exg	d1,d0
0001BCB0                            
0001BCB0                            loc_19EC6:
0001BCB0 43FA 0000                  		lea	word_19FD6(pc),a1
0001BCB4 3031 0000                  		move.w	(a1,d0.w),d0
0001BCB8 3231 1000                  		move.w	(a1,d1.w),d1
0001BCBC 3140 0030                  		move.w	d0,$30(a0)
0001BCC0 74FF                       		moveq	#-1,d2
0001BCC2 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BCC6 2242                       		movea.l	d2,a1
0001BCC8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BCCE 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BCD4 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BCD8 2242                       		movea.l	d2,a1
0001BCDA 137C 0001 0029             		move.b	#1,$29(a1)
0001BCE0 337C 0000 0030             		move.w	#0,$30(a1)
0001BCE6 317C 0001 0032             		move.w	#1,$32(a0)
0001BCEC 4228 0035                  		clr.b	$35(a0)
0001BCF0 303C 00B7                  		move.w	#$B7,d0
0001BCF4 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BCFA                            
0001BCFA                            loc_19F10:
0001BCFA 4A68 0032                  		tst.w	$32(a0)
0001BCFE 6B00 0000                  		bmi.w	loc_19FA6
0001BD02 08A8 0000 0022             		bclr	#0,$22(a0)
0001BD08 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD0C 9068 0008                  		sub.w	8(a0),d0
0001BD10 6500                       		bcs.s	loc_19F2E
0001BD12 08E8 0000 0022             		bset	#0,$22(a0)
0001BD18                            
0001BD18                            loc_19F2E:
0001BD18 323C 002B                  		move.w	#$2B,d1
0001BD1C 343C 0014                  		move.w	#$14,d2
0001BD20 363C 0014                  		move.w	#$14,d3
0001BD24 3828 0008                  		move.w	8(a0),d4
0001BD28 4EB9 0001 13D0             		jsr	SolidObject
0001BD2E 4A44                       		tst.w	d4
0001BD30 6E00                       		bgt.s	loc_19F50
0001BD32                            
0001BD32                            loc_19F48:
0001BD32 4A28 0035                  		tst.b	$35(a0)
0001BD36 6600                       		bne.s	loc_19F88
0001BD38 6000                       		bra.s	loc_19F96
0001BD3A                            ; ===========================================================================
0001BD3A                            
0001BD3A                            loc_19F50:
0001BD3A 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BD3E 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BD44 66EC                       		bne.s	loc_19F48
0001BD46 303C 0300                  		move.w	#$300,d0
0001BD4A 0828 0000 0022             		btst	#0,$22(a0)
0001BD50 6600                       		bne.s	loc_19F6A
0001BD52 4440                       		neg.w	d0
0001BD54                            
0001BD54                            loc_19F6A:
0001BD54 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BD58 4A28 0035                  		tst.b	$35(a0)
0001BD5C 6600                       		bne.s	loc_19F88
0001BD5E 5328 0021                  		subq.b	#1,$21(a0)
0001BD62 117C 0064 0035             		move.b	#$64,$35(a0)
0001BD68 303C 00AC                  		move.w	#$AC,d0
0001BD6C 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BD72                            
0001BD72                            loc_19F88:
0001BD72 5328 0035                  		subq.b	#1,$35(a0)
0001BD76 6700                       		beq.s	loc_19F96
0001BD78 117C 0003 001C             		move.b	#3,$1C(a0)
0001BD7E 6000                       		bra.s	loc_19F9C
0001BD80                            ; ===========================================================================
0001BD80                            
0001BD80                            loc_19F96:
0001BD80 117C 0001 001C             		move.b	#1,$1C(a0)
0001BD86                            
0001BD86                            loc_19F9C:
0001BD86 43FA FA64                  		lea	Ani_obj82(pc),a1
0001BD8A 4EF9 0000 C10C             		jmp	AnimateSprite
0001BD90                            ; ===========================================================================
0001BD90                            
0001BD90                            loc_19FA6:
0001BD90 4A28 0021                  		tst.b	$21(a0)
0001BD94 6700                       		beq.s	loc_19FBC
0001BD96 5428 0034                  		addq.b	#2,$34(a0)
0001BD9A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BDA0 4268 0032                  		clr.w	$32(a0)
0001BDA4 4E75                       		rts	
0001BDA6                            ; ===========================================================================
0001BDA6                            
0001BDA6                            loc_19FBC:
0001BDA6 117C 0006 0034             		move.b	#6,$34(a0)
0001BDAC 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001BDB2 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BDB8 117C 0014 0016             		move.b	#$14,$16(a0)
0001BDBE 4E75                       		rts	
0001BDC0                            ; ===========================================================================
0001BDC0 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001BDD0                            ; ===========================================================================
0001BDD0                            
0001BDD0                            loc_19FE6:				; XREF: off_19E80
0001BDD0 70FF                       		moveq	#-1,d0
0001BDD2 3028 0036                  		move.w	$36(a0),d0
0001BDD6 2240                       		movea.l	d0,a1
0001BDD8 4A68 0030                  		tst.w	$30(a0)
0001BDDC 6A00                       		bpl.s	loc_1A000
0001BDDE 4268 0030                  		clr.w	$30(a0)
0001BDE2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BDE8 6100                       		bsr.s	loc_1A020
0001BDEA                            
0001BDEA                            loc_1A000:
0001BDEA 700F                       		moveq	#$F,d0
0001BDEC C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001BDF0 6600                       		bne.s	loc_1A00A
0001BDF2 6100                       		bsr.s	loc_1A020
0001BDF4                            
0001BDF4                            loc_1A00A:
0001BDF4 4A68 0032                  		tst.w	$32(a0)
0001BDF8 6700                       		beq.s	locret_1A01E
0001BDFA 5528 0034                  		subq.b	#2,$34(a0)
0001BDFE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BE04 4268 0032                  		clr.w	$32(a0)
0001BE08                            
0001BE08                            locret_1A01E:
0001BE08 4E75                       		rts	
0001BE0A                            ; ===========================================================================
0001BE0A                            
0001BE0A                            loc_1A020:
0001BE0A 303C 00B1                  		move.w	#$B1,d0
0001BE0E 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play electricity sound
0001BE14                            ; ===========================================================================
0001BE14                            
0001BE14                            loc_1A02A:				; XREF: off_19E80
0001BE14 117C 0030 0017             		move.b	#$30,$17(a0)
0001BE1A 08E8 0000 0022             		bset	#0,$22(a0)
0001BE20 4EB9 0000 EFEA             		jsr	SpeedToPos
0001BE26 117C 0006 001A             		move.b	#6,$1A(a0)
0001BE2C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BE32 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BE38 6500                       		bcs.s	loc_1A070
0001BE3A 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BE40 5428 0034                  		addq.b	#2,$34(a0)
0001BE44 117C 0020 0017             		move.b	#$20,$17(a0)
0001BE4A 317C 0100 0010             		move.w	#$100,$10(a0)
0001BE50 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BE56 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BE5A                            
0001BE5A                            loc_1A070:
0001BE5A 6000 0000                  		bra.w	loc_1A166
0001BE5E                            ; ===========================================================================
0001BE5E                            
0001BE5E                            loc_1A074:				; XREF: off_19E80
0001BE5E 08E8 0000 0022             		bset	#0,$22(a0)
0001BE64 117C 0004 001C             		move.b	#4,$1C(a0)
0001BE6A 4EB9 0000 EFEA             		jsr	SpeedToPos
0001BE70 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BE76 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BE7C 6500                       		bcs.s	loc_1A09A
0001BE7E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BE84                            
0001BE84                            loc_1A09A:
0001BE84 317C 0400 0010             		move.w	#$400,$10(a0)
0001BE8A 3028 0008                  		move.w	8(a0),d0
0001BE8E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BE92 6A00                       		bpl.s	loc_1A0B4
0001BE94 317C 0500 0010             		move.w	#$500,$10(a0)
0001BE9A 6000 0000                  		bra.w	loc_1A0F2
0001BE9E                            ; ===========================================================================
0001BE9E                            
0001BE9E                            loc_1A0B4:
0001BE9E 0440 0070                  		subi.w	#$70,d0
0001BEA2 6500                       		bcs.s	loc_1A0F2
0001BEA4 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BEAA 5140                       		subq.w	#8,d0
0001BEAC 6500                       		bcs.s	loc_1A0F2
0001BEAE 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BEB4 5140                       		subq.w	#8,d0
0001BEB6 6500                       		bcs.s	loc_1A0F2
0001BEB8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BEBE 5140                       		subq.w	#8,d0
0001BEC0 6500                       		bcs.s	loc_1A0F2
0001BEC2 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BEC8 5140                       		subq.w	#8,d0
0001BECA 6500                       		bcs.s	loc_1A0F2
0001BECC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BED2 0440 0038                  		subi.w	#$38,d0
0001BED6 6500                       		bcs.s	loc_1A0F2
0001BED8 4268 0010                  		clr.w	$10(a0)
0001BEDC                            
0001BEDC                            loc_1A0F2:
0001BEDC 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BEE2 6500                       		bcs.s	loc_1A110
0001BEE4 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BEEA 317C 0240 0010             		move.w	#$240,$10(a0)
0001BEF0 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BEF6 5428 0034                  		addq.b	#2,$34(a0)
0001BEFA                            
0001BEFA                            loc_1A110:
0001BEFA 6000                       		bra.s	loc_1A15C
0001BEFC                            ; ===========================================================================
0001BEFC                            
0001BEFC                            loc_1A112:				; XREF: off_19E80
0001BEFC 4EB9 0000 EFEA             		jsr	SpeedToPos
0001BF02 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BF08 6500                       		bcs.s	loc_1A124
0001BF0A 4268 0010                  		clr.w	$10(a0)
0001BF0E                            
0001BF0E                            loc_1A124:
0001BF0E 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BF14 4A68 0012                  		tst.w	$12(a0)
0001BF18 6B00                       		bmi.s	loc_1A142
0001BF1A 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BF20 6500                       		bcs.s	loc_1A142
0001BF22 317C 0592 000C             		move.w	#$592,$C(a0)
0001BF28 4268 0012                  		clr.w	$12(a0)
0001BF2C                            
0001BF2C                            loc_1A142:
0001BF2C 3028 0010                  		move.w	$10(a0),d0
0001BF30 8068 0012                  		or.w	$12(a0),d0
0001BF34 6600                       		bne.s	loc_1A15C
0001BF36 5428 0034                  		addq.b	#2,$34(a0)
0001BF3A 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BF40 117C 0001 0021             		move.b	#1,$21(a0)
0001BF46                            
0001BF46                            loc_1A15C:
0001BF46 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001BF4A 4EB9 0000 C10C             		jsr	AnimateSprite
0001BF50                            
0001BF50                            loc_1A166:
0001BF50 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BF56 6C00                       		bge.s	loc_1A172
0001BF58 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BF5C                            
0001BF5C                            loc_1A172:
0001BF5C 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BF62 6C00                       		bge.s	locret_1A190
0001BF64 323C 001B                  		move.w	#$1B,d1
0001BF68 343C 0070                  		move.w	#$70,d2
0001BF6C 363C 0071                  		move.w	#$71,d3
0001BF70 3828 0008                  		move.w	8(a0),d4
0001BF74 4EF9 0001 13D0             		jmp	SolidObject
0001BF7A                            ; ===========================================================================
0001BF7A                            
0001BF7A                            locret_1A190:
0001BF7A 4E75                       		rts	
0001BF7C                            ; ===========================================================================
0001BF7C                            
0001BF7C                            loc_1A192:				; XREF: off_19E80
0001BF7C 217C 0001 9B00 0004        		move.l	#Map_Eggman,4(a0)
0001BF84 317C 0400 0002             		move.w	#$400,2(a0)
0001BF8A 117C 0000 001C             		move.b	#0,$1C(a0)
0001BF90 08E8 0000 0022             		bset	#0,$22(a0)
0001BF96 4EB9 0000 EFEA             		jsr	SpeedToPos
0001BF9C 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BFA2 6400                       		bcc.s	loc_1A1D0
0001BFA4 317C 0180 0010             		move.w	#$180,$10(a0)
0001BFAA 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BFB0 117C 000F 0020             		move.b	#$F,$20(a0)
0001BFB6 5428 0034                  		addq.b	#2,$34(a0)
0001BFBA                            
0001BFBA                            loc_1A1D0:
0001BFBA 6000 FF8A                  		bra.w	loc_1A15C
0001BFBE                            ; ===========================================================================
0001BFBE                            
0001BFBE                            loc_1A1D4:				; XREF: off_19E80
0001BFBE 08E8 0000 0022             		bset	#0,$22(a0)
0001BFC4 4EB9 0000 EFEA             		jsr	SpeedToPos
0001BFCA 4A68 0030                  		tst.w	$30(a0)
0001BFCE 6600                       		bne.s	loc_1A1FC
0001BFD0 4A28 0020                  		tst.b	$20(a0)
0001BFD4 6600                       		bne.s	loc_1A216
0001BFD6 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BFDC 303C 00AC                  		move.w	#$AC,d0
0001BFE0 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BFE6                            
0001BFE6                            loc_1A1FC:
0001BFE6 5368 0030                  		subq.w	#1,$30(a0)
0001BFEA 6600                       		bne.s	loc_1A216
0001BFEC 4A28 0022                  		tst.b	$22(a0)
0001BFF0 6A00                       		bpl.s	loc_1A210
0001BFF2 317C 0060 0012             		move.w	#$60,$12(a0)
0001BFF8 6000                       		bra.s	loc_1A216
0001BFFA                            ; ===========================================================================
0001BFFA                            
0001BFFA                            loc_1A210:
0001BFFA 117C 000F 0020             		move.b	#$F,$20(a0)
0001C000                            
0001C000                            loc_1A216:
0001C000 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w	; is Sonic's X-axis more than $2790?
0001C006 6D00                       		blt.s	loc_1A23A		; if not, branch
0001C008 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w	; lock controls
0001C00E 31FC 0000 F602             		move.w	#0,(SonicControl)	; clear joypad input
0001C014 4278 D014                  		clr.w	($FFFFD014).w		; clear Sonic's inertia
0001C018 4A68 0012                  		tst.w	$12(a0)			; is sonic's Y speed positive?
0001C01C 6A00                       		bpl.s	loc_1A248		; if yes, branch
0001C01E 31FC 0100 F602             		move.w	#(Up)<<8,(SonicControl)	; hold Up button
0001C024                            
0001C024                            loc_1A23A:
0001C024 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w	; is Sonic's X-axis more than $27E0?
0001C02A 6D00                       		blt.s	loc_1A248		; if not, branch
0001C02C 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w	; set Sonic's X-axis to $27E0
0001C032                            
0001C032                            ; Vladikcomper:	Some code was changed to fit level order.
0001C032                            
0001C032                            loc_1A248:
0001C032 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C038 6500                       		bcs.s	loc_1A260
0001C03A 4A28 0001                  		tst.b	1(a0)
0001C03E 6B00                       		bmi.s	loc_1A260
0001C040 11FC 0018 F600             		move.b	#$18,($FFFFF600).w	; set game mode to Ending sequence
0001C046 45F9 0000 E0D8             		lea	LevelOrder,a2		; load level order array
0001C04C 302A 002C                  		move.w	$2C(a2),d0
0001C050 6700                       		beq.s	@RemoveObject
0001C052 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0001C056 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w 	; set restart level flag
0001C05C 11FC 000C F600                             move.b	#$C,($FFFFF600).w	; set game mode to level
0001C062                            
0001C062                            @RemoveObject:	
0001C062 6000 FAD8                  		bra.w	Obj85_Delete
0001C066                            ; ===========================================================================
0001C066                            
0001C066                            loc_1A260:
0001C066 6000 FEDE                  		bra.w	loc_1A15C
0001C06A                            ; ===========================================================================
0001C06A                            
0001C06A                            loc_1A264:				; XREF: Obj85_Index
0001C06A 2268 0034                  		movea.l	$34(a0),a1
0001C06E 1011                       		move.b	(a1),d0
0001C070 B010                       		cmp.b	(a0),d0
0001C072 6600 FAC8                  		bne.w	Obj85_Delete
0001C076 117C 0007 001C             		move.b	#7,$1C(a0)
0001C07C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C082 6C00                       		bge.s	loc_1A280
0001C084 6000                       		bra.s	loc_1A2A6
0001C086                            ; ===========================================================================
0001C086                            
0001C086                            loc_1A280:
0001C086 4A69 0010                  		tst.w	$10(a1)
0001C08A 6700                       		beq.s	loc_1A28C
0001C08C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C092                            
0001C092                            loc_1A28C:
0001C092 43FA DA1C                  		lea	Ani_Eggman(pc),a1
0001C096 4EB9 0000 C10C             		jsr	AnimateSprite
0001C09C                            
0001C09C                            loc_1A296:
0001C09C 2268 0034                  		movea.l	$34(a0),a1
0001C0A0 3169 0008 0008             		move.w	8(a1),8(a0)
0001C0A6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C0AC                            
0001C0AC                            loc_1A2A6:
0001C0AC 2268 0034                  		movea.l	$34(a0),a1
0001C0B0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C0B6 7003                       		moveq	#3,d0
0001C0B8 C028 0022                  		and.b	$22(a0),d0
0001C0BC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C0C2 8128 0001                  		or.b	d0,1(a0)
0001C0C6 4EF9 0000 F010             		jmp	DisplaySprite
0001C0CC                            ; ===========================================================================
0001C0CC                            
0001C0CC                            loc_1A2C6:				; XREF: Obj85_Index
0001C0CC 2268 0034                  		movea.l	$34(a0),a1
0001C0D0 1011                       		move.b	(a1),d0
0001C0D2 B010                       		cmp.b	(a0),d0
0001C0D4 6600 FA66                  		bne.w	Obj85_Delete
0001C0D8 0CA9 0001 9B00 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C0E0 6700                       		beq.s	loc_1A2E4
0001C0E2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C0E8 60C2                       		bra.s	loc_1A2A6
0001C0EA                            ; ===========================================================================
0001C0EA                            
0001C0EA                            loc_1A2E4:
0001C0EA 117C 0001 001C             		move.b	#1,$1C(a0)
0001C0F0 4A29 0021                  		tst.b	$21(a1)
0001C0F4 6F00                       		ble.s	loc_1A312
0001C0F6 117C 0006 001C             		move.b	#6,$1C(a0)
0001C0FC 217C 0001 9B00 0004        		move.l	#Map_Eggman,4(a0)
0001C104 317C 0400 0002             		move.w	#$400,2(a0)
0001C10A 43FA D9A4                  		lea	Ani_Eggman(pc),a1
0001C10E 4EB9 0000 C10C             		jsr	AnimateSprite
0001C114 6000 FF86                  		bra.w	loc_1A296
0001C118                            ; ===========================================================================
0001C118                            
0001C118                            loc_1A312:
0001C118 4A28 0001                  		tst.b	1(a0)
0001C11C 6A00 FA1E                  		bpl.w	Obj85_Delete
0001C120 6100 D53C                  		bsr.w	BossDefeated
0001C124 117C 0002 0018             		move.b	#2,$18(a0)
0001C12A 117C 0000 001C             		move.b	#0,$1C(a0)
0001C130 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C138 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C13E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C142 4EB9 0000 C10C             		jsr	AnimateSprite
0001C148 6000 FF52                  		bra.w	loc_1A296
0001C14C                            ; ===========================================================================
0001C14C                            
0001C14C                            loc_1A346:				; XREF: Obj85_Index
0001C14C 08E8 0000 0022             		bset	#0,$22(a0)
0001C152 2268 0034                  		movea.l	$34(a0),a1
0001C156 0CA9 0001 9B00 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C15E 6700                       		beq.s	loc_1A35E
0001C160 6000 FF4A                  		bra.w	loc_1A2A6
0001C164                            ; ===========================================================================
0001C164                            
0001C164                            loc_1A35E:
0001C164 3169 0008 0008             		move.w	8(a1),8(a0)
0001C16A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C170 4A28 001E                  		tst.b	$1E(a0)
0001C174 6600                       		bne.s	loc_1A376
0001C176 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C17C                            
0001C17C                            loc_1A376:
0001C17C 5328 001E                  		subq.b	#1,$1E(a0)
0001C180 6E00                       		bgt.s	loc_1A38A
0001C182 5228 001A                  		addq.b	#1,$1A(a0)
0001C186 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C18C 6E00 F9AE                  		bgt.w	Obj85_Delete
0001C190                            
0001C190                            loc_1A38A:
0001C190 6000 FF0A                  		bra.w	loc_1A296
0001C194                            ; ===========================================================================
0001C194                            
0001C194                            loc_1A38E:				; XREF: Obj85_Index
0001C194 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C19A 3038 D008                  		move.w	($FFFFD008).w,d0
0001C19E 9068 0008                  		sub.w	8(a0),d0
0001C1A2 6500                       		bcs.s	loc_1A3A6
0001C1A4 4A28 0001                  		tst.b	1(a0)
0001C1A8 6A00 F992                  		bpl.w	Obj85_Delete
0001C1AC                            
0001C1AC                            loc_1A3A6:
0001C1AC 4EF9 0000 F010             		jmp	DisplaySprite
0001C1B2                            ; ===========================================================================
0001C1B2                            
0001C1B2                            loc_1A3AC:				; XREF: Obj85_Index
0001C1B2 117C 0000 001A             		move.b	#0,$1A(a0)
0001C1B8 08E8 0000 0022             		bset	#0,$22(a0)
0001C1BE 2268 0034                  		movea.l	$34(a0),a1
0001C1C2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C1C8 6600                       		bne.s	loc_1A3D0
0001C1CA 0CA9 0001 9B00 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C1D2 6700 F968                  		beq.w	Obj85_Delete
0001C1D6                            
0001C1D6                            loc_1A3D0:
0001C1D6 6000 FED4                  		bra.w	loc_1A2A6
0001C1DA                            ; ===========================================================================
0001C1DA                            Ani_obj85:
0001C1DA                            	include "_anim\obj85.asm"
0001C1DA                            ; ---------------------------------------------------------------------------
0001C1DA                            ; Animation script - Eggman (FZ)
0001C1DA                            ; ---------------------------------------------------------------------------
0001C1DA 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C1DC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C1E0                            		even
0001C1E0                            		even
0001C1E0                            
0001C1E0                            Map_Eggman2:
0001C1E0                            	include "_maps\Eggman2.asm"
0001C1E0                            ; ---------------------------------------------------------------------------
0001C1E0                            ; Sprite mappings - Eggman (FZ)
0001C1E0                            ; ---------------------------------------------------------------------------
0001C1E0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C1E2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C1E4 06                         byte_1A3DE:	dc.b 6
0001C1E5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C1EA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C1EF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C1F4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C1F9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C1FE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C203 06                         byte_1A3FD:	dc.b 6
0001C204 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C209 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C20E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C213 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C218 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C21D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C222                            		even
0001C222                            		even
0001C222                            
0001C222                            Map_FZBoss:
0001C222                            	include "_maps\FZ boss.asm"
0001C222                            ; ---------------------------------------------------------------------------
0001C222                            ; Sprite mappings - boss (FZ)
0001C222                            ; ---------------------------------------------------------------------------
0001C222 0000                       		dc.w byte_1A422-Map_FZBoss
0001C224 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C226 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C228 02                         byte_1A422:	dc.b 2
0001C229 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C22E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C233 03                         byte_1A42D:	dc.b 3
0001C234 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C239 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C23E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C243 02                         byte_1A43D:	dc.b 2
0001C244 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C249 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C24E                            		even
0001C24E                            		even
0001C24E                            
0001C24E                            ; ===========================================================================
0001C24E                            
0001C24E                            Obj84_Delete:
0001C24E 4EF9 0000 F04C             		jmp	DeleteObject
0001C254                            ; ===========================================================================
0001C254                            ; ---------------------------------------------------------------------------
0001C254                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C254                            ; ---------------------------------------------------------------------------
0001C254                            
0001C254                            Obj84:					; XREF: Obj_Index
0001C254 7000                       		moveq	#0,d0
0001C256 1028 0024                  		move.b	$24(a0),d0
0001C25A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C25E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C262                            ; ===========================================================================
0001C262 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C264 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C266 0000                       		dc.w loc_1A57E-Obj84_Index
0001C268                            
0001C268 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C26C 2550 0620                  		dc.w $2550, $620
0001C270 2490 04C0                  		dc.w $2490, $4C0
0001C274 2510 04C0                  		dc.w $2510, $4C0
0001C278                            ; ===========================================================================
0001C278                            
0001C278                            Obj84_Main:				; XREF: Obj84_Index
0001C278 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C27C 7000                       		moveq	#0,d0
0001C27E 1028 0028                  		move.b	$28(a0),d0
0001C282 D040                       		add.w	d0,d0
0001C284 D2C0                       		adda.w	d0,a1
0001C286 117C 0004 0001             		move.b	#4,1(a0)
0001C28C 08E8 0007 0001             		bset	#7,1(a0)
0001C292 08E8 0004 0001             		bset	#4,1(a0)
0001C298 317C 0300 0002             		move.w	#$300,2(a0)
0001C29E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C2A6 3159 0008                  		move.w	(a1)+,8(a0)
0001C2AA 3151 000C                  		move.w	(a1),$C(a0)
0001C2AE 3159 0038                  		move.w	(a1)+,$38(a0)
0001C2B2 117C 0020 0016             		move.b	#$20,$16(a0)
0001C2B8 117C 0060 0017             		move.b	#$60,$17(a0)
0001C2BE 117C 0020 0019             		move.b	#$20,$19(a0)
0001C2C4 117C 0060 0016             		move.b	#$60,$16(a0)
0001C2CA 117C 0003 0018             		move.b	#3,$18(a0)
0001C2D0 5428 0024                  		addq.b	#2,$24(a0)
0001C2D4                            
0001C2D4                            loc_1A4CE:				; XREF: Obj84_Index
0001C2D4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C2DA 6F00                       		ble.s	loc_1A4DC
0001C2DC 08E8 0001 0001             		bset	#1,1(a0)
0001C2E2                            
0001C2E2                            loc_1A4DC:
0001C2E2 42A8 003C                  		clr.l	$3C(a0)
0001C2E6 4A28 0029                  		tst.b	$29(a0)
0001C2EA 6700                       		beq.s	loc_1A4EA
0001C2EC 5428 0024                  		addq.b	#2,$24(a0)
0001C2F0                            
0001C2F0                            loc_1A4EA:
0001C2F0 2028 003C                  		move.l	$3C(a0),d0
0001C2F4 2228 0038                  		move.l	$38(a0),d1
0001C2F8 D280                       		add.l	d0,d1
0001C2FA 4841                       		swap	d1
0001C2FC 3141 000C                  		move.w	d1,$C(a0)
0001C300 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C306 6600                       		bne.s	loc_1A524
0001C308 4A68 0030                  		tst.w	$30(a0)
0001C30C 6A00                       		bpl.s	loc_1A524
0001C30E 70F6                       		moveq	#-$A,d0
0001C310 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C316 6F00                       		ble.s	loc_1A514
0001C318 700E                       		moveq	#$E,d0
0001C31A                            
0001C31A                            loc_1A514:
0001C31A D240                       		add.w	d0,d1
0001C31C 2268 0034                  		movea.l	$34(a0),a1
0001C320 3341 000C                  		move.w	d1,$C(a1)
0001C324 3368 0008 0008             		move.w	8(a0),8(a1)
0001C32A                            
0001C32A                            loc_1A524:
0001C32A 323C 002B                  		move.w	#$2B,d1
0001C32E 343C 0060                  		move.w	#$60,d2
0001C332 363C 0061                  		move.w	#$61,d3
0001C336 3828 0008                  		move.w	8(a0),d4
0001C33A 4EB9 0001 13D0             		jsr	SolidObject
0001C340 7000                       		moveq	#0,d0
0001C342 3228 003C                  		move.w	$3C(a0),d1
0001C346 6A00                       		bpl.s	loc_1A550
0001C348 4441                       		neg.w	d1
0001C34A 5141                       		subq.w	#8,d1
0001C34C 6500                       		bcs.s	loc_1A55C
0001C34E 5200                       		addq.b	#1,d0
0001C350 E841                       		asr.w	#4,d1
0001C352 D041                       		add.w	d1,d0
0001C354 6000                       		bra.s	loc_1A55C
0001C356                            ; ===========================================================================
0001C356                            
0001C356                            loc_1A550:
0001C356 0441 0027                  		subi.w	#$27,d1
0001C35A 6500                       		bcs.s	loc_1A55C
0001C35C 5200                       		addq.b	#1,d0
0001C35E E841                       		asr.w	#4,d1
0001C360 D041                       		add.w	d1,d0
0001C362                            
0001C362                            loc_1A55C:
0001C362 1140 001A                  		move.b	d0,$1A(a0)
0001C366 3038 D008                  		move.w	($FFFFD008).w,d0
0001C36A 9068 0008                  		sub.w	8(a0),d0
0001C36E 6B00                       		bmi.s	loc_1A578
0001C370 0440 0140                  		subi.w	#$140,d0
0001C374 6B00                       		bmi.s	loc_1A578
0001C376 4A28 0001                  		tst.b	1(a0)
0001C37A 6A00 FED2                  		bpl.w	Obj84_Delete
0001C37E                            
0001C37E                            loc_1A578:
0001C37E 4EF9 0000 F010             		jmp	DisplaySprite
0001C384                            ; ===========================================================================
0001C384                            
0001C384                            loc_1A57E:				; XREF: Obj84_Index
0001C384 7000                       		moveq	#0,d0
0001C386 1028 0028                  		move.b	$28(a0),d0
0001C38A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C38E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C392 6000 FF5C                  		bra.w	loc_1A4EA
0001C396                            ; ===========================================================================
0001C396 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C398 0000                       		dc.w loc_1A598-off_1A590
0001C39A 0000                       		dc.w loc_1A604-off_1A590
0001C39C 0000                       		dc.w loc_1A604-off_1A590
0001C39E                            ; ===========================================================================
0001C39E                            
0001C39E                            loc_1A598:				; XREF: off_1A590
0001C39E 4A28 0029                  		tst.b	$29(a0)
0001C3A2 6600                       		bne.s	loc_1A5D4
0001C3A4 2268 0034                  		movea.l	$34(a0),a1
0001C3A8 4A29 0021                  		tst.b	$21(a1)
0001C3AC 6600                       		bne.s	loc_1A5B4
0001C3AE 6100 D2AE                  		bsr.w	BossDefeated
0001C3B2 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C3BA                            
0001C3BA                            loc_1A5B4:
0001C3BA 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C3C2 6400                       		bcc.s	locret_1A602
0001C3C4 42A8 003C                  		clr.l	$3C(a0)
0001C3C8 2268 0034                  		movea.l	$34(a0),a1
0001C3CC 5369 0032                  		subq.w	#1,$32(a1)
0001C3D0 4269 0030                  		clr.w	$30(a1)
0001C3D4 5528 0024                  		subq.b	#2,$24(a0)
0001C3D8 4E75                       		rts	
0001C3DA                            ; ===========================================================================
0001C3DA                            
0001C3DA                            loc_1A5D4:
0001C3DA 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C3E0 6C00                       		bge.s	loc_1A5E4
0001C3E2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C3EA                            
0001C3EA                            loc_1A5E4:
0001C3EA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C3F2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C3F8 6E00                       		bgt.s	locret_1A602
0001C3FA 4268 003E                  		clr.w	$3E(a0)
0001C3FE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C404 4228 0029                  		clr.b	$29(a0)
0001C408                            
0001C408                            locret_1A602:
0001C408 4E75                       		rts	
0001C40A                            ; ===========================================================================
0001C40A                            
0001C40A                            loc_1A604:				; XREF: off_1A590
0001C40A 08E8 0001 0001             		bset	#1,1(a0)
0001C410 4A28 0029                  		tst.b	$29(a0)
0001C414 6600                       		bne.s	loc_1A646
0001C416 2268 0034                  		movea.l	$34(a0),a1
0001C41A 4A29 0021                  		tst.b	$21(a1)
0001C41E 6600                       		bne.s	loc_1A626
0001C420 6100 D23C                  		bsr.w	BossDefeated
0001C424 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C42C                            
0001C42C                            loc_1A626:
0001C42C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C434 6400                       		bcc.s	locret_1A674
0001C436 42A8 003C                  		clr.l	$3C(a0)
0001C43A 2268 0034                  		movea.l	$34(a0),a1
0001C43E 5369 0032                  		subq.w	#1,$32(a1)
0001C442 4269 0030                  		clr.w	$30(a1)
0001C446 5528 0024                  		subq.b	#2,$24(a0)
0001C44A 4E75                       		rts	
0001C44C                            ; ===========================================================================
0001C44C                            
0001C44C                            loc_1A646:
0001C44C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C452 6D00                       		blt.s	loc_1A656
0001C454 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C45C                            
0001C45C                            loc_1A656:
0001C45C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C464 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C46A 6D00                       		blt.s	locret_1A674
0001C46C 4268 003E                  		clr.w	$3E(a0)
0001C470 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C476 4228 0029                  		clr.b	$29(a0)
0001C47A                            
0001C47A                            locret_1A674:
0001C47A 4E75                       		rts	
0001C47C                            ; ===========================================================================
0001C47C                            ; ---------------------------------------------------------------------------
0001C47C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C47C                            ; ---------------------------------------------------------------------------
0001C47C                            Map_obj84:
0001C47C                            	include "_maps\obj84.asm"
0001C47C                            ; ---------------------------------------------------------------------------
0001C47C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C47C                            ; ---------------------------------------------------------------------------
0001C47C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C480 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C484 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C488 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C48C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C490 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C494 06                         byte_1A68E:	dc.b 6
0001C495 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C49A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C49F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C4A4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C4A9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C4AE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C4B3 08                         byte_1A6AD:	dc.b 8
0001C4B4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C4B9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C4BE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C4C3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C4C8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C4CD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C4D2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C4D7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C4DC 0A                         byte_1A6D6:	dc.b $A
0001C4DD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C4E2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C4E7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C4EC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C4F1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C4F6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C4FB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C500 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C505 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C50A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C50F 0C                         byte_1A709:	dc.b $C
0001C510 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C515 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C51A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C51F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C524 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C529 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C52E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C533 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C538 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C53D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C542 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C547 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C54C 0D                         byte_1A746:	dc.b $D
0001C54D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C552 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C557 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C55C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C561 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C566 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C56B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C570 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C575 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C57A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C57F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C584 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C589 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C58E 0E                         byte_1A788:	dc.b $E
0001C58F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C594 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C599 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C59E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C5A3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C5A8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C5AD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C5B2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C5B7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C5BC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C5C1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C5C6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C5CB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C5D0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C5D5 02                         byte_1A7CF:	dc.b 2
0001C5D6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C5DB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C5E0                            		even
0001C5E0                            		even
0001C5E0                            
0001C5E0                            ; ===========================================================================
0001C5E0                            ; ---------------------------------------------------------------------------
0001C5E0                            ; Object 86 - energy balls (FZ)
0001C5E0                            ; ---------------------------------------------------------------------------
0001C5E0                            
0001C5E0                            Obj86:					; XREF: Obj_Index
0001C5E0 7000                       		moveq	#0,d0
0001C5E2 1028 0024                  		move.b	$24(a0),d0
0001C5E6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C5EA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C5EE                            ; ===========================================================================
0001C5EE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C5F0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C5F2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C5F4 0000                       		dc.w loc_1A962-Obj86_Index
0001C5F6 0000                       		dc.w loc_1A982-Obj86_Index
0001C5F8                            ; ===========================================================================
0001C5F8                            
0001C5F8                            Obj86_Main:				; XREF: Obj86_Index
0001C5F8 317C 2588 0008             		move.w	#$2588,8(a0)
0001C5FE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C604 317C 0300 0002             		move.w	#$300,2(a0)
0001C60A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C612 117C 0000 001C             		move.b	#0,$1C(a0)
0001C618 117C 0003 0018             		move.b	#3,$18(a0)
0001C61E 117C 0008 0017             		move.b	#8,$17(a0)
0001C624 117C 0008 0016             		move.b	#8,$16(a0)
0001C62A 117C 0004 0001             		move.b	#4,1(a0)
0001C630 08E8 0007 0001             		bset	#7,1(a0)
0001C636 5428 0024                  		addq.b	#2,$24(a0)
0001C63A                            
0001C63A                            Obj86_Generator:			; XREF: Obj86_Index
0001C63A 2268 0034                  		movea.l	$34(a0),a1
0001C63E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C644 6600                       		bne.s	loc_1A850
0001C646 10BC 003F                  		move.b	#$3F,(a0)
0001C64A 117C 0000 0024             		move.b	#0,$24(a0)
0001C650 4EF9 0000 F010             		jmp	DisplaySprite
0001C656                            ; ===========================================================================
0001C656                            
0001C656                            loc_1A850:
0001C656 117C 0000 001C             		move.b	#0,$1C(a0)
0001C65C 4A28 0029                  		tst.b	$29(a0)
0001C660 6700                       		beq.s	loc_1A86C
0001C662 5428 0024                  		addq.b	#2,$24(a0)
0001C666 117C 0001 001C             		move.b	#1,$1C(a0)
0001C66C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C672                            
0001C672                            loc_1A86C:
0001C672 323C 0013                  		move.w	#$13,d1
0001C676 343C 0008                  		move.w	#8,d2
0001C67A 363C 0011                  		move.w	#$11,d3
0001C67E 3828 0008                  		move.w	8(a0),d4
0001C682 4EB9 0001 13D0             		jsr	SolidObject
0001C688 3038 D008                  		move.w	($FFFFD008).w,d0
0001C68C 9068 0008                  		sub.w	8(a0),d0
0001C690 6B00                       		bmi.s	loc_1A89A
0001C692 0440 0140                  		subi.w	#$140,d0
0001C696 6B00                       		bmi.s	loc_1A89A
0001C698 4A28 0001                  		tst.b	1(a0)
0001C69C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C6A0                            
0001C6A0                            loc_1A89A:
0001C6A0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C6A4 4EB9 0000 C10C             		jsr	AnimateSprite
0001C6AA 4EF9 0000 F010             		jmp	DisplaySprite
0001C6B0                            ; ===========================================================================
0001C6B0                            
0001C6B0                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C6B0 4A28 0029                  		tst.b	$29(a0)
0001C6B4 6700 0000                  		beq.w	loc_1A954
0001C6B8 4228 0029                  		clr.b	$29(a0)
0001C6BC D068 0030                  		add.w	$30(a0),d0
0001C6C0 0240 001E                  		andi.w	#$1E,d0
0001C6C4 D4C0                       		adda.w	d0,a2
0001C6C6 5868 0030                  		addq.w	#4,$30(a0)
0001C6CA 4268 0032                  		clr.w	$32(a0)
0001C6CE 7403                       		moveq	#3,d2
0001C6D0                            
0001C6D0                            Obj86_Loop:
0001C6D0 4EB9 0000 F4AC             		jsr	SingleObjLoad2
0001C6D6 6600 0000                  		bne.w	loc_1A954
0001C6DA 12BC 0086                  		move.b	#$86,(a1)
0001C6DE 3368 0008 0008             		move.w	8(a0),8(a1)
0001C6E4 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C6EA 137C 0008 0024             		move.b	#8,$24(a1)
0001C6F0 337C 2300 0002             		move.w	#$2300,2(a1)
0001C6F6 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C6FE 137C 000C 0016             		move.b	#$C,$16(a1)
0001C704 137C 000C 0017             		move.b	#$C,$17(a1)
0001C70A 137C 0000 0020             		move.b	#0,$20(a1)
0001C710 137C 0003 0018             		move.b	#3,$18(a1)
0001C716 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C71C 137C 0004 0001             		move.b	#4,1(a1)
0001C722 08E9 0007 0001             		bset	#7,1(a1)
0001C728 2348 0034                  		move.l	a0,$34(a1)
0001C72C 4EB9 0000 2988             		jsr	(RandomNumber).l
0001C732 3228 0032                  		move.w	$32(a0),d1
0001C736 C3FC FFB1                  		muls.w	#-$4F,d1
0001C73A 0641 2578                  		addi.w	#$2578,d1
0001C73E 0240 001F                  		andi.w	#$1F,d0
0001C742 0440 0010                  		subi.w	#$10,d0
0001C746 D041                       		add.w	d1,d0
0001C748 3340 0030                  		move.w	d0,$30(a1)
0001C74C 5268 0032                  		addq.w	#1,$32(a0)
0001C750 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C756 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C75A                            
0001C75A                            loc_1A954:
0001C75A 4A68 0032                  		tst.w	$32(a0)
0001C75E 6600                       		bne.s	loc_1A95E
0001C760 5428 0024                  		addq.b	#2,$24(a0)
0001C764                            
0001C764                            loc_1A95E:
0001C764 6000 FF0C                  		bra.w	loc_1A86C
0001C768                            ; ===========================================================================
0001C768                            
0001C768                            loc_1A962:				; XREF: Obj86_Index
0001C768 117C 0002 001C             		move.b	#2,$1C(a0)
0001C76E 4A68 0038                  		tst.w	$38(a0)
0001C772 6600                       		bne.s	loc_1A97E
0001C774 117C 0002 0024             		move.b	#2,$24(a0)
0001C77A 2268 0034                  		movea.l	$34(a0),a1
0001C77E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C784                            
0001C784                            loc_1A97E:
0001C784 6000 FEEC                  		bra.w	loc_1A86C
0001C788                            ; ===========================================================================
0001C788                            
0001C788                            loc_1A982:				; XREF: Obj86_Index
0001C788 7000                       		moveq	#0,d0
0001C78A 1028 0025                  		move.b	$25(a0),d0
0001C78E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C792 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C796 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C79A 4EB9 0000 C10C             		jsr	AnimateSprite
0001C7A0 4EF9 0000 F010             		jmp	DisplaySprite
0001C7A6                            ; ===========================================================================
0001C7A6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C7A8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C7AA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C7AC                            ; ===========================================================================
0001C7AC                            
0001C7AC                            loc_1A9A6:				; XREF: Obj86_Index2
0001C7AC 3028 0030                  		move.w	$30(a0),d0
0001C7B0 9068 0008                  		sub.w	8(a0),d0
0001C7B4 E940                       		asl.w	#4,d0
0001C7B6 3140 0010                  		move.w	d0,$10(a0)
0001C7BA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C7C0 5428 0025                  		addq.b	#2,$25(a0)
0001C7C4 4E75                       		rts
0001C7C6                            ; ===========================================================================
0001C7C6                            
0001C7C6                            loc_1A9C0:				; XREF: Obj86_Index2
0001C7C6 4A68 0010                  		tst.w	$10(a0)
0001C7CA 6700                       		beq.s	loc_1A9E6
0001C7CC 4EB9 0000 EFEA             		jsr	SpeedToPos
0001C7D2 3028 0008                  		move.w	8(a0),d0
0001C7D6 9068 0030                  		sub.w	$30(a0),d0
0001C7DA 6400                       		bcc.s	loc_1A9E6
0001C7DC 4268 0010                  		clr.w	$10(a0)
0001C7E0 D168 0008                  		add.w	d0,8(a0)
0001C7E4 2268 0034                  		movea.l	$34(a0),a1
0001C7E8 5369 0032                  		subq.w	#1,$32(a1)
0001C7EC                            
0001C7EC                            loc_1A9E6:
0001C7EC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C7F2 5368 0028                  		subq.w	#1,$28(a0)
0001C7F6 6600                       		bne.s	locret_1AA1C
0001C7F8 5428 0025                  		addq.b	#2,$25(a0)
0001C7FC 117C 0001 001C             		move.b	#1,$1C(a0)
0001C802 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C808 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C80E 7000                       		moveq	#0,d0
0001C810 3038 D008                  		move.w	($FFFFD008).w,d0
0001C814 9068 0008                  		sub.w	8(a0),d0
0001C818 3140 0010                  		move.w	d0,$10(a0)
0001C81C 317C 0140 0012             		move.w	#$140,$12(a0)
0001C822                            
0001C822                            locret_1AA1C:
0001C822 4E75                       		rts
0001C824                            ; ===========================================================================
0001C824                            
0001C824                            loc_1AA1E:				; XREF: Obj86_Index2
0001C824 4EB9 0000 EFEA             		jsr	SpeedToPos
0001C82A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C830 6400                       		bcc.s	loc_1AA34
0001C832 5368 0028                  		subq.w	#1,$28(a0)
0001C836 6700                       		beq.s	loc_1AA34
0001C838 4E75                       		rts
0001C83A                            ; ===========================================================================
0001C83A                            
0001C83A                            loc_1AA34:
0001C83A 2268 0034                  		movea.l	$34(a0),a1
0001C83E 5369 0038                  		subq.w	#1,$38(a1)
0001C842 6000 FA0A                  		bra.w	Obj84_Delete
0001C846                            ; ===========================================================================
0001C846                            Ani_obj86:
0001C846                            	include "_anim\obj86.asm"
0001C846                            ; ---------------------------------------------------------------------------
0001C846                            ; Animation script - energy ball launcher (FZ)
0001C846                            ; ---------------------------------------------------------------------------
0001C846 0000                       		dc.w byte_1AA46-Ani_obj86
0001C848 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C84A 0000                       		dc.w byte_1AA50-Ani_obj86
0001C84C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C850 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C856 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C85C                            		even
0001C85C                            		even
0001C85C                            
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C                            ; Sprite mappings - energy ball	launcher (FZ)
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C                            Map_obj86:
0001C85C                            	include "_maps\obj86.asm"
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C                            ; Sprite mappings - energy ball	launcher (FZ)
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C860 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C864 01                         byte_1AA5E:	dc.b 1
0001C865 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C86A 01                         byte_1AA64:	dc.b 1
0001C86B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C870 01                         byte_1AA6A:	dc.b 1
0001C871 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C876 01                         byte_1AA70:	dc.b 1
0001C877 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C87C                            		even
0001C87C                            		even
0001C87C                            
0001C87C                            Ani_obj86a:
0001C87C                            	include "_anim\obj86a.asm"
0001C87C                            ; ---------------------------------------------------------------------------
0001C87C                            ; Animation script - energy balls (FZ)
0001C87C                            ; ---------------------------------------------------------------------------
0001C87C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C87E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C880 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C88F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C89E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C8A2 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C8AC                            		even
0001C8AC                            		even
0001C8AC                            
0001C8AC                            ; ---------------------------------------------------------------------------
0001C8AC                            ; Sprite mappings - energy balls (FZ)
0001C8AC                            ; ---------------------------------------------------------------------------
0001C8AC                            Map_obj86a:
0001C8AC                            	include "_maps\obj86a.asm"
0001C8AC                            ; ---------------------------------------------------------------------------
0001C8AC                            ; Sprite mappings - energy balls (FZ)
0001C8AC                            ; ---------------------------------------------------------------------------
0001C8AC 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C8B0 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C8B4 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C8B8 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C8BC 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C8C0 0000                       		dc.w byte_1AB20-Map_obj86a
0001C8C2 02                         byte_1AABC:	dc.b 2
0001C8C3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C8C8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C8CD 02                         byte_1AAC7:	dc.b 2
0001C8CE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C8D3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C8D8 02                         byte_1AAD2:	dc.b 2
0001C8D9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C8DE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C8E3 02                         byte_1AADD:	dc.b 2
0001C8E4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C8E9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C8EE 02                         byte_1AAE8:	dc.b 2
0001C8EF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C8F4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C8F9 02                         byte_1AAF3:	dc.b 2
0001C8FA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C8FF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C904 01                         byte_1AAFE:	dc.b 1
0001C905 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C90A 01                         byte_1AB04:	dc.b 1
0001C90B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C910 02                         byte_1AB0A:	dc.b 2
0001C911 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C916 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C91B 02                         byte_1AB15:	dc.b 2
0001C91C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C921 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C926 00                         byte_1AB20:	dc.b 0
0001C928 00                         		even
0001C928 00                         		even
0001C928                            
0001C928                            ; ===========================================================================
0001C928                            ; ---------------------------------------------------------------------------
0001C928                            ; Object 3E - prison capsule
0001C928                            ; ---------------------------------------------------------------------------
0001C928                            
0001C928                            Obj3E:					; XREF: Obj_Index
0001C928 7000                       		moveq	#0,d0
0001C92A 1028 0024                  		move.b	$24(a0),d0
0001C92E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C932 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C936 3028 0008                  		move.w	8(a0),d0
0001C93A 0240 FF80                  		andi.w	#$FF80,d0
0001C93E 3238 F700                  		move.w	($FFFFF700).w,d1
0001C942 0441 0080                  		subi.w	#$80,d1
0001C946 0241 FF80                  		andi.w	#$FF80,d1
0001C94A 9041                       		sub.w	d1,d0
0001C94C 0C40 0280                  		cmpi.w	#$280,d0
0001C950 6200                       		bhi.s	Obj3E_Delete
0001C952 4EF9 0000 F010             		jmp	DisplaySprite
0001C958                            ; ===========================================================================
0001C958                            
0001C958                            Obj3E_Delete:
0001C958 4EF9 0000 F04C             		jmp	DeleteObject
0001C95E                            ; ===========================================================================
0001C95E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C960 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C962 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C964 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C966 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C968 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C96A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C96C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C96E                            
0001C96E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C972 040C 0501                  		dc.b 4,	$C, 5, 1
0001C976 0610 0403                  		dc.b 6,	$10, 4,	3
0001C97A 0810 0305                  		dc.b 8,	$10, 3,	5
0001C97E                            ; ===========================================================================
0001C97E                            
0001C97E                            Obj3E_Main:				; XREF: Obj3E_Index
0001C97E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C986 317C 049D 0002             		move.w	#$49D,2(a0)
0001C98C 117C 0004 0001             		move.b	#4,1(a0)
0001C992 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C998 7000                       		moveq	#0,d0
0001C99A 1028 0028                  		move.b	$28(a0),d0
0001C99E E548                       		lsl.w	#2,d0
0001C9A0 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C9A4 1159 0024                  		move.b	(a1)+,$24(a0)
0001C9A8 1159 0019                  		move.b	(a1)+,$19(a0)
0001C9AC 1159 0018                  		move.b	(a1)+,$18(a0)
0001C9B0 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C9B4 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C9B8 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C9BA 117C 0006 0020             		move.b	#6,$20(a0)
0001C9C0 117C 0008 0021             		move.b	#8,$21(a0)
0001C9C6                            
0001C9C6                            Obj3E_Not02:
0001C9C6 4E75                       		rts	
0001C9C8                            ; ===========================================================================
0001C9C8                            
0001C9C8                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C9C8 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C9CE 6700                       		beq.s	Obj3E_ChkOpened
0001C9D0 323C 002B                  		move.w	#$2B,d1
0001C9D4 343C 0018                  		move.w	#$18,d2
0001C9D8 363C 0018                  		move.w	#$18,d3
0001C9DC 3828 0008                  		move.w	8(a0),d4
0001C9E0 4EF9 0001 13D0             		jmp	SolidObject
0001C9E6                            ; ===========================================================================
0001C9E6                            
0001C9E6                            Obj3E_ChkOpened:
0001C9E6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C9EA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C9EC 4228 0025                  		clr.b	$25(a0)
0001C9F0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C9F6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C9FC                            
0001C9FC                            Obj3E_DoOpen:
0001C9FC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CA02 4E75                       		rts	
0001CA04                            ; ===========================================================================
0001CA04                            
0001CA04                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CA04 323C 0017                  		move.w	#$17,d1
0001CA08 343C 0008                  		move.w	#8,d2
0001CA0C 363C 0008                  		move.w	#8,d3
0001CA10 3828 0008                  		move.w	8(a0),d4
0001CA14 4EB9 0001 13D0             		jsr	SolidObject
0001CA1A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CA20 4EB9 0000 C10C             		jsr	AnimateSprite
0001CA26 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CA2C 4A28 0025                  		tst.b	$25(a0)
0001CA30 6700                       		beq.s	locret_1AC60
0001CA32 5068 000C                  		addq.w	#8,$C(a0)
0001CA36 117C 000A 0024             		move.b	#$A,$24(a0)
0001CA3C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CA42 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CA46 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CA4A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CA50 31FC 0800 F602             		move.w	#(Right)<<8,(SonicControl) ; make Sonic run to the right
0001CA56 4228 0025                  		clr.b	$25(a0)
0001CA5A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CA60 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CA66                            
0001CA66                            locret_1AC60:
0001CA66 4E75                       		rts	
0001CA68                            ; ===========================================================================
0001CA68                            
0001CA68                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CA68 7007                       		moveq	#7,d0
0001CA6A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CA6E 6600                       		bne.s	loc_1ACA0
0001CA70 4EB9 0000 F496             		jsr	SingleObjLoad
0001CA76 6600                       		bne.s	loc_1ACA0
0001CA78 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CA7C 3368 0008 0008             		move.w	8(a0),8(a1)
0001CA82 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CA88 4EB9 0000 2988             		jsr	(RandomNumber).l
0001CA8E 7200                       		moveq	#0,d1
0001CA90 1200                       		move.b	d0,d1
0001CA92 E409                       		lsr.b	#2,d1
0001CA94 0441 0020                  		subi.w	#$20,d1
0001CA98 D369 0008                  		add.w	d1,8(a1)
0001CA9C E048                       		lsr.w	#8,d0
0001CA9E E608                       		lsr.b	#3,d0
0001CAA0 D169 000C                  		add.w	d0,$C(a1)
0001CAA4                            
0001CAA4                            loc_1ACA0:
0001CAA4 5368 001E                  		subq.w	#1,$1E(a0)
0001CAA8 6700                       		beq.s	Obj3E_MakeAnimal
0001CAAA 4E75                       		rts	
0001CAAC                            ; ===========================================================================
0001CAAC                            
0001CAAC                            Obj3E_MakeAnimal:
0001CAAC 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CAB2 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CAB8 117C 0006 001A             		move.b	#6,$1A(a0)
0001CABE 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CAC4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CACA 7C07                       		moveq	#7,d6
0001CACC 3A3C 009A                  		move.w	#$9A,d5
0001CAD0 78E4                       		moveq	#-$1C,d4
0001CAD2                            
0001CAD2                            Obj3E_Loop:
0001CAD2 4EB9 0000 F496             		jsr	SingleObjLoad
0001CAD8 6600                       		bne.s	locret_1ACF8
0001CADA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CADE 3368 0008 0008             		move.w	8(a0),8(a1)
0001CAE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CAEA D969 0008                  		add.w	d4,8(a1)
0001CAEE 5E44                       		addq.w	#7,d4
0001CAF0 3345 0036                  		move.w	d5,$36(a1)
0001CAF4 5145                       		subq.w	#8,d5
0001CAF6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CAFA                            
0001CAFA                            locret_1ACF8:
0001CAFA 4E75                       		rts	
0001CAFC                            ; ===========================================================================
0001CAFC                            
0001CAFC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CAFC 7007                       		moveq	#7,d0
0001CAFE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CB02 6600                       		bne.s	loc_1AD38
0001CB04 4EB9 0000 F496             		jsr	SingleObjLoad
0001CB0A 6600                       		bne.s	loc_1AD38
0001CB0C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CB10 3368 0008 0008             		move.w	8(a0),8(a1)
0001CB16 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CB1C 4EB9 0000 2988             		jsr	(RandomNumber).l
0001CB22 0240 001F                  		andi.w	#$1F,d0
0001CB26 5D40                       		subq.w	#6,d0
0001CB28 4A41                       		tst.w	d1
0001CB2A 6A00                       		bpl.s	loc_1AD2E
0001CB2C 4440                       		neg.w	d0
0001CB2E                            
0001CB2E                            loc_1AD2E:
0001CB2E D169 0008                  		add.w	d0,8(a1)
0001CB32 337C 000C 0036             		move.w	#$C,$36(a1)
0001CB38                            
0001CB38                            loc_1AD38:
0001CB38 5368 001E                  		subq.w	#1,$1E(a0)
0001CB3C 6600                       		bne.s	locret_1AD48
0001CB3E 5428 0024                  		addq.b	#2,$24(a0)
0001CB42 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CB48                            
0001CB48                            locret_1AD48:
0001CB48 4E75                       		rts	
0001CB4A                            ; ===========================================================================
0001CB4A                            
0001CB4A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CB4A 703E                       		moveq	#$3E,d0
0001CB4C 7228                       		moveq	#$28,d1
0001CB4E 7440                       		moveq	#$40,d2
0001CB50 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CB54                            
0001CB54                            Obj3E_FindObj28:
0001CB54 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CB56 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CB58 D2C2                       		adda.w	d2,a1		; next object RAM
0001CB5A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CB5E                            
0001CB5E 4EB9 0001 068C             		jsr	GotThroughAct
0001CB64 4EF9 0000 F04C             		jmp	DeleteObject
0001CB6A                            ; ===========================================================================
0001CB6A                            
0001CB6A                            Obj3E_Obj28Found:
0001CB6A 4E75                       		rts	
0001CB6C                            ; ===========================================================================
0001CB6C                            Ani_obj3E:
0001CB6C                            	include "_anim\obj3E.asm"
0001CB6C                            ; ---------------------------------------------------------------------------
0001CB6C                            ; Animation script - prison capsule
0001CB6C                            ; ---------------------------------------------------------------------------
0001CB6C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CB6E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CB70 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CB74                            		even
0001CB74                            		even
0001CB74                            
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74                            ; Sprite mappings - prison capsule
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74                            Map_obj3E:
0001CB74                            	include "_maps\obj3E.asm"
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74                            ; Sprite mappings - prison capsule
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CB78 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CB7C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CB80 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CB82 07                         byte_1AD82:	dc.b 7
0001CB83 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CB88 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CB8D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CB92 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CB97 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CB9C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CBA1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CBA6 01                         byte_1ADA6:	dc.b 1
0001CBA7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CBAC 06                         byte_1ADAC:	dc.b 6
0001CBAD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CBB2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CBB7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CBBC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CBC1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CBC6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CBCB 01                         byte_1ADCB:	dc.b 1
0001CBCC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CBD1 02                         byte_1ADD1:	dc.b 2
0001CBD2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CBD7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CBDC 01                         byte_1ADDC:	dc.b 1
0001CBDD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CBE2 00                         byte_1ADE2:	dc.b 0
0001CBE4 00                         		even
0001CBE4 00                         		even
0001CBE4                            
0001CBE4                            ; ---------------------------------------------------------------------------
0001CBE4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CBE4                            ; ---------------------------------------------------------------------------
0001CBE4                            
0001CBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBE4                            
0001CBE4                            
0001CBE4                            TouchResponse:				; XREF: Obj01
0001CBE4 4E71                       		nop	
0001CBE6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CBEA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CBEE 5142                       		subq.w	#8,d2
0001CBF0 7A00                       		moveq	#0,d5
0001CBF2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CBF6 5705                       		subq.b	#3,d5
0001CBF8 9645                       		sub.w	d5,d3
0001CBFA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CC00 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CC02 0643 000C                  		addi.w	#$C,d3
0001CC06 7A0A                       		moveq	#$A,d5
0001CC08                            
0001CC08                            Touch_NoDuck:
0001CC08 383C 0010                  		move.w	#$10,d4
0001CC0C DA45                       		add.w	d5,d5
0001CC0E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CC12 3C3C 005F                  		move.w	#$5F,d6
0001CC16                            
0001CC16                            Touch_Loop:
0001CC16 4A29 0001                  		tst.b	1(a1)		; is object on screen?
0001CC1A 6A00                       		bpl.s	Touch_NextObj	; if not, branch
0001CC1C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CC20 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CC22                            
0001CC22                            Touch_NextObj:
0001CC22 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CC26 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CC2A                            
0001CC2A 7000                       		moveq	#0,d0
0001CC2C 4E75                       		rts	
0001CC2E                            ; ===========================================================================
0001CC2E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CC30 0C14                       		dc.b   $C, $14
0001CC32 140C                       		dc.b  $14,  $C
0001CC34 0410                       		dc.b	4, $10
0001CC36 0C12                       		dc.b   $C, $12
0001CC38 1010                       		dc.b  $10, $10
0001CC3A 0606                       		dc.b	6,   6
0001CC3C 180C                       		dc.b  $18,  $C
0001CC3E 0C10                       		dc.b   $C, $10
0001CC40 100C                       		dc.b  $10,  $C
0001CC42 0808                       		dc.b	8,   8
0001CC44 1410                       		dc.b  $14, $10
0001CC46 1408                       		dc.b  $14,   8
0001CC48 0E0E                       		dc.b   $E,  $E
0001CC4A 1818                       		dc.b  $18, $18
0001CC4C 2810                       		dc.b  $28, $10
0001CC4E 1018                       		dc.b  $10, $18
0001CC50 0810                       		dc.b	8, $10
0001CC52 2070                       		dc.b  $20, $70
0001CC54 4020                       		dc.b  $40, $20
0001CC56 8020                       		dc.b  $80, $20
0001CC58 2020                       		dc.b  $20, $20
0001CC5A 0808                       		dc.b	8,   8
0001CC5C 0404                       		dc.b	4,   4
0001CC5E 2008                       		dc.b  $20,   8
0001CC60 0C0C                       		dc.b   $C,  $C
0001CC62 0804                       		dc.b	8,   4
0001CC64 1804                       		dc.b  $18,   4
0001CC66 2804                       		dc.b  $28,   4
0001CC68 0408                       		dc.b	4,   8
0001CC6A 0418                       		dc.b	4, $18
0001CC6C 0428                       		dc.b	4, $28
0001CC6E 0420                       		dc.b	4, $20
0001CC70 1818                       		dc.b  $18, $18
0001CC72 0C18                       		dc.b   $C, $18
0001CC74 4808                       		dc.b  $48,   8
0001CC76                            ; ===========================================================================
0001CC76                            
0001CC76                            Touch_Height:				; XREF: TouchResponse
0001CC76 0240 003F                  		andi.w	#$3F,d0
0001CC7A D040                       		add.w	d0,d0
0001CC7C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CC80 7200                       		moveq	#0,d1
0001CC82 121A                       		move.b	(a2)+,d1
0001CC84 3029 0008                  		move.w	8(a1),d0
0001CC88 9041                       		sub.w	d1,d0
0001CC8A 9042                       		sub.w	d2,d0
0001CC8C 6400                       		bcc.s	loc_1AE98
0001CC8E D241                       		add.w	d1,d1
0001CC90 D041                       		add.w	d1,d0
0001CC92 6500                       		bcs.s	Touch_Width
0001CC94 6000 FF8C                  		bra.w	Touch_NextObj
0001CC98                            ; ===========================================================================
0001CC98                            
0001CC98                            loc_1AE98:
0001CC98 B044                       		cmp.w	d4,d0
0001CC9A 6200 FF86                  		bhi.w	Touch_NextObj
0001CC9E                            
0001CC9E                            Touch_Width:
0001CC9E 7200                       		moveq	#0,d1
0001CCA0 121A                       		move.b	(a2)+,d1
0001CCA2 3029 000C                  		move.w	$C(a1),d0
0001CCA6 9041                       		sub.w	d1,d0
0001CCA8 9043                       		sub.w	d3,d0
0001CCAA 6400                       		bcc.s	loc_1AEB6
0001CCAC D241                       		add.w	d1,d1
0001CCAE D240                       		add.w	d0,d1
0001CCB0 6500                       		bcs.s	Touch_ChkValue
0001CCB2 6000 FF6E                  		bra.w	Touch_NextObj
0001CCB6                            ; ===========================================================================
0001CCB6                            
0001CCB6                            loc_1AEB6:
0001CCB6 B045                       		cmp.w	d5,d0
0001CCB8 6200 FF68                  		bhi.w	Touch_NextObj
0001CCBC                            
0001CCBC                            Touch_ChkValue:
0001CCBC 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CCC0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CCC4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CCC8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CCCC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CCD0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CCD2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CCD6                            
0001CCD6                            ; touch	response is $40-$7F
0001CCD6                            
0001CCD6 1029 0020                  		move.b	$20(a1),d0
0001CCDA 0200 003F                  		andi.b	#$3F,d0
0001CCDE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CCE2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CCE4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CCEA 6400 0000                  		bcc.w	locret_1AEF2
0001CCEE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CCF2                            
0001CCF2                            locret_1AEF2:
0001CCF2 4E75                       		rts	
0001CCF4                            ; ===========================================================================
0001CCF4                            
0001CCF4                            Touch_Monitor:
0001CCF4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CCF8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CCFA 3028 000C                  		move.w	$C(a0),d0
0001CCFE 0440 0010                  		subi.w	#$10,d0
0001CD02 B069 000C                  		cmp.w	$C(a1),d0
0001CD06 6500                       		bcs.s	locret_1AF2E
0001CD08 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CD0C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CD12 4A29 0025                  		tst.b	$25(a1)
0001CD16 6600                       		bne.s	locret_1AF2E
0001CD18 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CD1C 4E75                       		rts	
0001CD1E                            ; ===========================================================================
0001CD1E                            
0001CD1E                            loc_1AF1E:
0001CD1E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001CD24 6600                       		bne.s	locret_1AF2E
0001CD26 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CD2A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CD2E                            
0001CD2E                            locret_1AF2E:
0001CD2E 4E75                       		rts	
0001CD30                            ; ===========================================================================
0001CD30                            
0001CD30                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CD30 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CD34 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CD36 0C28 001F 001C             		cmpi.b	#$1F,$1C(a0)	; is Sonic Spin Dashing?
0001CD3C 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001CD40 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001CD46 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001CD4A                            
0001CD4A                            loc_1AF40:
0001CD4A 4A29 0021                  		tst.b	$21(a1)		; test hit counter
0001CD4E 6700                       		beq.s	Touch_KillEnemy	; if hit counter is zero, branch
0001CD50 4468 0010                  		neg.w	$10(a0)		; negate Sonic's speeds
0001CD54 4468 0012                  		neg.w	$12(a0)		;
0001CD58 E0E8 0010                  		asr	$10(a0)
0001CD5C E0E8 0012                  		asr	$12(a0)
0001CD60 137C 0000 0020             		move.b	#0,$20(a1)	; clear touch response byte
0001CD66 5329 0021                  		subq.b	#1,$21(a1)	; decrease hit counter
0001CD6A 6600                       		bne.s	locret_1AF68	; if hits remain, branch
0001CD6C 08E9 0007 0022             		bset	#7,$22(a1)	; set boss defeated flag
0001CD72                            
0001CD72                            locret_1AF68:
0001CD72 4E75                       		rts	
0001CD74                            ; ===========================================================================
0001CD74                            
0001CD74                            Touch_KillEnemy:
0001CD74 08E9 0007 0022             		bset	#7,$22(a1)
0001CD7A 7000                       		moveq	#0,d0
0001CD7C 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001CD80 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001CD84 0C40 0006                  		cmpi.w	#6,d0
0001CD88 6500                       		bcs.s	loc_1AF82
0001CD8A 7006                       		moveq	#6,d0
0001CD8C                            
0001CD8C                            loc_1AF82:
0001CD8C 3340 003E                  		move.w	d0,$3E(a1)
0001CD90 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001CD94 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001CD9A 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001CD9C 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001CDA0 337C 000A 003E             		move.w	#$A,$3E(a1)
0001CDA6                            
0001CDA6                            loc_1AF9C:
0001CDA6 6100 0000                  		bsr.w	AddPoints
0001CDAA 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001CDAE 137C 0000 0024             		move.b	#0,$24(a1)
0001CDB4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving up-wards?
0001CDB8 6B00                       		bmi.s	loc_1AFC2	; if yes, branch
0001CDBA 3028 000C                  		move.w	$C(a0),d0
0001CDBE B069 000C                  		cmp.w	$C(a1),d0
0001CDC2 6400                       		bcc.s	loc_1AFCA
0001CDC4 4468 0012                  		neg.w	$12(a0)
0001CDC8 4E75                       		rts	
0001CDCA                            ; ===========================================================================
0001CDCA                            
0001CDCA                            loc_1AFC2:
0001CDCA 0668 0100 0012             		addi.w	#$100,$12(a0)	; make Sonic bounce up
0001CDD0 4E75                       		rts
0001CDD2                            ; ===========================================================================
0001CDD2                            
0001CDD2                            loc_1AFCA:
0001CDD2 0468 0100 0012             		subi.w	#$100,$12(a0)	; make Sonic bounce down
0001CDD8 4E75                       		rts	
0001CDDA                            ; ===========================================================================
0001CDDA 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001CDE2                            ; ===========================================================================
0001CDE2                            
0001CDE2                            loc_1AFDA:				; XREF: Touch_CatKiller
0001CDE2 08E9 0007 0022             		bset	#7,$22(a1)
0001CDE8                            
0001CDE8                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001CDE8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CDEC 6700                       		beq.s	Touch_Hurt	; if not, branch
0001CDEE                            
0001CDEE                            loc_1AFE6:				; XREF: Touch_Hurt
0001CDEE 70FF                       		moveq	#-1,d0
0001CDF0 4E75                       		rts	
0001CDF2                            ; ===========================================================================
0001CDF2                            
0001CDF2                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001CDF2 4E71                       		nop	
0001CDF4 4A68 0030                  		tst.w	$30(a0)
0001CDF8 66F4                       		bne.s	loc_1AFE6
0001CDFA 2449                       		movea.l	a1,a2
0001CDFC                            
0001CDFC                            ; End of function TouchResponse
0001CDFC                            ; continue straight to HurtSonic
0001CDFC                            
0001CDFC                            ; ---------------------------------------------------------------------------
0001CDFC                            ; Hurting Sonic	subroutine
0001CDFC                            ; ---------------------------------------------------------------------------
0001CDFC                            
0001CDFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDFC                            
0001CDFC                            
0001CDFC                            HurtSonic:
0001CDFC 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001CE00 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001CE02 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001CE06 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001CE0A 4EB9 0000 F496             		jsr	SingleObjLoad
0001CE10 6600                       		bne.s	Hurt_Shield
0001CE12 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001CE16 3368 0008 0008             		move.w	8(a0),8(a1)
0001CE1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CE22                            
0001CE22                            Hurt_Shield:
0001CE22 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001CE28 117C 0004 0024             		move.b	#4,$24(a0)
0001CE2E 6100 877C                  		bsr.w	Sonic_ResetOnFloor
0001CE32 08E8 0001 0022             		bset	#1,$22(a0)
0001CE38 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001CE3E 317C FE00 0010             		move.w	#-$200,$10(a0)
0001CE44 0828 0006 0022             		btst	#6,$22(a0)
0001CE4A 6700                       		beq.s	Hurt_Reverse
0001CE4C 317C FE00 0012             		move.w	#-$200,$12(a0)
0001CE52 317C FF00 0010             		move.w	#-$100,$10(a0)
0001CE58                            
0001CE58                            Hurt_Reverse:
0001CE58 3028 0008                  		move.w	8(a0),d0
0001CE5C B06A 0008                  		cmp.w	8(a2),d0
0001CE60 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001CE62 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001CE66                            
0001CE66                            Hurt_ChkSpikes:
0001CE66 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001CE6C 317C 0000 0014                             move.w	#0,$14(a0)
0001CE72 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CE78 317C 0078 0030             		move.w	#$78,$30(a0)
0001CE7E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CE82 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CE86 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CE88 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CE8C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CE8E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CE92                            
0001CE92                            Hurt_Sound:
0001CE92 4EB9 0000 12C8             		jsr	(PlaySound_Special).l
0001CE98 70FF                       		moveq	#-1,d0
0001CE9A 4E75                       		rts	
0001CE9C                            ; ===========================================================================
0001CE9C                            
0001CE9C                            Hurt_NoRings:
0001CE9C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CEA0 6600 FF80                  		bne.w	Hurt_Shield	; if yes, branch
0001CEA4                            ; End of function HurtSonic
0001CEA4                            
0001CEA4                            ; ---------------------------------------------------------------------------
0001CEA4                            ; Subroutine to	kill Sonic
0001CEA4                            ; ---------------------------------------------------------------------------
0001CEA4                            
0001CEA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA4                            
0001CEA4                            
0001CEA4                            KillSonic:
0001CEA4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CEA8 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CEAA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001CEB0 117C 0006 0024             		move.b	#6,$24(a0)
0001CEB6 6100 86F4                  		bsr.w	Sonic_ResetOnFloor
0001CEBA 08E8 0001 0022             		bset	#1,$22(a0)
0001CEC0 317C F900 0012             		move.w	#-$700,$12(a0)
0001CEC6 317C 0000 0010             		move.w	#0,$10(a0)
0001CECC 317C 0000 0014             		move.w	#0,$14(a0)
0001CED2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CED8 117C 0018 001C             		move.b	#$18,$1C(a0)
0001CEDE 08E8 0007 0002             		bset	#7,2(a0)
0001CEE4 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CEE8 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CEEC 6600                       		bne.s	Kill_Sound
0001CEEE 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CEF2                            
0001CEF2                            Kill_Sound:
0001CEF2 4EB9 0000 12C8             		jsr	(PlaySound_Special).l
0001CEF8                            
0001CEF8                            Kill_NoDeath:
0001CEF8 70FF                       		moveq	#-1,d0
0001CEFA 4E75                       		rts	
0001CEFC                            ; End of function KillSonic
0001CEFC                            
0001CEFC                            
0001CEFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEFC                            
0001CEFC                            
0001CEFC                            Touch_Special:				; XREF: Touch_ChkValue
0001CEFC 1229 0020                  		move.b	$20(a1),d1
0001CF00 0201 003F                  		andi.b	#$3F,d1
0001CF04 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CF08 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CF0A 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CF0E 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CF10 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CF14 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CF16 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CF1A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CF1C 4E75                       		rts	
0001CF1E                            ; ===========================================================================
0001CF1E                            
0001CF1E                            Touch_CatKiller:			; XREF: Touch_Special
0001CF1E 6000 FEC2                  		bra.w	loc_1AFDA
0001CF22                            ; ===========================================================================
0001CF22                            
0001CF22                            Touch_Yadrin:				; XREF: Touch_Special
0001CF22 9A40                       		sub.w	d0,d5
0001CF24 0C45 0008                  		cmpi.w	#8,d5
0001CF28 6400                       		bcc.s	loc_1B144
0001CF2A 3029 0008                  		move.w	8(a1),d0
0001CF2E 5940                       		subq.w	#4,d0
0001CF30 0829 0000 0022             		btst	#0,$22(a1)
0001CF36 6700                       		beq.s	loc_1B130
0001CF38 0440 0010                  		subi.w	#$10,d0
0001CF3C                            
0001CF3C                            loc_1B130:
0001CF3C 9042                       		sub.w	d2,d0
0001CF3E 6400                       		bcc.s	loc_1B13C
0001CF40 0640 0018                  		addi.w	#$18,d0
0001CF44 6500                       		bcs.s	loc_1B140
0001CF46 6000                       		bra.s	loc_1B144
0001CF48                            ; ===========================================================================
0001CF48                            
0001CF48                            loc_1B13C:
0001CF48 B044                       		cmp.w	d4,d0
0001CF4A 6200                       		bhi.s	loc_1B144
0001CF4C                            
0001CF4C                            loc_1B140:
0001CF4C 6000 FE9A                  		bra.w	Touch_ChkHurt
0001CF50                            ; ===========================================================================
0001CF50                            
0001CF50                            loc_1B144:
0001CF50 6000 FDDE                  		bra.w	Touch_Enemy
0001CF54                            ; ===========================================================================
0001CF54                            
0001CF54                            Touch_D7orE1:				; XREF: Touch_Special
0001CF54 5229 0021                  		addq.b	#1,$21(a1)
0001CF58 4E75                       		rts	
0001CF5A                            ; End of function Touch_Special
0001CF5A                            
0001CF5A                            ; ---------------------------------------------------------------------------
0001CF5A                            ; Subroutine to	show the special stage layout
0001CF5A                            ; ---------------------------------------------------------------------------
0001CF5A                            
0001CF5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF5A                            
0001CF5A                            
0001CF5A                            SS_ShowLayout:				; XREF: SpecialStage
0001CF5A 6100 0000                  		bsr.w	SS_AniWallsRings
0001CF5E 6100 0000                  		bsr.w	SS_AniItems
0001CF62 3F05                       		move.w	d5,-(sp)
0001CF64 43F8 8000                  		lea	($FFFF8000).w,a1
0001CF68 1038 F780                  		move.b	($FFFFF780).w,d0
0001CF6C 0200 00FC                  		andi.b	#$FC,d0
0001CF70 4EB9 0000 29AE             		jsr	(CalcSine).l
0001CF76 3800                       		move.w	d0,d4
0001CF78 3A01                       		move.w	d1,d5
0001CF7A C9FC 0018                  		muls.w	#$18,d4
0001CF7E CBFC 0018                  		muls.w	#$18,d5
0001CF82 7400                       		moveq	#0,d2
0001CF84 3438 F700                  		move.w	($FFFFF700).w,d2
0001CF88 84FC 0018                  		divu.w	#$18,d2
0001CF8C 4842                       		swap	d2
0001CF8E 4442                       		neg.w	d2
0001CF90 0642 FF4C                  		addi.w	#-$B4,d2
0001CF94 7600                       		moveq	#0,d3
0001CF96 3638 F704                  		move.w	($FFFFF704).w,d3
0001CF9A 86FC 0018                  		divu.w	#$18,d3
0001CF9E 4843                       		swap	d3
0001CFA0 4443                       		neg.w	d3
0001CFA2 0643 FF4C                  		addi.w	#-$B4,d3
0001CFA6 3E3C 000F                  		move.w	#$F,d7
0001CFAA                            
0001CFAA                            loc_1B19E:
0001CFAA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CFAE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001CFB2 4440                       		neg.w	d0
0001CFB4 C3C2                       		muls.w	d2,d1
0001CFB6 C1C3                       		muls.w	d3,d0
0001CFB8 2C00                       		move.l	d0,d6
0001CFBA DC81                       		add.l	d1,d6
0001CFBC 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001CFC0 C1C2                       		muls.w	d2,d0
0001CFC2 C3C3                       		muls.w	d3,d1
0001CFC4 D280                       		add.l	d0,d1
0001CFC6 2406                       		move.l	d6,d2
0001CFC8 3C3C 000F                  		move.w	#$F,d6
0001CFCC                            
0001CFCC                            loc_1B1C0:
0001CFCC 2002                       		move.l	d2,d0
0001CFCE E080                       		asr.l	#8,d0
0001CFD0 32C0                       		move.w	d0,(a1)+
0001CFD2 2001                       		move.l	d1,d0
0001CFD4 E080                       		asr.l	#8,d0
0001CFD6 32C0                       		move.w	d0,(a1)+
0001CFD8 D485                       		add.l	d5,d2
0001CFDA D284                       		add.l	d4,d1
0001CFDC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001CFE0                            
0001CFE0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001CFE4 0643 0018                  		addi.w	#$18,d3
0001CFE8 51CF FFC0                  		dbf	d7,loc_1B19E
0001CFEC                            
0001CFEC 3A1F                       		move.w	(sp)+,d5
0001CFEE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001CFF4 7000                       		moveq	#0,d0
0001CFF6 3038 F704                  		move.w	($FFFFF704).w,d0
0001CFFA 80FC 0018                  		divu.w	#$18,d0
0001CFFE C0FC 0080                  		mulu.w	#$80,d0
0001D002 D1C0                       		adda.l	d0,a0
0001D004 7000                       		moveq	#0,d0
0001D006 3038 F700                  		move.w	($FFFFF700).w,d0
0001D00A 80FC 0018                  		divu.w	#$18,d0
0001D00E D0C0                       		adda.w	d0,a0
0001D010 49F8 8000                  		lea	($FFFF8000).w,a4
0001D014 3E3C 000F                  		move.w	#$F,d7
0001D018                            
0001D018                            loc_1B20C:
0001D018 3C3C 000F                  		move.w	#$F,d6
0001D01C                            
0001D01C                            loc_1B210:
0001D01C 7000                       		moveq	#0,d0
0001D01E 1018                       		move.b	(a0)+,d0
0001D020 6700                       		beq.s	loc_1B268
0001D022 0C00 004E                  		cmpi.b	#$4E,d0
0001D026 6200                       		bhi.s	loc_1B268
0001D028 3614                       		move.w	(a4),d3
0001D02A 0643 0120                  		addi.w	#$120,d3
0001D02E 0C43 0070                  		cmpi.w	#$70,d3
0001D032 6500                       		bcs.s	loc_1B268
0001D034 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D038 6400                       		bcc.s	loc_1B268
0001D03A 342C 0002                  		move.w	2(a4),d2
0001D03E 0642 00F0                  		addi.w	#$F0,d2
0001D042 0C42 0070                  		cmpi.w	#$70,d2
0001D046 6500                       		bcs.s	loc_1B268
0001D048 0C42 0170                  		cmpi.w	#$170,d2
0001D04C 6400                       		bcc.s	loc_1B268
0001D04E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D054 E748                       		lsl.w	#3,d0
0001D056 4BF5 0000                  		lea	(a5,d0.w),a5
0001D05A 225D                       		movea.l	(a5)+,a1
0001D05C 321D                       		move.w	(a5)+,d1
0001D05E D241                       		add.w	d1,d1
0001D060 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D064 365D                       		movea.w	(a5)+,a3
0001D066 7200                       		moveq	#0,d1
0001D068 1219                       		move.b	(a1)+,d1
0001D06A 5301                       		subq.b	#1,d1
0001D06C 6B00                       		bmi.s	loc_1B268
0001D06E 4EB9 0000 F16E             		jsr	sub_D762
0001D074                            
0001D074                            loc_1B268:
0001D074 584C                       		addq.w	#4,a4
0001D076 51CE FFA4                  		dbf	d6,loc_1B210
0001D07A                            
0001D07A 41E8 0070                  		lea	$70(a0),a0
0001D07E 51CF FF98                  		dbf	d7,loc_1B20C
0001D082                            
0001D082 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D086 0C05 0050                  		cmpi.b	#$50,d5
0001D08A 6700                       		beq.s	loc_1B288
0001D08C 24BC 0000 0000             		move.l	#0,(a2)
0001D092 4E75                       		rts	
0001D094                            ; ===========================================================================
0001D094                            
0001D094                            loc_1B288:
0001D094 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D09A 4E75                       		rts	
0001D09C                            ; End of function SS_ShowLayout
0001D09C                            
0001D09C                            ; ---------------------------------------------------------------------------
0001D09C                            ; Subroutine to	animate	walls and rings	in the special stage
0001D09C                            ; ---------------------------------------------------------------------------
0001D09C                            
0001D09C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D09C                            
0001D09C                            
0001D09C                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D09C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001D0A2 7000                       		moveq	#0,d0
0001D0A4 1038 F780                  		move.b	($FFFFF780).w,d0
0001D0A8 E408                       		lsr.b	#2,d0
0001D0AA 0240 000F                  		andi.w	#$F,d0
0001D0AE 7223                       		moveq	#$23,d1
0001D0B0                            
0001D0B0                            loc_1B2A4:
0001D0B0 3280                       		move.w	d0,(a1)
0001D0B2 5049                       		addq.w	#8,a1
0001D0B4 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001D0B8                            
0001D0B8 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D0BE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D0C2 6A00                       		bpl.s	loc_1B2C8
0001D0C4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D0CA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D0CE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D0D4                            
0001D0D4                            loc_1B2C8:
0001D0D4 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D0DA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D0DE 6A00                       		bpl.s	loc_1B2E4
0001D0E0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D0E6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D0EA 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D0F0                            
0001D0F0                            loc_1B2E4:
0001D0F0 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D0F4 1340 0138                  		move.b	d0,$138(a1)
0001D0F8 1340 0160                  		move.b	d0,$160(a1)
0001D0FC 1340 0148                  		move.b	d0,$148(a1)
0001D100 1340 0150                  		move.b	d0,$150(a1)
0001D104 1340 01D8                  		move.b	d0,$1D8(a1)
0001D108 1340 01E0                  		move.b	d0,$1E0(a1)
0001D10C 1340 01E8                  		move.b	d0,$1E8(a1)
0001D110 1340 01F0                  		move.b	d0,$1F0(a1)
0001D114 1340 01F8                  		move.b	d0,$1F8(a1)
0001D118 1340 0200                  		move.b	d0,$200(a1)
0001D11C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D120 6A00                       		bpl.s	loc_1B326
0001D122 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D128 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D12C 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D132                            
0001D132                            loc_1B326:
0001D132 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D136 1340 0168                  		move.b	d0,$168(a1)
0001D13A 1340 0170                  		move.b	d0,$170(a1)
0001D13E 1340 0178                  		move.b	d0,$178(a1)
0001D142 1340 0180                  		move.b	d0,$180(a1)
0001D146 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D14A 6A00                       		bpl.s	loc_1B350
0001D14C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D152 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D156 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D15C                            
0001D15C                            loc_1B350:
0001D15C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D162 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D168 7000                       		moveq	#0,d0
0001D16A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D16E D040                       		add.w	d0,d0
0001D170 41F0 0000                  		lea	(a0,d0.w),a0
0001D174 3290                       		move.w	(a0),(a1)
0001D176 3368 0002 0008             		move.w	2(a0),8(a1)
0001D17C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D182 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D188 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D18E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D194 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D19A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D1A0 D0FC 0020                  		adda.w	#$20,a0
0001D1A4 D2FC 0048                  		adda.w	#$48,a1
0001D1A8 3290                       		move.w	(a0),(a1)
0001D1AA 3368 0002 0008             		move.w	2(a0),8(a1)
0001D1B0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D1B6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D1BC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D1C2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D1C8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D1CE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D1D4 D0FC 0020                  		adda.w	#$20,a0
0001D1D8 D2FC 0048                  		adda.w	#$48,a1
0001D1DC 3290                       		move.w	(a0),(a1)
0001D1DE 3368 0002 0008             		move.w	2(a0),8(a1)
0001D1E4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D1EA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D1F0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D1F6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D1FC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D202 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D208 D0FC 0020                  		adda.w	#$20,a0
0001D20C D2FC 0048                  		adda.w	#$48,a1
0001D210 3290                       		move.w	(a0),(a1)
0001D212 3368 0002 0008             		move.w	2(a0),8(a1)
0001D218 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D21E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D224 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D22A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D230 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D236 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D23C D0FC 0020                  		adda.w	#$20,a0
0001D240 D2FC 0048                  		adda.w	#$48,a1
0001D244 4E75                       		rts	
0001D246                            ; End of function SS_AniWallsRings
0001D246                            
0001D246                            ; ===========================================================================
0001D246 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D256 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D266 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D276 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D286 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D296 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D2A6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D2B6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D2C6                            ; ---------------------------------------------------------------------------
0001D2C6                            ; Subroutine to	remove items when you collect them in the special stage
0001D2C6                            ; ---------------------------------------------------------------------------
0001D2C6                            
0001D2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2C6                            
0001D2C6                            
0001D2C6                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D2C6 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D2CC 303C 001F                  		move.w	#$1F,d0
0001D2D0                            
0001D2D0                            loc_1B4C4:
0001D2D0 4A12                       		tst.b	(a2)
0001D2D2 6700                       		beq.s	locret_1B4CE
0001D2D4 504A                       		addq.w	#8,a2
0001D2D6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D2DA                            
0001D2DA                            locret_1B4CE:
0001D2DA 4E75                       		rts	
0001D2DC                            ; End of function SS_RemoveCollectedItem
0001D2DC                            
0001D2DC                            ; ---------------------------------------------------------------------------
0001D2DC                            ; Subroutine to	animate	special	stage items when you touch them
0001D2DC                            ; ---------------------------------------------------------------------------
0001D2DC                            
0001D2DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2DC                            
0001D2DC                            
0001D2DC                            SS_AniItems:				; XREF: SS_ShowLayout
0001D2DC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D2E2 3E3C 001F                  		move.w	#$1F,d7
0001D2E6                            
0001D2E6                            loc_1B4DA:
0001D2E6 7000                       		moveq	#0,d0
0001D2E8 1010                       		move.b	(a0),d0
0001D2EA 6700                       		beq.s	loc_1B4E8
0001D2EC E548                       		lsl.w	#2,d0
0001D2EE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D2F2 4E91                       		jsr	(a1)
0001D2F4                            
0001D2F4                            loc_1B4E8:
0001D2F4 5048                       		addq.w	#8,a0
0001D2F6                            
0001D2F6                            loc_1B4EA:
0001D2F6 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D2FA                            
0001D2FA 4E75                       		rts	
0001D2FC                            ; End of function SS_AniItems
0001D2FC                            
0001D2FC                            ; ===========================================================================
0001D2FC 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D300 0000 0000                  		dc.l SS_AniBumper
0001D304 0000 0000                  		dc.l SS_Ani1Up
0001D308 0000 0000                  		dc.l SS_AniReverse
0001D30C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D310 0000 0000                  		dc.l SS_AniGlassBlock
0001D314                            ; ===========================================================================
0001D314                            
0001D314                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D314 5328 0002                  		subq.b	#1,2(a0)
0001D318 6A00                       		bpl.s	locret_1B530
0001D31A 117C 0005 0002             		move.b	#5,2(a0)
0001D320 7000                       		moveq	#0,d0
0001D322 1028 0003                  		move.b	3(a0),d0
0001D326 5228 0003                  		addq.b	#1,3(a0)
0001D32A 2268 0004                  		movea.l	4(a0),a1
0001D32E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D332 1280                       		move.b	d0,(a1)
0001D334 6600                       		bne.s	locret_1B530
0001D336 4290                       		clr.l	(a0)
0001D338 42A8 0004                  		clr.l	4(a0)
0001D33C                            
0001D33C                            locret_1B530:
0001D33C 4E75                       		rts	
0001D33E                            ; ===========================================================================
0001D33E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D344                            ; ===========================================================================
0001D344                            
0001D344                            SS_AniBumper:				; XREF: SS_AniIndex
0001D344 5328 0002                  		subq.b	#1,2(a0)
0001D348 6A00                       		bpl.s	locret_1B566
0001D34A 117C 0007 0002             		move.b	#7,2(a0)
0001D350 7000                       		moveq	#0,d0
0001D352 1028 0003                  		move.b	3(a0),d0
0001D356 5228 0003                  		addq.b	#1,3(a0)
0001D35A 2268 0004                  		movea.l	4(a0),a1
0001D35E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D362 6600                       		bne.s	loc_1B564
0001D364 4290                       		clr.l	(a0)
0001D366 42A8 0004                  		clr.l	4(a0)
0001D36A 12BC 0025                  		move.b	#$25,(a1)
0001D36E 4E75                       		rts	
0001D370                            ; ===========================================================================
0001D370                            
0001D370                            loc_1B564:
0001D370 1280                       		move.b	d0,(a1)
0001D372                            
0001D372                            locret_1B566:
0001D372 4E75                       		rts	
0001D374                            ; ===========================================================================
0001D374 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D37A                            ; ===========================================================================
0001D37A                            
0001D37A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D37A 5328 0002                  		subq.b	#1,2(a0)
0001D37E 6A00                       		bpl.s	locret_1B596
0001D380 117C 0005 0002             		move.b	#5,2(a0)
0001D386 7000                       		moveq	#0,d0
0001D388 1028 0003                  		move.b	3(a0),d0
0001D38C 5228 0003                  		addq.b	#1,3(a0)
0001D390 2268 0004                  		movea.l	4(a0),a1
0001D394 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D398 1280                       		move.b	d0,(a1)
0001D39A 6600                       		bne.s	locret_1B596
0001D39C 4290                       		clr.l	(a0)
0001D39E 42A8 0004                  		clr.l	4(a0)
0001D3A2                            
0001D3A2                            locret_1B596:
0001D3A2 4E75                       		rts	
0001D3A4                            ; ===========================================================================
0001D3A4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D3AA                            ; ===========================================================================
0001D3AA                            
0001D3AA                            SS_AniReverse:				; XREF: SS_AniIndex
0001D3AA 5328 0002                  		subq.b	#1,2(a0)
0001D3AE 6A00                       		bpl.s	locret_1B5CC
0001D3B0 117C 0007 0002             		move.b	#7,2(a0)
0001D3B6 7000                       		moveq	#0,d0
0001D3B8 1028 0003                  		move.b	3(a0),d0
0001D3BC 5228 0003                  		addq.b	#1,3(a0)
0001D3C0 2268 0004                  		movea.l	4(a0),a1
0001D3C4 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D3C8 6600                       		bne.s	loc_1B5CA
0001D3CA 4290                       		clr.l	(a0)
0001D3CC 42A8 0004                  		clr.l	4(a0)
0001D3D0 12BC 002B                  		move.b	#$2B,(a1)
0001D3D4 4E75                       		rts	
0001D3D6                            ; ===========================================================================
0001D3D6                            
0001D3D6                            loc_1B5CA:
0001D3D6 1280                       		move.b	d0,(a1)
0001D3D8                            
0001D3D8                            locret_1B5CC:
0001D3D8 4E75                       		rts	
0001D3DA                            ; ===========================================================================
0001D3DA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D3E0                            ; ===========================================================================
0001D3E0                            
0001D3E0                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D3E0 5328 0002                  		subq.b	#1,2(a0)
0001D3E4 6A00                       		bpl.s	locret_1B60C
0001D3E6 117C 0005 0002             		move.b	#5,2(a0)
0001D3EC 7000                       		moveq	#0,d0
0001D3EE 1028 0003                  		move.b	3(a0),d0
0001D3F2 5228 0003                  		addq.b	#1,3(a0)
0001D3F6 2268 0004                  		movea.l	4(a0),a1
0001D3FA 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D3FE 1280                       		move.b	d0,(a1)
0001D400 6600                       		bne.s	locret_1B60C
0001D402 4290                       		clr.l	(a0)
0001D404 42A8 0004                  		clr.l	4(a0)
0001D408 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D40E 303C 00A8                  		move.w	#$A8,d0
0001D412 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D418                            
0001D418                            locret_1B60C:
0001D418 4E75                       		rts	
0001D41A                            ; ===========================================================================
0001D41A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D420                            ; ===========================================================================
0001D420                            
0001D420                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D420 5328 0002                  		subq.b	#1,2(a0)
0001D424 6A00                       		bpl.s	locret_1B640
0001D426 117C 0001 0002             		move.b	#1,2(a0)
0001D42C 7000                       		moveq	#0,d0
0001D42E 1028 0003                  		move.b	3(a0),d0
0001D432 5228 0003                  		addq.b	#1,3(a0)
0001D436 2268 0004                  		movea.l	4(a0),a1
0001D43A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D43E 1280                       		move.b	d0,(a1)
0001D440 6600                       		bne.s	locret_1B640
0001D442 12A8 0004                  		move.b	4(a0),(a1)
0001D446 4290                       		clr.l	(a0)
0001D448 42A8 0004                  		clr.l	4(a0)
0001D44C                            
0001D44C                            locret_1B640:
0001D44C 4E75                       		rts	
0001D44E                            ; ===========================================================================
0001D44E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D458                            ; ---------------------------------------------------------------------------
0001D458                            ; Special stage	layout pointers
0001D458                            ; ---------------------------------------------------------------------------
0001D458                            SS_LayoutIndex:
0001D458                            	include "_inc\Special stage layout pointers.asm"
0001D458                            ; ---------------------------------------------------------------------------
0001D458                            ; Special stage	layout pointers
0001D458                            ; ---------------------------------------------------------------------------
0001D458 0000 0000                  	dc.l SS_1
0001D45C 0000 0000                  	dc.l SS_2
0001D460 0000 0000                  	dc.l SS_3
0001D464 0000 0000                  	dc.l SS_4
0001D468 0000 0000                  	dc.l SS_5
0001D46C 0000 0000                  	dc.l SS_6
0001D470                            	even
0001D470                            	even
0001D470                            
0001D470                            ; ---------------------------------------------------------------------------
0001D470                            ; Special stage	start locations
0001D470                            ; ---------------------------------------------------------------------------
0001D470                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D488                            		even
0001D488                            
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            ; Subroutine to	load special stage layout
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            
0001D488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D488                            
0001D488                            
0001D488                            SS_Load:				; XREF: SpecialStage
0001D488 7000                       		moveq	#0,d0
0001D48A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D48E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D492 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D498 6500                       		bcs.s	SS_ChkEmldNum
0001D49A 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D4A0                            
0001D4A0                            SS_ChkEmldNum:
0001D4A0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D4A6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D4A8 7200                       		moveq	#0,d1
0001D4AA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D4AE 5301                       		subq.b	#1,d1
0001D4B0 6500                       		bcs.s	SS_LoadData
0001D4B2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D4B6                            
0001D4B6                            SS_ChkEmldLoop:	
0001D4B6 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D4BA 6600                       		bne.s	SS_ChkEmldRepeat
0001D4BC 60CA                       		bra.s	SS_Load
0001D4BE                            ; ===========================================================================
0001D4BE                            
0001D4BE                            SS_ChkEmldRepeat:
0001D4BE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D4C2                            
0001D4C2                            SS_LoadData:
0001D4C2 E548                       		lsl.w	#2,d0
0001D4C4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D4C8 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D4CC 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D4D0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D4D4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D4DA 303C 0000                  		move.w	#0,d0
0001D4DE 4EB9 0000 16DE             		jsr	(EniDec).l
0001D4E4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D4EA 303C 0FFF                  		move.w	#$FFF,d0
0001D4EE                            
0001D4EE                            SS_ClrRAM3:
0001D4EE 4299                       		clr.l	(a1)+
0001D4F0 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D4F4                            
0001D4F4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D4FA 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D500 723F                       		moveq	#$3F,d1
0001D502                            
0001D502                            loc_1B6F6:
0001D502 743F                       		moveq	#$3F,d2
0001D504                            
0001D504                            loc_1B6F8:
0001D504 12D8                       		move.b	(a0)+,(a1)+
0001D506 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D50A                            
0001D50A 43E9 0040                  		lea	$40(a1),a1
0001D50E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D512                            
0001D512 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D518 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D51E 724D                       		moveq	#$4D,d1
0001D520                            
0001D520                            loc_1B714:
0001D520 22D8                       		move.l	(a0)+,(a1)+
0001D522 32FC 0000                  		move.w	#0,(a1)+
0001D526 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D52C 32D8                       		move.w	(a0)+,(a1)+
0001D52E 51C9 FFF0                  		dbf	d1,loc_1B714
0001D532                            
0001D532 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D538 323C 003F                  		move.w	#$3F,d1
0001D53C                            
0001D53C                            loc_1B730:
0001D53C                            
0001D53C 4299                       		clr.l	(a1)+
0001D53E 51C9 FFFC                  		dbf	d1,loc_1B730
0001D542                            
0001D542 4E75                       		rts	
0001D544                            ; End of function SS_Load
0001D544                            
0001D544                            ; ===========================================================================
0001D544                            ; ---------------------------------------------------------------------------
0001D544                            ; Special stage	mappings and VRAM pointers
0001D544                            ; ---------------------------------------------------------------------------
0001D544                            SS_MapIndex:
0001D544                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D544                            ; ---------------------------------------------------------------------------
0001D544                            ; Special stage	mappings and VRAM pointers
0001D544                            ; ---------------------------------------------------------------------------
0001D544 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D548 0142                       	dc.w $142		; VRAM setting
0001D54A 0000 0000                  	dc.l Map_SSWalls
0001D54E 0142                       	dc.w $142
0001D550 0000 0000                  	dc.l Map_SSWalls
0001D554 0142                       	dc.w $142
0001D556 0000 0000                  	dc.l Map_SSWalls
0001D55A 0142                       	dc.w $142
0001D55C 0000 0000                  	dc.l Map_SSWalls
0001D560 0142                       	dc.w $142
0001D562 0000 0000                  	dc.l Map_SSWalls
0001D566 0142                       	dc.w $142
0001D568 0000 0000                  	dc.l Map_SSWalls
0001D56C 0142                       	dc.w $142
0001D56E 0000 0000                  	dc.l Map_SSWalls
0001D572 0142                       	dc.w $142
0001D574 0000 0000                  	dc.l Map_SSWalls
0001D578 0142                       	dc.w $142
0001D57A 0000 0000                  	dc.l Map_SSWalls
0001D57E 2142                       	dc.w $2142
0001D580 0000 0000                  	dc.l Map_SSWalls
0001D584 2142                       	dc.w $2142
0001D586 0000 0000                  	dc.l Map_SSWalls
0001D58A 2142                       	dc.w $2142
0001D58C 0000 0000                  	dc.l Map_SSWalls
0001D590 2142                       	dc.w $2142
0001D592 0000 0000                  	dc.l Map_SSWalls
0001D596 2142                       	dc.w $2142
0001D598 0000 0000                  	dc.l Map_SSWalls
0001D59C 2142                       	dc.w $2142
0001D59E 0000 0000                  	dc.l Map_SSWalls
0001D5A2 2142                       	dc.w $2142
0001D5A4 0000 0000                  	dc.l Map_SSWalls
0001D5A8 2142                       	dc.w $2142
0001D5AA 0000 0000                  	dc.l Map_SSWalls
0001D5AE 2142                       	dc.w $2142
0001D5B0 0000 0000                  	dc.l Map_SSWalls
0001D5B4 4142                       	dc.w $4142
0001D5B6 0000 0000                  	dc.l Map_SSWalls
0001D5BA 4142                       	dc.w $4142
0001D5BC 0000 0000                  	dc.l Map_SSWalls
0001D5C0 4142                       	dc.w $4142
0001D5C2 0000 0000                  	dc.l Map_SSWalls
0001D5C6 4142                       	dc.w $4142
0001D5C8 0000 0000                  	dc.l Map_SSWalls
0001D5CC 4142                       	dc.w $4142
0001D5CE 0000 0000                  	dc.l Map_SSWalls
0001D5D2 4142                       	dc.w $4142
0001D5D4 0000 0000                  	dc.l Map_SSWalls
0001D5D8 4142                       	dc.w $4142
0001D5DA 0000 0000                  	dc.l Map_SSWalls
0001D5DE 4142                       	dc.w $4142
0001D5E0 0000 0000                  	dc.l Map_SSWalls
0001D5E4 4142                       	dc.w $4142
0001D5E6 0000 0000                  	dc.l Map_SSWalls
0001D5EA 6142                       	dc.w $6142
0001D5EC 0000 0000                  	dc.l Map_SSWalls
0001D5F0 6142                       	dc.w $6142
0001D5F2 0000 0000                  	dc.l Map_SSWalls
0001D5F6 6142                       	dc.w $6142
0001D5F8 0000 0000                  	dc.l Map_SSWalls
0001D5FC 6142                       	dc.w $6142
0001D5FE 0000 0000                  	dc.l Map_SSWalls
0001D602 6142                       	dc.w $6142
0001D604 0000 0000                  	dc.l Map_SSWalls
0001D608 6142                       	dc.w $6142
0001D60A 0000 0000                  	dc.l Map_SSWalls
0001D60E 6142                       	dc.w $6142
0001D610 0000 0000                  	dc.l Map_SSWalls
0001D614 6142                       	dc.w $6142
0001D616 0000 0000                  	dc.l Map_SSWalls
0001D61A 6142                       	dc.w $6142
0001D61C 0001 0504                  	dc.l Map_obj47
0001D620 023B                       	dc.w $23B
0001D622 0000 0000                  	dc.l Map_SS_R
0001D626 0570                       	dc.w $570
0001D628 0000 0000                  	dc.l Map_SS_R
0001D62C 0251                       	dc.w $251
0001D62E 0000 0000                  	dc.l Map_SS_R
0001D632 0370                       	dc.w $370
0001D634 0000 0000                  	dc.l Map_SS_Up
0001D638 0263                       	dc.w $263
0001D63A 0000 0000                  	dc.l Map_SS_Down
0001D63E 0263                       	dc.w $263
0001D640 0000 0000                  	dc.l Map_SS_R
0001D644 22F0                       	dc.w $22F0
0001D646 0000 0000                  	dc.l Map_SS_Glass
0001D64A 0470                       	dc.w $470
0001D64C 0000 0000                  	dc.l Map_SS_Glass
0001D650 05F0                       	dc.w $5F0
0001D652 0000 0000                  	dc.l Map_SS_Glass
0001D656 65F0                       	dc.w $65F0
0001D658 0000 0000                  	dc.l Map_SS_Glass
0001D65C 25F0                       	dc.w $25F0
0001D65E 0000 0000                  	dc.l Map_SS_Glass
0001D662 45F0                       	dc.w $45F0
0001D664 0000 0000                  	dc.l Map_SS_R
0001D668 02F0                       	dc.w $2F0
0001D66A 0101 0504                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D66E 023B                       	dc.w $23B
0001D670 0201 0504                  	dc.l Map_obj47+$2000000
0001D674 023B                       	dc.w $23B
0001D676 0000 0000                  	dc.l Map_SS_R
0001D67A 0797                       	dc.w $797
0001D67C 0000 0000                  	dc.l Map_SS_R
0001D680 07A0                       	dc.w $7A0
0001D682 0000 0000                  	dc.l Map_SS_R
0001D686 07A9                       	dc.w $7A9
0001D688 0000 0000                  	dc.l Map_SS_R
0001D68C 0797                       	dc.w $797
0001D68E 0000 0000                  	dc.l Map_SS_R
0001D692 07A0                       	dc.w $7A0
0001D694 0000 0000                  	dc.l Map_SS_R
0001D698 07A9                       	dc.w $7A9
0001D69A 0000 B980                  	dc.l Map_obj25
0001D69E 27B2                       	dc.w $27B2
0001D6A0 0000 0000                  	dc.l Map_SS_Chaos3
0001D6A4 0770                       	dc.w $770
0001D6A6 0000 0000                  	dc.l Map_SS_Chaos3
0001D6AA 2770                       	dc.w $2770
0001D6AC 0000 0000                  	dc.l Map_SS_Chaos3
0001D6B0 4770                       	dc.w $4770
0001D6B2 0000 0000                  	dc.l Map_SS_Chaos3
0001D6B6 6770                       	dc.w $6770
0001D6B8 0000 0000                  	dc.l Map_SS_Chaos1
0001D6BC 0770                       	dc.w $770
0001D6BE 0000 0000                  	dc.l Map_SS_Chaos2
0001D6C2 0770                       	dc.w $770
0001D6C4 0000 0000                  	dc.l Map_SS_R
0001D6C8 04F0                       	dc.w $4F0
0001D6CA 0400 B980                  	dc.l Map_obj25+$4000000
0001D6CE 27B2                       	dc.w $27B2
0001D6D0 0500 B980                  	dc.l Map_obj25+$5000000
0001D6D4 27B2                       	dc.w $27B2
0001D6D6 0600 B980                  	dc.l Map_obj25+$6000000
0001D6DA 27B2                       	dc.w $27B2
0001D6DC 0700 B980                  	dc.l Map_obj25+$7000000
0001D6E0 27B2                       	dc.w $27B2
0001D6E2 0000 0000                  	dc.l Map_SS_Glass
0001D6E6 23F0                       	dc.w $23F0
0001D6E8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D6EC 23F0                       	dc.w $23F0
0001D6EE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D6F2 23F0                       	dc.w $23F0
0001D6F4 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D6F8 23F0                       	dc.w $23F0
0001D6FA 0000 0000                  	dc.l Map_SS_R+$2000000
0001D6FE 04F0                       	dc.w $4F0
0001D700 0000 0000                  	dc.l Map_SS_Glass
0001D704 05F0                       	dc.w $5F0
0001D706 0000 0000                  	dc.l Map_SS_Glass
0001D70A 65F0                       	dc.w $65F0
0001D70C 0000 0000                  	dc.l Map_SS_Glass
0001D710 25F0                       	dc.w $25F0
0001D712 0000 0000                  	dc.l Map_SS_Glass
0001D716 45F0                       	dc.w $45F0
0001D716 45F0                       	dc.w $45F0
0001D718                            
0001D718                            ; ---------------------------------------------------------------------------
0001D718                            ; Sprite mappings - special stage "R" block
0001D718                            ; ---------------------------------------------------------------------------
0001D718                            Map_SS_R:
0001D718                            	include "_maps\SSRblock.asm"
0001D718                            ; ---------------------------------------------------------------------------
0001D718                            ; Sprite mappings - special stage "R" block
0001D718                            ; ---------------------------------------------------------------------------
0001D718 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D71C 0000                       		dc.w byte_1B91E-Map_SS_R
0001D71E 01                         byte_1B912:	dc.b 1
0001D71F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D724 01                         byte_1B918:	dc.b 1
0001D725 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D72A 00                         byte_1B91E:	dc.b 0
0001D72C 00                         		even
0001D72C 00                         		even
0001D72C                            
0001D72C                            ; ---------------------------------------------------------------------------
0001D72C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D72C                            ; ---------------------------------------------------------------------------
0001D72C                            Map_SS_Glass:
0001D72C                            	include "_maps\SSglassblock.asm"
0001D72C                            ; ---------------------------------------------------------------------------
0001D72C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D72C                            ; ---------------------------------------------------------------------------
0001D72C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D730 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D734 01                         byte_1B928:	dc.b 1
0001D735 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D73A 01                         byte_1B92E:	dc.b 1
0001D73B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D740 01                         byte_1B934:	dc.b 1
0001D741 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D746 01                         byte_1B93A:	dc.b 1
0001D747 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D74C                            		even
0001D74C                            		even
0001D74C                            
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C                            ; Sprite mappings - special stage "UP" block
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C                            Map_SS_Up:
0001D74C                            	include "_maps\SSUPblock.asm"
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C                            ; Sprite mappings - special stage "UP" block
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C 0000                       		dc.w byte_1B944-Map_SS_Up
0001D74E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D750 01                         byte_1B944:	dc.b 1
0001D751 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D756 01                         byte_1B94A:	dc.b 1
0001D757 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D75C                            		even
0001D75C                            		even
0001D75C                            
0001D75C                            ; ---------------------------------------------------------------------------
0001D75C                            ; Sprite mappings - special stage "DOWN" block
0001D75C                            ; ---------------------------------------------------------------------------
0001D75C                            Map_SS_Down:
0001D75C                            	include "_maps\SSDOWNblock.asm"
0001D75C                            ; ---------------------------------------------------------------------------
0001D75C                            ; Sprite mappings - special stage "DOWN" block
0001D75C                            ; ---------------------------------------------------------------------------
0001D75C 0000                       		dc.w byte_1B954-Map_SS_Down
0001D75E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D760 01                         byte_1B954:	dc.b 1
0001D761 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D766 01                         byte_1B95A:	dc.b 1
0001D767 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D76C                            		even
0001D76C                            		even
0001D76C                            
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C                            ; Sprite mappings - special stage chaos	emeralds
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D76E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D770 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D772 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D774 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D776 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D778 01                         byte_1B96C:	dc.b 1
0001D779 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D77E 01                         byte_1B972:	dc.b 1
0001D77F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D784 01                         byte_1B978:	dc.b 1
0001D785 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D78A 01                         byte_1B97E:	dc.b 1
0001D78B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D790                            		even
0001D790                            ; ===========================================================================
0001D790                            ; ---------------------------------------------------------------------------
0001D790                            ; Object 09 - Sonic (special stage)
0001D790                            ; ---------------------------------------------------------------------------
0001D790                            
0001D790                            Obj09:					; XREF: Obj_Index
0001D790 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D794 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D796 6100 0000                  		bsr.w	SS_FixCamera
0001D79A 6000 0000                  		bra.w	DebugMode
0001D79E                            ; ===========================================================================
0001D79E                            
0001D79E                            Obj09_Normal:
0001D79E 7000                       		moveq	#0,d0
0001D7A0 1028 0024                  		move.b	$24(a0),d0
0001D7A4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D7A8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D7AC                            ; ===========================================================================
0001D7AC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D7AE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D7B0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D7B2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D7B4                            ; ===========================================================================
0001D7B4                            
0001D7B4                            Obj09_Main:				; XREF: Obj09_Index
0001D7B4 5428 0024                  		addq.b	#2,$24(a0)
0001D7B8 117C 000E 0016             		move.b	#$E,$16(a0)
0001D7BE 117C 0007 0017             		move.b	#7,$17(a0)
0001D7C4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D7CC 317C 0780 0002             		move.w	#$780,2(a0)
0001D7D2 117C 0004 0001             		move.b	#4,1(a0)
0001D7D8 117C 0000 0018             		move.b	#0,$18(a0)
0001D7DE 117C 0002 001C             		move.b	#2,$1C(a0)
0001D7E4 08E8 0002 0022             		bset	#2,$22(a0)
0001D7EA 08E8 0001 0022             		bset	#1,$22(a0)
0001D7F0                            
0001D7F0                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D7F0 4A78 FFFA                  		tst.w	($FFFFFFFA).w		; is debug mode	cheat enabled?
0001D7F4 6700                       		beq.s	Obj09_NoDebug		; if not, branch
0001D7F6 0838 0005 F605             		btst	#iB,(Joypad|Press)	; is button B pressed?
0001D7FC 6700                       		beq.s	Obj09_NoDebug		; if not, branch
0001D7FE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w	; change Sonic into a ring
0001D804                            
0001D804                            Obj09_NoDebug:
0001D804 117C 0000 0030             		move.b	#0,$30(a0)
0001D80A 7000                       		moveq	#0,d0
0001D80C 1028 0022                  		move.b	$22(a0),d0
0001D810 0240 0002                  		andi.w	#2,d0
0001D814 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D818 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D81C 4EBA 823E                  		jsr	LoadSonicDynPLC
0001D820 4EF9 0000 F010             		jmp	DisplaySprite
0001D826                            ; ===========================================================================
0001D826 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D828 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D82A                            ; ===========================================================================
0001D82A                            
0001D82A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D82A 6100 0000                  		bsr.w	Obj09_Jump
0001D82E 6100 0000                  		bsr.w	Obj09_Move
0001D832 6100 0000                  		bsr.w	Obj09_Fall
0001D836 6000                       		bra.s	Obj09_Display
0001D838                            ; ===========================================================================
0001D838                            
0001D838                            Obj09_InAir:				; XREF: Obj09_Modes
0001D838 6100 0000                  		bsr.w	Obj09_JumpHeight
0001D83C 6100 0000                  		bsr.w	Obj09_Move
0001D840 6100 0000                  		bsr.w	Obj09_Fall
0001D844                            
0001D844                            Obj09_Display:				; XREF: Obj09_OnWall
0001D844 6100 0000                  		bsr.w	Obj09_ChkItems
0001D848 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D84C 4EB9 0000 EFEA             		jsr	SpeedToPos
0001D852 6100 0000                  		bsr.w	SS_FixCamera
0001D856 3038 F780                  		move.w	($FFFFF780).w,d0
0001D85A D078 F782                  		add.w	($FFFFF782).w,d0
0001D85E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D862 4EB9 0001 57D2             		jsr	Sonic_Animate
0001D868 4E75                       		rts	
0001D86A                            
0001D86A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D86A                            
0001D86A                            
0001D86A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D86A 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
0001D870 6700                       		beq.s	Obj09_ChkRight			; if not, branch
0001D872 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D876                            
0001D876                            Obj09_ChkRight:
0001D876 0838 0003 F602             		btst	#iRight,(SonicControl|Held) 	; is right being pressed?
0001D87C 6700                       		beq.s	loc_1BA78			; if not, branch
0001D87E 6100 0000                  		bsr.w	Obj09_MoveRight
0001D882                            
0001D882                            loc_1BA78:
0001D882 1038 F602                  		move.b	(SonicControl|Held),d0	; load held buttons bitfield
0001D886 0200 000C                  		andi.b	#Right+Left,d0		; look for Left/Right buttons
0001D88A 6600                       		bne.s	loc_1BAA8		; if left/right is held, branch
0001D88C 3028 0014                  		move.w	$14(a0),d0
0001D890 6700                       		beq.s	loc_1BAA8
0001D892 6B00                       		bmi.s	loc_1BA9A
0001D894 0440 000C                  		subi.w	#$C,d0
0001D898 6400                       		bcc.s	loc_1BA94
0001D89A 303C 0000                  		move.w	#0,d0
0001D89E                            
0001D89E                            loc_1BA94:
0001D89E 3140 0014                  		move.w	d0,$14(a0)
0001D8A2 6000                       		bra.s	loc_1BAA8
0001D8A4                            ; ===========================================================================
0001D8A4                            
0001D8A4                            loc_1BA9A:
0001D8A4 0640 000C                  		addi.w	#$C,d0
0001D8A8 6400                       		bcc.s	loc_1BAA4
0001D8AA 303C 0000                  		move.w	#0,d0
0001D8AE                            
0001D8AE                            loc_1BAA4:
0001D8AE 3140 0014                  		move.w	d0,$14(a0)
0001D8B2                            
0001D8B2                            loc_1BAA8:
0001D8B2 1038 F780                  		move.b	($FFFFF780).w,d0
0001D8B6 0600 0020                  		addi.b	#$20,d0
0001D8BA 0200 00C0                  		andi.b	#$C0,d0
0001D8BE 4400                       		neg.b	d0
0001D8C0 4EB9 0000 29AE             		jsr	(CalcSine).l
0001D8C6 C3E8 0014                  		muls.w	$14(a0),d1
0001D8CA D3A8 0008                  		add.l	d1,8(a0)
0001D8CE C1E8 0014                  		muls.w	$14(a0),d0
0001D8D2 D1A8 000C                  		add.l	d0,$C(a0)
0001D8D6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D8DA 2428 000C                  		move.l	$C(a0),d2
0001D8DE 2628 0008                  		move.l	8(a0),d3
0001D8E2 6100 0000                  		bsr.w	sub_1BCE8
0001D8E6 6700                       		beq.s	loc_1BAF2
0001D8E8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D8EC 93A8 0008                  		sub.l	d1,8(a0)
0001D8F0 91A8 000C                  		sub.l	d0,$C(a0)
0001D8F4 317C 0000 0014             		move.w	#0,$14(a0)
0001D8FA 4E75                       		rts	
0001D8FC                            ; ===========================================================================
0001D8FC                            
0001D8FC                            loc_1BAF2:
0001D8FC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D900 4E75                       		rts	
0001D902                            ; End of function Obj09_Move
0001D902                            
0001D902                            
0001D902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D902                            
0001D902                            
0001D902                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D902 08E8 0000 0022             		bset	#0,$22(a0)
0001D908 3028 0014                  		move.w	$14(a0),d0
0001D90C 6700                       		beq.s	loc_1BB06
0001D90E 6A00                       		bpl.s	loc_1BB1A
0001D910                            
0001D910                            loc_1BB06:
0001D910 0440 000C                  		subi.w	#$C,d0
0001D914 0C40 F800                  		cmpi.w	#-$800,d0
0001D918 6E00                       		bgt.s	loc_1BB14
0001D91A 303C F800                  		move.w	#-$800,d0
0001D91E                            
0001D91E                            loc_1BB14:
0001D91E 3140 0014                  		move.w	d0,$14(a0)
0001D922 4E75                       		rts	
0001D924                            ; ===========================================================================
0001D924                            
0001D924                            loc_1BB1A:
0001D924 0440 0040                  		subi.w	#$40,d0
0001D928 6400                       		bcc.s	loc_1BB22
0001D92A 4E71                       		nop	
0001D92C                            
0001D92C                            loc_1BB22:
0001D92C 3140 0014                  		move.w	d0,$14(a0)
0001D930 4E75                       		rts	
0001D932                            ; End of function Obj09_MoveLeft
0001D932                            
0001D932                            
0001D932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D932                            
0001D932                            
0001D932                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D932 08A8 0000 0022             		bclr	#0,$22(a0)
0001D938 3028 0014                  		move.w	$14(a0),d0
0001D93C 6B00                       		bmi.s	loc_1BB48
0001D93E 0640 000C                  		addi.w	#$C,d0
0001D942 0C40 0800                  		cmpi.w	#$800,d0
0001D946 6D00                       		blt.s	loc_1BB42
0001D948 303C 0800                  		move.w	#$800,d0
0001D94C                            
0001D94C                            loc_1BB42:
0001D94C 3140 0014                  		move.w	d0,$14(a0)
0001D950 6000                       		bra.s	locret_1BB54
0001D952                            ; ===========================================================================
0001D952                            
0001D952                            loc_1BB48:
0001D952 0640 0040                  		addi.w	#$40,d0
0001D956 6400                       		bcc.s	loc_1BB50
0001D958 4E71                       		nop	
0001D95A                            
0001D95A                            loc_1BB50:
0001D95A 3140 0014                  		move.w	d0,$14(a0)
0001D95E                            
0001D95E                            locret_1BB54:
0001D95E 4E75                       		rts	
0001D960                            ; End of function Obj09_MoveRight
0001D960                            
0001D960                            
0001D960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D960                            
0001D960                            
0001D960                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D960 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; A, B or C pressed?
0001D968 6700                       		beq.s	Obj09_NoJump		; if not, branch
0001D96A 1038 F780                  		move.b	($FFFFF780).w,d0
0001D96E 0200 00FC                  		andi.b	#$FC,d0
0001D972 4400                       		neg.b	d0
0001D974 0400 0040                  		subi.b	#$40,d0
0001D978 4EB9 0000 29AE             		jsr	(CalcSine).l
0001D97E C3FC 0680                  		muls.w	#$680,d1
0001D982 E081                       		asr.l	#8,d1
0001D984 3141 0010                  		move.w	d1,$10(a0)
0001D988 C1FC 0680                  		muls.w	#$680,d0
0001D98C E080                       		asr.l	#8,d0
0001D98E 3140 0012                  		move.w	d0,$12(a0)
0001D992 08E8 0001 0022             		bset	#1,$22(a0)
0001D998 303C 00A0                  		move.w	#$A0,d0
0001D99C 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D9A2                            
0001D9A2                            Obj09_NoJump:
0001D9A2 4E75                       		rts	
0001D9A4                            ; End of function Obj09_Jump
0001D9A4                            
0001D9A4                            
0001D9A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9A4                            
0001D9A4                            
0001D9A4                            ; ===========================================================================
0001D9A4                            ; ---------------------------------------------------------------------------
0001D9A4                            ; Subroutine to limit Sonic's upward vertical speed
0001D9A4                            ; ---------------------------------------------------------------------------
0001D9A4                             
0001D9A4                            Obj09_JumpHeight:			; XREF: Obj09_InAir
0001D9A4 1038 F602                  		move.b	($FFFFF602).w,d0	; is the jump button up?
0001D9A8 0200 0070                  		andi.b	#$70,d0
0001D9AC 6600                       		bne.s	locret_1BBB4		; if not, branch to return
0001D9AE 0828 0007 0022             		btst	#7,$22(a0)		; did Sonic jump or is he just falling or hit by a bumper?
0001D9B4 6700                       		beq.s	locret_1BBB4		; if not, branch to return
0001D9B6 1038 F780                  		move.b	($FFFFF780).w,d0	; get SS angle
0001D9BA 0200 00FC                  		andi.b	#$FC,d0
0001D9BE 4400                       		neg.b	d0
0001D9C0 0400 0040                  		subi.b	#$40,d0
0001D9C4 4EB9 0000 29AE             		jsr	(CalcSine).l			
0001D9CA 3428 0012                  		move.w	$12(a0),d2		; get Y speed
0001D9CE C1C2                       		muls.w	d2,d0			; multiply Y speed by sin
0001D9D0 E080                       		asr.l	#8,d0			; find the new Y speed
0001D9D2 3428 0010                  		move.w	$10(a0),d2		; get X speed
0001D9D6 C3C2                       		muls.w	d2,d1			; multiply X speed by cos
0001D9D8 E081                       		asr.l	#8,d1			; find the new X speed
0001D9DA D240                       		add.w	d0,d1			; combine the two speeds
0001D9DC 0C41 0400                  		cmpi.w	#$400,d1		; compare the combined speed with the jump release speed
0001D9E0 6F00                       		ble.s	locret_1BBB4		; if it's less, branch to return
0001D9E2 1038 F780                  		move.b	($FFFFF780).w,d0
0001D9E6 0200 00FC                  		andi.b	#$FC,d0
0001D9EA 4400                       		neg.b	d0
0001D9EC 0400 0040                  		subi.b	#$40,d0
0001D9F0 4EB9 0000 29AE             		jsr	(CalcSine).l
0001D9F6 C3FC 0400                  		muls.w	#$400,d1
0001D9FA E081                       		asr.l	#8,d1
0001D9FC 3141 0010                  		move.w	d1,$10(a0)
0001DA00 C1FC 0400                  		muls.w	#$400,d0
0001DA04 E080                       		asr.l	#8,d0
0001DA06 3140 0012                  		move.w	d0,$12(a0)		; set the speed to the jump release speed
0001DA0A 08A8 0007 0022             		bclr	#7,$22(a0)		; clear "Sonic has jumped" flag
0001DA10                             
0001DA10                            locret_1BBB4:
0001DA10 4E75                       		rts	
0001DA12                            ; ---------------------------------------------------------------------------
0001DA12                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DA12                            ; ---------------------------------------------------------------------------
0001DA12                            
0001DA12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA12                            
0001DA12                            
0001DA12                            SS_FixCamera:				; XREF: Obj09
0001DA12 3428 000C                  		move.w	$C(a0),d2
0001DA16 3628 0008                  		move.w	8(a0),d3
0001DA1A 3038 F700                  		move.w	($FFFFF700).w,d0
0001DA1E 0443 00A0                  		subi.w	#$A0,d3
0001DA22 6500                       		bcs.s	loc_1BBCE
0001DA24 9043                       		sub.w	d3,d0
0001DA26 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DA2A                            
0001DA2A                            loc_1BBCE:
0001DA2A 3038 F704                  		move.w	($FFFFF704).w,d0
0001DA2E 0442 0070                  		subi.w	#$70,d2
0001DA32 6500                       		bcs.s	locret_1BBDE
0001DA34 9042                       		sub.w	d2,d0
0001DA36 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DA3A                            
0001DA3A                            locret_1BBDE:
0001DA3A 4E75                       		rts	
0001DA3C                            ; End of function SS_FixCamera
0001DA3C                            
0001DA3C                            ; ===========================================================================
0001DA3C                            
0001DA3C                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DA3C 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DA42 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DA48 6600                       		bne.s	loc_1BBF4
0001DA4A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DA50                            
0001DA50                            loc_1BBF4:
0001DA50 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DA56 6D00                       		blt.s	loc_1BC12
0001DA58 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DA5E 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DA64 5428 0024                  		addq.b	#2,$24(a0)
0001DA68 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DA6E                            
0001DA6E                            loc_1BC12:
0001DA6E 3038 F780                  		move.w	($FFFFF780).w,d0
0001DA72 D078 F782                  		add.w	($FFFFF782).w,d0
0001DA76 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DA7A 4EB9 0001 57D2             		jsr	Sonic_Animate
0001DA80 4EB9 0001 5A5C             		jsr	LoadSonicDynPLC
0001DA86 6100 FF8A                  		bsr.w	SS_FixCamera
0001DA8A 4EF9 0000 F010             		jmp	DisplaySprite
0001DA90                            ; ===========================================================================
0001DA90                            
0001DA90                            Obj09_Exit2:				; XREF: Obj09_Index
0001DA90 5368 0038                  		subq.w	#1,$38(a0)
0001DA94 6600                       		bne.s	loc_1BC40
0001DA96 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DA9C                            
0001DA9C                            loc_1BC40:
0001DA9C 4EB9 0001 57D2             		jsr	Sonic_Animate
0001DAA2 4EB9 0001 5A5C             		jsr	LoadSonicDynPLC
0001DAA8 6100 FF68                  		bsr.w	SS_FixCamera
0001DAAC 4EF9 0000 F010             		jmp	DisplaySprite
0001DAB2                            
0001DAB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DAB2                            
0001DAB2                            
0001DAB2                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DAB2 2428 000C                  		move.l	$C(a0),d2
0001DAB6 2628 0008                  		move.l	8(a0),d3
0001DABA 1038 F780                  		move.b	($FFFFF780).w,d0
0001DABE 0200 00FC                  		andi.b	#$FC,d0
0001DAC2 4EB9 0000 29AE             		jsr	(CalcSine).l
0001DAC8 3828 0010                  		move.w	$10(a0),d4
0001DACC 48C4                       		ext.l	d4
0001DACE E184                       		asl.l	#8,d4
0001DAD0 C1FC 002A                  		muls.w	#$2A,d0
0001DAD4 D084                       		add.l	d4,d0
0001DAD6 3828 0012                  		move.w	$12(a0),d4
0001DADA 48C4                       		ext.l	d4
0001DADC E184                       		asl.l	#8,d4
0001DADE C3FC 002A                  		muls.w	#$2A,d1
0001DAE2 D284                       		add.l	d4,d1
0001DAE4 D680                       		add.l	d0,d3
0001DAE6 6100 0000                  		bsr.w	sub_1BCE8
0001DAEA 6700                       		beq.s	loc_1BCB0
0001DAEC 9680                       		sub.l	d0,d3
0001DAEE 7000                       		moveq	#0,d0
0001DAF0 3140 0010                  		move.w	d0,$10(a0)
0001DAF4 08A8 0001 0022             		bclr	#1,$22(a0)
0001DAFA D481                       		add.l	d1,d2
0001DAFC 6100 0000                  		bsr.w	sub_1BCE8
0001DB00 6700                       		beq.s	loc_1BCC6
0001DB02 9481                       		sub.l	d1,d2
0001DB04 7200                       		moveq	#0,d1
0001DB06 3141 0012                  		move.w	d1,$12(a0)
0001DB0A 4E75                       		rts	
0001DB0C                            ; ===========================================================================
0001DB0C                            
0001DB0C                            loc_1BCB0:
0001DB0C D481                       		add.l	d1,d2
0001DB0E 6100 0000                  		bsr.w	sub_1BCE8
0001DB12 6700                       		beq.s	loc_1BCD4
0001DB14 9481                       		sub.l	d1,d2
0001DB16 7200                       		moveq	#0,d1
0001DB18 3141 0012                  		move.w	d1,$12(a0)
0001DB1C 08A8 0001 0022             		bclr	#1,$22(a0)
0001DB22                            
0001DB22                            loc_1BCC6:
0001DB22 E080                       		asr.l	#8,d0
0001DB24 E081                       		asr.l	#8,d1
0001DB26 3140 0010                  		move.w	d0,$10(a0)
0001DB2A 3141 0012                  		move.w	d1,$12(a0)
0001DB2E 4E75                       		rts	
0001DB30                            ; ===========================================================================
0001DB30                            
0001DB30                            loc_1BCD4:
0001DB30 E080                       		asr.l	#8,d0
0001DB32 E081                       		asr.l	#8,d1
0001DB34 3140 0010                  		move.w	d0,$10(a0)
0001DB38 3141 0012                  		move.w	d1,$12(a0)
0001DB3C 08E8 0001 0022             		bset	#1,$22(a0)
0001DB42 4E75                       		rts	
0001DB44                            ; End of function Obj09_Fall
0001DB44                            
0001DB44                            
0001DB44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB44                            
0001DB44                            
0001DB44                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DB44 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DB4A 7800                       		moveq	#0,d4
0001DB4C 4842                       		swap	d2
0001DB4E 3802                       		move.w	d2,d4
0001DB50 4842                       		swap	d2
0001DB52 0644 0044                  		addi.w	#$44,d4
0001DB56 88FC 0018                  		divu.w	#$18,d4
0001DB5A C8FC 0080                  		mulu.w	#$80,d4
0001DB5E D3C4                       		adda.l	d4,a1
0001DB60 7800                       		moveq	#0,d4
0001DB62 4843                       		swap	d3
0001DB64 3803                       		move.w	d3,d4
0001DB66 4843                       		swap	d3
0001DB68 0644 0014                  		addi.w	#$14,d4
0001DB6C 88FC 0018                  		divu.w	#$18,d4
0001DB70 D2C4                       		adda.w	d4,a1
0001DB72 7A00                       		moveq	#0,d5
0001DB74 1819                       		move.b	(a1)+,d4
0001DB76 6100                       		bsr.s	sub_1BD30
0001DB78 1819                       		move.b	(a1)+,d4
0001DB7A 6100                       		bsr.s	sub_1BD30
0001DB7C D2FC 007E                  		adda.w	#$7E,a1
0001DB80 1819                       		move.b	(a1)+,d4
0001DB82 6100                       		bsr.s	sub_1BD30
0001DB84 1819                       		move.b	(a1)+,d4
0001DB86 6100                       		bsr.s	sub_1BD30
0001DB88 4A05                       		tst.b	d5
0001DB8A 4E75                       		rts	
0001DB8C                            ; End of function sub_1BCE8
0001DB8C                            
0001DB8C                            
0001DB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB8C                            
0001DB8C                            
0001DB8C                            sub_1BD30:				; XREF: sub_1BCE8
0001DB8C 6700                       		beq.s	locret_1BD44
0001DB8E 0C04 0028                  		cmpi.b	#$28,d4
0001DB92 6700                       		beq.s	locret_1BD44
0001DB94 0C04 003A                  		cmpi.b	#$3A,d4
0001DB98 6500                       		bcs.s	loc_1BD46
0001DB9A 0C04 004B                  		cmpi.b	#$4B,d4
0001DB9E 6400                       		bcc.s	loc_1BD46
0001DBA0                            
0001DBA0                            locret_1BD44:
0001DBA0 4E75                       		rts	
0001DBA2                            ; ===========================================================================
0001DBA2                            
0001DBA2                            loc_1BD46:
0001DBA2 1144 0030                  		move.b	d4,$30(a0)
0001DBA6 2149 0032                  		move.l	a1,$32(a0)
0001DBAA 7AFF                       		moveq	#-1,d5
0001DBAC 4E75                       		rts	
0001DBAE                            ; End of function sub_1BD30
0001DBAE                            
0001DBAE                            
0001DBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBAE                            
0001DBAE                            
0001DBAE                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DBAE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DBB4 7800                       		moveq	#0,d4
0001DBB6 3828 000C                  		move.w	$C(a0),d4
0001DBBA 0644 0050                  		addi.w	#$50,d4
0001DBBE 88FC 0018                  		divu.w	#$18,d4
0001DBC2 C8FC 0080                  		mulu.w	#$80,d4
0001DBC6 D3C4                       		adda.l	d4,a1
0001DBC8 7800                       		moveq	#0,d4
0001DBCA 3828 0008                  		move.w	8(a0),d4
0001DBCE 0644 0020                  		addi.w	#$20,d4
0001DBD2 88FC 0018                  		divu.w	#$18,d4
0001DBD6 D2C4                       		adda.w	d4,a1
0001DBD8 1811                       		move.b	(a1),d4
0001DBDA 6600                       		bne.s	Obj09_ChkCont
0001DBDC 4A28 003A                  		tst.b	$3A(a0)
0001DBE0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DBE4 7800                       		moveq	#0,d4
0001DBE6 4E75                       		rts	
0001DBE8                            ; ===========================================================================
0001DBE8                            
0001DBE8                            Obj09_ChkCont:
0001DBE8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DBEC 6600                       		bne.s	Obj09_Chk1Up
0001DBEE 6100 F6D6                  		bsr.w	SS_RemoveCollectedItem
0001DBF2 6600                       		bne.s	Obj09_GetCont
0001DBF4 14BC 0001                  		move.b	#1,(a2)
0001DBF8 2549 0004                  		move.l	a1,4(a2)
0001DBFC                            
0001DBFC                            Obj09_GetCont:
0001DBFC 4EB9 0000 B66A             		jsr	CollectRing
0001DC02 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DC08 6500                       		bcs.s	Obj09_NoCont
0001DC0A 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DC10 6600                       		bne.s	Obj09_NoCont
0001DC12 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DC16 303C 00BF                  		move.w	#$BF,d0
0001DC1A 4EB9 0000 12C2             		jsr	(PlaySound).l	; play extra continue sound
0001DC20                            
0001DC20                            Obj09_NoCont:
0001DC20 7800                       		moveq	#0,d4
0001DC22 4E75                       		rts	
0001DC24                            ; ===========================================================================
0001DC24                            
0001DC24                            Obj09_Chk1Up:
0001DC24 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DC28 6600                       		bne.s	Obj09_ChkEmer
0001DC2A 6100 F69A                  		bsr.w	SS_RemoveCollectedItem
0001DC2E 6600                       		bne.s	Obj09_Get1Up
0001DC30 14BC 0003                  		move.b	#3,(a2)
0001DC34 2549 0004                  		move.l	a1,4(a2)
0001DC38                            
0001DC38                            Obj09_Get1Up:
0001DC38 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DC3C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DC40 303C 009F                  		move.w	#$9F,d0
0001DC44 4EB9 0000 12C2             		jsr	(PlaySound).l	; play extra life music
0001DC4A 7800                       		moveq	#0,d4
0001DC4C 4E75                       		rts	
0001DC4E                            ; ===========================================================================
0001DC4E                            
0001DC4E                            Obj09_ChkEmer:
0001DC4E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DC52 6500                       		bcs.s	Obj09_ChkGhost
0001DC54 0C04 0040                  		cmpi.b	#$40,d4
0001DC58 6200                       		bhi.s	Obj09_ChkGhost
0001DC5A 6100 F66A                  		bsr.w	SS_RemoveCollectedItem
0001DC5E 6600                       		bne.s	Obj09_GetEmer
0001DC60 14BC 0005                  		move.b	#5,(a2)
0001DC64 2549 0004                  		move.l	a1,4(a2)
0001DC68                            
0001DC68                            Obj09_GetEmer:
0001DC68 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001DC6E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001DC70 0404 003B                  		subi.b	#$3B,d4
0001DC74 7000                       		moveq	#0,d0
0001DC76 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001DC7A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001DC7E 1584 0000                  		move.b	d4,(a2,d0.w)
0001DC82 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001DC86                            
0001DC86                            Obj09_NoEmer:
0001DC86 303C 0096                  		move.w	#$96,d0
0001DC8A 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play emerald music
0001DC90 7800                       		moveq	#0,d4
0001DC92 4E75                       		rts	
0001DC94                            ; ===========================================================================
0001DC94                            
0001DC94                            Obj09_ChkGhost:
0001DC94 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001DC98 6600                       		bne.s	Obj09_ChkGhostTag
0001DC9A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001DCA0                            
0001DCA0                            Obj09_ChkGhostTag:
0001DCA0 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001DCA4 6600                       		bne.s	Obj09_NoGhost
0001DCA6 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001DCAC 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001DCAE 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001DCB4                            
0001DCB4                            Obj09_NoGhost:
0001DCB4 78FF                       		moveq	#-1,d4
0001DCB6 4E75                       		rts	
0001DCB8                            ; ===========================================================================
0001DCB8                            
0001DCB8                            Obj09_MakeGhostSolid:
0001DCB8 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001DCBE 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001DCC0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DCC6 723F                       		moveq	#$3F,d1
0001DCC8                            
0001DCC8                            Obj09_GhostLoop2:
0001DCC8 743F                       		moveq	#$3F,d2
0001DCCA                            
0001DCCA                            Obj09_GhostLoop:
0001DCCA 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001DCCE 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001DCD0 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001DCD4                            
0001DCD4                            Obj09_NoReplace:
0001DCD4 5249                       		addq.w	#1,a1
0001DCD6 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001DCDA 43E9 0040                  		lea	$40(a1),a1
0001DCDE 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001DCE2                            
0001DCE2                            Obj09_GhostNotSolid:
0001DCE2 4228 003A                  		clr.b	$3A(a0)
0001DCE6 7800                       		moveq	#0,d4
0001DCE8 4E75                       		rts	
0001DCEA                            ; End of function Obj09_ChkItems
0001DCEA                            
0001DCEA                            
0001DCEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCEA                            
0001DCEA                            
0001DCEA                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001DCEA 1028 0030                  		move.b	$30(a0),d0
0001DCEE 6600                       		bne.s	Obj09_ChkBumper
0001DCF0 5328 0036                  		subq.b	#1,$36(a0)
0001DCF4 6A00                       		bpl.s	loc_1BEA0
0001DCF6 117C 0000 0036             		move.b	#0,$36(a0)
0001DCFC                            
0001DCFC                            loc_1BEA0:
0001DCFC 5328 0037                  		subq.b	#1,$37(a0)
0001DD00 6A00                       		bpl.s	locret_1BEAC
0001DD02 117C 0000 0037             		move.b	#0,$37(a0)
0001DD08                            
0001DD08                            locret_1BEAC:
0001DD08 4E75                       		rts	
0001DD0A                            ; ===========================================================================
0001DD0A                            
0001DD0A                            Obj09_ChkBumper:
0001DD0A 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001DD0E 6600                       		bne.s	Obj09_GOAL
0001DD10 2228 0032                  		move.l	$32(a0),d1
0001DD14 0481 00FF 0001             		subi.l	#$FF0001,d1
0001DD1A 3401                       		move.w	d1,d2
0001DD1C 0241 007F                  		andi.w	#$7F,d1
0001DD20 C2FC 0018                  		mulu.w	#$18,d1
0001DD24 0441 0014                  		subi.w	#$14,d1
0001DD28 EE4A                       		lsr.w	#7,d2
0001DD2A 0242 007F                  		andi.w	#$7F,d2
0001DD2E C4FC 0018                  		mulu.w	#$18,d2
0001DD32 0442 0044                  		subi.w	#$44,d2
0001DD36 9268 0008                  		sub.w	8(a0),d1
0001DD3A 9468 000C                  		sub.w	$C(a0),d2
0001DD3E 4EB9 0000 2C7C             		jsr	(CalcAngle).l
0001DD44 4EB9 0000 29AE             		jsr	(CalcSine).l
0001DD4A C3FC F900                  		muls.w	#-$700,d1
0001DD4E E081                       		asr.l	#8,d1
0001DD50 3141 0010                  		move.w	d1,$10(a0)
0001DD54 C1FC F900                  		muls.w	#-$700,d0
0001DD58 E080                       		asr.l	#8,d0
0001DD5A 3140 0012                  		move.w	d0,$12(a0)
0001DD5E 08E8 0001 0022             		bset	#1,$22(a0)
0001DD64 6100 F560                  		bsr.w	SS_RemoveCollectedItem
0001DD68 6600                       		bne.s	Obj09_BumpSnd
0001DD6A 14BC 0002                  		move.b	#2,(a2)
0001DD6E 2028 0032                  		move.l	$32(a0),d0
0001DD72 5380                       		subq.l	#1,d0
0001DD74 2540 0004                  		move.l	d0,4(a2)
0001DD78                            
0001DD78                            Obj09_BumpSnd:
0001DD78 303C 00B4                  		move.w	#$B4,d0
0001DD7C 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play bumper sound
0001DD82                            ; ===========================================================================
0001DD82                            
0001DD82                            Obj09_GOAL:
0001DD82 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001DD86 6600                       		bne.s	Obj09_UPblock
0001DD88 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001DD8C 303C 00A8                  		move.w	#$A8,d0		; change item
0001DD90 4EB9 0000 12C8             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001DD96 4E75                       		rts	
0001DD98                            ; ===========================================================================
0001DD98                            
0001DD98                            Obj09_UPblock:
0001DD98 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001DD9C 6600                       		bne.s	Obj09_DOWNblock
0001DD9E 4A28 0036                  		tst.b	$36(a0)
0001DDA2 6600 0000                  		bne.w	Obj09_NoGlass
0001DDA6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DDAC 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DDB2 6700                       		beq.s	Obj09_UPsnd
0001DDB4 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001DDB8 2268 0032                  		movea.l	$32(a0),a1
0001DDBC 5389                       		subq.l	#1,a1
0001DDBE 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001DDC2                            
0001DDC2                            Obj09_UPsnd:
0001DDC2 303C 00A9                  		move.w	#$A9,d0
0001DDC6 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play up/down sound
0001DDCC                            ; ===========================================================================
0001DDCC                            
0001DDCC                            Obj09_DOWNblock:
0001DDCC 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001DDD0 6600                       		bne.s	Obj09_Rblock
0001DDD2 4A28 0036                  		tst.b	$36(a0)
0001DDD6 6600 0000                  		bne.w	Obj09_NoGlass
0001DDDA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DDE0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DDE6 6600                       		bne.s	Obj09_DOWNsnd
0001DDE8 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001DDEC 2268 0032                  		movea.l	$32(a0),a1
0001DDF0 5389                       		subq.l	#1,a1
0001DDF2 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001DDF6                            
0001DDF6                            Obj09_DOWNsnd:
0001DDF6 303C 00A9                  		move.w	#$A9,d0
0001DDFA 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play up/down sound
0001DE00                            ; ===========================================================================
0001DE00                            
0001DE00                            Obj09_Rblock:
0001DE00 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001DE04 6600                       		bne.s	Obj09_ChkGlass
0001DE06 4A28 0037                  		tst.b	$37(a0)
0001DE0A 6600 0000                  		bne.w	Obj09_NoGlass
0001DE0E 117C 001E 0037             		move.b	#$1E,$37(a0)
0001DE14 6100 F4B0                  		bsr.w	SS_RemoveCollectedItem
0001DE18 6600                       		bne.s	Obj09_RevStage
0001DE1A 14BC 0004                  		move.b	#4,(a2)
0001DE1E 2028 0032                  		move.l	$32(a0),d0
0001DE22 5380                       		subq.l	#1,d0
0001DE24 2540 0004                  		move.l	d0,4(a2)
0001DE28                            
0001DE28                            Obj09_RevStage:
0001DE28 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001DE2C 303C 00A9                  		move.w	#$A9,d0
0001DE30 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play sound
0001DE36                            ; ===========================================================================
0001DE36                            
0001DE36                            Obj09_ChkGlass:
0001DE36 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001DE3A 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001DE3C 0C00 002E                  		cmpi.b	#$2E,d0
0001DE40 6700                       		beq.s	Obj09_Glass
0001DE42 0C00 002F                  		cmpi.b	#$2F,d0
0001DE46 6700                       		beq.s	Obj09_Glass
0001DE48 0C00 0030                  		cmpi.b	#$30,d0
0001DE4C 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001DE4E                            
0001DE4E                            Obj09_Glass:
0001DE4E 6100 F476                  		bsr.w	SS_RemoveCollectedItem
0001DE52 6600                       		bne.s	Obj09_GlassSnd
0001DE54 14BC 0006                  		move.b	#6,(a2)
0001DE58 2268 0032                  		movea.l	$32(a0),a1
0001DE5C 5389                       		subq.l	#1,a1
0001DE5E 2549 0004                  		move.l	a1,4(a2)
0001DE62 1011                       		move.b	(a1),d0
0001DE64 5200                       		addq.b	#1,d0		; change glass type when touched
0001DE66 0C00 0030                  		cmpi.b	#$30,d0
0001DE6A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001DE6C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001DE6E                            
0001DE6E                            Obj09_GlassUpdate:
0001DE6E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001DE72                            
0001DE72                            Obj09_GlassSnd:
0001DE72 303C 00BA                  		move.w	#$BA,d0
0001DE76 4EF9 0000 12C8             		jmp	(PlaySound_Special).l ;	play glass block sound
0001DE7C                            ; ===========================================================================
0001DE7C                            
0001DE7C                            Obj09_NoGlass:
0001DE7C 4E75                       		rts	
0001DE7E                            ; End of function Obj09_ChkItems2
0001DE7E                            
0001DE7E                            ; ===========================================================================
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            ; Object 10 - blank
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            
0001DE7E                            Obj10:					; XREF: Obj_Index
0001DE7E 4E75                       		rts	
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80                            ; Subroutine to	animate	level graphics
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80                            
0001DE80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE80                            
0001DE80                            
0001DE80                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001DE80 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001DE84 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001DE86 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DE8C 6100 0000                  		bsr.w	AniArt_GiantRing
0001DE90 7000                       		moveq	#0,d0
0001DE92 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DE96 D040                       		add.w	d0,d0
0001DE98 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001DE9C 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001DEA0                            ; ===========================================================================
0001DEA0                            
0001DEA0                            AniArt_Pause:
0001DEA0 4E75                       		rts	
0001DEA2                            ; End of function AniArt_Load
0001DEA2                            
0001DEA2                            ; ===========================================================================
0001DEA2 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001DEA6 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001DEAA 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001DEAE 0000                       		dc.w AniArt_Ending-AniArt_Index
0001DEB0                            ; ===========================================================================
0001DEB0                            ; ---------------------------------------------------------------------------
0001DEB0                            ; Animated pattern routine - Green Hill
0001DEB0                            ; ---------------------------------------------------------------------------
0001DEB0                            
0001DEB0                            AniArt_GHZ:				; XREF: AniArt_Index
0001DEB0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DEB4 6A00                       		bpl.s	loc_1C08A
0001DEB6 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001DEBC 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001DEC2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DEC6 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DECA 0240 0001                  		andi.w	#1,d0
0001DECE 6700                       		beq.s	loc_1C078
0001DED0 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001DED4                            
0001DED4                            loc_1C078:
0001DED4 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001DEDE 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001DEE2 6000 0000                  		bra.w	LoadTiles
0001DEE6                            ; ===========================================================================
0001DEE6                            
0001DEE6                            loc_1C08A:
0001DEE6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DEEA 6A00                       		bpl.s	loc_1C0C0
0001DEEC 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001DEF2 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DEF8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DEFC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DF00 0240 0001                  		andi.w	#1,d0
0001DF04 6700                       		beq.s	loc_1C0AE
0001DF06 43E9 0200                  		lea	$200(a1),a1
0001DF0A                            
0001DF0A                            loc_1C0AE:
0001DF0A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DF14 323C 000F                  		move.w	#$F,d1
0001DF18 6000 0000                  		bra.w	LoadTiles
0001DF1C                            ; ===========================================================================
0001DF1C                            
0001DF1C                            loc_1C0C0:
0001DF1C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DF20 6A00                       		bpl.s	locret_1C10C
0001DF22 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DF28 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DF2C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DF30 0240 0003                  		andi.w	#3,d0
0001DF34 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001DF38 0800 0000                  		btst	#0,d0
0001DF3C 6600                       		bne.s	loc_1C0E8
0001DF3E 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001DF44                            
0001DF44                            loc_1C0E8:
0001DF44 EF48                       		lsl.w	#7,d0
0001DF46 3200                       		move.w	d0,d1
0001DF48 D040                       		add.w	d0,d0
0001DF4A D041                       		add.w	d1,d0
0001DF4C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DF56 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DF5C 43F1 0000                  		lea	(a1,d0.w),a1
0001DF60 323C 000B                  		move.w	#$B,d1
0001DF64 6100 0000                  		bsr.w	LoadTiles
0001DF68                            
0001DF68                            locret_1C10C:
0001DF68 4E75                       		rts	
0001DF6A                            ; ===========================================================================
0001DF6A 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001DF6E                            ; ===========================================================================
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E                            ; Animated pattern routine - Marble
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E                            
0001DF6E                            AniArt_MZ:				; XREF: AniArt_Index
0001DF6E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DF72 6A00                       		bpl.s	loc_1C150
0001DF74 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001DF7A 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001DF80 7000                       		moveq	#0,d0
0001DF82 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DF86 5200                       		addq.b	#1,d0
0001DF88 0C00 0003                  		cmpi.b	#3,d0
0001DF8C 6600                       		bne.s	loc_1C134
0001DF8E 7000                       		moveq	#0,d0
0001DF90                            
0001DF90                            loc_1C134:
0001DF90 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001DF94 C0FC 0100                  		mulu.w	#$100,d0
0001DF98 D2C0                       		adda.w	d0,a1
0001DF9A 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001DFA4 323C 0007                  		move.w	#7,d1
0001DFA8 6100 0000                  		bsr.w	LoadTiles
0001DFAC                            
0001DFAC                            loc_1C150:
0001DFAC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DFB0 6A00                       		bpl.s	loc_1C1AE
0001DFB2 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001DFB8 7000                       		moveq	#0,d0
0001DFBA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DFBE 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001DFC4 EE58                       		ror.w	#7,d0
0001DFC6 D8C0                       		adda.w	d0,a4
0001DFC8 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001DFD2 7600                       		moveq	#0,d3
0001DFD4 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001DFD8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DFDC 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001DFE0 343C 0003                  		move.w	#3,d2
0001DFE4                            
0001DFE4                            loc_1C188:
0001DFE4 3003                       		move.w	d3,d0
0001DFE6 D040                       		add.w	d0,d0
0001DFE8 0240 001E                  		andi.w	#$1E,d0
0001DFEC 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001DFF2 3033 0000                  		move.w	(a3,d0.w),d0
0001DFF6 47F3 0000                  		lea	(a3,d0.w),a3
0001DFFA 224C                       		movea.l	a4,a1
0001DFFC 323C 001F                  		move.w	#$1F,d1
0001E000 4E93                       		jsr	(a3)
0001E002 5843                       		addq.w	#4,d3
0001E004 51CA FFDE                  		dbf	d2,loc_1C188
0001E008 4E75                       		rts	
0001E00A                            ; ===========================================================================
0001E00A                            
0001E00A                            loc_1C1AE:
0001E00A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E00E 6A00 0000                  		bpl.w	locret_1C1EA
0001E012 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E018 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E01E 7000                       		moveq	#0,d0
0001E020 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E024 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E028 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E02E C0FC 00C0                  		mulu.w	#$C0,d0
0001E032 D2C0                       		adda.w	d0,a1
0001E034 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E03E 323C 0005                  		move.w	#5,d1
0001E042 6000 0000                  		bra.w	LoadTiles
0001E046                            ; ===========================================================================
0001E046                            
0001E046                            locret_1C1EA:
0001E046 4E75                       		rts	
0001E048                            ; ===========================================================================
0001E048                            ; ---------------------------------------------------------------------------
0001E048                            ; Animated pattern routine - Scrap Brain
0001E048                            ; ---------------------------------------------------------------------------
0001E048                            
0001E048                            AniArt_SBZ:				; XREF: AniArt_Index
0001E048 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E04C 6700                       		beq.s	loc_1C1F8
0001E04E 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E052 6000                       		bra.s	loc_1C250
0001E054                            ; ===========================================================================
0001E054                            
0001E054                            loc_1C1F8:
0001E054 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E058 6A00                       		bpl.s	loc_1C250
0001E05A 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E060 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E066 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E070 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E074 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E078 0240 0007                  		andi.w	#7,d0
0001E07C 6700                       		beq.s	loc_1C234
0001E07E 5340                       		subq.w	#1,d0
0001E080 C0FC 0180                  		mulu.w	#$180,d0
0001E084 43F1 0000                  		lea	(a1,d0.w),a1
0001E088 323C 000B                  		move.w	#$B,d1
0001E08C 6000 0000                  		bra.w	LoadTiles
0001E090                            ; ===========================================================================
0001E090                            
0001E090                            loc_1C234:
0001E090 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E096                            
0001E096                            loc_1C23A:
0001E096 323C 0005                  		move.w	#5,d1
0001E09A 6100 0000                  		bsr.w	LoadTiles
0001E09E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E0A4 323C 0005                  		move.w	#5,d1
0001E0A8 6000 0000                  		bra.w	LoadTiles
0001E0AC                            ; ===========================================================================
0001E0AC                            
0001E0AC                            loc_1C250:
0001E0AC 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E0B0 6700                       		beq.s	loc_1C25C
0001E0B2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E0B6 6000                       		bra.s	locret_1C2A0
0001E0B8                            ; ===========================================================================
0001E0B8                            
0001E0B8                            loc_1C25C:
0001E0B8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E0BC 6A00                       		bpl.s	locret_1C2A0
0001E0BE 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E0C4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E0CA 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E0D4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E0D8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E0DC 0240 0007                  		andi.w	#7,d0
0001E0E0 6700                       		beq.s	loc_1C298
0001E0E2 5340                       		subq.w	#1,d0
0001E0E4 C0FC 0180                  		mulu.w	#$180,d0
0001E0E8 43F1 0000                  		lea	(a1,d0.w),a1
0001E0EC 323C 000B                  		move.w	#$B,d1
0001E0F0 6000 0000                  		bra.w	LoadTiles
0001E0F4                            ; ===========================================================================
0001E0F4                            
0001E0F4                            loc_1C298:
0001E0F4 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E0FA 609A                       		bra.s	loc_1C23A
0001E0FC                            ; ===========================================================================
0001E0FC                            
0001E0FC                            locret_1C2A0:
0001E0FC 4E75                       		rts	
0001E0FE                            ; ===========================================================================
0001E0FE                            ; ---------------------------------------------------------------------------
0001E0FE                            ; Animated pattern routine - ending sequence
0001E0FE                            ; ---------------------------------------------------------------------------
0001E0FE                            
0001E0FE                            AniArt_Ending:				; XREF: AniArt_Index
0001E0FE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E102 6A00                       		bpl.s	loc_1C2F4
0001E104 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E10A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E110 45F8 9400                  		lea	($FFFF9400).w,a2
0001E114 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E118 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E11C 0240 0001                  		andi.w	#1,d0
0001E120 6700                       		beq.s	loc_1C2CE
0001E122 43E9 0200                  		lea	$200(a1),a1
0001E126 45EA 0200                  		lea	$200(a2),a2
0001E12A                            
0001E12A                            loc_1C2CE:
0001E12A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E134 323C 000F                  		move.w	#$F,d1
0001E138 6100 0000                  		bsr.w	LoadTiles
0001E13C 224A                       		movea.l	a2,a1
0001E13E 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E148 323C 000F                  		move.w	#$F,d1
0001E14C 6000 0000                  		bra.w	LoadTiles
0001E150                            ; ===========================================================================
0001E150                            
0001E150                            loc_1C2F4:
0001E150 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E154 6A00                       		bpl.s	loc_1C33C
0001E156 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E15C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E160 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E164 0240 0007                  		andi.w	#7,d0
0001E168 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E16C EF48                       		lsl.w	#7,d0
0001E16E 3200                       		move.w	d0,d1
0001E170 D040                       		add.w	d0,d0
0001E172 D041                       		add.w	d1,d0
0001E174 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E17E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E184 43F1 0000                  		lea	(a1,d0.w),a1
0001E188 323C 000B                  		move.w	#$B,d1
0001E18C 6000 0000                  		bra.w	LoadTiles
0001E190                            ; ===========================================================================
0001E190 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E198                            ; ===========================================================================
0001E198                            
0001E198                            loc_1C33C:
0001E198 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E19C 6A00                       		bpl.s	loc_1C37A
0001E19E 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E1A4 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E1A8 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E1AC 0240 0003                  		andi.w	#3,d0
0001E1B0 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E1B4 E148                       		lsl.w	#8,d0
0001E1B6 D040                       		add.w	d0,d0
0001E1B8 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E1C2 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E1C6 43F1 0000                  		lea	(a1,d0.w),a1
0001E1CA 323C 000F                  		move.w	#$F,d1
0001E1CE 6000 0000                  		bra.w	LoadTiles
0001E1D2                            ; ===========================================================================
0001E1D2 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E1D6                            ; ===========================================================================
0001E1D6                            
0001E1D6                            loc_1C37A:
0001E1D6 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E1DA 6A00                       		bpl.s	locret_1C3B4
0001E1DC 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E1E2 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E1E6 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E1EA 0240 0003                  		andi.w	#3,d0
0001E1EE 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E1F2 E148                       		lsl.w	#8,d0
0001E1F4 D040                       		add.w	d0,d0
0001E1F6 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E200 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E204 43F1 0000                  		lea	(a1,d0.w),a1
0001E208 323C 000F                  		move.w	#$F,d1
0001E20C 6000 0000                  		bra.w	LoadTiles
0001E210                            ; ===========================================================================
0001E210                            
0001E210                            locret_1C3B4:
0001E210 4E75                       		rts	
0001E212                            ; ===========================================================================
0001E212                            
0001E212                            AniArt_none:				; XREF: AniArt_Index
0001E212 4E75                       		rts	
0001E214                            
0001E214                            ; ---------------------------------------------------------------------------
0001E214                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E214                            ; ---------------------------------------------------------------------------
0001E214                            
0001E214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E214                            
0001E214                            
0001E214                            LoadTiles:
0001E214 2C99                       		move.l	(a1)+,(a6)
0001E216 2C99                       		move.l	(a1)+,(a6)
0001E218 2C99                       		move.l	(a1)+,(a6)
0001E21A 2C99                       		move.l	(a1)+,(a6)
0001E21C 2C99                       		move.l	(a1)+,(a6)
0001E21E 2C99                       		move.l	(a1)+,(a6)
0001E220 2C99                       		move.l	(a1)+,(a6)
0001E222 2C99                       		move.l	(a1)+,(a6)
0001E224 51C9 FFEE                  		dbf	d1,LoadTiles
0001E228 4E75                       		rts	
0001E22A                            ; End of function LoadTiles
0001E22A                            
0001E22A                            ; ===========================================================================
0001E22A                            ; ---------------------------------------------------------------------------
0001E22A                            ; Animated pattern routine - more Marble Zone
0001E22A                            ; ---------------------------------------------------------------------------
0001E22A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E22E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E232 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E236 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E23A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E23E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E242 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E246 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E24A                            ; ===========================================================================
0001E24A                            
0001E24A                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E24A 2C91                       		move.l	(a1),(a6)
0001E24C 43E9 0010                  		lea	$10(a1),a1
0001E250 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E254 4E75                       		rts	
0001E256                            ; ===========================================================================
0001E256                            
0001E256                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E256 2029 0002                  		move.l	2(a1),d0
0001E25A 1029 0001                  		move.b	1(a1),d0
0001E25E E098                       		ror.l	#8,d0
0001E260 2C80                       		move.l	d0,(a6)
0001E262 43E9 0010                  		lea	$10(a1),a1
0001E266 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E26A 4E75                       		rts	
0001E26C                            ; ===========================================================================
0001E26C                            
0001E26C                            loc_1C410:				; XREF: AniArt_MZextra
0001E26C 2CA9 0002                  		move.l	2(a1),(a6)
0001E270 43E9 0010                  		lea	$10(a1),a1
0001E274 51C9 FFF6                  		dbf	d1,loc_1C410
0001E278 4E75                       		rts	
0001E27A                            ; ===========================================================================
0001E27A                            
0001E27A                            loc_1C41E:				; XREF: AniArt_MZextra
0001E27A 2029 0004                  		move.l	4(a1),d0
0001E27E 1029 0003                  		move.b	3(a1),d0
0001E282 E098                       		ror.l	#8,d0
0001E284 2C80                       		move.l	d0,(a6)
0001E286 43E9 0010                  		lea	$10(a1),a1
0001E28A 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E28E 4E75                       		rts	
0001E290                            ; ===========================================================================
0001E290                            
0001E290                            loc_1C434:				; XREF: AniArt_MZextra
0001E290 2CA9 0004                  		move.l	4(a1),(a6)
0001E294 43E9 0010                  		lea	$10(a1),a1
0001E298 51C9 FFF6                  		dbf	d1,loc_1C434
0001E29C 4E75                       		rts	
0001E29E                            ; ===========================================================================
0001E29E                            
0001E29E                            loc_1C442:				; XREF: AniArt_MZextra
0001E29E 2029 0006                  		move.l	6(a1),d0
0001E2A2 1029 0005                  		move.b	5(a1),d0
0001E2A6 E098                       		ror.l	#8,d0
0001E2A8 2C80                       		move.l	d0,(a6)
0001E2AA 43E9 0010                  		lea	$10(a1),a1
0001E2AE 51C9 FFEE                  		dbf	d1,loc_1C442
0001E2B2 4E75                       		rts	
0001E2B4                            ; ===========================================================================
0001E2B4                            
0001E2B4                            loc_1C458:				; XREF: AniArt_MZextra
0001E2B4 2CA9 0006                  		move.l	6(a1),(a6)
0001E2B8 43E9 0010                  		lea	$10(a1),a1
0001E2BC 51C9 FFF6                  		dbf	d1,loc_1C458
0001E2C0 4E75                       		rts	
0001E2C2                            ; ===========================================================================
0001E2C2                            
0001E2C2                            loc_1C466:				; XREF: AniArt_MZextra
0001E2C2 2029 0008                  		move.l	8(a1),d0
0001E2C6 1029 0007                  		move.b	7(a1),d0
0001E2CA E098                       		ror.l	#8,d0
0001E2CC 2C80                       		move.l	d0,(a6)
0001E2CE 43E9 0010                  		lea	$10(a1),a1
0001E2D2 51C9 FFEE                  		dbf	d1,loc_1C466
0001E2D6 4E75                       		rts	
0001E2D8                            ; ===========================================================================
0001E2D8                            
0001E2D8                            loc_1C47C:				; XREF: AniArt_MZextra
0001E2D8 2CA9 0008                  		move.l	8(a1),(a6)
0001E2DC 43E9 0010                  		lea	$10(a1),a1
0001E2E0 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E2E4 4E75                       		rts	
0001E2E6                            ; ===========================================================================
0001E2E6                            
0001E2E6                            loc_1C48A:				; XREF: AniArt_MZextra
0001E2E6 2029 000A                  		move.l	$A(a1),d0
0001E2EA 1029 0009                  		move.b	9(a1),d0
0001E2EE E098                       		ror.l	#8,d0
0001E2F0 2C80                       		move.l	d0,(a6)
0001E2F2 43E9 0010                  		lea	$10(a1),a1
0001E2F6 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E2FA 4E75                       		rts	
0001E2FC                            ; ===========================================================================
0001E2FC                            
0001E2FC                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E2FC 2CA9 000A                  		move.l	$A(a1),(a6)
0001E300 43E9 0010                  		lea	$10(a1),a1
0001E304 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E308 4E75                       		rts	
0001E30A                            ; ===========================================================================
0001E30A                            
0001E30A                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E30A 2029 000C                  		move.l	$C(a1),d0
0001E30E 1029 000B                  		move.b	$B(a1),d0
0001E312 E098                       		ror.l	#8,d0
0001E314 2C80                       		move.l	d0,(a6)
0001E316 43E9 0010                  		lea	$10(a1),a1
0001E31A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E31E 4E75                       		rts	
0001E320                            ; ===========================================================================
0001E320                            
0001E320                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E320 2CA9 000C                  		move.l	$C(a1),(a6)
0001E324 43E9 0010                  		lea	$10(a1),a1
0001E328 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E32C 4E75                       		rts	
0001E32E                            ; ===========================================================================
0001E32E                            
0001E32E                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E32E 2029 000C                  		move.l	$C(a1),d0
0001E332 E198                       		rol.l	#8,d0
0001E334 1011                       		move.b	0(a1),d0
0001E336 2C80                       		move.l	d0,(a6)
0001E338 43E9 0010                  		lea	$10(a1),a1
0001E33C 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E340 4E75                       		rts	
0001E342                            ; ===========================================================================
0001E342                            
0001E342                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E342 3CA9 000E                  		move.w	$E(a1),(a6)
0001E346 3C91                       		move.w	0(a1),(a6)
0001E348 43E9 0010                  		lea	$10(a1),a1
0001E34C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E350 4E75                       		rts	
0001E352                            ; ===========================================================================
0001E352                            
0001E352                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E352 2011                       		move.l	0(a1),d0
0001E354 1029 000F                  		move.b	$F(a1),d0
0001E358 E098                       		ror.l	#8,d0
0001E35A 2C80                       		move.l	d0,(a6)
0001E35C 43E9 0010                  		lea	$10(a1),a1
0001E360 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E364 4E75                       		rts	
0001E366                            
0001E366                            ; ---------------------------------------------------------------------------
0001E366                            ; Animated pattern routine - giant ring
0001E366                            ; ---------------------------------------------------------------------------
0001E366                            
0001E366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E366                            
0001E366                            
0001E366                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E366 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E36A 6600                       		bne.s	loc_1C518
0001E36C 4E75                       		rts	
0001E36E                            ; ===========================================================================
0001E36E                            
0001E36E                            loc_1C518:
0001E36E 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E374 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E37A 7000                       		moveq	#0,d0
0001E37C 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E380 43F1 0000                  		lea	(a1,d0.w),a1
0001E384 0640 8000                  		addi.w	#$8000,d0
0001E388 E588                       		lsl.l	#2,d0
0001E38A E448                       		lsr.w	#2,d0
0001E38C 0040 4000                  		ori.w	#$4000,d0
0001E390 4840                       		swap	d0
0001E392 2D40 0004                  		move.l	d0,4(a6)
0001E396 323C 000D                  		move.w	#$D,d1
0001E39A 6000 FE78                  		bra.w	LoadTiles
0001E39E                            ; End of function AniArt_GiantRing
0001E39E                            
0001E39E                            ; ===========================================================================
0001E39E                            ; ---------------------------------------------------------------------------
0001E39E                            ; Object 21 - SCORE, TIME, RINGS
0001E39E                            ; ---------------------------------------------------------------------------
0001E39E                            
0001E39E                            Obj21:					; XREF: Obj_Index
0001E39E 7000                       		moveq	#0,d0
0001E3A0 1028 0024                  		move.b	$24(a0),d0
0001E3A4 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001E3A8 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001E3AC                            ; ===========================================================================
0001E3AC 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001E3AE 0000                       		dc.w Obj21_Flash-Obj21_Index
0001E3B0                            ; ===========================================================================
0001E3B0                            
0001E3B0                            Obj21_Main:				; XREF: Obj21_Main
0001E3B0 5428 0024                  		addq.b	#2,$24(a0)
0001E3B4 317C 0090 0008             		move.w	#$90,8(a0)
0001E3BA 317C 0108 000A             		move.w	#$108,$A(a0)
0001E3C0 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001E3C8 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001E3CE 117C 0000 0001             		move.b	#0,1(a0)
0001E3D4 117C 0000 0018             		move.b	#0,$18(a0)
0001E3DA                            
0001E3DA                            Obj21_Flash:				; XREF: Obj21_Main
0001E3DA 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001E3DE 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001E3E0 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001E3E4 4EF9 0000 F010             		jmp	DisplaySprite
0001E3EA                            ; ===========================================================================
0001E3EA                            
0001E3EA                            
0001E3EA                            Obj21_Flash2:
0001E3EA 7000                       		moveq	#0,d0
0001E3EC 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001E3F2 6600                       		bne.s	Obj21_Display
0001E3F4 5240                       		addq.w	#1,d0		; make ring counter flash red
0001E3F6 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001E3FC 6600                       		bne.s	Obj21_Display	; if not, branch
0001E3FE 5440                       		addq.w	#2,d0		; make time counter flash red
0001E400                            
0001E400                            Obj21_Display:
0001E400 1140 001A                  		move.b	d0,$1A(a0)
0001E404 4EF9 0000 F010             		jmp	DisplaySprite
0001E40A                            ; ===========================================================================
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A                            ; Sprite mappings - SCORE, TIME, RINGS
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A                            Map_obj21:
0001E40A                            	include "_maps\obj21.asm"
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A                            ; Sprite mappings - SCORE, TIME, RINGS
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001E40E 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001E412 0A                         byte_1C5BC:	dc.b $A
0001E413 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E418 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E41D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E422 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E427 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E42C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E431 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E436 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E43B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E440 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E445 00                         		dc.b 0
0001E446 0A                         byte_1C5F0:	dc.b $A
0001E447 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E44C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E451 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E456 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E45B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E460 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E465 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E46A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E46F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E474 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E479 00                         		dc.b 0
0001E47A 0A                         byte_1C624:	dc.b $A
0001E47B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E480 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E485 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E48A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E48F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E494 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E499 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E49E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E4A3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E4A8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E4AD 00                         		dc.b 0
0001E4AE 0A                         byte_1C658:	dc.b $A
0001E4AF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E4B4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E4B9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E4BE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E4C3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E4C8 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E4CD A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E4D2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E4D7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E4DC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E4E2 00                         		even
0001E4E2 00                         		even
0001E4E2                            
0001E4E2                            ; ---------------------------------------------------------------------------
0001E4E2                            ; Add points subroutine
0001E4E2                            ; ---------------------------------------------------------------------------
0001E4E2                            
0001E4E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4E2                            
0001E4E2                            
0001E4E2                            AddPoints:
0001E4E2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E4E8 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E4EC 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E4F0 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E4F2 223C 000F 423F             		move.l	#999999,d1
0001E4F8 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E4FA 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E4FE 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E500 2481                       		move.l	d1,(a2)
0001E502                            
0001E502                            loc_1C6AC:
0001E502 2013                       		move.l	(a3),d0
0001E504 B092                       		cmp.l	(a2),d0
0001E506 6500 0000                  		bcs.w	locret_1C6B6
0001E50A 2480                       		move.l	d0,(a2)
0001E50C                            
0001E50C                            locret_1C6B6:
0001E50C 4E75                       		rts	
0001E50E                            ; End of function AddPoints
0001E50E                            
0001E50E                            ; ---------------------------------------------------------------------------
0001E50E                            ; Subroutine to	update the HUD
0001E50E                            ; ---------------------------------------------------------------------------
0001E50E                            
0001E50E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E50E                            
0001E50E                            
0001E50E                            HudUpdate:
0001E50E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E514 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E518 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E51C 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E520 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E522 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E52C 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E530 6100 0000                  		bsr.w	Hud_Score
0001E534                            
0001E534                            Hud_ChkRings:
0001E534 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E538 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E53A 6A00                       		bpl.s	loc_1C6E4
0001E53C 6100 0000                  		bsr.w	Hud_LoadZero
0001E540                            
0001E540                            loc_1C6E4:
0001E540 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E54A 7200                       		moveq	#0,d1
0001E54C 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E550 6100 0000                  		bsr.w	Hud_Rings
0001E554                            
0001E554                            Hud_ChkTime:
0001E554 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; is time counter locked?
0001E558 6700                       		beq.s	Hud_ChkLives	; if yes, branch
0001E55A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E55E 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001E560 43F8 FE22                  		lea	($FFFFFE22).w,a1; load time
0001E564 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001E56A 6700                       		beq.s	TimeOver	; if yes, branch
0001E56C 5221                       		addq.b	#1,-(a1)	; add 1 to frame counter
0001E56E 0C11 003C                  		cmpi.b	#60,(a1)	; have 60 frames (1 second) passed?
0001E572 6500                       		bcs.s	Hud_ChkLives	; if not, branch
0001E574 12BC 0000                  		move.b	#0,(a1)		; clear frame counter
0001E578 5221                       		addq.b	#1,-(a1)	; add 1 to seconds counter
0001E57A 0C11 003C                  		cmpi.b	#60,(a1)	; have 60 seconds (1 minute) passed?
0001E57E 6500                       		bcs.s	@RedrawCounter	; if not, branch
0001E580 12BC 0000                  		move.b	#0,(a1)		; clear seconds counter
0001E584 5221                       		addq.b	#1,-(a1)	; add 1 to minutes
0001E586 0C11 0009                  		cmpi.b	#9,(a1)		; have 9 minutes passed?
0001E58A 6500                       		bcs.s	@RedrawCounter	; if not, branch
0001E58C 12BC 0009                  		move.b	#9,(a1)		; set counter to 9 minutes
0001E590                            
0001E590                            ;loc_1C734:
0001E590                            @RedrawCounter:
0001E596 7200                       		moveq	#0,d1
0001E598 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001E59C 6100 0000                  		bsr.w	Hud_Mins
0001E5A6 7200                       		moveq	#0,d1
0001E5A8 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001E5AC 6100 0000                  		bsr.w	Hud_Secs
0001E5B0                            
0001E5B0                            Hud_ChkLives:
0001E5B0 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E5B4 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001E5B6 4238 FE1C                  		clr.b	($FFFFFE1C).w	; clear update live counter flag
0001E5BA 6100 0000                  		bsr.w	Hud_Lives
0001E5BE                            
0001E5BE                            Hud_ChkBonus:
0001E5BE 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001E5C2 6700                       		beq.s	Hud_End		; if not, branch
0001E5C4 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E5D2 7200                       		moveq	#0,d1
0001E5D4 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E5D8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E5DC 7200                       		moveq	#0,d1
0001E5DE 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E5E2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E5E6                            
0001E5E6                            Hud_End:
0001E5E6 4E75                       		rts	
0001E5E8                            ; ===========================================================================
0001E5E8                            
0001E5E8                            TimeOver:				; XREF: Hud_ChkTime
0001E5E8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; freeze time counter
0001E5EC 41F8 D000                  		lea	($FFFFD000).w,a0
0001E5F0 2448                       		movea.l	a0,a2
0001E5F2 6100 E8B0                  		bsr.w	KillSonic
0001E5F6 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E5FC 4E75                       		rts	
0001E5FE                            ; ===========================================================================
0001E5FE                            
0001E5FE                            HudDebug:				; XREF: HudUpdate
0001E5FE 6100 0000                  		bsr.w	HudDb_XY
0001E602 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E606 6700                       		beq.s	HudDb_SpCount	; if not, branch
0001E608 6A00                       		bpl.s	HudDb_Rings
0001E60A 6100 0000                  		bsr.w	Hud_LoadZero
0001E60E                            
0001E60E                            HudDb_Rings:
0001E60E 4238 FE1D                  		clr.b	($FFFFFE1D).w	; clear update ring counter flag
0001E618 7200                       		moveq	#0,d1
0001E61A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E61E 6100 0000                  		bsr.w	Hud_Rings
0001E622                            
0001E622                            HudDb_SpCount:
0001E628 7200                       		moveq	#0,d1
0001E62A 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of sprites" counter
0001E62E 6100 0000                  		bsr.w	Hud_Secs
0001E632 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E636 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E638 4238 FE1C                  		clr.b	($FFFFFE1C).w	; clear update live counter flag
0001E63C 6100 0000                  		bsr.w	Hud_Lives
0001E640                            
0001E640                            HudDb_ChkBonus:
0001E640 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E644 6700                       		beq.s	HudDb_End	; if not, branch
0001E646 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E654 7200                       		moveq	#0,d1
0001E656 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E65A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E65E 7200                       		moveq	#0,d1
0001E660 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E664 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E668                            
0001E668                            HudDb_End:
0001E668 4E75                       		rts	
0001E66A                            ; End of function HudUpdate
0001E66A                            
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A                            ; Subroutine to	load "0" on the	HUD
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A                            
0001E66A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E66A                            
0001E66A                            
0001E66A                            Hud_LoadZero:				; XREF: HudUpdate
0001E674 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E678 343C 0002                  		move.w	#2,d2
0001E67C 6000                       		bra.s	HUD_LoadBase
0001E67E                            ; End of function Hud_LoadZero
0001E67E                            
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            
0001E67E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E67E                            
0001E67E                            
0001E67E                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E67E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E684 6100 0000                  		bsr.w	Hud_Lives
0001E692 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E696 343C 000E                  		move.w	#$E,d2
0001E69A                            
0001E69A                            ;loc_1C83E:
0001E69A                            HUD_LoadBase:				; XREF: Hud_LoadZero
0001E69A 43FA 0000                  		lea	Art_Hud(pc),a1	; load uncompressed HUD art
0001E69E                            
0001E69E                            HUD_LoadTiles:
0001E69E 323C 000F                  		move.w	#$F,d1
0001E6A2 101A                       		move.b	(a2)+,d0	; get the index of tile to load
0001E6A4 6B00                       		bmi.s	HUD_EmptyTile	; if it's negative (e.g. $FF), branch
0001E6A6 4880                       		ext.w	d0
0001E6A8 EB48                       		lsl.w	#5,d0
0001E6AA 47F1 0000                  		lea	(a1,d0.w),a3	; get tile to load
0001E6AE                            
0001E6AE                            @WriteTile:
0001E6AE 2C9B                       		move.l	(a3)+,(a6)	; write tile to VRAM
0001E6B0 51C9 FFFC                  		dbf	d1,@WriteTile	; repeat $F more times
0001E6B4                            
0001E6B4                            HUD_NextTile:
0001E6B4 51CA FFE8                  		dbf	d2,HUD_LoadTiles ; repeat $E more times
0001E6B8                            
0001E6B8 4E75                       		rts
0001E6BA                            ; ===========================================================================
0001E6BA                            
0001E6BA                            HUD_EmptyTile:
0001E6BA 2CBC 0000 0000             		move.l	#0,(a6)			; fill VRAM with #0
0001E6C0 51C9 FFF8                  		dbf	d1,HUD_EmptyTile	; repeat $F more times
0001E6C4                            
0001E6C4 60EE                       		bra.s	HUD_NextTile
0001E6C6                            ; End of function Hud_Base
0001E6C6                            
0001E6C6                            ; ===========================================================================
0001E6C6 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001E6D2 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001E6D6                            ; ---------------------------------------------------------------------------
0001E6D6                            ; Subroutine to	load debug mode	numbers	patterns
0001E6D6                            ; ---------------------------------------------------------------------------
0001E6D6                            
0001E6D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6D6                            
0001E6D6                            
0001E6D6                            HudDb_XY:				; XREF: HudDebug
0001E6E0 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E6E4 4841                       		swap	d1
0001E6E6 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E6EA 6100                       		bsr.s	HudDb_XY2
0001E6EC 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E6F0 4841                       		swap	d1
0001E6F2 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E6F6                            ; End of function HudDb_XY
0001E6F6                            
0001E6F6                            
0001E6F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6F6                            
0001E6F6                            
0001E6F6                            HudDb_XY2:
0001E6F6 7C07                       		moveq	#7,d6
0001E6F8 43F9 0000 05C4             		lea	(Art_Text).l,a1	; load uncompresset text patterns
0001E6FE                            
0001E6FE                            HudDb_XYLoop:
0001E6FE E959                       		rol.w	#4,d1
0001E700 3401                       		move.w	d1,d2
0001E702 0242 000F                  		andi.w	#$F,d2		; get low 4 bits representing digit
0001E706 0C42 000A                  		cmpi.w	#$A,d2		; is digit more or equals to $A?
0001E70A 6500                       		bcs.s	@WriteTile	; if not, branch
0001E70C 5E42                       		addq.w	#7,d2		; add 7 to tile index
0001E70E                            
0001E70E                            @WriteTile:
0001E70E EB4A                       		lsl.w	#5,d2		; multiply tile index by $20
0001E710 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
0001E714 2C9B                       		move.l	(a3)+,(a6)
0001E716 2C9B                       		move.l	(a3)+,(a6)
0001E718 2C9B                       		move.l	(a3)+,(a6)
0001E71A 2C9B                       		move.l	(a3)+,(a6)
0001E71C 2C9B                       		move.l	(a3)+,(a6)
0001E71E 2C9B                       		move.l	(a3)+,(a6)
0001E720 2C9B                       		move.l	(a3)+,(a6)
0001E722 2C9B                       		move.l	(a3)+,(a6)
0001E724 4841                       		swap	d1
0001E726 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E72A                            
0001E72A 4E75                       		rts	
0001E72C                            ; End of function HudDb_XY2
0001E72C                            
0001E72C                            ; ---------------------------------------------------------------------------
0001E72C                            ; Subroutine to	load rings numbers patterns
0001E72C                            ; ---------------------------------------------------------------------------
0001E72C                            
0001E72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E72C                            
0001E72C                            
0001E72C                            Hud_Rings:				; XREF: HudUpdate
0001E72C 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E732 7C02                       		moveq	#2,d6
0001E734 6000                       		bra.s	Hud_LoadArt
0001E736                            ; End of function Hud_Rings
0001E736                            
0001E736                            ; ---------------------------------------------------------------------------
0001E736                            ; Subroutine to	load score numbers patterns
0001E736                            ; ---------------------------------------------------------------------------
0001E736                            
0001E736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E736                            
0001E736                            
0001E736                            Hud_Score:				; XREF: HudUpdate
0001E736 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E73C 7C05                       		moveq	#5,d6
0001E73E                            
0001E73E                            Hud_LoadArt:
0001E73E 7800                       		moveq	#0,d4
0001E740 43FA 0000                  		lea	Art_Hud(pc),a1
0001E744                            
0001E744                            Hud_ScoreLoop:
0001E744 7400                       		moveq	#0,d2
0001E746 261A                       		move.l	(a2)+,d3
0001E748                            
0001E748                            @FindDigit:
0001E748 9283                       		sub.l	d3,d1
0001E74A 6500                       		bcs.s	Hud_ScoreWrite
0001E74C 5242                       		addq.w	#1,d2		; add 1 to digit
0001E74E 60F8                       		bra.s	@FindDigit
0001E750                            ; ===========================================================================
0001E750                            
0001E750                            Hud_ScoreWrite:
0001E750 D283                       		add.l	d3,d1
0001E752 4A42                       		tst.w	d2		; is digit zero?
0001E754 6700                       		beq.s	@WriteTile	; if yes, branch
0001E756 383C 0001                  		move.w	#1,d4
0001E75A                            
0001E75A                            @WriteTile:
0001E75A 4A44                       		tst.w	d4
0001E75C 6700                       		beq.s	@NextTile
0001E75E ED4A                       		lsl.w	#6,d2
0001E760 2D40 0004                  		move.l	d0,4(a6)	; store VPD address
0001E764 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
0001E768 2C9B                       		move.l	(a3)+,(a6)
0001E76A 2C9B                       		move.l	(a3)+,(a6)
0001E76C 2C9B                       		move.l	(a3)+,(a6)
0001E76E 2C9B                       		move.l	(a3)+,(a6)
0001E770 2C9B                       		move.l	(a3)+,(a6)
0001E772 2C9B                       		move.l	(a3)+,(a6)
0001E774 2C9B                       		move.l	(a3)+,(a6)
0001E776 2C9B                       		move.l	(a3)+,(a6)
0001E778 2C9B                       		move.l	(a3)+,(a6)
0001E77A 2C9B                       		move.l	(a3)+,(a6)
0001E77C 2C9B                       		move.l	(a3)+,(a6)
0001E77E 2C9B                       		move.l	(a3)+,(a6)
0001E780 2C9B                       		move.l	(a3)+,(a6)
0001E782 2C9B                       		move.l	(a3)+,(a6)
0001E784 2C9B                       		move.l	(a3)+,(a6)
0001E786 2C9B                       		move.l	(a3)+,(a6)
0001E788                            
0001E788                            @NextTile:
0001E788 0680 0040 0000             		addi.l	#$400000,d0
0001E78E 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E792                            
0001E792 4E75                       		rts	
0001E794                            ; End of function Hud_Score
0001E794                            
0001E794                            ; ---------------------------------------------------------------------------
0001E794                            ; Subroutine to	load countdown numbers on the continue screen
0001E794                            ; ---------------------------------------------------------------------------
0001E794                            
0001E794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E794                            
0001E794                            
0001E794                            ContScrCounter:				; XREF: ContinueScreen
0001E79E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E7A4 45F9 0000 0000             		lea	(Hud_10).l,a2
0001E7AA 7C01                       		moveq	#1,d6
0001E7AC 7800                       		moveq	#0,d4
0001E7AE 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001E7B2                            
0001E7B2                            ContScr_Loop:
0001E7B2 7400                       		moveq	#0,d2
0001E7B4 261A                       		move.l	(a2)+,d3
0001E7B6                            
0001E7B6                            loc_1C95A:
0001E7B6 9283                       		sub.l	d3,d1
0001E7B8 6500                       		bcs.s	loc_1C962
0001E7BA 5242                       		addq.w	#1,d2
0001E7BC 60F8                       		bra.s	loc_1C95A
0001E7BE                            ; ===========================================================================
0001E7BE                            
0001E7BE                            loc_1C962:
0001E7BE D283                       		add.l	d3,d1
0001E7C0 ED4A                       		lsl.w	#6,d2
0001E7C2 47F1 2000                  		lea	(a1,d2.w),a3
0001E7C6 2C9B                       		move.l	(a3)+,(a6)
0001E7C8 2C9B                       		move.l	(a3)+,(a6)
0001E7CA 2C9B                       		move.l	(a3)+,(a6)
0001E7CC 2C9B                       		move.l	(a3)+,(a6)
0001E7CE 2C9B                       		move.l	(a3)+,(a6)
0001E7D0 2C9B                       		move.l	(a3)+,(a6)
0001E7D2 2C9B                       		move.l	(a3)+,(a6)
0001E7D4 2C9B                       		move.l	(a3)+,(a6)
0001E7D6 2C9B                       		move.l	(a3)+,(a6)
0001E7D8 2C9B                       		move.l	(a3)+,(a6)
0001E7DA 2C9B                       		move.l	(a3)+,(a6)
0001E7DC 2C9B                       		move.l	(a3)+,(a6)
0001E7DE 2C9B                       		move.l	(a3)+,(a6)
0001E7E0 2C9B                       		move.l	(a3)+,(a6)
0001E7E2 2C9B                       		move.l	(a3)+,(a6)
0001E7E4 2C9B                       		move.l	(a3)+,(a6)
0001E7E6 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001E7EA                            
0001E7EA 4E75                       		rts	
0001E7EC                            ; End of function ContScrCounter
0001E7EC                            
0001E7EC                            ; ===========================================================================
0001E7EC                            ; ---------------------------------------------------------------------------
0001E7EC                            ; HUD counter sizes
0001E7EC                            ; ---------------------------------------------------------------------------
0001E7EC 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001E7F0 0000 2710                  Hud_10000:	dc.l 10000
0001E7F4 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001E7F8 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001E7FC 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001E800 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001E804                            
0001E804                            ; ---------------------------------------------------------------------------
0001E804                            ; Subroutine to	load time numbers patterns
0001E804                            ; ---------------------------------------------------------------------------
0001E804                            
0001E804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E804                            
0001E804                            
0001E804                            Hud_Mins:				; XREF: Hud_ChkTime
0001E804 45F9 0001 E800             		lea	(Hud_1).l,a2
0001E80A 7C00                       		moveq	#0,d6
0001E80C 6000                       		bra.s	loc_1C9BA
0001E80E                            ; End of function Hud_Mins
0001E80E                            
0001E80E                            
0001E80E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E80E                            
0001E80E                            
0001E80E                            Hud_Secs:				; XREF: Hud_ChkTime
0001E80E 45F9 0001 E7FC             		lea	(Hud_10).l,a2
0001E814 7C01                       		moveq	#1,d6
0001E816                            
0001E816                            loc_1C9BA:
0001E816 7800                       		moveq	#0,d4
0001E818 43FA 0000                  		lea	Art_Hud(pc),a1	; load uncompressed HUD art
0001E81C                            
0001E81C                            Hud_TimeLoop:
0001E81C 7400                       		moveq	#0,d2
0001E81E 261A                       		move.l	(a2)+,d3
0001E820                            
0001E820                            @FindDigit:
0001E820 9283                       		sub.l	d3,d1
0001E822 6500                       		bcs.s	HUD_TimeWrite
0001E824 5242                       		addq.w	#1,d2		; add 1 to digit
0001E826 60F8                       		bra.s	@FindDigit
0001E828                            ; ===========================================================================
0001E828                            
0001E828                            HUD_TimeWrite:
0001E828 D283                       		add.l	d3,d1
0001E82A 4A42                       		tst.w	d2		; is digit zero?
0001E82C 6700                       		beq.s	@WriteTile	; if yes, branch
0001E82E 383C 0001                  		move.w	#1,d4
0001E832                            
0001E832                            @WriteTile:
0001E832 ED4A                       		lsl.w	#6,d2
0001E834 2D40 0004                  		move.l	d0,4(a6)
0001E838 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
0001E83C 2C9B                       		move.l	(a3)+,(a6)
0001E83E 2C9B                       		move.l	(a3)+,(a6)
0001E840 2C9B                       		move.l	(a3)+,(a6)
0001E842 2C9B                       		move.l	(a3)+,(a6)
0001E844 2C9B                       		move.l	(a3)+,(a6)
0001E846 2C9B                       		move.l	(a3)+,(a6)
0001E848 2C9B                       		move.l	(a3)+,(a6)
0001E84A 2C9B                       		move.l	(a3)+,(a6)
0001E84C 2C9B                       		move.l	(a3)+,(a6)
0001E84E 2C9B                       		move.l	(a3)+,(a6)
0001E850 2C9B                       		move.l	(a3)+,(a6)
0001E852 2C9B                       		move.l	(a3)+,(a6)
0001E854 2C9B                       		move.l	(a3)+,(a6)
0001E856 2C9B                       		move.l	(a3)+,(a6)
0001E858 2C9B                       		move.l	(a3)+,(a6)
0001E85A 2C9B                       		move.l	(a3)+,(a6)
0001E85C 0680 0040 0000             		addi.l	#$400000,d0
0001E862 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001E866                            
0001E866 4E75                       		rts	
0001E868                            ; End of function Hud_Secs
0001E868                            
0001E868                            ; ---------------------------------------------------------------------------
0001E868                            ; Subroutine to	load time/ring bonus numbers patterns
0001E868                            ; ---------------------------------------------------------------------------
0001E868                            
0001E868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E868                            
0001E868                            
0001E868                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001E868 45F9 0001 E7F4             		lea	(Hud_1000).l,a2
0001E86E 7C03                       		moveq	#3,d6
0001E870 7800                       		moveq	#0,d4
0001E872 43FA 0000                  		lea	Art_Hud(pc),a1
0001E876                            
0001E876                            Hud_BonusLoop:
0001E876 7400                       		moveq	#0,d2
0001E878 261A                       		move.l	(a2)+,d3
0001E87A                            
0001E87A                            @FindDigit:
0001E87A 9283                       		sub.l	d3,d1
0001E87C 6500                       		bcs.s	Hud_BonusWrite
0001E87E 5242                       		addq.w	#1,d2		; add 1 to digit
0001E880 60F8                       		bra.s	@FindDigit
0001E882                            ; ===========================================================================
0001E882                            
0001E882                            Hud_BonusWrite:
0001E882 D283                       		add.l	d3,d1
0001E884 4A42                       		tst.w	d2		; is digit zero?
0001E886 6700                       		beq.s	@WriteTile	; if yes, branch
0001E888 383C 0001                  		move.w	#1,d4
0001E88C                            
0001E88C                            @WriteTile:
0001E88C 4A44                       		tst.w	d4
0001E88E 6700                       		beq.s	Hud_ClrBonus
0001E890 ED4A                       		lsl.w	#6,d2
0001E892 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
0001E896 2C9B                       		move.l	(a3)+,(a6)
0001E898 2C9B                       		move.l	(a3)+,(a6)
0001E89A 2C9B                       		move.l	(a3)+,(a6)
0001E89C 2C9B                       		move.l	(a3)+,(a6)
0001E89E 2C9B                       		move.l	(a3)+,(a6)
0001E8A0 2C9B                       		move.l	(a3)+,(a6)
0001E8A2 2C9B                       		move.l	(a3)+,(a6)
0001E8A4 2C9B                       		move.l	(a3)+,(a6)
0001E8A6 2C9B                       		move.l	(a3)+,(a6)
0001E8A8 2C9B                       		move.l	(a3)+,(a6)
0001E8AA 2C9B                       		move.l	(a3)+,(a6)
0001E8AC 2C9B                       		move.l	(a3)+,(a6)
0001E8AE 2C9B                       		move.l	(a3)+,(a6)
0001E8B0 2C9B                       		move.l	(a3)+,(a6)
0001E8B2 2C9B                       		move.l	(a3)+,(a6)
0001E8B4 2C9B                       		move.l	(a3)+,(a6)
0001E8B6                            
0001E8B6                            Hud_BonusNext:
0001E8B6 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001E8BA                            
0001E8BA 4E75                       		rts	
0001E8BC                            ; ===========================================================================
0001E8BC                            
0001E8BC                            Hud_ClrBonus:
0001E8BC 7A0F                       		moveq	#$F,d5
0001E8BE                            
0001E8BE                            @WriteTile:
0001E8BE 2CBC 0000 0000             		move.l	#0,(a6)		; fill VRAM with #0
0001E8C4 51CD FFF8                  		dbf	d5,@WriteTile	; repeat $F more times
0001E8C8                            
0001E8C8 60EC                       		bra.s	Hud_BonusNext
0001E8CA                            ; End of function Hud_TimeRingBonus
0001E8CA                            
0001E8CA                            ; ---------------------------------------------------------------------------
0001E8CA                            ; Subroutine to	load uncompressed lives	counter	patterns
0001E8CA                            ; ---------------------------------------------------------------------------
0001E8CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8CA                            
0001E8CA                            
0001E8CA                            Hud_Lives:				; XREF: Hud_ChkLives
0001E8D0 7200                       		moveq	#0,d1
0001E8D2 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001E8D6 45F9 0001 E7FC             		lea	(Hud_10).l,a2
0001E8DC 7C01                       		moveq	#1,d6
0001E8DE 7800                       		moveq	#0,d4
0001E8E0 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001E8E4                            
0001E8E4                            Hud_LivesLoop:
0001E8E4 2D40 0004                  		move.l	d0,4(a6)
0001E8E8 7400                       		moveq	#0,d2
0001E8EA 261A                       		move.l	(a2)+,d3
0001E8EC                            
0001E8EC                            @FindDigit:
0001E8EC 9283                       		sub.l	d3,d1
0001E8EE 6500                       		bcs.s	Hud_LivesWrite
0001E8F0 5242                       		addq.w	#1,d2		; add 1 to digit
0001E8F2 60F8                       		bra.s	@FindDigit
0001E8F4                            ; ===========================================================================
0001E8F4                            
0001E8F4                            Hud_LivesWrite:
0001E8F4 D283                       		add.l	d3,d1
0001E8F6 4A42                       		tst.w	d2		; is digit zero?
0001E8F8 6700                       		beq.s	loc_1CAA2	; if yes, branch
0001E8FA 383C 0001                  		move.w	#1,d4
0001E8FE                            
0001E8FE                            loc_1CAA2:
0001E8FE 4A44                       		tst.w	d4
0001E900 6700                       		beq.s	Hud_ClrLives
0001E902                            
0001E902                            loc_1CAA6:
0001E902 EB4A                       		lsl.w	#5,d2
0001E904 47F1 2000                  		lea	(a1,d2.w),a3
0001E908 2C9B                       		move.l	(a3)+,(a6)
0001E90A 2C9B                       		move.l	(a3)+,(a6)
0001E90C 2C9B                       		move.l	(a3)+,(a6)
0001E90E 2C9B                       		move.l	(a3)+,(a6)
0001E910 2C9B                       		move.l	(a3)+,(a6)
0001E912 2C9B                       		move.l	(a3)+,(a6)
0001E914 2C9B                       		move.l	(a3)+,(a6)
0001E916 2C9B                       		move.l	(a3)+,(a6)
0001E918                            
0001E918                            Hud_LivesNext:
0001E918 0680 0040 0000             		addi.l	#$400000,d0
0001E91E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E922                            
0001E922 4E75                       		rts	
0001E924                            ; ===========================================================================
0001E924                            
0001E924                            Hud_ClrLives:
0001E924 4A46                       		tst.w	d6
0001E926 67DA                       		beq.s	loc_1CAA6
0001E928 7A07                       		moveq	#7,d5
0001E92A                            
0001E92A                            @WriteTile:
0001E92A 2CBC 0000 0000             		move.l	#0,(a6)		; fill VRAM with #0
0001E930 51CD FFF8                  		dbf	d5,@WriteTile	; repeat 7 more times
0001E934                            
0001E934 60E2                       		bra.s	Hud_LivesNext
0001E936                            ; End of function Hud_Lives
0001E936                            
0001E936                            ; ===========================================================================
0001E936                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001EC36                            		even
0001EC36                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001ED76                            		even
0001ED76                            ; ===========================================================================
0001ED76                            ; ---------------------------------------------------------------------------
0001ED76                            ; When debug mode is currently in use
0001ED76                            ; ---------------------------------------------------------------------------
0001ED76                            
0001ED76                            DebugMode:				; XREF: Obj01; Obj09
0001ED76 7000                       		moveq	#0,d0
0001ED78 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001ED7C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001ED80 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001ED84                            ; ===========================================================================
0001ED84 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001ED86 0000                       		dc.w Debug_Skip-Debug_Index
0001ED88                            ; ===========================================================================
0001ED88                            
0001ED88                            Debug_Main:				; XREF: Debug_Index
0001ED88 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001ED8C 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001ED92 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001ED98 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001ED9E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001EDA4 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001EDAA 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001EDB0 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001EDB6 117C 0000 001A             		move.b	#0,$1A(a0)
0001EDBC 117C 0000 001C             		move.b	#0,$1C(a0)
0001EDC2                            
0001EDC2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w	; is	game mode = $10	(special stage)?
0001EDC8 6600                       		bne.s	Debug_Zone		; if not, branch
0001EDCA 31FC 0000 F782             		move.w	#0,($FFFFF782).w	; stop	special	stage rotating
0001EDD0 31FC 0000 F780             		move.w	#0,($FFFFF780).w	; make	special	stage "upright"
0001EDD6 7006                       		moveq	#6,d0			; use 6th debug	item list
0001EDD8 6000                       		bra.s	Debug_UseList
0001EDDA                            ; ===========================================================================
0001EDDA                            
0001EDDA                            Debug_Zone:
0001EDDA 7000                       		moveq	#0,d0
0001EDDC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EDE0                            
0001EDE0                            Debug_UseList:
0001EDE0 45F9 0000 0000             		lea	(DebugList).l,a2
0001EDE6 D040                       		add.w	d0,d0
0001EDE8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EDEC 3C1A                       		move.w	(a2)+,d6
0001EDEE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EDF2 6200                       		bhi.s	loc_1CF9E
0001EDF4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001EDFA                            
0001EDFA                            loc_1CF9E:
0001EDFA 6100 0000                  		bsr.w	Debug_ShowItem
0001EDFE 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EE04 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001EE0A                            
0001EE0A                            Debug_Skip:				; XREF: Debug_Index
0001EE0A 7006                       		moveq	#6,d0
0001EE0C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001EE12 6700                       		beq.s	loc_1CFBE
0001EE14 7000                       		moveq	#0,d0
0001EE16 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EE1A                            
0001EE1A                            loc_1CFBE:
0001EE1A 45F9 0000 0000             		lea	(DebugList).l,a2
0001EE20 D040                       		add.w	d0,d0
0001EE22 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EE26 3C1A                       		move.w	(a2)+,d6
0001EE28 6100 0000                  		bsr.w	Debug_Control
0001EE2C 4EF9 0000 F010             		jmp	DisplaySprite
0001EE32                            
0001EE32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE32                            
0001EE32                            
0001EE32                            Debug_Control:
0001EE32 7800                       		moveq	#0,d4
0001EE34 323C 0001                  		move.w	#1,d1
0001EE38 1838 F605                  		move.b	(Joypad|Press).w,d4
0001EE3C 0244 000F                  		andi.w	#Up+Down+Left+Right,d4	; is up/down/left/right	pressed?
0001EE40 6600                       		bne.s	loc_1D018		; if yes, branch
0001EE42 1038 F604                  		move.b	(Joypad|Held),d0
0001EE46 0240 000F                  		andi.w	#Up+Down+Left+Right,d0	; is up/down/left/right	held?
0001EE4A 6600                       		bne.s	loc_1D000		; if yes, branch
0001EE4C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EE52 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001EE58 6000 0000                  		bra.w	Debug_BackItem
0001EE5C                            ; ===========================================================================
0001EE5C                            
0001EE5C                            loc_1D000:
0001EE5C 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001EE60 6600                       		bne.s	loc_1D01C
0001EE62 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001EE68 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001EE6C 6600                       		bne.s	loc_1D018
0001EE6E 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001EE74                            
0001EE74                            loc_1D018:
0001EE74 1838 F604                  		move.b	(Joypad|Held),d4
0001EE78                            
0001EE78                            loc_1D01C:
0001EE78 7200                       		moveq	#0,d1
0001EE7A 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001EE7E 5241                       		addq.w	#1,d1
0001EE80 4841                       		swap	d1
0001EE82 E881                       		asr.l	#4,d1
0001EE84 2428 000C                  		move.l	$C(a0),d2
0001EE88 2628 0008                  		move.l	8(a0),d3
0001EE8C 0804 0000                  		btst	#iUp,d4		; is up	being pressed?
0001EE90 6700                       		beq.s	loc_1D03C	; if not, branch
0001EE92 9481                       		sub.l	d1,d2
0001EE94 6400                       		bcc.s	loc_1D03C
0001EE96 7400                       		moveq	#0,d2
0001EE98                            
0001EE98                            loc_1D03C:
0001EE98 0804 0001                  		btst	#iDown,d4	; is down being	pressed?
0001EE9C 6700                       		beq.s	loc_1D052	; if not, branch
0001EE9E D481                       		add.l	d1,d2
0001EEA0 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001EEA6 6500                       		bcs.s	loc_1D052
0001EEA8 243C 07FF 0000             		move.l	#$7FF0000,d2
0001EEAE                            
0001EEAE                            loc_1D052:
0001EEAE 0804 0002                  		btst	#iLeft,d4	; is Left being pressed?
0001EEB2 6700                       		beq.s	loc_1D05E	; if not, branch
0001EEB4 9681                       		sub.l	d1,d3
0001EEB6 6400                       		bcc.s	loc_1D05E
0001EEB8 7600                       		moveq	#0,d3
0001EEBA                            
0001EEBA                            loc_1D05E:
0001EEBA 0804 0003                  		btst	#iRight,d4	; is Right being pressed?
0001EEBE 6700                       		beq.s	loc_1D066	; if not, branch
0001EEC0 D681                       		add.l	d1,d3
0001EEC2                            
0001EEC2                            loc_1D066:
0001EEC2 2142 000C                  		move.l	d2,$C(a0)
0001EEC6 2143 0008                  		move.l	d3,8(a0)
0001EECA                            
0001EECA                            Debug_BackItem:
0001EECA 0838 0006 F604             		btst	#iA,(Joypad|Held)	; is button A pressed?
0001EED0 6700                       		beq.s	Debug_MakeItem		; if not, branch
0001EED2 0838 0004 F605             		btst	#iC,(Joypad|Press)	; is button C pressed?
0001EED8 6700                       		beq.s	Debug_NextItem		; if not, branch
0001EEDA 5338 FE06                  		subq.b	#1,($FFFFFE06).w 	; go back 1 item
0001EEDE 6400                       		bcc.s	Debug_NoLoop
0001EEE0 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001EEE4 6000                       		bra.s	Debug_NoLoop
0001EEE6                            ; ===========================================================================
0001EEE6                            
0001EEE6                            Debug_NextItem:
0001EEE6 0838 0006 F605             		btst	#iA,(Joypad|Press)	; is button A pressed?
0001EEEC 6700                       		beq.s	Debug_MakeItem		; if not, branch
0001EEEE 5238 FE06                  		addq.b	#1,($FFFFFE06).w 	; go forwards 1 item
0001EEF2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EEF6 6200                       		bhi.s	Debug_NoLoop
0001EEF8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w	; loop back to first item
0001EEFE                            
0001EEFE                            Debug_NoLoop:
0001EEFE 6000 0000                  		bra.w	Debug_ShowItem
0001EF02                            ; ===========================================================================
0001EF02                            
0001EF02                            Debug_MakeItem:
0001EF02 0838 0005 F605             		btst	#iB,(Joypad|Press)	; is button B pressed?
0001EF08 6700                       		beq.s	Debug_Exit		; if not, branch
0001EF0A 4EB9 0000 F496             		jsr	SingleObjLoad
0001EF10 6600                       		bne.s	Debug_Exit
0001EF12 3368 0008 0008             		move.w	8(a0),8(a1)
0001EF18 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EF1E 12A8 0004                  		move.b	4(a0),0(a1)		; create object
0001EF22 1368 0001 0001             		move.b	1(a0),1(a1)
0001EF28 1368 0001 0022             		move.b	1(a0),$22(a1)
0001EF2E 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001EF34 7000                       		moveq	#0,d0
0001EF36 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EF3A E748                       		lsl.w	#3,d0
0001EF3C 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001EF42 4E75                       		rts	
0001EF44                            ; ===========================================================================
0001EF44                            
0001EF44                            Debug_Exit:
0001EF44 0838 0004 F605             		btst	#iC,(Joypad|Press)	; is button C pressed?
0001EF4A 6700                       		beq.s	Debug_DoNothing		; if not, branch
0001EF4C 7000                       		moveq	#0,d0
0001EF4E 31C0 FE08                  		move.w	d0,($FFFFFE08).w	; deactivate debug mode
0001EF52 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EF5A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EF60 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001EF64 3140 000A                  		move.w	d0,$A(a0)
0001EF68 3140 000E                  		move.w	d0,$E(a0)
0001EF6C 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001EF72 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001EF78                            
0001EF78 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w	; are you in the special stage?
0001EF7E 6600                       		bne.s	Debug_DoNothing		; if not, branch
0001EF80 4278 F780                  		clr.w	($FFFFF780).w
0001EF84 31FC 0040 F782             		move.w	#$40,($FFFFF782).w	; set new level rotation speed
0001EF8A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EF92 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EF98 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001EF9E 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001EFA4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001EFAA                            
0001EFAA                            Debug_DoNothing:
0001EFAA 4E75                       		rts	
0001EFAC                            ; End of function Debug_Control
0001EFAC                            
0001EFAC                            
0001EFAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFAC                            
0001EFAC                            
0001EFAC                            Debug_ShowItem:				; XREF: Debug_Main
0001EFAC 7000                       		moveq	#0,d0
0001EFAE 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EFB2 E748                       		lsl.w	#3,d0
0001EFB4 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001EFBA 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001EFC0 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001EFC6 4E75                       		rts	
0001EFC8                            ; End of function Debug_ShowItem
0001EFC8                            
0001EFC8                            ; ===========================================================================
0001EFC8                            ; ---------------------------------------------------------------------------
0001EFC8                            ; Debug	list pointers
0001EFC8                            ; ---------------------------------------------------------------------------
0001EFC8                            DebugList:
0001EFC8                            	include "_inc\Debug list pointers.asm"
0001EFC8                            ; ---------------------------------------------------------------------------
0001EFC8                            ; Debug	list pointers
0001EFC8                            ; ---------------------------------------------------------------------------
0001EFC8 0000                       	dc.w Debug_GHZ-DebugList
0001EFCA 0000                       	dc.w Debug_LZ-DebugList
0001EFCC 0000                       	dc.w Debug_MZ-DebugList
0001EFCE 0000                       	dc.w Debug_SLZ-DebugList
0001EFD0 0000                       	dc.w Debug_SYZ-DebugList
0001EFD2 0000                       	dc.w Debug_SBZ-DebugList
0001EFD4 0000                       	dc.w Debug_Ending-DebugList
0001EFD4 0000                       	dc.w Debug_Ending-DebugList
0001EFD6                            
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6                            ; Debug	list - Green Hill
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6                            Debug_GHZ:
0001EFD6                            	include "_inc\Debug list - GHZ.asm"
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6                            ; Debug	list - Green Hill
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6 0010                       	dc.w $10			; number of items in list
0001EFD8 2500 B980                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001EFDC 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001EFE0 2600 BF7E                  	dc.l Map_obj26+$26000000
0001EFE4 0000 0680                  	dc.b 0,	0, 6, $80
0001EFE8 1F00 B14C                  	dc.l Map_obj1F+$1F000000
0001EFEC 0000 0400                  	dc.b 0,	0, 4, 0
0001EFF0 2200 B42C                  	dc.l Map_obj22+$22000000
0001EFF4 0000 0444                  	dc.b 0,	0, 4, $44
0001EFF8 2B00 C5BE                  	dc.l Map_obj2B+$2B000000
0001EFFC 0000 047B                  	dc.b 0,	0, 4, $7B
0001F000 3600 E9F8                  	dc.l Map_obj36+$36000000
0001F004 0000 051B                  	dc.b 0,	0, 5, $1B
0001F008 1800 9B4C                  	dc.l Map_obj18+$18000000
0001F00C 0000 4000                  	dc.b 0,	0, $40,	0
0001F010 3B00 EB1E                  	dc.l Map_obj3B+$3B000000
0001F014 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F018 4001 119A                  	dc.l Map_obj40+$40000000
0001F01C 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F020 4100 F724                  	dc.l Map_obj41+$41000000
0001F024 0000 0523                  	dc.b 0,	0, 5, $23
0001F028 4200 F94A                  	dc.l Map_obj42+$42000000
0001F02C 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F030 4400 FC58                  	dc.l Map_obj44+$44000000
0001F034 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F038 1900 9BBA                  	dc.l Map_obj48+$19000000
0001F03C 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F040 7901 8EEC                  	dc.l Map_obj79+$79000000
0001F044 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F048 4B00 B9C0                  	dc.l Map_obj4B+$4B000000
0001F04C 0000 2400                  	dc.b 0,	0, $24,	0
0001F050 7D01 903C                  	dc.l Map_obj7D+$7D000000
0001F054 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F058                            	even
0001F058                            	even
0001F058                            
0001F058                            ; ---------------------------------------------------------------------------
0001F058                            ; Debug	list - Labyrinth
0001F058                            ; ---------------------------------------------------------------------------
0001F058                            Debug_LZ:
0001F058                            	include "_inc\Debug list - LZ.asm"
0001F058                            ; ---------------------------------------------------------------------------
0001F058                            ; Debug	list - Labyrinth
0001F058                            ; ---------------------------------------------------------------------------
0001F058 0019                       	dc.w $19
0001F05A 2500 B980                  	dc.l Map_obj25+$25000000
0001F05E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F062 2600 BF7E                  	dc.l Map_obj26+$26000000
0001F066 0000 0680                  	dc.b 0,	0, 6, $80
0001F06A 4100 F724                  	dc.l Map_obj41+$41000000
0001F06E 0000 0523                  	dc.b 0,	0, 5, $23
0001F072 2C00 C664                  	dc.l Map_obj2C+$2C000000
0001F076 0800 2486                  	dc.b 8,	0, $24,	$86
0001F07A 2D00 C850                  	dc.l Map_obj2D+$2D000000
0001F07E 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F082 1601 3976                  	dc.l Map_obj16+$16000000
0001F086 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F08A 1601 3976                  	dc.l Map_obj16+$16000000
0001F08E 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F092 3300 DCCE                  	dc.l Map_obj33+$33000000
0001F096 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F09A 3200 D88E                  	dc.l Map_obj32+$32000000
0001F09E 0000 0513                  	dc.b 0,	0, 5, $13
0001F0A2 3600 E9F8                  	dc.l Map_obj36+$36000000
0001F0A6 0000 051B                  	dc.b 0,	0, 5, $1B
0001F0AA 5201 1A98                  	dc.l Map_obj52a+$52000000
0001F0AE 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F0B2 6101 3B9E                  	dc.l Map_obj61+$61000000
0001F0B6 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F0BA 6101 3B9E                  	dc.l Map_obj61+$61000000
0001F0BE 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F0C2 6101 3B9E                  	dc.l Map_obj61+$61000000
0001F0C6 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F0CA 6201 3CF2                  	dc.l Map_obj62+$62000000
0001F0CE 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F0D2 6101 3B9E                  	dc.l Map_obj61+$61000000
0001F0D6 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F0DA 6101 3B9E                  	dc.l Map_obj61+$61000000
0001F0DE 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F0E2 6301 4054                  	dc.l Map_obj63+$63000000
0001F0E6 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F0EA 6001 38C0                  	dc.l Map_obj60+$60000000
0001F0EE 0000 0467                  	dc.b 0,	0, 4, $67
0001F0F2 6401 4398                  	dc.l Map_obj64+$64000000
0001F0F6 8413 8348                  	dc.b $84, $13, $83, $48
0001F0FA 6501 4520                  	dc.l Map_obj65+$65000000
0001F0FE 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F102 6501 4520                  	dc.l Map_obj65+$65000000
0001F106 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F10A 0B01 2D10                  	dc.l Map_obj0B+$B000000
0001F10E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F112 0C01 2DE0                  	dc.l Map_obj0C+$C000000
0001F116 0200 4328                  	dc.b 2,	0, $43,	$28
0001F11A 7901 8EEC                  	dc.l Map_obj79+$79000000
0001F11E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F122                            	even
0001F122                            	even
0001F122                            
0001F122                            ; ---------------------------------------------------------------------------
0001F122                            ; Debug	list - Marble
0001F122                            ; ---------------------------------------------------------------------------
0001F122                            Debug_MZ:
0001F122                            	include "_inc\Debug list - MZ.asm"
0001F122                            ; ---------------------------------------------------------------------------
0001F122                            ; Debug	list - Marble
0001F122                            ; ---------------------------------------------------------------------------
0001F122 0012                       	dc.w $12
0001F124 2500 B980                  	dc.l Map_obj25+$25000000
0001F128 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F12C 2600 BF7E                  	dc.l Map_obj26+$26000000
0001F130 0000 0680                  	dc.b 0,	0, 6, $80
0001F134 2200 B42C                  	dc.l Map_obj22+$22000000
0001F138 0000 0444                  	dc.b 0,	0, 4, $44
0001F13C 3600 E9F8                  	dc.l Map_obj36+$36000000
0001F140 0000 051B                  	dc.b 0,	0, 5, $1B
0001F144 4100 F724                  	dc.l Map_obj41+$41000000
0001F148 0000 0523                  	dc.b 0,	0, 5, $23
0001F14C 1300 CD5E                  	dc.l Map_obj14+$13000000
0001F150 0000 0345                  	dc.b 0,	0, 3, $45
0001F154 4601 030A                  	dc.l Map_obj46+$46000000
0001F158 0000 4000                  	dc.b 0,	0, $40,	0
0001F15C 4C01 0C46                  	dc.l Map_obj4C+$4C000000
0001F160 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F164 4E01 0F2A                  	dc.l Map_obj4E+$4E000000
0001F168 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F16C 3300 DCCE                  	dc.l Map_obj33+$33000000
0001F170 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F174 5001 1328                  	dc.l Map_obj50+$50000000
0001F178 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F17C 5101 17CC                  	dc.l Map_obj51+$51000000
0001F180 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F184 5201 1A42                  	dc.l Map_obj52+$52000000
0001F188 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F18C 5300 A152                  	dc.l Map_obj53+$53000000
0001F190 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F194 5401 0C0C                  	dc.l Map_obj54+$54000000
0001F198 0000 8680                  	dc.b 0,	0, $86,	$80
0001F19C 5501 1C36                  	dc.l Map_obj55+$55000000
0001F1A0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F1A4 7801 8B66                  	dc.l Map_obj78+$78000000
0001F1A8 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F1AC 7901 8EEC                  	dc.l Map_obj79+$79000000
0001F1B0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F1B4                            	even
0001F1B4                            	even
0001F1B4                            
0001F1B4                            ; ---------------------------------------------------------------------------
0001F1B4                            ; Debug	list - Star Light
0001F1B4                            ; ---------------------------------------------------------------------------
0001F1B4                            Debug_SLZ:
0001F1B4                            	include "_inc\Debug list - SLZ.asm"
0001F1B4                            ; ---------------------------------------------------------------------------
0001F1B4                            ; Debug	list - Star Light
0001F1B4                            ; ---------------------------------------------------------------------------
0001F1B4 000F                       	dc.w $F
0001F1B6 2500 B980                  	dc.l Map_obj25+$25000000
0001F1BA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F1BE 2600 BF7E                  	dc.l Map_obj26+$26000000
0001F1C2 0000 0680                  	dc.b 0,	0, 6, $80
0001F1C6 5901 2738                  	dc.l Map_obj59+$59000000
0001F1CA 0000 4000                  	dc.b 0,	0, $40,	0
0001F1CE 5300 A152                  	dc.l Map_obj53+$53000000
0001F1D2 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F1D6 1800 9BAA                  	dc.l Map_obj18b+$18000000
0001F1DA 0000 4000                  	dc.b 0,	0, $40,	0
0001F1DE 5A01 2872                  	dc.l Map_obj5A+$5A000000
0001F1E2 0000 4000                  	dc.b 0,	0, $40,	0
0001F1E6 5B01 2A2A                  	dc.l Map_obj5B+$5B000000
0001F1EA 0000 4000                  	dc.b 0,	0, $40,	0
0001F1EE 5D01 2FFA                  	dc.l Map_obj5D+$5D000000
0001F1F2 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F1F6 5E01 338C                  	dc.l Map_obj5E+$5E000000
0001F1FA 0000 0374                  	dc.b 0,	0, 3, $74
0001F1FE 4100 F724                  	dc.l Map_obj41+$41000000
0001F202 0000 0523                  	dc.b 0,	0, 5, $23
0001F206 1300 CD5E                  	dc.l Map_obj14+$13000000
0001F20A 0000 0480                  	dc.b 0,	0, 4, $80
0001F20E 1C00 A262                  	dc.l Map_obj1C+$1C000000
0001F212 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F216 5F01 360A                  	dc.l Map_obj5F+$5F000000
0001F21A 0000 0400                  	dc.b 0,	0, 4, 0
0001F21E 6001 38C0                  	dc.l Map_obj60+$60000000
0001F222 0000 2429                  	dc.b 0,	0, $24,	$29
0001F226 7901 8EEC                  	dc.l Map_obj79+$79000000
0001F22A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F22E                            	even
0001F22E                            	even
0001F22E                            
0001F22E                            ; ---------------------------------------------------------------------------
0001F22E                            ; Debug	list - Spring Yard
0001F22E                            ; ---------------------------------------------------------------------------
0001F22E                            Debug_SYZ:
0001F22E                            	include "_inc\Debug list - SYZ.asm"
0001F22E                            ; ---------------------------------------------------------------------------
0001F22E                            ; Debug	list - Spring Yard
0001F22E                            ; ---------------------------------------------------------------------------
0001F22E 000F                       	dc.w $F
0001F230 2500 B980                  	dc.l Map_obj25+$25000000
0001F234 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F238 2600 BF7E                  	dc.l Map_obj26+$26000000
0001F23C 0000 0680                  	dc.b 0,	0, 6, $80
0001F240 3600 E9F8                  	dc.l Map_obj36+$36000000
0001F244 0000 051B                  	dc.b 0,	0, 5, $1B
0001F248 4100 F724                  	dc.l Map_obj41+$41000000
0001F24C 0000 0523                  	dc.b 0,	0, 5, $23
0001F250 4300 FBAA                  	dc.l Map_obj43+$43000000
0001F254 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F258 1201 0388                  	dc.l Map_obj12+$12000000
0001F25C 0000 0000                  	dc.b 0,	0, 0, 0
0001F260 4701 0504                  	dc.l Map_obj47+$47000000
0001F264 0000 0380                  	dc.b 0,	0, 3, $80
0001F268 1F00 B14C                  	dc.l Map_obj1F+$1F000000
0001F26C 0000 0400                  	dc.b 0,	0, 4, 0
0001F270 2200 B42C                  	dc.l Map_obj22+$22000000
0001F274 0000 0444                  	dc.b 0,	0, 4, $44
0001F278 5001 1328                  	dc.l Map_obj50+$50000000
0001F27C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F280 1800 9B98                  	dc.l Map_obj18a+$18000000
0001F284 0000 4000                  	dc.b 0,	0, $40,	0
0001F288 5601 20F8                  	dc.l Map_obj56+$56000000
0001F28C 0000 4000                  	dc.b 0,	0, $40,	0
0001F290 3200 D88E                  	dc.l Map_obj32+$32000000
0001F294 0000 0513                  	dc.b 0,	0, 5, $13
0001F298 7801 8B66                  	dc.l Map_obj78+$78000000
0001F29C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F2A0 7901 8EEC                  	dc.l Map_obj79+$79000000
0001F2A4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F2A8                            	even
0001F2A8                            	even
0001F2A8                            
0001F2A8                            ; ---------------------------------------------------------------------------
0001F2A8                            ; Debug	list - Scrap Brain
0001F2A8                            ; ---------------------------------------------------------------------------
0001F2A8                            Debug_SBZ:
0001F2A8                            	include "_inc\Debug list - SBZ.asm"
0001F2A8                            ; ---------------------------------------------------------------------------
0001F2A8                            ; Debug	list - Scrap Brain
0001F2A8                            ; ---------------------------------------------------------------------------
0001F2A8 001D                       	dc.w $1D
0001F2AA 2500 B980                  	dc.l Map_obj25+$25000000
0001F2AE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F2B2 2600 BF7E                  	dc.l Map_obj26+$26000000
0001F2B6 0000 0680                  	dc.b 0,	0, 6, $80
0001F2BA 5F01 360A                  	dc.l Map_obj5F+$5F000000
0001F2BE 0000 0400                  	dc.b 0,	0, 4, 0
0001F2C2 6001 38C0                  	dc.l Map_obj60+$60000000
0001F2C6 0000 0429                  	dc.b 0,	0, 4, $29
0001F2CA 7801 8B66                  	dc.l Map_obj78+$78000000
0001F2CE 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F2D2 1501 2494                  	dc.l Map_obj15b+$15000000
0001F2D6 0702 4391                  	dc.b 7,	2, $43,	$91
0001F2DA 6701 748A                  	dc.l Map_obj67+$67000000
0001F2DE E000 C344                  	dc.b $E0, 0, $C3, $44
0001F2E2 5201 1A42                  	dc.l Map_obj52+$52000000
0001F2E6 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F2EA 3200 D88E                  	dc.l Map_obj32+$32000000
0001F2EE 0000 0513                  	dc.b 0,	0, 5, $13
0001F2F2 6901 76E4                  	dc.l Map_obj69+$69000000
0001F2F6 0300 4492                  	dc.b 3,	0, $44,	$92
0001F2FA 6901 773E                  	dc.l Map_obj69a+$69000000
0001F2FE 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F302 6A01 799C                  	dc.l Map_obj6A+$6A000000
0001F306 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F30A 5300 A152                  	dc.l Map_obj53+$53000000
0001F30E 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F312 5201 1A42                  	dc.l Map_obj52+$52000000
0001F316 3903 4460                  	dc.b $39, 3, $44, $60
0001F31A 6B01 7D6C                  	dc.l Map_obj6B+$6B000000
0001F31E 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F322 2A00 A3F8                  	dc.l Map_obj2A+$2A000000
0001F326 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F32A 6B01 7D6C                  	dc.l Map_obj6B+$6B000000
0001F32E 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F332 6A01 799C                  	dc.l Map_obj6A+$6A000000
0001F336 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F33A 6B01 7D6C                  	dc.l Map_obj6B+$6B000000
0001F33E 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F342 6A01 799C                  	dc.l Map_obj6A+$6A000000
0001F346 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F34A 6B01 7D6C                  	dc.l Map_obj6B+$6B000000
0001F34E 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F352 6C01 7F2E                  	dc.l Map_obj6C+$6C000000
0001F356 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F35A 6D00 FFFA                  	dc.l Map_obj6D+$6D000000
0001F35E 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F362 6D00 FFFA                  	dc.l Map_obj6D+$6D000000
0001F366 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F36A 6E01 7FE4                  	dc.l Map_obj6E+$6E000000
0001F36E 0400 047E                  	dc.b 4,	0, 4, $7E
0001F372 7001 842A                  	dc.l Map_obj70+$70000000
0001F376 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F37A 7101 2EA0                  	dc.l Map_obj71+$71000000
0001F37E 1100 8680                  	dc.b $11, 0, $86, $80
0001F382 1E00 A866                  	dc.l Map_obj1E+$1E000000
0001F386 0400 2302                  	dc.b 4,	0, $23,	2
0001F38A 7901 8EEC                  	dc.l Map_obj79+$79000000
0001F38E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F392                            	even
0001F392                            	even
0001F392                            
0001F392                            ; ---------------------------------------------------------------------------
0001F392                            ; Debug	list - ending sequence / special stage
0001F392                            ; ---------------------------------------------------------------------------
0001F392                            Debug_Ending:
0001F392                            	include "_inc\Debug list - Ending and SS.asm"
0001F392                            ; ---------------------------------------------------------------------------
0001F392                            ; Debug	list - ending sequence / special stage
0001F392                            ; ---------------------------------------------------------------------------
0001F392 000D                       	dc.w $D
0001F394 2500 B980                  	dc.l Map_obj25+$25000000
0001F398 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F39C 4701 0504                  	dc.l Map_obj47+$47000000
0001F3A0 0000 0380                  	dc.b 0,	0, 3, $80
0001F3A4 2800 AE7E                  	dc.l Map_obj28a+$28000000
0001F3A8 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F3AC 2800 AE7E                  	dc.l Map_obj28a+$28000000
0001F3B0 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F3B4 2800 AE7E                  	dc.l Map_obj28a+$28000000
0001F3B8 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F3BC 2800 AE66                  	dc.l Map_obj28+$28000000
0001F3C0 0D00 0553                  	dc.b $D, 0, 5, $53
0001F3C4 2800 AE66                  	dc.l Map_obj28+$28000000
0001F3C8 0E00 0553                  	dc.b $E, 0, 5, $53
0001F3CC 2800 AE66                  	dc.l Map_obj28+$28000000
0001F3D0 0F00 0573                  	dc.b $F, 0, 5, $73
0001F3D4 2800 AE66                  	dc.l Map_obj28+$28000000
0001F3D8 1000 0573                  	dc.b $10, 0, 5,	$73
0001F3DC 2800 AE7E                  	dc.l Map_obj28a+$28000000
0001F3E0 1100 0585                  	dc.b $11, 0, 5,	$85
0001F3E4 2800 AE96                  	dc.l Map_obj28b+$28000000
0001F3E8 1200 0593                  	dc.b $12, 0, 5,	$93
0001F3EC 2800 AE7E                  	dc.l Map_obj28a+$28000000
0001F3F0 1300 0565                  	dc.b $13, 0, 5,	$65
0001F3F4 2800 AE96                  	dc.l Map_obj28b+$28000000
0001F3F8 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F3FC                            	even
0001F3FC                            	even
0001F3FC                            
0001F3FC                            ; ---------------------------------------------------------------------------
0001F3FC                            ; Main level load blocks
0001F3FC                            ; ---------------------------------------------------------------------------
0001F3FC                            MainLoadBlocks:
0001F3FC                            	include "_inc\Main level load blocks.asm"
0001F3FC                            ; ---------------------------------------------------------------------------
0001F3FC                            ; Main level load blocks
0001F3FC                            ;
0001F3FC                            ; ===FORMAT===
0001F3FC                            ; level	patterns + (1st	PLC num	* 10^6)
0001F3FC                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F3FC                            ; 256x256 mappings
0001F3FC                            ; blank, music (unused), pal index (unused), pal index
0001F3FC                            ; ---------------------------------------------------------------------------
0001F3FC 0000 0000                  	dc.l Nem_GHZ+$4000000  ;changed from Nem_GHZ_2nd
0001F400 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F404 0000 0000                  	dc.l Blk256_GHZ
0001F408 0081 0404                  	dc.b 0,	$81, 4,	4
0001F40C 0000 0000                  	dc.l Nem_LZ+$6000000
0001F410 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F414 0000 0000                  	dc.l Blk256_LZ
0001F418 0082 0505                  	dc.b 0,	$82, 5,	5
0001F41C 0000 0000                  	dc.l Nem_MZ+$8000000
0001F420 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F424 0000 0000                  	dc.l Blk256_MZ
0001F428 0083 0606                  	dc.b 0,	$83, 6,	6
0001F42C 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F430 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F434 0000 0000                  	dc.l Blk256_SLZ
0001F438 0084 0707                  	dc.b 0,	$84, 7,	7
0001F43C 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F440 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F444 0000 0000                  	dc.l Blk256_SYZ
0001F448 0085 0808                  	dc.b 0,	$85, 8,	8
0001F44C 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F450 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F454 0000 0000                  	dc.l Blk256_SBZ
0001F458 0086 0909                  	dc.b 0,	$86, 9,	9
0001F45C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F460 0000 0000                  	dc.l Blk16_GHZ
0001F464 0000 0000                  	dc.l Blk256_GHZ
0001F468 0086 1313                  	dc.b 0,	$86, $13, $13
0001F46C                            	even
0001F46C                            	even
0001F46C                            
0001F46C                            ; ---------------------------------------------------------------------------
0001F46C                            ; Pattern load cues
0001F46C                            ; ---------------------------------------------------------------------------
0001F46C                            ArtLoadCues:
0001F46C                            	include "_inc\Pattern load cues.asm"
0001F46C                            ; ---------------------------------------------------------------------------
0001F46C                            ; Pattern load cues - index
0001F46C                            ; ---------------------------------------------------------------------------
0001F46C 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F470 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F474 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F478 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F47C 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F480 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F484 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F488 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F48C 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F490 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F494 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F498 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F49C 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F4A0 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F4A4 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F4A8 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F4AC                            ; ---------------------------------------------------------------------------
0001F4AC                            ; Pattern load cues - standard block 1
0001F4AC                            ; ---------------------------------------------------------------------------
0001F4AC 0004                       PLC_Main:	dc.w 4
0001F4AE 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F4B2 D800                       		dc.w $D800
0001F4B4 0000 0000                  		dc.l Nem_Hud		; HUD
0001F4B8 D940                       		dc.w $D940
0001F4BA 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F4BE FA80                       		dc.w $FA80
0001F4C0 0000 0000                  		dc.l Nem_Ring		; rings
0001F4C4 F640                       		dc.w $F640
0001F4C6 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F4CA F2E0                       		dc.w $F2E0
0001F4CC                            ; ---------------------------------------------------------------------------
0001F4CC                            ; Pattern load cues - standard block 2
0001F4CC                            ; ---------------------------------------------------------------------------
0001F4CC 0002                       PLC_Main2:	dc.w 2
0001F4CE 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F4D2 D000                       		dc.w $D000
0001F4D4 0000 0000                  		dc.l Nem_Shield		; shield
0001F4D8 A820                       		dc.w $A820
0001F4DA 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001F4DE AB80                       		dc.w $AB80
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0                            ; Pattern load cues - explosion
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0 0000                       PLC_Explode:	dc.w 0
0001F4E2 0000 0000                  		dc.l Nem_Explode	; explosion
0001F4E6 B400                       		dc.w $B400
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8                            ; Pattern load cues - game/time	over
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8 0000                       PLC_GameOver:	dc.w 0
0001F4EA 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F4EE ABC0                       		dc.w $ABC0
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0                            ; Pattern load cues - Green Hill
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0 000A                       PLC_GHZ:	dc.w $A
0001F4F2 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
0001F4F6 0000                       		dc.w 0
0001F4F8 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F4FC 6B00                       		dc.w $6B00
0001F4FE 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F502 7A00                       		dc.w $7A00
0001F504 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F508 8000                       		dc.w $8000
0001F50A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F50E 8880                       		dc.w $8880
0001F510 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F514 8F60                       		dc.w $8F60
0001F516 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F51A 9360                       		dc.w $9360
0001F51C 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F520 9E00                       		dc.w $9E00
0001F522 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F526 A360                       		dc.w $A360
0001F528 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F52C A460                       		dc.w $A460
0001F52E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F532 A660                       		dc.w $A660
0001F534 0005                       PLC_GHZ2:	dc.w 5
0001F536 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F53A 7000                       		dc.w $7000
0001F53C 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F540 71C0                       		dc.w $71C0
0001F542 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F546 7300                       		dc.w $7300
0001F548 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F54C 7540                       		dc.w $7540
0001F54E 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F552 A1E0                       		dc.w $A1E0
0001F554 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F558 6980                       		dc.w $6980
0001F55A                            ; ---------------------------------------------------------------------------
0001F55A                            ; Pattern load cues - Labyrinth
0001F55A                            ; ---------------------------------------------------------------------------
0001F55A 000B                       PLC_LZ:		dc.w $B
0001F55C 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001F560 0000                       		dc.w 0
0001F562 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F566 3C00                       		dc.w $3C00
0001F568 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F56C 3E00                       		dc.w $3E00
0001F56E 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F572 4B20                       		dc.w $4B20
0001F574 0000 0000                  		dc.l Nem_Water		; water	surface
0001F578 6000                       		dc.w $6000
0001F57A 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F57E 6200                       		dc.w $6200
0001F580 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F584 6500                       		dc.w $6500
0001F586 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F58A 6900                       		dc.w $6900
0001F58C 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F590 7780                       		dc.w $7780
0001F592 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F596 7880                       		dc.w $7880
0001F598 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F59C 7980                       		dc.w $7980
0001F59E 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F5A2 94C0                       		dc.w $94C0
0001F5A4 000C                       PLC_LZ2:	dc.w $C
0001F5A6 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F5AA 7BC0                       		dc.w $7BC0
0001F5AC 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F5B0 7CC0                       		dc.w $7CC0
0001F5B2 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F5B6 7EC0                       		dc.w $7EC0
0001F5B8 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F5BC 5D20                       		dc.w $5D20
0001F5BE 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F5C2 8800                       		dc.w $8800
0001F5C4 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F5C8 89E0                       		dc.w $89E0
0001F5CA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F5CE 8CE0                       		dc.w $8CE0
0001F5D0 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F5D4 90C0                       		dc.w $90C0
0001F5D6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F5DA A1E0                       		dc.w $A1E0
0001F5DC 0000 0000                  		dc.l Nem_Cork		; cork block
0001F5E0 A000                       		dc.w $A000
0001F5E2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F5E6 A360                       		dc.w $A360
0001F5E8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F5EC A460                       		dc.w $A460
0001F5EE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F5F2 A660                       		dc.w $A660
0001F5F4                            ; ---------------------------------------------------------------------------
0001F5F4                            ; Pattern load cues - Marble
0001F5F4                            ; ---------------------------------------------------------------------------
0001F5F4 0009                       PLC_MZ:		dc.w 9
0001F5F6 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F5FA 0000                       		dc.w 0
0001F5FC 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F600 6000                       		dc.w $6000
0001F602 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F606 68A0                       		dc.w $68A0
0001F608 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F60C 7000                       		dc.w $7000
0001F60E 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F612 71C0                       		dc.w $71C0
0001F614 0000 0000                  		dc.l Nem_Lava		; lava
0001F618 7500                       		dc.w $7500
0001F61A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F61E 8880                       		dc.w $8880
0001F620 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F624 8F60                       		dc.w $8F60
0001F626 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F62A 9700                       		dc.w $9700
0001F62C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F630 9FE0                       		dc.w $9FE0
0001F632 0004                       PLC_MZ2:	dc.w 4
0001F634 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F638 A260                       		dc.w $A260
0001F63A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F63E A360                       		dc.w $A360
0001F640 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F644 A460                       		dc.w $A460
0001F646 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F64A A660                       		dc.w $A660
0001F64C 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F650 5700                       		dc.w $5700
0001F652                            ; ---------------------------------------------------------------------------
0001F652                            ; Pattern load cues - Star Light
0001F652                            ; ---------------------------------------------------------------------------
0001F652 0008                       PLC_SLZ:	dc.w 8
0001F654 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F658 0000                       		dc.w 0
0001F65A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F65E 8000                       		dc.w $8000
0001F660 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F664 8520                       		dc.w $8520
0001F666 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F66A 9000                       		dc.w $9000
0001F66C 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F670 9C00                       		dc.w $9C00
0001F672 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F676 A260                       		dc.w $A260
0001F678 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F67C A360                       		dc.w $A360
0001F67E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F682 A460                       		dc.w $A460
0001F684 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F688 A660                       		dc.w $A660
0001F68A 0005                       PLC_SLZ2:	dc.w 5
0001F68C 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F690 6E80                       		dc.w $6E80
0001F692 0000 0000                  		dc.l Nem_Fan		; fan
0001F696 7400                       		dc.w $7400
0001F698 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F69C 7980                       		dc.w $7980
0001F69E 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F6A2 7B80                       		dc.w $7B80
0001F6A4 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F6A8 9B00                       		dc.w $9B00
0001F6AA 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F6AE 9E00                       		dc.w $9E00
0001F6B0                            ; ---------------------------------------------------------------------------
0001F6B0                            ; Pattern load cues - Spring Yard
0001F6B0                            ; ---------------------------------------------------------------------------
0001F6B0 0004                       PLC_SYZ:	dc.w 4
0001F6B2 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F6B6 0000                       		dc.w 0
0001F6B8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F6BC 8000                       		dc.w $8000
0001F6BE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F6C2 8880                       		dc.w $8880
0001F6C4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F6C8 8F60                       		dc.w $8F60
0001F6CA 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F6CE 9700                       		dc.w $9700
0001F6D0 0007                       PLC_SYZ2:	dc.w 7
0001F6D2 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F6D6 7000                       		dc.w $7000
0001F6D8 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F6DC 72C0                       		dc.w $72C0
0001F6DE 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F6E2 7740                       		dc.w $7740
0001F6E4 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F6E8 9FE0                       		dc.w $9FE0
0001F6EA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F6EE A1E0                       		dc.w $A1E0
0001F6F0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F6F4 A360                       		dc.w $A360
0001F6F6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F6FA A460                       		dc.w $A460
0001F6FC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F700 A660                       		dc.w $A660
0001F702                            ; ---------------------------------------------------------------------------
0001F702                            ; Pattern load cues - Scrap Brain
0001F702                            ; ---------------------------------------------------------------------------
0001F702 000B                       PLC_SBZ:	dc.w $B
0001F704 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001F708 0000                       		dc.w 0
0001F70A 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F70E 5800                       		dc.w $5800
0001F710 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F714 5D00                       		dc.w $5D00
0001F716 0000 0000                  		dc.l Nem_Girder		; girder
0001F71A 5E00                       		dc.w $5E00
0001F71C 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F720 6040                       		dc.w $6040
0001F722 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F726 6880                       		dc.w $6880
0001F728 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F72C 6900                       		dc.w $6900
0001F72E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F732 7220                       		dc.w $7220
0001F734 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F738 76A0                       		dc.w $76A0
0001F73A 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F73E 7B20                       		dc.w $7B20
0001F740 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F744 7EA0                       		dc.w $7EA0
0001F746 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F74A 9860                       		dc.w $9860
0001F74C 000C                       PLC_SBZ2:	dc.w $C
0001F74E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F752 5600                       		dc.w $5600
0001F754 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F758 8000                       		dc.w $8000
0001F75A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F75E 8520                       		dc.w $8520
0001F760 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F764 8C00                       		dc.w $8C00
0001F766 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F76A 8DE0                       		dc.w $8DE0
0001F76C 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F770 8FC0                       		dc.w $8FC0
0001F772 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F776 9240                       		dc.w $9240
0001F778 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F77C 7F20                       		dc.w $7F20
0001F77E 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F782 9BE0                       		dc.w $9BE0
0001F784 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F788 A1E0                       		dc.w $A1E0
0001F78A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F78E A360                       		dc.w $A360
0001F790 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F794 A460                       		dc.w $A460
0001F796 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F79A A660                       		dc.w $A660
0001F79C                            ; ---------------------------------------------------------------------------
0001F79C                            ; Pattern load cues - title card
0001F79C                            ; ---------------------------------------------------------------------------
0001F79C 0000                       PLC_TitleCard:	dc.w 0
0001F79E 0000 0000                  		dc.l Nem_TitleCard
0001F7A2 B000                       		dc.w $B000
0001F7A4                            ; ---------------------------------------------------------------------------
0001F7A4                            ; Pattern load cues - act 3 boss
0001F7A4                            ; ---------------------------------------------------------------------------
0001F7A4 0005                       PLC_Boss:	dc.w 5
0001F7A6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F7AA 8000                       		dc.w $8000
0001F7AC 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F7B0 8D80                       		dc.w $8D80
0001F7B2 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F7B6 93A0                       		dc.w $93A0
0001F7B8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F7BC A300                       		dc.w $A300
0001F7BE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F7C2 A300                       		dc.w $A300
0001F7C4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F7C8 A540                       		dc.w $A540
0001F7CA                            ; ---------------------------------------------------------------------------
0001F7CA                            ; Pattern load cues - act 1/2 signpost
0001F7CA                            ; ---------------------------------------------------------------------------
0001F7CA 0002                       PLC_Signpost:	dc.w 2
0001F7CC 0000 0000                  		dc.l Nem_SignPost	; signpost
0001F7D0 D000                       		dc.w $D000
0001F7D2 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001F7D6 96C0                       		dc.w $96C0
0001F7D8 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001F7DC 8C40                       		dc.w $8C40
0001F7DE                            ; ---------------------------------------------------------------------------
0001F7DE                            ; Pattern load cues - beta special stage warp effect
0001F7DE                            ; ---------------------------------------------------------------------------
0001F7DE 0000                       PLC_Warp:	dc.w 0
0001F7E0 0000 0000                  		dc.l Nem_Warp
0001F7E4 A820                       		dc.w $A820
0001F7E6                            ; ---------------------------------------------------------------------------
0001F7E6                            ; Pattern load cues - special stage
0001F7E6                            ; ---------------------------------------------------------------------------
0001F7E6 0010                       PLC_SpeStage:	dc.w $10
0001F7E8 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001F7EC 0000                       		dc.w 0
0001F7EE 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001F7F2 0A20                       		dc.w $A20
0001F7F4 0000 0000                  		dc.l Nem_SSWalls	; walls
0001F7F8 2840                       		dc.w $2840
0001F7FA 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F7FE 4760                       		dc.w $4760
0001F800 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001F804 4A20                       		dc.w $4A20
0001F806 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001F80A 4C60                       		dc.w $4C60
0001F80C 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001F810 5E00                       		dc.w $5E00
0001F812 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001F816 6E00                       		dc.w $6E00
0001F818 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001F81C 7E00                       		dc.w $7E00
0001F81E 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001F822 8E00                       		dc.w $8E00
0001F824 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001F828 9E00                       		dc.w $9E00
0001F82A 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001F82E AE00                       		dc.w $AE00
0001F830 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001F834 BE00                       		dc.w $BE00
0001F836 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001F83A EE00                       		dc.w $EE00
0001F83C 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001F840 F2E0                       		dc.w $F2E0
0001F842 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001F846 F400                       		dc.w $F400
0001F848 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001F84C F520                       		dc.w $F520
0001F84E 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001F852 F2E0                       		dc.w $F2E0
0001F854 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001F858 F400                       		dc.w $F400
0001F85A 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001F85E F520                       		dc.w $F520
0001F860                            ; ---------------------------------------------------------------------------
0001F860                            ; Pattern load cues - GHZ animals
0001F860                            ; ---------------------------------------------------------------------------
0001F860 0001                       PLC_GHZAnimals:	dc.w 1
0001F862 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F866 B000                       		dc.w $B000
0001F868 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F86C B240                       		dc.w $B240
0001F86E                            ; ---------------------------------------------------------------------------
0001F86E                            ; Pattern load cues - LZ animals
0001F86E                            ; ---------------------------------------------------------------------------
0001F86E 0001                       PLC_LZAnimals:	dc.w 1
0001F870 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F874 B000                       		dc.w $B000
0001F876 0000 0000                  		dc.l Nem_Seal		; seal
0001F87A B240                       		dc.w $B240
0001F87C                            ; ---------------------------------------------------------------------------
0001F87C                            ; Pattern load cues - MZ animals
0001F87C                            ; ---------------------------------------------------------------------------
0001F87C 0001                       PLC_MZAnimals:	dc.w 1
0001F87E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F882 B000                       		dc.w $B000
0001F884 0000 0000                  		dc.l Nem_Seal		; seal
0001F888 B240                       		dc.w $B240
0001F88A                            ; ---------------------------------------------------------------------------
0001F88A                            ; Pattern load cues - SLZ animals
0001F88A                            ; ---------------------------------------------------------------------------
0001F88A 0001                       PLC_SLZAnimals:	dc.w 1
0001F88C 0000 0000                  		dc.l Nem_Pig		; pig
0001F890 B000                       		dc.w $B000
0001F892 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F896 B240                       		dc.w $B240
0001F898                            ; ---------------------------------------------------------------------------
0001F898                            ; Pattern load cues - SYZ animals
0001F898                            ; ---------------------------------------------------------------------------
0001F898 0001                       PLC_SYZAnimals:	dc.w 1
0001F89A 0000 0000                  		dc.l Nem_Pig		; pig
0001F89E B000                       		dc.w $B000
0001F8A0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F8A4 B240                       		dc.w $B240
0001F8A6                            ; ---------------------------------------------------------------------------
0001F8A6                            ; Pattern load cues - SBZ animals
0001F8A6                            ; ---------------------------------------------------------------------------
0001F8A6 0001                       PLC_SBZAnimals:	dc.w 1
0001F8A8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F8AC B000                       		dc.w $B000
0001F8AE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F8B2 B240                       		dc.w $B240
0001F8B4                            ; ---------------------------------------------------------------------------
0001F8B4                            ; Pattern load cues - special stage results screen
0001F8B4                            ; ---------------------------------------------------------------------------
0001F8B4 0001                       PLC_SpeStResult:dc.w 1
0001F8B6 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F8BA A820                       		dc.w $A820
0001F8BC 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F8C0 AA20                       		dc.w $AA20
0001F8C2                            ; ---------------------------------------------------------------------------
0001F8C2                            ; Pattern load cues - ending sequence
0001F8C2                            ; ---------------------------------------------------------------------------
0001F8C2 000E                       PLC_Ending:	dc.w $E
0001F8C4 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F8C8 0000                       		dc.w 0
0001F8CA 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F8CE 39A0                       		dc.w $39A0
0001F8D0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F8D4 6B00                       		dc.w $6B00
0001F8D6 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F8DA 7400                       		dc.w $7400
0001F8DC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F8E0 78A0                       		dc.w $78A0
0001F8E2 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F8E6 7C20                       		dc.w $7C20
0001F8E8 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F8EC A480                       		dc.w $A480
0001F8EE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F8F2 AA60                       		dc.w $AA60
0001F8F4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F8F8 ACA0                       		dc.w $ACA0
0001F8FA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F8FE AE60                       		dc.w $AE60
0001F900 0000 0000                  		dc.l Nem_Seal		; seal
0001F904 B0A0                       		dc.w $B0A0
0001F906 0000 0000                  		dc.l Nem_Pig		; pig
0001F90A B260                       		dc.w $B260
0001F90C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F910 B4A0                       		dc.w $B4A0
0001F912 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F916 B660                       		dc.w $B660
0001F918 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F91C B8A0                       		dc.w $B8A0
0001F91E                            ; ---------------------------------------------------------------------------
0001F91E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F91E                            ; ---------------------------------------------------------------------------
0001F91E 0002                       PLC_TryAgain:	dc.w 2
0001F920 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F924 78A0                       		dc.w $78A0
0001F926 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F92A 7C20                       		dc.w $7C20
0001F92C 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F930 B000                       		dc.w $B000
0001F932                            ; ---------------------------------------------------------------------------
0001F932                            ; Pattern load cues - Eggman on SBZ 2
0001F932                            ; ---------------------------------------------------------------------------
0001F932 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F934 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F938 A300                       		dc.w $A300
0001F93A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F93E 8000                       		dc.w $8000
0001F940 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F944 9400                       		dc.w $9400
0001F946                            ; ---------------------------------------------------------------------------
0001F946                            ; Pattern load cues - final boss
0001F946                            ; ---------------------------------------------------------------------------
0001F946 0004                       PLC_FZBoss:	dc.w 4
0001F948 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F94C 7400                       		dc.w $7400
0001F94E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F952 6000                       		dc.w $6000
0001F954 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F958 8000                       		dc.w $8000
0001F95A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F95E 8E00                       		dc.w $8E00
0001F960 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F964 A540                       		dc.w $A540
0001F966                            		even
0001F966                            		even
0001F966                            
0001F966                            		incbin	misc\padding.bin
0001FA54                            		even
0001FA54                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001FEAC 00                         		even
0001FEAC                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001FFA4                            		even
0001FFA4                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000200B8                            		even
000200B8                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00021014 00                         		even
00021014                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002298E                            		even
0002298E                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000229D0                            		even
000229D0                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022A8E                            		even
00022A8E                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022F28 00                         		even
00022F28                            ; ---------------------------------------------------------------------------
00022F28                            ; Sprite mappings - Sonic
00022F28                            ; ---------------------------------------------------------------------------
00022F28                            Map_Sonic:
00022F28                            	include "_maps\Sonic.asm"
00022F28                            ; ---------------------------------------------------------------------------
00022F28                            ; Sprite mappings - Sonic
00022F28                            ; ---------------------------------------------------------------------------
00022F28 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
00022F2C 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
00022F30 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
00022F34 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
00022F38 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
00022F3C 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00022F40 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
00022F44 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
00022F48 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
00022F4C 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
00022F50 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
00022F54 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
00022F58 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
00022F5C 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
00022F60 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
00022F64 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
00022F68 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
00022F6C 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
00022F70 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
00022F74 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00022F78 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00022F7C 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00022F80 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
00022F84 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00022F88 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00022F8C 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00022F90 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
00022F94 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00022F98 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
00022F9C 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
00022FA0 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
00022FA4 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00022FA8 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
00022FAC 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00022FB0 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
00022FB4 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00022FB8 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
00022FBC 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00022FC0 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
00022FC4 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
00022FC8 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
00022FCC 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
00022FD0 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
00022FD4 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
00022FD8 0000 0000                  		dc.w byte_spdh1-Map_Sonic, byte_spdh2-Map_Sonic
00022FDC 0000 0000                  		dc.w byte_spdh3-Map_Sonic, byte_spdh4-Map_Sonic
00022FE0 0000 0000                  		dc.w byte_spdh5-Map_Sonic, byte_spdh6-Map_Sonic
00022FE4 00                         byte_21292:	dc.b 0
00022FE5 04                         byte_21293:	dc.b 4			; standing
00022FE6 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00022FEB F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
00022FF0 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
00022FF5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00022FFA 03                         byte_212A8:	dc.b 3			; waiting 1
00022FFB EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023000 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00023005 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
0002300A 03                         byte_212B8:	dc.b 3			; waiting 2
0002300B EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023010 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00023015 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
0002301A 03                         byte_212C8:	dc.b 3			; waiting 3
0002301B EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023020 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00023025 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
0002302A 03                         byte_212D8:	dc.b 3			; looking up
0002302B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00023030 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
00023035 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
0002303A 04                         byte_212E8:	dc.b 4			; walking 1-1
0002303B EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
00023040 FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
00023045 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
0002304A 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
0002304F 02                         byte_212FD:	dc.b 2			; walking 1-2
00023050 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
00023055 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
0002305A 02                         byte_21308:	dc.b 2			; walking 1-3
0002305B ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
00023060 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
00023065 04                         byte_21313:	dc.b 4			; walking 1-4
00023066 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
0002306B FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
00023070 FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
00023075 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
0002307A 02                         byte_21328:	dc.b 2			; walking 1-5
0002307B EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
00023080 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00023085 03                         byte_21333:	dc.b 3			; walking 1-6
00023086 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
0002308B FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
00023090 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00023095 05                         byte_21343:	dc.b 5			; walking 2-1
00023096 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
0002309B EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
000230A0 FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
000230A5 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
000230AA 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
000230AF 06                         byte_2135D:	dc.b 6			; walking 2-2
000230B0 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
000230B5 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
000230BA FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
000230BF 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
000230C4 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
000230C9 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
000230CE 04                         byte_2137C:	dc.b 4			; walking 2-3
000230CF ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
000230D4 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
000230D9 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
000230DE 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
000230E3 05                         byte_21391:	dc.b 5			; walking 2-4
000230E4 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
000230E9 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
000230EE FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
000230F3 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
000230F8 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
000230FD 04                         byte_213AB:	dc.b 4			; walking 2-5
000230FE EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023103 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023108 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
0002310D 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
00023112 05                         byte_213C0:	dc.b 5			; walking 2-6
00023113 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023118 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
0002311D FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
00023122 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
00023127 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
0002312C 04                         byte_213DA:	dc.b 4			; walking 3-1
0002312D F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
00023132 EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
00023137 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
0002313C 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
00023141 02                         byte_213EF:	dc.b 2			; walking 3-2
00023142 F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
00023147 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
0002314C 02                         byte_213FA:	dc.b 2			; walking 3-3
0002314D F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
00023152 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
00023157 04                         byte_21405:	dc.b 4			; walking 3-4
00023158 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
0002315D EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
00023162 FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
00023167 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
0002316C 02                         byte_2141A:	dc.b 2			; walking 3-5
0002316D F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
00023172 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00023177 03                         byte_21425:	dc.b 3			; walking 3-6
00023178 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
0002317D EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
00023182 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00023187 06                         byte_21435:	dc.b 6			; walking 4-1
00023188 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
0002318D ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
00023192 F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00023197 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
0002319C 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
000231A1 FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
000231A6 06                         byte_21454:	dc.b 6			; walking 4-2
000231A7 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000231AC E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
000231B1 EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
000231B6 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
000231BB F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
000231C0 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
000231C5 04                         byte_21473:	dc.b 4			; walking 4-3
000231C6 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
000231CB F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
000231D0 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
000231D5 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
000231DA 05                         byte_21488:	dc.b 5			; walking 4-4
000231DB FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
000231E0 ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
000231E5 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
000231EA F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
000231EF 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
000231F4 04                         byte_214A2:	dc.b 4			; walking 4-5
000231F5 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000231FA F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
000231FF EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00023204 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00023209 05                         byte_214B7:	dc.b 5			; walking 4-6
0002320A FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
0002320F EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
00023214 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00023219 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
0002321E 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
00023223 02                         byte_214D1:	dc.b 2			; running 1-1
00023224 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023229 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002322E 02                         byte_214DC:	dc.b 2			; running 1-2
0002322F EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023234 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023239 02                         byte_214E7:	dc.b 2			; running 1-3
0002323A EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002323F FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023244 02                         byte_214F2:	dc.b 2			; running 1-4
00023245 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002324A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002324F 04                         byte_214FD:	dc.b 4			; running 2-1
00023250 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023255 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002325A FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
0002325F FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023264 03                         byte_21512:	dc.b 3			; running 2-2
00023265 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002326A EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002326F FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023274 04                         byte_21522:	dc.b 4			; running 2-3
00023275 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002327A EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002327F FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023284 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023289 03                         byte_21537:	dc.b 3			; running 2-4
0002328A EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002328F EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023294 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023299 02                         byte_21547:	dc.b 2			; running 3-1
0002329A F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002329F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000232A4 02                         byte_21552:	dc.b 2			; running 3-2
000232A5 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000232AA F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000232AF 02                         byte_2155D:	dc.b 2			; running 3-3
000232B0 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000232B5 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000232BA 02                         byte_21568:	dc.b 2			; running 3-4
000232BB F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000232C0 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000232C5 04                         byte_21573:	dc.b 4			; running 4-1
000232C6 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
000232CB F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
000232D0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000232D5 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
000232DA 02                         byte_21588:	dc.b 2			; running 4-2
000232DB F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
000232E0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000232E5 04                         byte_21593:	dc.b 4			; running 4-3
000232E6 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
000232EB F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
000232F0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000232F5 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
000232FA 02                         byte_215A8:	dc.b 2			; running 4-4
000232FB F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023300 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023305 01                         byte_215B3:	dc.b 1			; rolling 1
00023306 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002330B 01                         byte_215B9:	dc.b 1			; rolling 2
0002330C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023311 01                         byte_215BF:	dc.b 1			; rolling 3
00023312 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023317 01                         byte_215C5:	dc.b 1			; rolling 4
00023318 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002331D 01                         byte_215CB:	dc.b 1			; rolling 5
0002331E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023323 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
00023324 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
00023329 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
0002332E 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
0002332F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023334 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
00023335 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
0002333A 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
0002333F 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00023340 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023345 02                         byte_215F3:	dc.b 2			; stopping 1
00023346 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
0002334B FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00023350 04                         byte_215FE:	dc.b 4			; stopping 2
00023351 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023356 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
0002335B 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00023360 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
00023365 04                         byte_21613:	dc.b 4			; ducking
00023366 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
0002336B FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00023370 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00023375 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
0002337A 03                         byte_21628:	dc.b 3			; balancing 1
0002337B EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00023380 F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00023385 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
0002338A 03                         byte_21638:	dc.b 3			; balancing 2
0002338B EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00023390 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00023395 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
0002339A 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
0002339B F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
000233A0 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
000233A5 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
000233AA 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
000233AB F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
000233B0 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
000233B5 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
000233B6 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
000233BB FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
000233C0 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
000233C5 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
000233C6 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
000233CB FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
000233D0 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
000233D5 03                         byte_21683:	dc.b 3			; bouncing
000233D6 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
000233DB 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
000233E0 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
000233E5 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
000233E6 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
000233EB 0005 000C 08               		dc.b 0,	5, 0, $C, 8
000233F0 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
000233F5 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
000233FA 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
000233FB F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023400 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023405 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
0002340A F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
0002340F 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00023410 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023415 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
0002341A 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
0002341F 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023424 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023429 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
0002342A E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
0002342F E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
00023434 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023439 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
0002343E 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023443 02                         byte_216F1:	dc.b 2			; pushing 1
00023444 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023449 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
0002344E 03                         byte_216FC:	dc.b 3			; pushing 2
0002344F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023454 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023459 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
0002345E 02                         byte_2170C:	dc.b 2			; pushing 3
0002345F ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023464 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023469 03                         byte_21717:	dc.b 3			; pushing 4
0002346A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
0002346F 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023474 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023479 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
0002347A EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002347F FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00023484 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00023485 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0002348A 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
0002348F E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00023494 03                         byte_21742:	dc.b 3			; death	1
00023495 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
0002349A E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002349F F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
000234A4 05                         byte_21752:	dc.b 5			; drowning
000234A5 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000234AA E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
000234AF F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
000234B4 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
000234B9 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
000234BE 05                         byte_2176C:	dc.b 5			; death	2
000234BF E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000234C4 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
000234C9 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
000234CE 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
000234D3 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
000234D8 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
000234D9 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
000234DE F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
000234E3 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
000234E4 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
000234E9 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
000234EE 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
000234F3 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
000234F4 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
000234F9 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
000234FA F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000234FF 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00023500 F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00023505 03                         byte_217B3:	dc.b 3			; injury
00023506 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
0002350B FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00023510 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00023515 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00023516 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
0002351B FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00023520 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00023525 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00023526 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
0002352B F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00023530 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00023535 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00023536 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
0002353B FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00023540 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00023545 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00023546 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
0002354B F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00023550 01                         byte_spdh1:	dc.b 1			; Spin Dash 1
00023551 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00023556 01                         byte_spdh2:	dc.b 1			; Spin Dash 2
00023557 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0002355C 01                         byte_spdh3:	dc.b 1			; Spin Dash 3
0002355D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00023562 01                         byte_spdh4:	dc.b 1			; Spin Dash 4
00023563 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00023568 01                         byte_spdh5:	dc.b 1			; Spin Dash 5
00023569 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0002356E 01                         byte_spdh6:	dc.b 1			; Spin Dash 6
0002356F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00023574                            		even
00023574                            		even
00023574                            
00023574                            ; ---------------------------------------------------------------------------
00023574                            ; Uncompressed graphics	loading	array for Sonic
00023574                            ; ---------------------------------------------------------------------------
00023574                            SonicDynPLC:
00023574                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023574                            ; ---------------------------------------------------------------------------
00023574                            ; Uncompressed graphics	loading	array for Sonic
00023574                            ; ---------------------------------------------------------------------------
00023574 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00023576 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00023578 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
0002357A 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
0002357C 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
0002357E 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
00023580 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
00023582 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
00023584 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00023586 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00023588 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
0002358A 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
0002358C 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
0002358E 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
00023590 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00023592 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00023594 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00023596 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00023598 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
0002359A 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
0002359C 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
0002359E 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
000235A0 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
000235A2 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
000235A4 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
000235A6 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
000235A8 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
000235AA 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
000235AC 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
000235AE 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
000235B0 0000                       		dc.w SonPLC_Run11-SonicDynPLC
000235B2 0000                       		dc.w SonPLC_Run12-SonicDynPLC
000235B4 0000                       		dc.w SonPLC_Run13-SonicDynPLC
000235B6 0000                       		dc.w SonPLC_Run14-SonicDynPLC
000235B8 0000                       		dc.w SonPLC_Run21-SonicDynPLC
000235BA 0000                       		dc.w SonPLC_Run22-SonicDynPLC
000235BC 0000                       		dc.w SonPLC_Run23-SonicDynPLC
000235BE 0000                       		dc.w SonPLC_Run24-SonicDynPLC
000235C0 0000                       		dc.w SonPLC_Run31-SonicDynPLC
000235C2 0000                       		dc.w SonPLC_Run32-SonicDynPLC
000235C4 0000                       		dc.w SonPLC_Run33-SonicDynPLC
000235C6 0000                       		dc.w SonPLC_Run34-SonicDynPLC
000235C8 0000                       		dc.w SonPLC_Run41-SonicDynPLC
000235CA 0000                       		dc.w SonPLC_Run42-SonicDynPLC
000235CC 0000                       		dc.w SonPLC_Run43-SonicDynPLC
000235CE 0000                       		dc.w SonPLC_Run44-SonicDynPLC
000235D0 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
000235D2 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
000235D4 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
000235D6 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
000235D8 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
000235DA 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
000235DC 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
000235DE 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
000235E0 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
000235E2 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
000235E4 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
000235E6 0000                       		dc.w SonPLC_Duck-SonicDynPLC
000235E8 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
000235EA 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
000235EC 0000                       		dc.w SonPLC_Float1-SonicDynPLC
000235EE 0000                       		dc.w SonPLC_Float2-SonicDynPLC
000235F0 0000                       		dc.w SonPLC_Float3-SonicDynPLC
000235F2 0000                       		dc.w SonPLC_Float4-SonicDynPLC
000235F4 0000                       		dc.w SonPLC_Spring-SonicDynPLC
000235F6 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
000235F8 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
000235FA 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
000235FC 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
000235FE 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00023600 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023602 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023604 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023606 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023608 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
0002360A 0000                       		dc.w SonPLC_Death1-SonicDynPLC
0002360C 0000                       		dc.w SonPLC_Drown-SonicDynPLC
0002360E 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00023610 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023612 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023614 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023616 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023618 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
0002361A 0000                       		dc.w SonPLC_Float1-SonicDynPLC
0002361C 0000                       		dc.w SonPLC_Float3-SonicDynPLC
0002361E 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00023620 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023622 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023624 0000                       		dc.w SonPLC_Spin_Dash1-SonicDynPLC	;58
00023626 0000                       		dc.w SonPLC_Spin_Dash2-SonicDynPLC	;59
00023628 0000                       		dc.w SonPLC_Spin_Dash3-SonicDynPLC	;5A
0002362A 0000                       		dc.w SonPLC_Spin_Dash4-SonicDynPLC	;5B
0002362C 0000                       		dc.w SonPLC_Spin_Dash5-SonicDynPLC	;5C
0002362E 0000                       		dc.w SonPLC_Spin_Dash6-SonicDynPLC	;5D
00023630                            
00023630 00                         SonPLC_Blank:	dc.b 0
00023631 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
0002363A 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00023641 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00023648 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
0002364F 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00023656 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
0002365F 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00023664 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00023669 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00023672 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00023677 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
0002367E 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00023689 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00023696 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
0002369F 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
000236AA 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
000236B3 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
000236BE 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
000236C7 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
000236CC 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
000236D1 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
000236DA 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
000236DF 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
000236E6 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
000236F3 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00023700 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00023709 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00023714 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
0002371D 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00023728 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
0002372D 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00023732 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00023737 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
0002373C 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00023745 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
0002374C 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00023755 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
0002375C 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00023761 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00023766 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
0002376B 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00023770 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00023779 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
0002377E 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00023787 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
0002378C 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
0002378F 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00023792 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00023795 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00023798 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
0002379B 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
000237A0 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
000237A3 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
000237A8 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
000237AB 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
000237B0 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
000237B9 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
000237C2 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
000237C9 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
000237D0 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
000237D7 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
000237DA 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
000237E1 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
000237E8 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
000237EF 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
000237F8 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00023801 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
0002380C 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00023817 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
0002381C 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00023823 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00023828 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
0002382F 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00023834 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
0002383B 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00023842 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
0002384D 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00023858 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
0002385D 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00023864 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00023867 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
0002386A 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
0002386D 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00023874 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
0002387B 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00023880 01F5 10                    SonPLC_Spin_Dash1:	dc.b 1, $F5, $10	; 01 F 510
00023883 01F5 20                    SonPLC_Spin_Dash2:	dc.b 1, $F5, $20	; 01 F 520
00023886 01F5 30                    SonPLC_Spin_Dash3:	dc.b 1, $F5, $30	; 01 F 530
00023889 01F5 40                    SonPLC_Spin_Dash4:	dc.b 1, $F5, $40	; 01 F 540
0002388C 01F5 50                    SonPLC_Spin_Dash5:	dc.b 1, $F5, $50	; 01 F 550
0002388F 01F5 60                    SonPLC_Spin_Dash6:	dc.b 1, $F5, $60	; 01 F 560
00023892                            		even
00023892                            		even
00023892                            
00023892                            ; ---------------------------------------------------------------------------
00023892                            ; Uncompressed graphics	- Sonic
00023892                            ; ---------------------------------------------------------------------------
00023892                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002E692                            		even
0002E692                            ; ---------------------------------------------------------------------------
0002E692                            ; Compressed graphics - various
0002E692                            ; ---------------------------------------------------------------------------
0002E692                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002E796 00                         		even
0002E796                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002E7E0                            		even
0002E7E0                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002E8DE                            		even
0002E8DE                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002E9A8                            		even
0002E9A8                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002EAB2                            		even
0002EAB2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002EB12 00                         		even
0002EB12                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002ED54                            		even
0002ED54                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002EED8 00                         		even
0002EED8                            ; ---------------------------------------------------------------------------
0002EED8                            ; Sprite mappings - walls of the special stage
0002EED8                            ; ---------------------------------------------------------------------------
0002EED8                            Map_SSWalls:
0002EED8                            	include "_maps\SSwalls.asm"
0002EED8                            ; ---------------------------------------------------------------------------
0002EED8                            ; Sprite mappings - walls of the special stage
0002EED8                            ; ---------------------------------------------------------------------------
0002EED8 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002EEDC 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002EEE0 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002EEE4 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002EEE8 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002EEEC 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002EEF0 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002EEF4 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002EEF8 01                         byte_2C584:	dc.b 1
0002EEF9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002EEFE 01                         byte_2C58A:	dc.b 1
0002EEFF F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002EF04 01                         byte_2C590:	dc.b 1
0002EF05 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002EF0A 01                         byte_2C596:	dc.b 1
0002EF0B F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002EF10 01                         byte_2C59C:	dc.b 1
0002EF11 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002EF16 01                         byte_2C5A2:	dc.b 1
0002EF17 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002EF1C 01                         byte_2C5A8:	dc.b 1
0002EF1D F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002EF22 01                         byte_2C5AE:	dc.b 1
0002EF23 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002EF28 01                         byte_2C5B4:	dc.b 1
0002EF29 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002EF2E 01                         byte_2C5BA:	dc.b 1
0002EF2F F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002EF34 01                         byte_2C5C0:	dc.b 1
0002EF35 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002EF3A 01                         byte_2C5C6:	dc.b 1
0002EF3B F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002EF40 01                         byte_2C5CC:	dc.b 1
0002EF41 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002EF46 01                         byte_2C5D2:	dc.b 1
0002EF47 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002EF4C 01                         byte_2C5D8:	dc.b 1
0002EF4D F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002EF52 01                         byte_2C5DE:	dc.b 1
0002EF53 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002EF58                            		even
0002EF58                            		even
0002EF58                            ; ---------------------------------------------------------------------------
0002EF58                            ; Compressed graphics - special stage
0002EF58                            ; ---------------------------------------------------------------------------
0002EF58                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002F870                            		even
0002F870                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002F9A4                            		even
0002F9A4                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00030602                            		even
00030602                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00030902                            		even
00030902                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00030DEA                            		even
00030DEA                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00030EDA 00                         		even
00030EDA                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00030FAA                            		even
00030FAA                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000310A0 00                         		even
000310A0                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031106 00                         		even
00031106                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000311A4                            		even
000311A4                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031266                            		even
00031266                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031336 00                         		even
00031336                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00031402 00                         		even
00031402                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000314CA                            		even
000314CA                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00031594                            		even
00031594                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00031664                            		even
00031664                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00031856                            		even
00031856                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000319AC                            		even
000319AC                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00031A5E                            		even
00031A5E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00031B38                            		even
00031B38                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00031BC6 00                         		even
00031BC6                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00031D36                            		even
00031D36                            ; ---------------------------------------------------------------------------
00031D36                            ; Compressed graphics - GHZ stuff
00031D36                            ; ---------------------------------------------------------------------------
00031D36                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00031D96                            		even
00031D96                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00031EB0                            		even
00031EB0                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00031F9C 00                         		even
00031F9C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032002 00                         		even
00032002                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000321A0                            		even
000321A0                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003223E 00                         		even
0003223E                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00032450                            		even
00032450                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003257C                            		even
0003257C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003269A                            		even
0003269A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00032744 00                         		even
00032744                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000327B0 00                         		even
000327B0                            ; ---------------------------------------------------------------------------
000327B0                            ; Compressed graphics - LZ stuff
000327B0                            ; ---------------------------------------------------------------------------
000327B0                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000328D4 00                         		even
000328D4                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000330AA                            		even
000330AA                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003322A                            		even
0003322A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00033394 00                         		even
00033394                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000339D8 00                         		even
000339D8                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00033A8E                            		even
00033A8E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00033B30                            		even
00033B30                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00033C8C 00                         		even
00033C8C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00033CF6                            		even
00033CF6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00033E46                            		even
00033E46                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034320                            		even
00034320                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003448E 00                         		even
0003448E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003472A 00                         		even
0003472A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00034862 00                         		even
00034862                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003498E 00                         		even
0003498E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00034A9C                            		even
00034A9C                            ; ---------------------------------------------------------------------------
00034A9C                            ; Compressed graphics - MZ stuff
00034A9C                            ; ---------------------------------------------------------------------------
00034A9C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00034D28 00                         		even
00034D28                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00034DE8                            		even
00034DE8                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00034E9E 00                         		even
00034E9E                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00034EFC 00                         		even
00034EFC                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000351D8 00                         		even
000351D8                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00035AC8                            		even
00035AC8                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00035C30 00                         		even
00035C30                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00035CB8                            		even
00035CB8                            ; ---------------------------------------------------------------------------
00035CB8                            ; Compressed graphics - SLZ stuff
00035CB8                            ; ---------------------------------------------------------------------------
00035CB8                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00035EF2                            		even
00035EF2                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036038                            		even
00036038                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003627A 00                         		even
0003627A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000362DC 00                         		even
000362DC                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000363BC 00                         		even
000363BC                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000365A4                            		even
000365A4                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000366AE 00                         		even
000366AE                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00036752                            		even
00036752                            ; ---------------------------------------------------------------------------
00036752                            ; Compressed graphics - SYZ stuff
00036752                            ; ---------------------------------------------------------------------------
00036752                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000368B6                            		even
000368B6                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00036928                            		even
00036928                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00036A08 00                         		even
00036A08                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00036C92                            		even
00036C92                            ; ---------------------------------------------------------------------------
00036C92                            ; Compressed graphics - SBZ stuff
00036C92                            ; ---------------------------------------------------------------------------
00036C92                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00036CFC 00                         		even
00036CFC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00036F94 00                         		even
00036F94                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003714C 00                         		even
0003714C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000372E8                            		even
000372E8                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00037616 00                         		even
00037616                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000377F2 00                         		even
000377F2                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00037858                            		even
00037858                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000379D4                            		even
000379D4                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00037A9A                            		even
00037A9A                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00037C22                            		even
00037C22                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00037C8A 00                         		even
00037C8A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00037CE0                            		even
00037CE0                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00037DDC 00                         		even
00037DDC                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00037EF2                            		even
00037EF2                            ; ---------------------------------------------------------------------------
00037EF2                            ; Compressed graphics - enemies
00037EF2                            ; ---------------------------------------------------------------------------
00037EF2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000382B0 00                         		even
000382B0                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00038792 00                         		even
00038792                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00038B34                            		even
00038B34                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00038D1A                            		even
00038D1A                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000393F4                            		even
000393F4                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003965A                            		even
0003965A                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
000398E2 00                         		even
000398E2                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00039DFE                            		even
00039DFE                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A086 00                         		even
0003A086                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003A69C 00                         		even
0003A69C                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003AA7C                            		even
0003AA7C                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003AD74 00                         		even
0003AD74                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003AFBC 00                         		even
0003AFBC                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003B252 00                         		even
0003B252                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003B42C                            		even
0003B42C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003B5BA 00                         		even
0003B5BA                            ; ---------------------------------------------------------------------------
0003B5BA                            ; Compressed graphics - various
0003B5BA                            ; ---------------------------------------------------------------------------
0003B5BA                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003BCCA                            		even
0003BCCA                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003BE02 00                         		even
0003BE02                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003BEA6                            		even
0003BEA6                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003BF98                            		even
0003BF98                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003C3F8                            		even
0003C3F8                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003CA4E 00                         		even
0003CA4E                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003CB00 00                         		even
0003CB00                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003CC92                            		even
0003CC92                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003CDE8                            		even
0003CDE8                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003CEDE                            		even
0003CEDE                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003D396 00                         		even
0003D396                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003D492 00                         		even
0003D492                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003D60A                            		even
0003D60A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003D906                            		even
0003D906                            ; ---------------------------------------------------------------------------
0003D906                            ; Compressed graphics - continue screen
0003D906                            ; ---------------------------------------------------------------------------
0003D906                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003DBB2                            		even
0003DBB2                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003DDEA                            		even
0003DDEA                            ; ---------------------------------------------------------------------------
0003DDEA                            ; Compressed graphics - animals
0003DDEA                            ; ---------------------------------------------------------------------------
0003DDEA                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003DF42 00                         		even
0003DF42                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E09E 00                         		even
0003E09E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E21C 00                         		even
0003E21C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003E338 00                         		even
0003E338                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003E46E 00                         		even
0003E46E                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003E5A8                            		even
0003E5A8                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003E702                            		even
0003E702                            ; ---------------------------------------------------------------------------
0003E702                            ; Compressed graphics - primary patterns and block mappings
0003E702                            ; ---------------------------------------------------------------------------
0003E702                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F030                            		even
0003F030                            Nem_GHZ:	incbin	artnem\8x8ghz.bin
000419BA                            		even
000419BA                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042FAE                            		even
00042FAE                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0004431C                            		even
0004431C                            Blk256_GHZ:	incbin	map256\ghz.bin
000463D6                            		even
000463D6                            Blk16_LZ:	incbin	map16\lz.bin
000466D6                            		even
000466D6                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004815C                            		even
0004815C                            Blk256_LZ:	incbin	map256\lz.bin
0004A92E                            		even
0004A92E                            Blk16_MZ:	incbin	map16\mz.bin
0004B0AC                            		even
0004B0AC                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004D800                            		even
0004D800                            Blk256_MZ:	incbin	map256\mz.bin
0004EF7E                            		even
0004EF7E                            Blk16_SLZ:	incbin	map16\slz.bin
0004F712                            		even
0004F712                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00053102 00                         		even
00053102                            Blk256_SLZ:	incbin	map256\slz.bin
0005550C                            		even
0005550C                            Blk16_SYZ:	incbin	map16\syz.bin
00055DBA                            		even
00055DBA                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000593A0                            		even
000593A0                            Blk256_SYZ:	incbin	map256\syz.bin
0005B722                            		even
0005B722                            Blk16_SBZ:	incbin	map16\sbz.bin
0005C4D0                            		even
0005C4D0                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005EB9E                            		even
0005EB9E                            Blk256_SBZ:	incbin	map256\sbz.bin
000615D4                            		even
000615D4                            ; ---------------------------------------------------------------------------
000615D4                            ; Compressed graphics - bosses and ending sequence
000615D4                            ; ---------------------------------------------------------------------------
000615D4                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00061E26                            		even
00061E26                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006210C 00                         		even
0006210C                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006297E                            		even
0006297E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00063198                            		even
00063198                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000638EC                            		even
000638EC                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00063E64 00                         		even
00063E64                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00063F86 00                         		even
00063F86                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000641B4                            		even
000641B4                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00065354                            		even
00065354                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00065C86                            		even
00065C86                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00066058                            		even
00066058                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000665E8                            		even
000665E8                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006686C                            		even
0006686C                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00066FDC 00                         		even
00066FDC                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00067262 00                         		even
00067262                            		incbin	misc\padding2.bin
00067366                            		even
00067366                            ; ---------------------------------------------------------------------------
00067366                            ; Collision data
00067366                            ; ---------------------------------------------------------------------------
00067366                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00067466                            		even
00067466                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00068466                            		even
00068466                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00069466                            		even
00069466                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006A21E                            		even
0006A21E                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006A2E6                            		even
0006A2E6                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006A476                            		even
0006A476                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006A66A                            		even
0006A66A                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006A85E                            		even
0006A85E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006AAB6                            		even
0006AAB6                            ; ---------------------------------------------------------------------------
0006AAB6                            ; Special layouts
0006AAB6                            ; ---------------------------------------------------------------------------
0006AAB6                            SS_1:		incbin	sslayout\1.bin
0006AD24                            		even
0006AD24                            SS_2:		incbin	sslayout\2.bin
0006B136                            		even
0006B136                            SS_3:		incbin	sslayout\3.bin
0006B492                            		even
0006B492                            SS_4:		incbin	sslayout\4.bin
0006B96C                            		even
0006B96C                            SS_5:		incbin	sslayout\5.bin
0006BE3E                            		even
0006BE3E                            SS_6:		incbin	sslayout\6.bin
0006C14E                            		even
0006C14E                            ; ---------------------------------------------------------------------------
0006C14E                            ; Animated uncompressed graphics
0006C14E                            ; ---------------------------------------------------------------------------
0006C14E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006C34E                            		even
0006C34E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006C74E                            		even
0006C74E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006CBCE                            		even
0006CBCE                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006CECE                            		even
0006CECE                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006D4CE                            		even
0006D4CE                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006D7CE                            		even
0006D7CE                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006E24E                            		even
0006E24E                            
0006E24E                            ; ---------------------------------------------------------------------------
0006E24E                            ; Level	layout index
0006E24E                            ; ---------------------------------------------------------------------------
0006E24E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006E254 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006E25A 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006E260 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006E266 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006E26C 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006E272 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006E278 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006E27E 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006E284 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006E28A 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006E290 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006E296 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006E29C 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006E2A2 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006E2A8 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006E2AE 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006E2B4 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006E2BA 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006E2C0 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006E2C6 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006E2CC 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006E2D2 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006E2D8 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006E2DE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006E2E4 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006E2EA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006E2F0 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006E2F6                            
0006E2F6                            Level_GHZ1:	incbin	levels\ghz1.bin
0006E3E8                            		even
0006E3E8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006E3EC                            Level_GHZ2:	incbin	levels\ghz2.bin
0006E4B4                            		even
0006E4B4 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006E4B8                            Level_GHZ3:	incbin	levels\ghz3.bin
0006E5DA                            		even
0006E5DA                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006E5FC                            		even
0006E5FC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006E600 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006E604                            
0006E604                            Level_LZ1:	incbin	levels\lz1.bin
0006E706                            		even
0006E706                            Level_LZbg:	incbin	levels\lzbg.bin
0006E808                            		even
0006E808 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006E80C                            Level_LZ2:	incbin	levels\lz2.bin
0006E8A6                            		even
0006E8A6 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006E8AA                            Level_LZ3:	incbin	levels\lz3.bin
0006E9C4                            		even
0006E9C4 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006E9C8                            Level_SBZ3:	incbin	levels\sbz3.bin
0006EA82                            		even
0006EA82 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006EA86                            
0006EA86                            Level_MZ1:	incbin	levels\mz1.bin
0006EB24                            		even
0006EB24                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006EB9E                            		even
0006EB9E                            Level_MZ2:	incbin	levels\mz2.bin
0006EC42                            		even
0006EC42                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006ECD4                            		even
0006ECD4 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006ECD8                            Level_MZ3:	incbin	levels\mz3.bin
0006EDBA                            		even
0006EDBA                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006EE5E                            		even
0006EE5E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006EE62 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006EE66                            
0006EE66                            Level_SLZ1:	incbin	levels\slz1.bin
0006EF78                            		even
0006EF78                            Level_SLZbg:	incbin	levels\slzbg.bin
0006EFF2                            		even
0006EFF2                            Level_SLZ2:	incbin	levels\slz2.bin
0006F0E2                            		even
0006F0E2                            Level_SLZ3:	incbin	levels\slz3.bin
0006F1FC                            		even
0006F1FC 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006F200                            
0006F200                            Level_SYZ1:	incbin	levels\syz1.bin
0006F2BC                            		even
0006F2BC                            Level_SYZbg:	incbin	levels\syzbg.bin
0006F2F6                            		even
0006F2F6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006F2FA                            Level_SYZ2:	incbin	levels\syz2.bin
0006F3FE                            		even
0006F3FE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006F402                            Level_SYZ3:	incbin	levels\syz3.bin
0006F55C                            		even
0006F55C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006F560 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006F564                            
0006F564                            Level_SBZ1:	incbin	levels\sbz1.bin
0006F686                            		even
0006F686                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006F6C4                            		even
0006F6C4                            Level_SBZ2:	incbin	levels\sbz2.bin
0006F806                            		even
0006F806                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006F970                            		even
0006F970 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006F974 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006F978                            Level_End:	incbin	levels\ending.bin
0006F998                            		even
0006F998 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006F99C                            
0006F99C                            ; ---------------------------------------------------------------------------
0006F99C                            ; Animated uncompressed giant ring graphics
0006F99C                            ; ---------------------------------------------------------------------------
0006F99C                            Art_BigRing:	incbin	artunc\bigring.bin
000705DC                            		even
000705DC                            
000705DC                            		incbin	misc\padding3.bin
00070678                            		even
00070678                            
00070678                            ; ---------------------------------------------------------------------------
00070678                            ; Sprite locations index
00070678                            ; ---------------------------------------------------------------------------
00070678 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007067C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00070680 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00070684 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00070688 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007068C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00070690 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00070694 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00070698 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007069C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706A0 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706A4 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706A8 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706AC 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706B0 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706B4 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706B8 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706BC 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706C0 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706C4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706C8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706CC 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706D0 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706D4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706D8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706DC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706E0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706E4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000706E8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000706EC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
000706F0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
000706F4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000706F8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000706FC 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00070700 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00070704 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00070708 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007070E                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00070C1E                            		even
00070C1E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000711DC                            		even
000711DC                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00071896                            		even
00071896                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00071D04                            		even
00071D04                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00072046                            		even
00072046                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00072628                            		even
00072628                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00072AC0                            		even
00072AC0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00072AF2                            		even
00072AF2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00072B24                            		even
00072B24                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00072B56                            		even
00072B56                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00072B88                            		even
00072B88                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00072BD2                            		even
00072BD2                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00072C10                            		even
00072C10                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00072F7C                            		even
00072F7C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00073426                            		even
00073426                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007399C                            		even
0007399C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00073EDC                            		even
00073EDC                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00074344                            		even
00074344                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00074926                            		even
00074926                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00074DB2                            		even
00074DB2                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007531C                            		even
0007531C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00075922                            		even
00075922                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00076060                            		even
00076060                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007673E                            		even
0007673E                            ObjPos_FZ:	incbin	objpos\fz.bin
00076750                            		even
00076750                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00076782                            		even
00076782                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000767B4                            		even
000767B4                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000767E6                            		even
000767E6                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00076818                            		even
00076818                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007684A                            		even
0007684A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00076882                            		even
00076882                            ObjPos_End:	incbin	objpos\ending.bin
000769DE                            		even
000769DE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000769E4                            ; ---------------------------------------------------------------------------
000769E4                            		incbin	misc\padding4.bin
0007700E                            		even
0007700E                            
0007700E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00077012 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00077016 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007701A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007701E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00077022 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00077026                            ; ---------------------------------------------------------------------------
00077026                            ; PSG instruments used in music
00077026                            ; ---------------------------------------------------------------------------
00077026 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00077032 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007703E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007704A                            PSG1:		incbin	sound\psg1.bin
00077061                            PSG2:		incbin	sound\psg2.bin
00077068                            PSG3:		incbin	sound\psg3.bin
00077079                            PSG4:		incbin	sound\psg4.bin
00077084                            PSG6:		incbin	sound\psg6.bin
00077093                            PSG5:		incbin	sound\psg5.bin
000770BD                            PSG7:		incbin	sound\psg7.bin
000770D9                            PSG8:		incbin	sound\psg8.bin
00077101                            PSG9:		incbin	sound\psg9.bin
00077112                            
00077112 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007711A                            ; ---------------------------------------------------------------------------
0007711A                            ; Music	Pointers
0007711A                            ; ---------------------------------------------------------------------------
0007711A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00077122 0000 0000 0000 0000        		dc.l Music83, Music84
0007712A 0000 0000 0000 0000        		dc.l Music85, Music86
00077132 0000 0000 0000 0000        		dc.l Music87, Music88
0007713A 0000 0000 0000 0000        		dc.l Music89, Music8A
00077142 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007714A 0000 0000 0000 0000        		dc.l Music8D, Music8E
00077152 0000 0000 0000 0000        		dc.l Music8F, Music90
0007715A 0000 0000 0000 0000        		dc.l Music91, Music92
00077162 0000 0000 0000 0000        		dc.l Music93, Music94
0007716A 0000 0000 0000 0000        		dc.l Music95, Music96
00077172 0000 0000 0000 0000        		dc.l Music97, Music98
0007717A 0000 0000 0000 0000        		dc.l Music99, Music9A
00077182 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007718A 0000 0000 0000 0000        		dc.l Music9D, Music9E
00077192 0000 0000                                  dc.l Music9F
00077196                            ; ---------------------------------------------------------------------------
00077196                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00077196                            ; ---------------------------------------------------------------------------
00077196 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000771A6 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000771B6 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000771C6 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000771D6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000771E6 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000771F6 9090 9090                  		dc.b $90, $90, $90, $90
000771FA                            
000771FA                            ; ===========================================================================
000771FA                            ; Subroutine to update music
000771FA                            ; ===========================================================================
000771FA                            
000771FA                            ;sub_71B4C;
000771FA                            UpdateMusic:				; XREF: VBlank; PalToCRAM
000771FA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00077202 4E71                       		nop	
00077204 4E71                       		nop	
00077206 4E71                       		nop	
00077208                            
00077208 0839 0000 00A1 1100        	@wait:  btst	#0,($A11100).l
00077210 66F6                       		bne.s	@wait
00077212                            
00077212 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007721A 6700                       		beq.s	loc_71B82
0007721C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00077224 4E71                       		nop	
00077226 4E71                       		nop	
00077228 4E71                       		nop	
0007722A 4E71                       		nop	
0007722C 4E71                       		nop	
0007722E 60CA                       		bra.s	UpdateMusic
00077230                            ; ===========================================================================
00077230                            
00077230                            loc_71B82:
00077230 4DF9 00FF F000             		lea	($FFF000).l,a6
00077236 422E 000E                  		clr.b	$E(a6)
0007723A 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007723E 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00077242 532E 0001                  		subq.b	#1,1(a6)
00077246 6600                       		bne.s	loc_71B9E
00077248 4EBA 0000                  		jsr	sub_7260C(pc)
0007724C                            
0007724C                            loc_71B9E:
0007724C 102E 0004                  		move.b	4(a6),d0
00077250 6700                       		beq.s	loc_71BA8
00077252 4EBA 0000                  		jsr	sub_72504(pc)
00077256                            
00077256                            loc_71BA8:
00077256 4A2E 0024                  		tst.b	$24(a6)
0007725A 6700                       		beq.s	loc_71BB2
0007725C 4EBA 0000                  		jsr	sub_7267C(pc)
00077260                            
00077260                            loc_71BB2:
00077260 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00077264 6700                       		beq.s	loc_71BBC	; if not, branch
00077266 4EBA 0000                  		jsr	Sound_Play(pc)
0007726A                            
0007726A                            loc_71BBC:
0007726A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00077270 6700                       		beq.s	loc_71BC8
00077272 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00077276                            
00077276                            loc_71BC8:
00077276 4BEE 0040                  		lea	$40(a6),a5
0007727A 4A15                       		tst.b	(a5)
0007727C 6A00                       		bpl.s	loc_71BD4
0007727E 4EBA 0000                  		jsr	sub_71C4E(pc)
00077282                            
00077282                            loc_71BD4:
00077282 422E 0008                  		clr.b	8(a6)
00077286 7E05                       		moveq	#5,d7
00077288                            
00077288                            loc_71BDA:
00077288 DAFC 0030                  		adda.w	#$30,a5
0007728C 4A15                       		tst.b	(a5)
0007728E 6A00                       		bpl.s	loc_71BE6
00077290 4EBA 0000                  		jsr	sub_71CCA(pc)
00077294                            
00077294                            loc_71BE6:
00077294 51CF FFF2                  		dbf	d7,loc_71BDA
00077298                            
00077298 7E02                       		moveq	#2,d7
0007729A                            
0007729A                            loc_71BEC:
0007729A DAFC 0030                  		adda.w	#$30,a5
0007729E 4A15                       		tst.b	(a5)
000772A0 6A00                       		bpl.s	loc_71BF8
000772A2 4EBA 0000                  		jsr	sub_72850(pc)
000772A6                            
000772A6                            loc_71BF8:
000772A6 51CF FFF2                  		dbf	d7,loc_71BEC
000772AA                            
000772AA 1D7C 0080 000E             		move.b	#$80,$E(a6)
000772B0 7E02                       		moveq	#2,d7
000772B2                            
000772B2                            loc_71C04:
000772B2 DAFC 0030                  		adda.w	#$30,a5
000772B6 4A15                       		tst.b	(a5)
000772B8 6A00                       		bpl.s	loc_71C10
000772BA 4EBA 0000                  		jsr	sub_71CCA(pc)
000772BE                            
000772BE                            loc_71C10:
000772BE 51CF FFF2                  		dbf	d7,loc_71C04
000772C2                            
000772C2 7E02                       		moveq	#2,d7
000772C4                            
000772C4                            loc_71C16:
000772C4 DAFC 0030                  		adda.w	#$30,a5
000772C8 4A15                       		tst.b	(a5)
000772CA 6A00                       		bpl.s	loc_71C22
000772CC 4EBA 0000                  		jsr	sub_72850(pc)
000772D0                            
000772D0                            loc_71C22:
000772D0 51CF FFF2                  		dbf	d7,loc_71C16
000772D4 1D7C 0040 000E             		move.b	#$40,$E(a6)
000772DA DAFC 0030                  		adda.w	#$30,a5
000772DE 4A15                       		tst.b	(a5)
000772E0 6A00                       		bpl.s	loc_71C38
000772E2 4EBA 0000                  		jsr	sub_71CCA(pc)
000772E6                            
000772E6                            loc_71C38:
000772E6 DAFC 0030                  		adda.w	#$30,a5
000772EA 4A15                       		tst.b	(a5)
000772EC 6A00                       		bpl.s	loc_71C44
000772EE 4EBA 0000                  		jsr	sub_72850(pc)
000772F2                            
000772F2                            loc_71C44:
000772F2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000772FA 4E75                       		rts	
000772FC                            ; End of function UpdateMusic
000772FC                            
000772FC                            
000772FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000772FC                            
000772FC                            
000772FC                            sub_71C4E:				; XREF: UpdateMusic
000772FC 532D 000E                  		subq.b	#1,$E(a5)
00077300 6600                       		bne.s	locret_71CAA
00077302 1D7C 0080 0008             		move.b	#$80,8(a6)
00077308 286D 0004                  		movea.l	4(a5),a4
0007730C                            
0007730C                            loc_71C5E:
0007730C 7A00                       		moveq	#0,d5
0007730E 1A1C                       		move.b	(a4)+,d5
00077310 0C05 00E0                  		cmpi.b	#-$20,d5
00077314 6500                       		bcs.s	loc_71C6E
00077316 4EBA 0000                  		jsr	sub_72A5A(pc)
0007731A 60F0                       		bra.s	loc_71C5E
0007731C                            ; ===========================================================================
0007731C                            
0007731C                            loc_71C6E:
0007731C 4A05                       		tst.b	d5
0007731E 6A00                       		bpl.s	loc_71C84
00077320 1B45 0010                  		move.b	d5,$10(a5)
00077324 1A1C                       		move.b	(a4)+,d5
00077326 6A00                       		bpl.s	loc_71C84
00077328 534C                       		subq.w	#1,a4
0007732A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00077330 6000                       		bra.s	loc_71C88
00077332                            ; ===========================================================================
00077332                            
00077332                            loc_71C84:
00077332 4EBA 0000                  		jsr	sub_71D40(pc)
00077336                            
00077336                            loc_71C88:
00077336 2B4C 0004                  		move.l	a4,4(a5)
0007733A 0815 0002                  		btst	#2,(a5)
0007733E 6600                       		bne.s	locret_71CAA
00077340 7000                       		moveq	#0,d0
00077342 102D 0010                  		move.b	$10(a5),d0
00077346 0C00 0080                  		cmpi.b	#$80,d0
0007734A 6700                       		beq.s	locret_71CAA
0007734C 0800 0003                  		btst	#3,d0
00077350 6600                       		bne.s	loc_71CAC
00077352 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00077358                            
00077358                            locret_71CAA:
00077358 4E75                       		rts	
0007735A                            ; ===========================================================================
0007735A                            
0007735A                            loc_71CAC:
0007735A 0400 0088                  		subi.b	#$88,d0
0007735E 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00077362 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00077368 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00077370 4E75                       		rts	
00077372                            ; End of function sub_71C4E
00077372                            
00077372                            ; ===========================================================================
00077372 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00077378                            
00077378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077378                            
00077378                            
00077378                            sub_71CCA:				; XREF: UpdateMusic
00077378 532D 000E                  		subq.b	#1,$E(a5)
0007737C 6600                       		bne.s	loc_71CE0
0007737E 0895 0004                  		bclr	#4,(a5)
00077382 4EBA 0000                  		jsr	sub_71CEC(pc)
00077386 4EBA 0000                  		jsr	sub_71E18(pc)
0007738A 6000 0000                  		bra.w	loc_726E2
0007738E                            ; ===========================================================================
0007738E                            
0007738E                            loc_71CE0:
0007738E 4EBA 0000                  		jsr	sub_71D9E(pc)
00077392 4EBA 0000                  		jsr	sub_71DC6(pc)
00077396 6000 0000                  		bra.w	loc_71E24
0007739A                            ; End of function sub_71CCA
0007739A                            
0007739A                            
0007739A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007739A                            
0007739A                            
0007739A                            sub_71CEC:				; XREF: sub_71CCA
0007739A 286D 0004                  		movea.l	4(a5),a4
0007739E 0895 0001                  		bclr	#1,(a5)
000773A2                            
000773A2                            loc_71CF4:
000773A2 7A00                       		moveq	#0,d5
000773A4 1A1C                       		move.b	(a4)+,d5
000773A6 0C05 00E0                  		cmpi.b	#-$20,d5
000773AA 6500                       		bcs.s	loc_71D04
000773AC 4EBA 0000                  		jsr	sub_72A5A(pc)
000773B0 60F0                       		bra.s	loc_71CF4
000773B2                            ; ===========================================================================
000773B2                            
000773B2                            loc_71D04:
000773B2 4EBA 0000                  		jsr	sub_726FE(pc)
000773B6 4A05                       		tst.b	d5
000773B8 6A00                       		bpl.s	loc_71D1A
000773BA 4EBA 0000                  		jsr	sub_71D22(pc)
000773BE 1A1C                       		move.b	(a4)+,d5
000773C0 6A00                       		bpl.s	loc_71D1A
000773C2 534C                       		subq.w	#1,a4
000773C4 6000 0000                  		bra.w	sub_71D60
000773C8                            ; ===========================================================================
000773C8                            
000773C8                            loc_71D1A:
000773C8 4EBA 0000                  		jsr	sub_71D40(pc)
000773CC 6000 0000                  		bra.w	sub_71D60
000773D0                            ; End of function sub_71CEC
000773D0                            
000773D0                            
000773D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000773D0                            
000773D0                            
000773D0                            sub_71D22:				; XREF: sub_71CEC
000773D0 0405 0080                  		subi.b	#$80,d5
000773D4 6700                       		beq.s	loc_71D58
000773D6 DA2D 0008                  		add.b	8(a5),d5
000773DA 0245 007F                  		andi.w	#$7F,d5
000773DE E34D                       		lsl.w	#1,d5
000773E0 41FA 0000                  		lea	word_72790(pc),a0
000773E4 3C30 5000                  		move.w	(a0,d5.w),d6
000773E8 3B46 0010                  		move.w	d6,$10(a5)
000773EC 4E75                       		rts	
000773EE                            ; End of function sub_71D22
000773EE                            
000773EE                            
000773EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000773EE                            
000773EE                            
000773EE                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000773EE 1005                       		move.b	d5,d0
000773F0 122D 0002                  		move.b	2(a5),d1
000773F4                            
000773F4                            loc_71D46:
000773F4 5301                       		subq.b	#1,d1
000773F6 6700                       		beq.s	loc_71D4E
000773F8 D005                       		add.b	d5,d0
000773FA 60F8                       		bra.s	loc_71D46
000773FC                            ; ===========================================================================
000773FC                            
000773FC                            loc_71D4E:
000773FC 1B40 000F                  		move.b	d0,$F(a5)
00077400 1B40 000E                  		move.b	d0,$E(a5)
00077404 4E75                       		rts	
00077406                            ; End of function sub_71D40
00077406                            
00077406                            ; ===========================================================================
00077406                            
00077406                            loc_71D58:				; XREF: sub_71D22
00077406 08D5 0001                  		bset	#1,(a5)
0007740A 426D 0010                  		clr.w	$10(a5)
0007740E                            
0007740E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007740E                            
0007740E                            
0007740E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007740E 2B4C 0004                  		move.l	a4,4(a5)
00077412 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00077418 0815 0004                  		btst	#4,(a5)
0007741C 6600                       		bne.s	locret_71D9C
0007741E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00077424 422D 000C                  		clr.b	$C(a5)
00077428 0815 0003                  		btst	#3,(a5)
0007742C 6700                       		beq.s	locret_71D9C
0007742E 206D 0014                  		movea.l	$14(a5),a0
00077432 1B58 0018                  		move.b	(a0)+,$18(a5)
00077436 1B58 0019                  		move.b	(a0)+,$19(a5)
0007743A 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007743E 1018                       		move.b	(a0)+,d0
00077440 E208                       		lsr.b	#1,d0
00077442 1B40 001B                  		move.b	d0,$1B(a5)
00077446 426D 001C                  		clr.w	$1C(a5)
0007744A                            
0007744A                            locret_71D9C:
0007744A 4E75                       		rts	
0007744C                            ; End of function sub_71D60
0007744C                            
0007744C                            
0007744C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007744C                            
0007744C                            
0007744C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007744C 4A2D 0012                  		tst.b	$12(a5)
00077450 6700                       		beq.s	locret_71DC4
00077452 532D 0012                  		subq.b	#1,$12(a5)
00077456 6600                       		bne.s	locret_71DC4
00077458 08D5 0001                  		bset	#1,(a5)
0007745C 4A2D 0001                  		tst.b	1(a5)
00077460 6B00 0000                  		bmi.w	loc_71DBE
00077464 4EBA 0000                  		jsr	sub_726FE(pc)
00077468 584F                       		addq.w	#4,sp
0007746A 4E75                       		rts	
0007746C                            ; ===========================================================================
0007746C                            
0007746C                            loc_71DBE:
0007746C 4EBA 0000                  		jsr	sub_729A0(pc)
00077470 584F                       		addq.w	#4,sp
00077472                            
00077472                            locret_71DC4:
00077472 4E75                       		rts	
00077474                            ; End of function sub_71D9E
00077474                            
00077474                            
00077474                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077474                            
00077474                            
00077474                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00077474 584F                       		addq.w	#4,sp
00077476 0815 0003                  		btst	#3,(a5)
0007747A 6700                       		beq.s	locret_71E16
0007747C 4A2D 0018                  		tst.b	$18(a5)
00077480 6700                       		beq.s	loc_71DDA
00077482 532D 0018                  		subq.b	#1,$18(a5)
00077486 4E75                       		rts	
00077488                            ; ===========================================================================
00077488                            
00077488                            loc_71DDA:
00077488 532D 0019                  		subq.b	#1,$19(a5)
0007748C 6700                       		beq.s	loc_71DE2
0007748E 4E75                       		rts	
00077490                            ; ===========================================================================
00077490                            
00077490                            loc_71DE2:
00077490 206D 0014                  		movea.l	$14(a5),a0
00077494 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007749A 4A2D 001B                  		tst.b	$1B(a5)
0007749E 6600                       		bne.s	loc_71DFE
000774A0 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000774A6 442D 001A                  		neg.b	$1A(a5)
000774AA 4E75                       		rts	
000774AC                            ; ===========================================================================
000774AC                            
000774AC                            loc_71DFE:
000774AC 532D 001B                  		subq.b	#1,$1B(a5)
000774B0 1C2D 001A                  		move.b	$1A(a5),d6
000774B4 4886                       		ext.w	d6
000774B6 DC6D 001C                  		add.w	$1C(a5),d6
000774BA 3B46 001C                  		move.w	d6,$1C(a5)
000774BE DC6D 0010                  		add.w	$10(a5),d6
000774C2 594F                       		subq.w	#4,sp
000774C4                            
000774C4                            locret_71E16:
000774C4 4E75                       		rts	
000774C6                            ; End of function sub_71DC6
000774C6                            
000774C6                            
000774C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000774C6                            
000774C6                            
000774C6                            sub_71E18:				; XREF: sub_71CCA
000774C6 0815 0001                  		btst	#1,(a5)
000774CA 6600                       		bne.s	locret_71E48
000774CC 3C2D 0010                  		move.w	$10(a5),d6
000774D0 6700                       		beq.s	loc_71E4A
000774D2                            
000774D2                            loc_71E24:				; XREF: sub_71CCA
000774D2 102D 001E                  		move.b	$1E(a5),d0
000774D6 4880                       		ext.w	d0
000774D8 DC40                       		add.w	d0,d6
000774DA 0815 0002                  		btst	#2,(a5)
000774DE 6600                       		bne.s	locret_71E48
000774E0 3206                       		move.w	d6,d1
000774E2 E049                       		lsr.w	#8,d1
000774E4 103C 00A4                  		move.b	#-$5C,d0
000774E8 4EBA 0000                  		jsr	sub_72722(pc)
000774EC 1206                       		move.b	d6,d1
000774EE 103C 00A0                  		move.b	#-$60,d0
000774F2 4EBA 0000                  		jsr	sub_72722(pc)
000774F6                            
000774F6                            locret_71E48:
000774F6 4E75                       		rts	
000774F8                            ; ===========================================================================
000774F8                            
000774F8                            loc_71E4A:
000774F8 08D5 0001                  		bset	#1,(a5)
000774FC 4E75                       		rts	
000774FE                            ; End of function sub_71E18
000774FE                            
000774FE                            ; ===========================================================================
000774FE                            
000774FE                            loc_71E50:				; XREF: UpdateMusic
000774FE 6B00                       		bmi.s	loc_71E94
00077500 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00077506 6700 0000                  		beq.w	loc_71EFE
0007750A 1D7C 0002 0003             		move.b	#2,3(a6)
00077510 7602                       		moveq	#2,d3
00077512 103C 00B4                  		move.b	#-$4C,d0
00077516 7200                       		moveq	#0,d1
00077518                            
00077518                            loc_71E6A:
00077518 4EBA 0000                  		jsr	sub_7272E(pc)
0007751C 4EBA 0000                  		jsr	sub_72764(pc)
00077520 5200                       		addq.b	#1,d0
00077522 51CB FFF4                  		dbf	d3,loc_71E6A
00077526                            
00077526 7602                       		moveq	#2,d3
00077528 7028                       		moveq	#$28,d0
0007752A                            
0007752A                            loc_71E7C:
0007752A 1203                       		move.b	d3,d1
0007752C 4EBA 0000                  		jsr	sub_7272E(pc)
00077530 5801                       		addq.b	#4,d1
00077532 4EBA 0000                  		jsr	sub_7272E(pc)
00077536 51CB FFF2                  		dbf	d3,loc_71E7C
0007753A                            
0007753A 4EBA 0000                  		jsr	sub_729B6(pc)
0007753E 6000 FDB2                  		bra.w	loc_71C44
00077542                            ; ===========================================================================
00077542                            
00077542                            loc_71E94:				; XREF: loc_71E50
00077542 422E 0003                  		clr.b	3(a6)
00077546 7630                       		moveq	#$30,d3
00077548 4BEE 0040                  		lea	$40(a6),a5
0007754C 7806                       		moveq	#6,d4
0007754E                            
0007754E                            loc_71EA0:
0007754E 0815 0007                  		btst	#7,(a5)
00077552 6700                       		beq.s	loc_71EB8
00077554 0815 0002                  		btst	#2,(a5)
00077558 6600                       		bne.s	loc_71EB8
0007755A 103C 00B4                  		move.b	#-$4C,d0
0007755E 122D 000A                  		move.b	$A(a5),d1
00077562 4EBA 0000                  		jsr	sub_72722(pc)
00077566                            
00077566                            loc_71EB8:
00077566 DAC3                       		adda.w	d3,a5
00077568 51CC FFE4                  		dbf	d4,loc_71EA0
0007756C                            
0007756C 4BEE 0220                  		lea	$220(a6),a5
00077570 7802                       		moveq	#2,d4
00077572                            
00077572                            loc_71EC4:
00077572 0815 0007                  		btst	#7,(a5)
00077576 6700                       		beq.s	loc_71EDC
00077578 0815 0002                  		btst	#2,(a5)
0007757C 6600                       		bne.s	loc_71EDC
0007757E 103C 00B4                  		move.b	#-$4C,d0
00077582 122D 000A                  		move.b	$A(a5),d1
00077586 4EBA 0000                  		jsr	sub_72722(pc)
0007758A                            
0007758A                            loc_71EDC:
0007758A DAC3                       		adda.w	d3,a5
0007758C 51CC FFE4                  		dbf	d4,loc_71EC4
00077590                            
00077590 4BEE 0340                  		lea	$340(a6),a5
00077594 0815 0007                  		btst	#7,(a5)
00077598 6700                       		beq.s	loc_71EFE
0007759A 0815 0002                  		btst	#2,(a5)
0007759E 6600                       		bne.s	loc_71EFE
000775A0 103C 00B4                  		move.b	#-$4C,d0
000775A4 122D 000A                  		move.b	$A(a5),d1
000775A8 4EBA 0000                  		jsr	sub_72722(pc)
000775AC                            
000775AC                            loc_71EFE:
000775AC 6000 FD44                  		bra.w	loc_71C44
000775B0                            
000775B0                            ; ---------------------------------------------------------------------------
000775B0                            ; Subroutine to	play a sound or	music track
000775B0                            ; ---------------------------------------------------------------------------
000775B0                            
000775B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000775B0                            
000775B0                            
000775B0                            Sound_Play:				; XREF: UpdateMusic
000775B0 2079 0007 700E             		movea.l	(Go_SoundTypes).l,a0
000775B6 43EE 000A                  		lea	$A(a6),a1	; load music track number
000775BA 1616                       		move.b	0(a6),d3
000775BC 7802                       		moveq	#2,d4
000775BE                            
000775BE                            loc_71F12:
000775BE 1011                       		move.b	(a1),d0		; move track number to d0
000775C0 1200                       		move.b	d0,d1
000775C2 4219                       		clr.b	(a1)+
000775C4 0400 0081                  		subi.b	#$81,d0
000775C8 6500                       		bcs.s	loc_71F3E
000775CA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000775D0 6700                       		beq.s	loc_71F2C
000775D2 1D41 000A                  		move.b	d1,$A(a6)
000775D6 6000                       		bra.s	loc_71F3E
000775D8                            ; ===========================================================================
000775D8                            
000775D8                            loc_71F2C:
000775D8 0240 007F                  		andi.w	#$7F,d0
000775DC 1430 0000                  		move.b	(a0,d0.w),d2
000775E0 B403                       		cmp.b	d3,d2
000775E2 6500                       		bcs.s	loc_71F3E
000775E4 1602                       		move.b	d2,d3
000775E6 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000775EA                            
000775EA                            loc_71F3E:
000775EA 51CC FFD2                  		dbf	d4,loc_71F12
000775EE                            
000775EE 4A03                       		tst.b	d3
000775F0 6B00                       		bmi.s	locret_71F4A
000775F2 1C83                       		move.b	d3,0(a6)
000775F4                            
000775F4                            locret_71F4A:
000775F4 4E75                       		rts	
000775F6                            ; End of function Sound_Play
000775F6                            
000775F6                            
000775F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000775F6                            
000775F6                            
000775F6                            Sound_ChkValue:				; XREF: UpdateMusic
000775F6 7E00                       		moveq	#0,d7
000775F8 1E2E 0009                  		move.b	9(a6),d7
000775FC 6700 0000                  		beq.w	Sound_E4
00077600 6A00                       		bpl.s	locret_71F8C
00077602 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00077608 0C07 009F                  		cmpi.b	#$9F,d7
0007760C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00077610 0C07 00A0                  		cmpi.b	#$A0,d7
00077614 6500 0000                  		bcs.w	locret_71F8C
00077618 0C07 00CF                  		cmpi.b	#$CF,d7
0007761C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00077620 0C07 00D0                  		cmpi.b	#$D0,d7
00077624 6500 0000                  		bcs.w	locret_71F8C
00077628 0C07 00D1                  		cmpi.b	#$D1,d7         ; changed from #$E0
0007762C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
00077630 0C07 00DF                  		cmp.b	#$DF,d7             ; own cmp
00077634 6F00 0000                  		ble	Sound_D1toDF        ; own
00077638 0C07 00E4                  		cmpi.b	#$E4,d7
0007763C 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0007763E                            
0007763E                            locret_71F8C:
0007763E 4E75                       		rts	
00077640                            ; ===========================================================================
00077640                            
00077640                            Sound_E0toE4:				; XREF: Sound_ChkValue
00077640 0407 00E0                  		subi.b	#$E0,d7
00077644 E54F                       		lsl.w	#2,d7
00077646 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007764A                            ; ===========================================================================
0007764A                            
0007764A                            Sound_ExIndex:
0007764A 6000 0000                  		bra.w	Sound_E0
0007764E                            ; ===========================================================================
0007764E 6000 0000                  		bra.w	Sound_E1
00077652                            ; ===========================================================================
00077652 6000 0000                  		bra.w	Sound_E2
00077656                            ; ===========================================================================
00077656 6000 0000                  		bra.w	Sound_E3
0007765A                            ; ===========================================================================
0007765A 6000 0000                  		bra.w	Sound_E4
0007765E                            ; ===========================================================================
0007765E                            ; ---------------------------------------------------------------------------
0007765E                            ; Play "Say-gaa" PCM sound
0007765E                            ; ---------------------------------------------------------------------------
0007765E                            
0007765E                            Sound_E1:				  
0007765E 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00077664 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007766A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00077672                            PlayPCM_Loop:	  
00077672 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00077678 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007767C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00077680 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00077682 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00077684 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00077688 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007768E 4EB8 1120                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00077692 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00077698 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007769A 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007769C                            return_PlayPCM: 
0007769C 584F                       		addq.w	#4,sp 
0007769E 4E75                       		rts
000776A0                            ; ===========================================================================
000776A0                            ; ---------------------------------------------------------------------------
000776A0                            ; Play music track $81-$9F
000776A0                            ; ---------------------------------------------------------------------------
000776A0                            
000776A0                            Sound_81to9F:				; XREF: Sound_ChkValue
000776A0 0C07 009F                  		cmpi.b	#$9F,d7		; is "extra life" music	played?
000776A4 6600                       		bne.s	loc_72024	; if not, branch
000776A6 4A2E 0027                  		tst.b	$27(a6)
000776AA 6600 0000                  		bne.w	loc_721B6
000776AE 4BEE 0040                  		lea	$40(a6),a5
000776B2 7009                       		moveq	#9,d0
000776B4                            
000776B4                            loc_71FE6:
000776B4 0895 0002                  		bclr	#2,(a5)
000776B8 DAFC 0030                  		adda.w	#$30,a5
000776BC 51C8 FFF6                  		dbf	d0,loc_71FE6
000776C0                            
000776C0 4BEE 0220                  		lea	$220(a6),a5
000776C4 7005                       		moveq	#5,d0
000776C6                            
000776C6                            loc_71FF8:
000776C6 0895 0007                  		bclr	#7,(a5)
000776CA DAFC 0030                  		adda.w	#$30,a5
000776CE 51C8 FFF6                  		dbf	d0,loc_71FF8
000776D2 4216                       		clr.b	0(a6)
000776D4 204E                       		movea.l	a6,a0
000776D6 43EE 03A0                  		lea	$3A0(a6),a1
000776DA 303C 0087                  		move.w	#$87,d0
000776DE                            
000776DE                            loc_72012:
000776DE 22D8                       		move.l	(a0)+,(a1)+
000776E0 51C8 FFFC                  		dbf	d0,loc_72012
000776E4                            
000776E4 1D7C 0080 0027             		move.b	#$80,$27(a6)
000776EA 4216                       		clr.b	0(a6)
000776EC 6000                       		bra.s	loc_7202C
000776EE                            ; ===========================================================================
000776EE                            
000776EE                            loc_72024:
000776EE 422E 0027                  		clr.b	$27(a6)
000776F2 422E 0026                  		clr.b	$26(a6)
000776F6                            
000776F6                            loc_7202C:
000776F6 4EBA 0000                  		jsr	sub_725CA(pc)
000776FA 2879 0007 701E             		movea.l	(off_719A0).l,a4
00077700 0407 0081                  		subi.b	#$81,d7
00077704 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007770A 2879 0007 7016             		movea.l	(Go_MusicIndex).l,a4
00077710 E54F                       		lsl.w	#2,d7
00077712 2874 7000                  		movea.l	(a4,d7.w),a4
00077716 7000                       		moveq	#0,d0
00077718 3014                       		move.w	(a4),d0
0007771A D08C                       		add.l	a4,d0
0007771C 2D40 0018                  		move.l	d0,$18(a6)
00077720 102C 0005                  		move.b	5(a4),d0
00077724 1D40 0028                  		move.b	d0,$28(a6)
00077728 4A2E 002A                  		tst.b	$2A(a6)
0007772C 6700                       		beq.s	loc_72068
0007772E 102E 0029                  		move.b	$29(a6),d0
00077732                            
00077732                            loc_72068:
00077732 1D40 0002                  		move.b	d0,2(a6)
00077736 1D40 0001                  		move.b	d0,1(a6)
0007773A 7200                       		moveq	#0,d1
0007773C 264C                       		movea.l	a4,a3
0007773E 5C4C                       		addq.w	#6,a4
00077740 7E00                       		moveq	#0,d7
00077742 1E2B 0002                  		move.b	2(a3),d7
00077746 6700 0000                  		beq.w	loc_72114
0007774A 5307                       		subq.b	#1,d7
0007774C 123C 00C0                  		move.b	#-$40,d1
00077750 182B 0004                  		move.b	4(a3),d4
00077754 7C30                       		moveq	#$30,d6
00077756 1A3C 0001                  		move.b	#1,d5
0007775A 43EE 0040                  		lea	$40(a6),a1
0007775E 45FA 0000                  		lea	byte_721BA(pc),a2
00077762                            
00077762                            loc_72098:
00077762 08D1 0007                  		bset	#7,(a1)
00077766 135A 0001                  		move.b	(a2)+,1(a1)
0007776A 1344 0002                  		move.b	d4,2(a1)
0007776E 1346 000D                  		move.b	d6,$D(a1)
00077772 1341 000A                  		move.b	d1,$A(a1)
00077776 1345 000E                  		move.b	d5,$E(a1)
0007777A 7000                       		moveq	#0,d0
0007777C 301C                       		move.w	(a4)+,d0
0007777E D08B                       		add.l	a3,d0
00077780 2340 0004                  		move.l	d0,4(a1)
00077784 335C 0008                  		move.w	(a4)+,8(a1)
00077788 D2C6                       		adda.w	d6,a1
0007778A 51CF FFD6                  		dbf	d7,loc_72098
0007778E 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00077794 6600                       		bne.s	loc_720D8
00077796 702B                       		moveq	#$2B,d0
00077798 7200                       		moveq	#0,d1
0007779A 4EBA 0000                  		jsr	sub_7272E(pc)
0007779E 6000 0000                  		bra.w	loc_72114
000777A2                            ; ===========================================================================
000777A2                            
000777A2                            loc_720D8:
000777A2 7028                       		moveq	#$28,d0
000777A4 7206                       		moveq	#6,d1
000777A6 4EBA 0000                  		jsr	sub_7272E(pc)
000777AA 103C 0042                  		move.b	#$42,d0
000777AE 727F                       		moveq	#$7F,d1
000777B0 4EBA 0000                  		jsr	sub_72764(pc)
000777B4 103C 004A                  		move.b	#$4A,d0
000777B8 727F                       		moveq	#$7F,d1
000777BA 4EBA 0000                  		jsr	sub_72764(pc)
000777BE 103C 0046                  		move.b	#$46,d0
000777C2 727F                       		moveq	#$7F,d1
000777C4 4EBA 0000                  		jsr	sub_72764(pc)
000777C8 103C 004E                  		move.b	#$4E,d0
000777CC 727F                       		moveq	#$7F,d1
000777CE 4EBA 0000                  		jsr	sub_72764(pc)
000777D2 103C 00B6                  		move.b	#-$4A,d0
000777D6 123C 00C0                  		move.b	#-$40,d1
000777DA 4EBA 0000                  		jsr	sub_72764(pc)
000777DE                            
000777DE                            loc_72114:
000777DE 7E00                       		moveq	#0,d7
000777E0 1E2B 0003                  		move.b	3(a3),d7
000777E4 6700                       		beq.s	loc_72154
000777E6 5307                       		subq.b	#1,d7
000777E8 43EE 0190                  		lea	$190(a6),a1
000777EC 45FA 0000                  		lea	byte_721C2(pc),a2
000777F0                            
000777F0                            loc_72126:
000777F0 08D1 0007                  		bset	#7,(a1)
000777F4 135A 0001                  		move.b	(a2)+,1(a1)
000777F8 1344 0002                  		move.b	d4,2(a1)
000777FC 1346 000D                  		move.b	d6,$D(a1)
00077800 1345 000E                  		move.b	d5,$E(a1)
00077804 7000                       		moveq	#0,d0
00077806 301C                       		move.w	(a4)+,d0
00077808 D08B                       		add.l	a3,d0
0007780A 2340 0004                  		move.l	d0,4(a1)
0007780E 335C 0008                  		move.w	(a4)+,8(a1)
00077812 101C                       		move.b	(a4)+,d0
00077814 135C 000B                  		move.b	(a4)+,$B(a1)
00077818 D2C6                       		adda.w	d6,a1
0007781A 51CF FFD4                  		dbf	d7,loc_72126
0007781E                            
0007781E                            loc_72154:
0007781E 43EE 0220                  		lea	$220(a6),a1
00077822 7E05                       		moveq	#5,d7
00077824                            
00077824                            loc_7215A:
00077824 4A11                       		tst.b	(a1)
00077826 6A00 0000                  		bpl.w	loc_7217C
0007782A 7000                       		moveq	#0,d0
0007782C 1029 0001                  		move.b	1(a1),d0
00077830 6B00                       		bmi.s	loc_7216E
00077832 5500                       		subq.b	#2,d0
00077834 E508                       		lsl.b	#2,d0
00077836 6000                       		bra.s	loc_72170
00077838                            ; ===========================================================================
00077838                            
00077838                            loc_7216E:
00077838 E608                       		lsr.b	#3,d0
0007783A                            
0007783A                            loc_72170:
0007783A 41FA 0000                  		lea	dword_722CC(pc),a0
0007783E 2070 0000                  		movea.l	(a0,d0.w),a0
00077842 08D0 0002                  		bset	#2,(a0)
00077846                            
00077846                            loc_7217C:
00077846 D2C6                       		adda.w	d6,a1
00077848 51CF FFDA                  		dbf	d7,loc_7215A
0007784C                            
0007784C 4A6E 0340                  		tst.w	$340(a6)
00077850 6A00                       		bpl.s	loc_7218E
00077852 08EE 0002 0100             		bset	#2,$100(a6)
00077858                            
00077858                            loc_7218E:
00077858 4A6E 0370                  		tst.w	$370(a6)
0007785C 6A00                       		bpl.s	loc_7219A
0007785E 08EE 0002 01F0             		bset	#2,$1F0(a6)
00077864                            
00077864                            loc_7219A:
00077864 4BEE 0070                  		lea	$70(a6),a5
00077868 7805                       		moveq	#5,d4
0007786A                            
0007786A                            loc_721A0:
0007786A 4EBA 0000                  		jsr	sub_726FE(pc)
0007786E DAC6                       		adda.w	d6,a5
00077870 51CC FFF8                  		dbf	d4,loc_721A0
00077874 7802                       		moveq	#2,d4
00077876                            
00077876                            loc_721AC:
00077876 4EBA 0000                  		jsr	sub_729A0(pc)
0007787A DAC6                       		adda.w	d6,a5
0007787C 51CC FFF8                  		dbf	d4,loc_721AC
00077880                            
00077880                            loc_721B6:
00077880 584F                       		addq.w	#4,sp
00077882 4E75                       		rts	
00077884                            ; ===========================================================================
00077884 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007788C                            		even
0007788C 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00077890                            		even
00077890                            ; ===========================================================================
00077890                            ; ---------------------------------------------------------------------------
00077890                            ; Play normal sound effect
00077890                            ; ---------------------------------------------------------------------------
00077890                            
00077890                            		
00077890                            Sound_D1toDF:                               ; own routine
00077890 4A2E 0027                  		tst.b	$27(a6)
00077894 6600 0000                  		bne.w	loc_722C6
00077898 4A2E 0004                  		tst.b	4(a6)
0007789C 6600 0000                  		bne.w	loc_722C6
000778A0 4A2E 0024                  		tst.b	$24(a6)
000778A4 6600 0000                  		bne.w	loc_722C6
000778A8 2079 0007 701A             		movea.l	(Go_SoundIndex).l,a0
000778AE 0407 00A1                  		subi.b	#$A1,d7
000778B2 6000 0000                  		bra	SoundEffects_Common
000778B6                            
000778B6                            Sound_A0toCF:				; XREF: Sound_ChkValue
000778B6 4A2E 0027                  		tst.b	$27(a6)
000778BA 6600 0000                  		bne.w	loc_722C6
000778BE 4A2E 0004                  		tst.b	4(a6)
000778C2 6600 0000                  		bne.w	loc_722C6
000778C6 4A2E 0024                  		tst.b	$24(a6)
000778CA 6600 0000                  		bne.w	loc_722C6
000778CE 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000778D2 6600                       		bne.s	Sound_notB5	; if not, branch
000778D4 4A2E 002B                  		tst.b	$2B(a6)
000778D8 6600                       		bne.s	loc_721EE
000778DA 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000778DE                            		
000778DE                            loc_721EE:
000778DE 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000778E4                            
000778E4                            Sound_notB5:
000778E4 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000778E8 6600                       		bne.s	Sound_notA7	; if not, branch
000778EA 4A2E 002C                  		tst.b	$2C(a6)
000778EE 6600 0000                  		bne.w	locret_722C4
000778F2 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000778F8                            
000778F8                            Sound_notA7:
000778F8 2079 0007 701A             		movea.l	(Go_SoundIndex).l,a0
000778FE 0407 00A0                  		subi.b	#$A0,d7
00077902                            		
00077902                            SoundEffects_Common:                     ; own label
00077902 E54F                       		lsl.w	#2,d7
00077904 2670 7000                  		movea.l	(a0,d7.w),a3
00077908 224B                       		movea.l	a3,a1
0007790A 7200                       		moveq	#0,d1
0007790C 3219                       		move.w	(a1)+,d1
0007790E D28B                       		add.l	a3,d1
00077910 1A19                       		move.b	(a1)+,d5
00077912 1E19                       		move.b	(a1)+,d7
00077914 5307                       		subq.b	#1,d7
00077916 7C30                       		moveq	#$30,d6
00077918                            
00077918                            loc_72228:
00077918 7600                       		moveq	#0,d3
0007791A 1629 0001                  		move.b	1(a1),d3
0007791E 1803                       		move.b	d3,d4
00077920 6B00                       		bmi.s	loc_72244
00077922 5543                       		subq.w	#2,d3
00077924 E54B                       		lsl.w	#2,d3
00077926 4BFA 0000                  		lea	dword_722CC(pc),a5
0007792A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007792E 08D5 0002                  		bset	#2,(a5)
00077932 6000                       		bra.s	loc_7226E
00077934                            ; ===========================================================================
00077934                            
00077934                            
00077934                            loc_72244:
00077934 E64B                       		lsr.w	#3,d3
00077936 4BFA 0000                  		lea	dword_722CC(pc),a5
0007793A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007793E 08D5 0002                  		bset	#2,(a5)
00077942 0C04 00C0                  		cmpi.b	#$C0,d4
00077946 6600                       		bne.s	loc_7226E
00077948 1004                       		move.b	d4,d0
0007794A 0000 001F                  		ori.b	#$1F,d0
0007794E 13C0 00C0 0011             		move.b	d0,($C00011).l
00077954 0840 0005                  		bchg	#5,d0
00077958 13C0 00C0 0011             		move.b	d0,($C00011).l
0007795E                            
0007795E                            loc_7226E:
0007795E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00077962 244D                       		movea.l	a5,a2
00077964 700B                       		moveq	#$B,d0
00077966                            
00077966                            loc_72276:
00077966 429A                       		clr.l	(a2)+
00077968 51C8 FFFC                  		dbf	d0,loc_72276
0007796C                            
0007796C 3A99                       		move.w	(a1)+,(a5)
0007796E 1B45 0002                  		move.b	d5,2(a5)
00077972 7000                       		moveq	#0,d0
00077974 3019                       		move.w	(a1)+,d0
00077976 D08B                       		add.l	a3,d0
00077978 2B40 0004                  		move.l	d0,4(a5)
0007797C 3B59 0008                  		move.w	(a1)+,8(a5)
00077980 1B7C 0001 000E             		move.b	#1,$E(a5)
00077986 1B46 000D                  		move.b	d6,$D(a5)
0007798A 4A04                       		tst.b	d4
0007798C 6B00                       		bmi.s	loc_722A8
0007798E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00077994 2B41 0020                  		move.l	d1,$20(a5)
00077998                            
00077998                            loc_722A8:
00077998 51CF FF7E                  		dbf	d7,loc_72228
0007799C                            
0007799C 4A2E 0250                  		tst.b	$250(a6)
000779A0 6A00                       		bpl.s	loc_722B8
000779A2 08EE 0002 0340             		bset	#2,$340(a6)
000779A8                            
000779A8                            loc_722B8:
000779A8 4A2E 0310                  		tst.b	$310(a6)
000779AC 6A00                       		bpl.s	locret_722C4
000779AE 08EE 0002 0370             		bset	#2,$370(a6)
000779B4                            
000779B4                            locret_722C4:
000779B4 4E75                       		rts	
000779B6                            ; ===========================================================================
000779B6                            
000779B6                            loc_722C6:
000779B6 4216                       		clr.b	0(a6)
000779B8 4E75                       		rts	
000779BA                            ; ===========================================================================
000779BA 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000779BE 0000 0000                  		dc.l 0
000779C2 00FF F100                  		dc.l $FFF100
000779C6 00FF F130                  		dc.l $FFF130
000779CA 00FF F190                  		dc.l $FFF190
000779CE 00FF F1C0                  		dc.l $FFF1C0
000779D2 00FF F1F0                  		dc.l $FFF1F0
000779D6 00FF F1F0                  		dc.l $FFF1F0
000779DA 00FF F220                  dword_722EC:	dc.l $FFF220
000779DE 0000 0000                  		dc.l 0
000779E2 00FF F250                  		dc.l $FFF250
000779E6 00FF F280                  		dc.l $FFF280
000779EA 00FF F2B0                  		dc.l $FFF2B0
000779EE 00FF F2E0                  		dc.l $FFF2E0
000779F2 00FF F310                  		dc.l $FFF310
000779F6 00FF F310                  		dc.l $FFF310
000779FA                            ; ===========================================================================
000779FA                            ; ---------------------------------------------------------------------------
000779FA                            ; Play GHZ waterfall sound
000779FA                            ; ---------------------------------------------------------------------------
000779FA                            
000779FA                            Sound_D0toDF:				; XREF: Sound_ChkValue
000779FA 4A2E 0027                  		tst.b	$27(a6)
000779FE 6600 0000                  		bne.w	locret_723C6
00077A02 4A2E 0004                  		tst.b	4(a6)
00077A06 6600 0000                  		bne.w	locret_723C6
00077A0A 4A2E 0024                  		tst.b	$24(a6)
00077A0E 6600 0000                  		bne.w	locret_723C6
00077A12 2079 0007 7012             		movea.l	(Go_SoundD0).l,a0
00077A18 0407 00D0                  		subi.b	#$D0,d7
00077A1C E54F                       		lsl.w	#2,d7
00077A1E 2670 7000                  		movea.l	(a0,d7.w),a3
00077A22 224B                       		movea.l	a3,a1
00077A24 7000                       		moveq	#0,d0
00077A26 3019                       		move.w	(a1)+,d0
00077A28 D08B                       		add.l	a3,d0
00077A2A 2D40 0020                  		move.l	d0,$20(a6)
00077A2E 1A19                       		move.b	(a1)+,d5
00077A30 1E19                       		move.b	(a1)+,d7
00077A32 5307                       		subq.b	#1,d7
00077A34 7C30                       		moveq	#$30,d6
00077A36                            
00077A36                            loc_72348:
00077A36 1829 0001                  		move.b	1(a1),d4
00077A3A 6B00                       		bmi.s	loc_7235A
00077A3C 08EE 0002 0100             		bset	#2,$100(a6)
00077A42 4BEE 0340                  		lea	$340(a6),a5
00077A46 6000                       		bra.s	loc_72364
00077A48                            ; ===========================================================================
00077A48                            
00077A48                            loc_7235A:
00077A48 08EE 0002 01F0             		bset	#2,$1F0(a6)
00077A4E 4BEE 0370                  		lea	$370(a6),a5
00077A52                            
00077A52                            loc_72364:
00077A52 244D                       		movea.l	a5,a2
00077A54 700B                       		moveq	#$B,d0
00077A56                            
00077A56                            loc_72368:
00077A56 429A                       		clr.l	(a2)+
00077A58 51C8 FFFC                  		dbf	d0,loc_72368
00077A5C                            
00077A5C 3A99                       		move.w	(a1)+,(a5)
00077A5E 1B45 0002                  		move.b	d5,2(a5)
00077A62 7000                       		moveq	#0,d0
00077A64 3019                       		move.w	(a1)+,d0
00077A66 D08B                       		add.l	a3,d0
00077A68 2B40 0004                  		move.l	d0,4(a5)
00077A6C 3B59 0008                  		move.w	(a1)+,8(a5)
00077A70 1B7C 0001 000E             		move.b	#1,$E(a5)
00077A76 1B46 000D                  		move.b	d6,$D(a5)
00077A7A 4A04                       		tst.b	d4
00077A7C 6B00                       		bmi.s	loc_72396
00077A7E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00077A84                            
00077A84                            loc_72396:
00077A84 51CF FFB0                  		dbf	d7,loc_72348
00077A88                            
00077A88 4A2E 0250                  		tst.b	$250(a6)
00077A8C 6A00                       		bpl.s	loc_723A6
00077A8E 08EE 0002 0340             		bset	#2,$340(a6)
00077A94                            
00077A94                            loc_723A6:
00077A94 4A2E 0310                  		tst.b	$310(a6)
00077A98 6A00                       		bpl.s	locret_723C6
00077A9A 08EE 0002 0370             		bset	#2,$370(a6)
00077AA0 0004 001F                  		ori.b	#$1F,d4
00077AA4 13C4 00C0 0011             		move.b	d4,($C00011).l
00077AAA 0844 0005                  		bchg	#5,d4
00077AAE 13C4 00C0 0011             		move.b	d4,($C00011).l
00077AB4                            
00077AB4                            locret_723C6:
00077AB4 4E75                       		rts
00077AB6                            		              
00077AB6                            	
00077AB6                            ; End of function Sound_ChkValue
00077AB6                            
00077AB6                            ; ===========================================================================
00077AB6 00FF F100                  		dc.l $FFF100
00077ABA 00FF F1F0                  		dc.l $FFF1F0
00077ABE 00FF F250                  		dc.l $FFF250
00077AC2 00FF F310                  		dc.l $FFF310
00077AC6 00FF F340                  		dc.l $FFF340
00077ACA 00FF F370                  		dc.l $FFF370
00077ACE                            
00077ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077ACE                            
00077ACE                            
00077ACE                            Snd_FadeOut1:				; XREF: Sound_E0
00077ACE 4216                       		clr.b	0(a6)
00077AD0 4BEE 0220                  		lea	$220(a6),a5
00077AD4 7E05                       		moveq	#5,d7
00077AD6                            
00077AD6                            loc_723EA:
00077AD6 4A15                       		tst.b	(a5)
00077AD8 6A00 0000                  		bpl.w	loc_72472
00077ADC 0895 0007                  		bclr	#7,(a5)
00077AE0 7600                       		moveq	#0,d3
00077AE2 162D 0001                  		move.b	1(a5),d3
00077AE6 6B00                       		bmi.s	loc_7243C
00077AE8 4EBA 0000                  		jsr	sub_726FE(pc)
00077AEC 0C03 0004                  		cmpi.b	#4,d3
00077AF0 6600                       		bne.s	loc_72416
00077AF2 4A2E 0340                  		tst.b	$340(a6)
00077AF6 6A00                       		bpl.s	loc_72416
00077AF8 4BEE 0340                  		lea	$340(a6),a5
00077AFC 226E 0020                  		movea.l	$20(a6),a1
00077B00 6000                       		bra.s	loc_72428
00077B02                            ; ===========================================================================
00077B02                            
00077B02                            loc_72416:
00077B02 5503                       		subq.b	#2,d3
00077B04 E50B                       		lsl.b	#2,d3
00077B06 41FA FEB2                  		lea	dword_722CC(pc),a0
00077B0A 264D                       		movea.l	a5,a3
00077B0C 2A70 3000                  		movea.l	(a0,d3.w),a5
00077B10 226E 0018                  		movea.l	$18(a6),a1
00077B14                            
00077B14                            loc_72428:
00077B14 0895 0002                  		bclr	#2,(a5)
00077B18 08D5 0001                  		bset	#1,(a5)
00077B1C 102D 000B                  		move.b	$B(a5),d0
00077B20 4EBA 0000                  		jsr	sub_72C4E(pc)
00077B24 2A4B                       		movea.l	a3,a5
00077B26 6000                       		bra.s	loc_72472
00077B28                            ; ===========================================================================
00077B28                            
00077B28                            loc_7243C:
00077B28 4EBA 0000                  		jsr	sub_729A0(pc)
00077B2C 41EE 0370                  		lea	$370(a6),a0
00077B30 0C03 00E0                  		cmpi.b	#$E0,d3
00077B34 6700                       		beq.s	loc_7245A
00077B36 0C03 00C0                  		cmpi.b	#$C0,d3
00077B3A 6700                       		beq.s	loc_7245A
00077B3C E60B                       		lsr.b	#3,d3
00077B3E 41FA FE7A                  		lea	dword_722CC(pc),a0
00077B42 2070 3000                  		movea.l	(a0,d3.w),a0
00077B46                            
00077B46                            loc_7245A:
00077B46 0890 0002                  		bclr	#2,(a0)
00077B4A 08D0 0001                  		bset	#1,(a0)
00077B4E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00077B54 6600                       		bne.s	loc_72472
00077B56 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00077B5E                            
00077B5E                            loc_72472:
00077B5E DAFC 0030                  		adda.w	#$30,a5
00077B62 51CF FF72                  		dbf	d7,loc_723EA
00077B66                            
00077B66 4E75                       		rts	
00077B68                            ; End of function Snd_FadeOut1
00077B68                            
00077B68                            
00077B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077B68                            
00077B68                            
00077B68                            Snd_FadeOut2:				; XREF: Sound_E0
00077B68 4BEE 0340                  		lea	$340(a6),a5
00077B6C 4A15                       		tst.b	(a5)
00077B6E 6A00                       		bpl.s	loc_724AE
00077B70 0895 0007                  		bclr	#7,(a5)
00077B74 0815 0002                  		btst	#2,(a5)
00077B78 6600                       		bne.s	loc_724AE
00077B7A 4EBA 0000                  		jsr	loc_7270A(pc)
00077B7E 4BEE 0100                  		lea	$100(a6),a5
00077B82 0895 0002                  		bclr	#2,(a5)
00077B86 08D5 0001                  		bset	#1,(a5)
00077B8A 4A15                       		tst.b	(a5)
00077B8C 6A00                       		bpl.s	loc_724AE
00077B8E 226E 0018                  		movea.l	$18(a6),a1
00077B92 102D 000B                  		move.b	$B(a5),d0
00077B96 4EBA 0000                  		jsr	sub_72C4E(pc)
00077B9A                            
00077B9A                            loc_724AE:
00077B9A 4BEE 0370                  		lea	$370(a6),a5
00077B9E 4A15                       		tst.b	(a5)
00077BA0 6A00                       		bpl.s	locret_724E4
00077BA2 0895 0007                  		bclr	#7,(a5)
00077BA6 0815 0002                  		btst	#2,(a5)
00077BAA 6600                       		bne.s	locret_724E4
00077BAC 4EBA 0000                  		jsr	loc_729A6(pc)
00077BB0 4BEE 01F0                  		lea	$1F0(a6),a5
00077BB4 0895 0002                  		bclr	#2,(a5)
00077BB8 08D5 0001                  		bset	#1,(a5)
00077BBC 4A15                       		tst.b	(a5)
00077BBE 6A00                       		bpl.s	locret_724E4
00077BC0 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00077BC6 6600                       		bne.s	locret_724E4
00077BC8 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00077BD0                            
00077BD0                            locret_724E4:
00077BD0 4E75                       		rts	
00077BD2                            ; End of function Snd_FadeOut2
00077BD2                            
00077BD2                            ; ===========================================================================
00077BD2                            ; ---------------------------------------------------------------------------
00077BD2                            ; Fade out music
00077BD2                            ; ---------------------------------------------------------------------------
00077BD2                            
00077BD2                            Sound_E0:				; XREF: Sound_ExIndex
00077BD2 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00077BD6 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00077BDA 1D7C 0003 0006             		move.b	#3,6(a6)
00077BE0 1D7C 0028 0004             		move.b	#$28,4(a6)
00077BE6 422E 0040                  		clr.b	$40(a6)
00077BEA 422E 002A                  		clr.b	$2A(a6)
00077BEE 4E75                       		rts	
00077BF0                            
00077BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077BF0                            
00077BF0                            
00077BF0                            sub_72504:				; XREF: UpdateMusic
00077BF0 102E 0006                  		move.b	6(a6),d0
00077BF4 6700                       		beq.s	loc_72510
00077BF6 532E 0006                  		subq.b	#1,6(a6)
00077BFA 4E75                       		rts	
00077BFC                            ; ===========================================================================
00077BFC                            
00077BFC                            loc_72510:
00077BFC 532E 0004                  		subq.b	#1,4(a6)
00077C00 6700 0000                  		beq.w	Sound_E4
00077C04 1D7C 0003 0006             		move.b	#3,6(a6)
00077C0A 4BEE 0070                  		lea	$70(a6),a5
00077C0E 7E05                       		moveq	#5,d7
00077C10                            
00077C10                            loc_72524:
00077C10 4A15                       		tst.b	(a5)
00077C12 6A00                       		bpl.s	loc_72538
00077C14 522D 0009                  		addq.b	#1,9(a5)
00077C18 6A00                       		bpl.s	loc_72534
00077C1A 0895 0007                  		bclr	#7,(a5)
00077C1E 6000                       		bra.s	loc_72538
00077C20                            ; ===========================================================================
00077C20                            
00077C20                            loc_72534:
00077C20 4EBA 0000                  		jsr	sub_72CB4(pc)
00077C24                            
00077C24                            loc_72538:
00077C24 DAFC 0030                  		adda.w	#$30,a5
00077C28 51CF FFE6                  		dbf	d7,loc_72524
00077C2C                            
00077C2C 7E02                       		moveq	#2,d7
00077C2E                            
00077C2E                            loc_72542:
00077C2E 4A15                       		tst.b	(a5)
00077C30 6A00                       		bpl.s	loc_72560
00077C32 522D 0009                  		addq.b	#1,9(a5)
00077C36 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00077C3C 6500                       		bcs.s	loc_72558
00077C3E 0895 0007                  		bclr	#7,(a5)
00077C42 6000                       		bra.s	loc_72560
00077C44                            ; ===========================================================================
00077C44                            
00077C44                            loc_72558:
00077C44 1C2D 0009                  		move.b	9(a5),d6
00077C48 4EBA 0000                  		jsr	sub_7296A(pc)
00077C4C                            
00077C4C                            loc_72560:
00077C4C DAFC 0030                  		adda.w	#$30,a5
00077C50 51CF FFDC                  		dbf	d7,loc_72542
00077C54                            
00077C54 4E75                       		rts	
00077C56                            ; End of function sub_72504
00077C56                            
00077C56                            
00077C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077C56                            
00077C56                            
00077C56                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00077C56 7602                       		moveq	#2,d3
00077C58 7028                       		moveq	#$28,d0
00077C5A                            
00077C5A                            loc_7256E:
00077C5A 1203                       		move.b	d3,d1
00077C5C 4EBA 0000                  		jsr	sub_7272E(pc)
00077C60 5801                       		addq.b	#4,d1
00077C62 4EBA 0000                  		jsr	sub_7272E(pc)
00077C66 51CB FFF2                  		dbf	d3,loc_7256E
00077C6A                            
00077C6A 7040                       		moveq	#$40,d0
00077C6C 727F                       		moveq	#$7F,d1
00077C6E 7802                       		moveq	#2,d4
00077C70                            
00077C70                            loc_72584:
00077C70 7603                       		moveq	#3,d3
00077C72                            
00077C72                            loc_72586:
00077C72 4EBA 0000                  		jsr	sub_7272E(pc)
00077C76 4EBA 0000                  		jsr	sub_72764(pc)
00077C7A 5840                       		addq.w	#4,d0
00077C7C 51CB FFF4                  		dbf	d3,loc_72586
00077C80                            
00077C80 0400 000F                  		subi.b	#$F,d0
00077C84 51CC FFEA                  		dbf	d4,loc_72584
00077C88                            
00077C88 4E75                       		rts	
00077C8A                            ; End of function sub_7256A
00077C8A                            
00077C8A                            ; ===========================================================================
00077C8A                            ; ---------------------------------------------------------------------------
00077C8A                            ; Stop music
00077C8A                            ; ---------------------------------------------------------------------------
00077C8A                            
00077C8A                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00077C8A 702B                       		moveq	#$2B,d0
00077C8C 123C 0080                  		move.b	#$80,d1
00077C90 4EBA 0000                  		jsr	sub_7272E(pc)
00077C94 7027                       		moveq	#$27,d0
00077C96 7200                       		moveq	#0,d1
00077C98 4EBA 0000                  		jsr	sub_7272E(pc)
00077C9C 204E                       		movea.l	a6,a0
00077C9E 303C 00E3                  		move.w	#$E3,d0
00077CA2                            
00077CA2                            loc_725B6:
00077CA2 4298                       		clr.l	(a0)+
00077CA4 51C8 FFFC                  		dbf	d0,loc_725B6
00077CA8                            
00077CA8 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00077CAE 4EBA FFA6                  		jsr	sub_7256A(pc)
00077CB2 6000 0000                  		bra.w	sub_729B6
00077CB6                            
00077CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077CB6                            
00077CB6                            
00077CB6                            sub_725CA:				; XREF: Sound_ChkValue
00077CB6 204E                       		movea.l	a6,a0
00077CB8 1216                       		move.b	0(a6),d1
00077CBA 142E 0027                  		move.b	$27(a6),d2
00077CBE 162E 002A                  		move.b	$2A(a6),d3
00077CC2 182E 0026                  		move.b	$26(a6),d4
00077CC6 3A2E 000A                  		move.w	$A(a6),d5
00077CCA 303C 0087                  		move.w	#$87,d0
00077CCE                            
00077CCE                            loc_725E4:
00077CCE 4298                       		clr.l	(a0)+
00077CD0 51C8 FFFC                  		dbf	d0,loc_725E4
00077CD4                            
00077CD4 1C81                       		move.b	d1,0(a6)
00077CD6 1D42 0027                  		move.b	d2,$27(a6)
00077CDA 1D43 002A                  		move.b	d3,$2A(a6)
00077CDE 1D44 0026                  		move.b	d4,$26(a6)
00077CE2 3D45 000A                  		move.w	d5,$A(a6)
00077CE6 1D7C 0080 0009             		move.b	#$80,9(a6)
00077CEC 4EBA FF68                  		jsr	sub_7256A(pc)
00077CF0 6000 0000                  		bra.w	sub_729B6
00077CF4                            ; End of function sub_725CA
00077CF4                            
00077CF4                            
00077CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077CF4                            
00077CF4                            
00077CF4                            sub_7260C:				; XREF: UpdateMusic
00077CF4 1D6E 0002 0001             		move.b	2(a6),1(a6)
00077CFA 41EE 004E                  		lea	$4E(a6),a0
00077CFE 7030                       		moveq	#$30,d0
00077D00 7209                       		moveq	#9,d1
00077D02                            
00077D02                            loc_7261A:
00077D02 5210                       		addq.b	#1,(a0)
00077D04 D0C0                       		adda.w	d0,a0
00077D06 51C9 FFFA                  		dbf	d1,loc_7261A
00077D0A                            
00077D0A 4E75                       		rts	
00077D0C                            ; End of function sub_7260C
00077D0C                            
00077D0C                            ; ===========================================================================
00077D0C                            ; ---------------------------------------------------------------------------
00077D0C                            ; Speed	up music
00077D0C                            ; ---------------------------------------------------------------------------
00077D0C                            
00077D0C                            Sound_E2:				; XREF: Sound_ExIndex
00077D0C 4A2E 0027                  		tst.b	$27(a6)
00077D10 6600                       		bne.s	loc_7263E
00077D12 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00077D18 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00077D1E 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00077D24 4E75                       		rts	
00077D26                            ; ===========================================================================
00077D26                            
00077D26                            loc_7263E:
00077D26 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00077D2C 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00077D32 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00077D38 4E75                       		rts	
00077D3A                            ; ===========================================================================
00077D3A                            ; ---------------------------------------------------------------------------
00077D3A                            ; Change music back to normal speed
00077D3A                            ; ---------------------------------------------------------------------------
00077D3A                            
00077D3A                            Sound_E3:				; XREF: Sound_ExIndex
00077D3A 4A2E 0027                  		tst.b	$27(a6)
00077D3E 6600                       		bne.s	loc_7266A
00077D40 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00077D46 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00077D4C 422E 002A                  		clr.b	$2A(a6)
00077D50 4E75                       		rts	
00077D52                            ; ===========================================================================
00077D52                            
00077D52                            loc_7266A:
00077D52 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00077D58 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00077D5E 422E 03CA                  		clr.b	$3CA(a6)
00077D62 4E75                       		rts	
00077D64                            
00077D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077D64                            
00077D64                            
00077D64                            sub_7267C:				; XREF: UpdateMusic
00077D64 4A2E 0025                  		tst.b	$25(a6)
00077D68 6700                       		beq.s	loc_72688
00077D6A 532E 0025                  		subq.b	#1,$25(a6)
00077D6E 4E75                       		rts	
00077D70                            ; ===========================================================================
00077D70                            
00077D70                            loc_72688:
00077D70 4A2E 0026                  		tst.b	$26(a6)
00077D74 6700                       		beq.s	loc_726D6
00077D76 532E 0026                  		subq.b	#1,$26(a6)
00077D7A 1D7C 0002 0025             		move.b	#2,$25(a6)
00077D80 4BEE 0070                  		lea	$70(a6),a5
00077D84 7E05                       		moveq	#5,d7
00077D86                            
00077D86                            loc_7269E:
00077D86 4A15                       		tst.b	(a5)
00077D88 6A00                       		bpl.s	loc_726AA
00077D8A 532D 0009                  		subq.b	#1,9(a5)
00077D8E 4EBA 0000                  		jsr	sub_72CB4(pc)
00077D92                            
00077D92                            loc_726AA:
00077D92 DAFC 0030                  		adda.w	#$30,a5
00077D96 51CF FFEE                  		dbf	d7,loc_7269E
00077D9A 7E02                       		moveq	#2,d7
00077D9C                            
00077D9C                            loc_726B4:
00077D9C 4A15                       		tst.b	(a5)
00077D9E 6A00                       		bpl.s	loc_726CC
00077DA0 532D 0009                  		subq.b	#1,9(a5)
00077DA4 1C2D 0009                  		move.b	9(a5),d6
00077DA8 0C06 0010                  		cmpi.b	#$10,d6
00077DAC 6500                       		bcs.s	loc_726C8
00077DAE 7C0F                       		moveq	#$F,d6
00077DB0                            
00077DB0                            loc_726C8:
00077DB0 4EBA 0000                  		jsr	sub_7296A(pc)
00077DB4                            
00077DB4                            loc_726CC:
00077DB4 DAFC 0030                  		adda.w	#$30,a5
00077DB8 51CF FFE2                  		dbf	d7,loc_726B4
00077DBC 4E75                       		rts	
00077DBE                            ; ===========================================================================
00077DBE                            
00077DBE                            loc_726D6:
00077DBE 08AE 0002 0040             		bclr	#2,$40(a6)
00077DC4 422E 0024                  		clr.b	$24(a6)
00077DC8 4E75                       		rts	
00077DCA                            ; End of function sub_7267C
00077DCA                            
00077DCA                            ; ===========================================================================
00077DCA                            
00077DCA                            loc_726E2:				; XREF: sub_71CCA
00077DCA 0815 0001                  		btst	#1,(a5)
00077DCE 6600                       		bne.s	locret_726FC
00077DD0 0815 0002                  		btst	#2,(a5)
00077DD4 6600                       		bne.s	locret_726FC
00077DD6 7028                       		moveq	#$28,d0
00077DD8 122D 0001                  		move.b	1(a5),d1
00077DDC 0001 00F0                  		ori.b	#-$10,d1
00077DE0 6000 0000                  		bra.w	sub_7272E
00077DE4                            ; ===========================================================================
00077DE4                            
00077DE4                            locret_726FC:
00077DE4 4E75                       		rts	
00077DE6                            
00077DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077DE6                            
00077DE6                            
00077DE6                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00077DE6 0815 0004                  		btst	#4,(a5)
00077DEA 6600                       		bne.s	locret_72714
00077DEC 0815 0002                  		btst	#2,(a5)
00077DF0 6600                       		bne.s	locret_72714
00077DF2                            
00077DF2                            loc_7270A:				; XREF: Snd_FadeOut2
00077DF2 7028                       		moveq	#$28,d0
00077DF4 122D 0001                  		move.b	1(a5),d1
00077DF8 6000 0000                  		bra.w	sub_7272E
00077DFC                            ; ===========================================================================
00077DFC                            
00077DFC                            locret_72714:
00077DFC 4E75                       		rts	
00077DFE                            ; End of function sub_726FE
00077DFE                            
00077DFE                            ; ===========================================================================
00077DFE                            
00077DFE                            loc_72716:				; XREF: sub_72A5A
00077DFE 0815 0002                  		btst	#2,(a5)
00077E02 6600                       		bne.s	locret_72720
00077E04 6000 0000                  		bra.w	sub_72722
00077E08                            ; ===========================================================================
00077E08                            
00077E08                            locret_72720:
00077E08 4E75                       		rts	
00077E0A                            
00077E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077E0A                            
00077E0A                            
00077E0A                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00077E0A 082D 0002 0001             		btst	#2,1(a5)
00077E10 6600                       		bne.s	loc_7275A
00077E12 D02D 0001                  		add.b	1(a5),d0
00077E16                            ; End of function sub_72722
00077E16                            
00077E16                            
00077E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077E16                            
00077E16                            
00077E16                            sub_7272E:				; XREF: loc_71E6A
00077E16 1439 00A0 4000             		move.b	($A04000).l,d2
00077E1C 0802 0007                  		btst	#7,d2
00077E20 66F4                       		bne.s	sub_7272E
00077E22 13C0 00A0 4000             		move.b	d0,($A04000).l
00077E28 4E71                       		nop	
00077E2A 4E71                       		nop	
00077E2C 4E71                       		nop	
00077E2E                            
00077E2E                            loc_72746:
00077E2E 1439 00A0 4000             		move.b	($A04000).l,d2
00077E34 0802 0007                  		btst	#7,d2
00077E38 66F4                       		bne.s	loc_72746
00077E3A                            
00077E3A 13C1 00A0 4001             		move.b	d1,($A04001).l
00077E40 4E75                       		rts	
00077E42                            ; End of function sub_7272E
00077E42                            
00077E42                            ; ===========================================================================
00077E42                            
00077E42                            loc_7275A:				; XREF: sub_72722
00077E42 142D 0001                  		move.b	1(a5),d2
00077E46 0882 0002                  		bclr	#2,d2
00077E4A D002                       		add.b	d2,d0
00077E4C                            
00077E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077E4C                            
00077E4C                            
00077E4C                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00077E4C 1439 00A0 4000             		move.b	($A04000).l,d2
00077E52 0802 0007                  		btst	#7,d2
00077E56 66F4                       		bne.s	sub_72764
00077E58 13C0 00A0 4002             		move.b	d0,($A04002).l
00077E5E 4E71                       		nop	
00077E60 4E71                       		nop	
00077E62 4E71                       		nop	
00077E64                            
00077E64                            loc_7277C:
00077E64 1439 00A0 4000             		move.b	($A04000).l,d2
00077E6A 0802 0007                  		btst	#7,d2
00077E6E 66F4                       		bne.s	loc_7277C
00077E70                            
00077E70 13C1 00A0 4003             		move.b	d1,($A04003).l
00077E76 4E75                       		rts	
00077E78                            ; End of function sub_72764
00077E78                            
00077E78                            ; ===========================================================================
00077E78 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00077E8A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00077E9C 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00077EAC 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00077EBC 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00077ECC 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00077EDC 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00077EEC 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00077EFC 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00077F0C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00077F1C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00077F2C 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00077F38                            
00077F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077F38                            
00077F38                            
00077F38                            sub_72850:				; XREF: UpdateMusic
00077F38 532D 000E                  		subq.b	#1,$E(a5)
00077F3C 6600                       		bne.s	loc_72866
00077F3E 0895 0004                  		bclr	#4,(a5)
00077F42 4EBA 0000                  		jsr	sub_72878(pc)
00077F46 4EBA 0000                  		jsr	sub_728DC(pc)
00077F4A 6000 0000                  		bra.w	loc_7292E
00077F4E                            ; ===========================================================================
00077F4E                            
00077F4E                            loc_72866:
00077F4E 4EBA F4FC                  		jsr	sub_71D9E(pc)
00077F52 4EBA 0000                  		jsr	sub_72926(pc)
00077F56 4EBA F51C                  		jsr	sub_71DC6(pc)
00077F5A 4EBA 0000                  		jsr	sub_728E2(pc)
00077F5E 4E75                       		rts	
00077F60                            ; End of function sub_72850
00077F60                            
00077F60                            
00077F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077F60                            
00077F60                            
00077F60                            sub_72878:				; XREF: sub_72850
00077F60 0895 0001                  		bclr	#1,(a5)
00077F64 286D 0004                  		movea.l	4(a5),a4
00077F68                            
00077F68                            loc_72880:
00077F68 7A00                       		moveq	#0,d5
00077F6A 1A1C                       		move.b	(a4)+,d5
00077F6C 0C05 00E0                  		cmpi.b	#$E0,d5
00077F70 6500                       		bcs.s	loc_72890
00077F72 4EBA 0000                  		jsr	sub_72A5A(pc)
00077F76 60F0                       		bra.s	loc_72880
00077F78                            ; ===========================================================================
00077F78                            
00077F78                            loc_72890:
00077F78 4A05                       		tst.b	d5
00077F7A 6A00                       		bpl.s	loc_728A4
00077F7C 4EBA 0000                  		jsr	sub_728AC(pc)
00077F80 1A1C                       		move.b	(a4)+,d5
00077F82 4A05                       		tst.b	d5
00077F84 6A00                       		bpl.s	loc_728A4
00077F86 534C                       		subq.w	#1,a4
00077F88 6000 F484                  		bra.w	sub_71D60
00077F8C                            ; ===========================================================================
00077F8C                            
00077F8C                            loc_728A4:
00077F8C 4EBA F460                  		jsr	sub_71D40(pc)
00077F90 6000 F47C                  		bra.w	sub_71D60
00077F94                            ; End of function sub_72878
00077F94                            
00077F94                            
00077F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077F94                            
00077F94                            
00077F94                            sub_728AC:				; XREF: sub_72878
00077F94 0405 0081                  		subi.b	#$81,d5
00077F98 6500                       		bcs.s	loc_728CA
00077F9A DA2D 0008                  		add.b	8(a5),d5
00077F9E 0245 007F                  		andi.w	#$7F,d5
00077FA2 E34D                       		lsl.w	#1,d5
00077FA4 41FA 0000                  		lea	word_729CE(pc),a0
00077FA8 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00077FAE 6000 F45E                  		bra.w	sub_71D60
00077FB2                            ; ===========================================================================
00077FB2                            
00077FB2                            loc_728CA:
00077FB2 08D5 0001                  		bset	#1,(a5)
00077FB6 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00077FBC 4EBA F450                  		jsr	sub_71D60(pc)
00077FC0 6000 0000                  		bra.w	sub_729A0
00077FC4                            ; End of function sub_728AC
00077FC4                            
00077FC4                            
00077FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077FC4                            
00077FC4                            
00077FC4                            sub_728DC:				; XREF: sub_72850
00077FC4 3C2D 0010                  		move.w	$10(a5),d6
00077FC8 6B00                       		bmi.s	loc_72920
00077FCA                            ; End of function sub_728DC
00077FCA                            
00077FCA                            
00077FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00077FCA                            
00077FCA                            
00077FCA                            sub_728E2:				; XREF: sub_72850
00077FCA 102D 001E                  		move.b	$1E(a5),d0
00077FCE 4880                       		ext.w	d0
00077FD0 DC40                       		add.w	d0,d6
00077FD2 0815 0002                  		btst	#2,(a5)
00077FD6 6600                       		bne.s	locret_7291E
00077FD8 0815 0001                  		btst	#1,(a5)
00077FDC 6600                       		bne.s	locret_7291E
00077FDE 102D 0001                  		move.b	1(a5),d0
00077FE2 0C00 00E0                  		cmpi.b	#$E0,d0
00077FE6 6600                       		bne.s	loc_72904
00077FE8 103C 00C0                  		move.b	#$C0,d0
00077FEC                            
00077FEC                            loc_72904:
00077FEC 3206                       		move.w	d6,d1
00077FEE 0201 000F                  		andi.b	#$F,d1
00077FF2 8001                       		or.b	d1,d0
00077FF4 E84E                       		lsr.w	#4,d6
00077FF6 0206 003F                  		andi.b	#$3F,d6
00077FFA 13C0 00C0 0011             		move.b	d0,($C00011).l
00078000 13C6 00C0 0011             		move.b	d6,($C00011).l
00078006                            
00078006                            locret_7291E:
00078006 4E75                       		rts	
00078008                            ; End of function sub_728E2
00078008                            
00078008                            ; ===========================================================================
00078008                            
00078008                            loc_72920:				; XREF: sub_728DC
00078008 08D5 0001                  		bset	#1,(a5)
0007800C 4E75                       		rts	
0007800E                            
0007800E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007800E                            
0007800E                            
0007800E                            sub_72926:				; XREF: sub_72850
0007800E 4A2D 000B                  		tst.b	$B(a5)
00078012 6700 0000                  		beq.w	locret_7298A
00078016                            
00078016                            loc_7292E:				; XREF: sub_72850
00078016 1C2D 0009                  		move.b	9(a5),d6
0007801A 7000                       		moveq	#0,d0
0007801C 102D 000B                  		move.b	$B(a5),d0
00078020 6700                       		beq.s	sub_7296A
00078022 2079 0007 7022             		movea.l	(Go_PSGIndex).l,a0
00078028 5340                       		subq.w	#1,d0
0007802A E548                       		lsl.w	#2,d0
0007802C 2070 0000                  		movea.l	(a0,d0.w),a0
00078030 102D 000C                  		move.b	$C(a5),d0
00078034 1030 0000                  		move.b	(a0,d0.w),d0
00078038 522D 000C                  		addq.b	#1,$C(a5)
0007803C 0800 0007                  		btst	#7,d0
00078040 6700                       		beq.s	loc_72960
00078042 0C00 0080                  		cmpi.b	#$80,d0
00078046 6700                       		beq.s	loc_7299A
00078048                            
00078048                            loc_72960:
00078048 DC40                       		add.w	d0,d6
0007804A 0C06 0010                  		cmpi.b	#$10,d6
0007804E 6500                       		bcs.s	sub_7296A
00078050 7C0F                       		moveq	#$F,d6
00078052                            ; End of function sub_72926
00078052                            
00078052                            
00078052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00078052                            
00078052                            
00078052                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00078052 0815 0001                  		btst	#1,(a5)
00078056 6600                       		bne.s	locret_7298A
00078058 0815 0002                  		btst	#2,(a5)
0007805C 6600                       		bne.s	locret_7298A
0007805E 0815 0004                  		btst	#4,(a5)
00078062 6600                       		bne.s	loc_7298C
00078064                            
00078064                            loc_7297C:
00078064 8C2D 0001                  		or.b	1(a5),d6
00078068 0606 0010                  		addi.b	#$10,d6
0007806C 13C6 00C0 0011             		move.b	d6,($C00011).l
00078072                            
00078072                            locret_7298A:
00078072 4E75                       		rts	
00078074                            ; ===========================================================================
00078074                            
00078074                            loc_7298C:
00078074 4A2D 0013                  		tst.b	$13(a5)
00078078 67EA                       		beq.s	loc_7297C
0007807A 4A2D 0012                  		tst.b	$12(a5)
0007807E 66E4                       		bne.s	loc_7297C
00078080 4E75                       		rts	
00078082                            ; End of function sub_7296A
00078082                            
00078082                            ; ===========================================================================
00078082                            
00078082                            loc_7299A:				; XREF: sub_72926
00078082 532D 000C                  		subq.b	#1,$C(a5)
00078086 4E75                       		rts	
00078088                            
00078088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00078088                            
00078088                            
00078088                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00078088 0815 0002                  		btst	#2,(a5)
0007808C 6600                       		bne.s	locret_729B4
0007808E                            
0007808E                            loc_729A6:				; XREF: Snd_FadeOut2
0007808E 102D 0001                  		move.b	1(a5),d0
00078092 0000 001F                  		ori.b	#$1F,d0
00078096 13C0 00C0 0011             		move.b	d0,($C00011).l
0007809C                            
0007809C                            locret_729B4:
0007809C 4E75                       		rts	
0007809E                            ; End of function sub_729A0
0007809E                            
0007809E                            
0007809E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007809E                            
0007809E                            
0007809E                            sub_729B6:				; XREF: loc_71E7C
0007809E 41F9 00C0 0011             		lea	($C00011).l,a0
000780A4 10BC 009F                  		move.b	#$9F,(a0)
000780A8 10BC 00BF                  		move.b	#$BF,(a0)
000780AC 10BC 00DF                  		move.b	#$DF,(a0)
000780B0 10BC 00FF                  		move.b	#$FF,(a0)
000780B4 4E75                       		rts	
000780B6                            ; End of function sub_729B6
000780B6                            
000780B6                            ; ===========================================================================
000780B6 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000780C8 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000780DA 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000780EE 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00078102 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00078116 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007812A 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007813E 0011 0000                  		dc.w $11, 0
00078142                            
00078142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00078142                            
00078142                            
00078142                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00078142 0445 00E0                  		subi.w	#$E0,d5
00078146 E54D                       		lsl.w	#2,d5
00078148 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007814C                            ; End of function sub_72A5A
0007814C                            
0007814C                            ; ===========================================================================
0007814C                            
0007814C                            loc_72A64:
0007814C 6000 0000                  		bra.w	loc_72ACC
00078150                            ; ===========================================================================
00078150 6000 0000                  		bra.w	loc_72AEC
00078154                            ; ===========================================================================
00078154 6000 0000                  		bra.w	loc_72AF2
00078158                            ; ===========================================================================
00078158 6000 0000                  		bra.w	loc_72AF8
0007815C                            ; ===========================================================================
0007815C 6000 0000                  		bra.w	loc_72B14
00078160                            ; ===========================================================================
00078160 6000 0000                  		bra.w	loc_72B9E
00078164                            ; ===========================================================================
00078164 6000 0000                  		bra.w	loc_72BA4
00078168                            ; ===========================================================================
00078168 6000 0000                  		bra.w	loc_72BAE
0007816C                            ; ===========================================================================
0007816C 6000 0000                  		bra.w	loc_72BB4
00078170                            ; ===========================================================================
00078170 6000 0000                  		bra.w	loc_72BBE
00078174                            ; ===========================================================================
00078174 6000 0000                  		bra.w	loc_72BC6
00078178                            ; ===========================================================================
00078178 6000 0000                  		bra.w	loc_72BD0
0007817C                            ; ===========================================================================
0007817C 6000 0000                  		bra.w	loc_72BE6
00078180                            ; ===========================================================================
00078180 6000 0000                  		bra.w	loc_72BEE
00078184                            ; ===========================================================================
00078184 6000 0000                  		bra.w	loc_72BF4
00078188                            ; ===========================================================================
00078188 6000 0000                  		bra.w	loc_72C26
0007818C                            ; ===========================================================================
0007818C 6000 0000                  		bra.w	loc_72D30
00078190                            ; ===========================================================================
00078190 6000 0000                  		bra.w	loc_72D52
00078194                            ; ===========================================================================
00078194 6000 0000                  		bra.w	loc_72D58
00078198                            ; ===========================================================================
00078198 6000 0000                  		bra.w	loc_72E06
0007819C                            ; ===========================================================================
0007819C 6000 0000                  		bra.w	loc_72E20
000781A0                            ; ===========================================================================
000781A0 6000 0000                  		bra.w	loc_72E26
000781A4                            ; ===========================================================================
000781A4 6000 0000                  		bra.w	loc_72E2C
000781A8                            ; ===========================================================================
000781A8 6000 0000                  		bra.w	loc_72E38
000781AC                            ; ===========================================================================
000781AC 6000 0000                  		bra.w	loc_72E52
000781B0                            ; ===========================================================================
000781B0 6000 0000                  		bra.w	loc_72E64
000781B4                            ; ===========================================================================
000781B4                            
000781B4                            loc_72ACC:				; XREF: loc_72A64
000781B4 121C                       		move.b	(a4)+,d1
000781B6 4A2D 0001                  		tst.b	1(a5)
000781BA 6B00                       		bmi.s	locret_72AEA
000781BC 102D 000A                  		move.b	$A(a5),d0
000781C0 0200 0037                  		andi.b	#$37,d0
000781C4 8200                       		or.b	d0,d1
000781C6 1B41 000A                  		move.b	d1,$A(a5)
000781CA 103C 00B4                  		move.b	#$B4,d0
000781CE 6000 FC2E                  		bra.w	loc_72716
000781D2                            ; ===========================================================================
000781D2                            
000781D2                            locret_72AEA:
000781D2 4E75                       		rts	
000781D4                            ; ===========================================================================
000781D4                            
000781D4                            loc_72AEC:				; XREF: loc_72A64
000781D4 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000781D8 4E75                       		rts	
000781DA                            ; ===========================================================================
000781DA                            
000781DA                            loc_72AF2:				; XREF: loc_72A64
000781DA 1D5C 0007                  		move.b	(a4)+,7(a6)
000781DE 4E75                       		rts	
000781E0                            ; ===========================================================================
000781E0                            
000781E0                            loc_72AF8:				; XREF: loc_72A64
000781E0 7000                       		moveq	#0,d0
000781E2 102D 000D                  		move.b	$D(a5),d0
000781E6 2875 0000                  		movea.l	(a5,d0.w),a4
000781EA 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000781F2 544C                       		addq.w	#2,a4
000781F4 5800                       		addq.b	#4,d0
000781F6 1B40 000D                  		move.b	d0,$D(a5)
000781FA 4E75                       		rts	
000781FC                            ; ===========================================================================
000781FC                            
000781FC                            loc_72B14:				; XREF: loc_72A64
000781FC 204E                       		movea.l	a6,a0
000781FE 43EE 03A0                  		lea	$3A0(a6),a1
00078202 303C 0087                  		move.w	#$87,d0
00078206                            
00078206                            loc_72B1E:
00078206 20D9                       		move.l	(a1)+,(a0)+
00078208 51C8 FFFC                  		dbf	d0,loc_72B1E
0007820C                            
0007820C 08EE 0002 0040             		bset	#2,$40(a6)
00078212 264D                       		movea.l	a5,a3
00078214 1C3C 0028                  		move.b	#$28,d6
00078218 9C2E 0026                  		sub.b	$26(a6),d6
0007821C 7E05                       		moveq	#5,d7
0007821E 4BEE 0070                  		lea	$70(a6),a5
00078222                            
00078222                            loc_72B3A:
00078222 0815 0007                  		btst	#7,(a5)
00078226 6700                       		beq.s	loc_72B5C
00078228 08D5 0001                  		bset	#1,(a5)
0007822C DD2D 0009                  		add.b	d6,9(a5)
00078230 0815 0002                  		btst	#2,(a5)
00078234 6600                       		bne.s	loc_72B5C
00078236 7000                       		moveq	#0,d0
00078238 102D 000B                  		move.b	$B(a5),d0
0007823C 226E 0018                  		movea.l	$18(a6),a1
00078240 4EBA 0000                  		jsr	sub_72C4E(pc)
00078244                            
00078244                            loc_72B5C:
00078244 DAFC 0030                  		adda.w	#$30,a5
00078248 51CF FFD8                  		dbf	d7,loc_72B3A
0007824C                            
0007824C 7E02                       		moveq	#2,d7
0007824E                            
0007824E                            loc_72B66:
0007824E 0815 0007                  		btst	#7,(a5)
00078252 6700                       		beq.s	loc_72B78
00078254 08D5 0001                  		bset	#1,(a5)
00078258 4EBA FE2E                  		jsr	sub_729A0(pc)
0007825C DD2D 0009                  		add.b	d6,9(a5)
00078260                            
00078260                            loc_72B78:
00078260 DAFC 0030                  		adda.w	#$30,a5
00078264 51CF FFE8                  		dbf	d7,loc_72B66
00078268 2A4B                       		movea.l	a3,a5
0007826A 1D7C 0080 0024             		move.b	#$80,$24(a6)
00078270 1D7C 0028 0026             		move.b	#$28,$26(a6)
00078276 422E 0027                  		clr.b	$27(a6)
0007827A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00078282 504F                       		addq.w	#8,sp
00078284 4E75                       		rts	
00078286                            ; ===========================================================================
00078286                            
00078286                            loc_72B9E:				; XREF: loc_72A64
00078286 1B5C 0002                  		move.b	(a4)+,2(a5)
0007828A 4E75                       		rts	
0007828C                            ; ===========================================================================
0007828C                            
0007828C                            loc_72BA4:				; XREF: loc_72A64
0007828C 101C                       		move.b	(a4)+,d0
0007828E D12D 0009                  		add.b	d0,9(a5)
00078292 6000 0000                  		bra.w	sub_72CB4
00078296                            ; ===========================================================================
00078296                            
00078296                            loc_72BAE:				; XREF: loc_72A64
00078296 08D5 0004                  		bset	#4,(a5)
0007829A 4E75                       		rts	
0007829C                            ; ===========================================================================
0007829C                            
0007829C                            loc_72BB4:				; XREF: loc_72A64
0007829C 1B54 0012                  		move.b	(a4),$12(a5)
000782A0 1B5C 0013                  		move.b	(a4)+,$13(a5)
000782A4 4E75                       		rts	
000782A6                            ; ===========================================================================
000782A6                            
000782A6                            loc_72BBE:				; XREF: loc_72A64
000782A6 101C                       		move.b	(a4)+,d0
000782A8 D12D 0008                  		add.b	d0,8(a5)
000782AC 4E75                       		rts	
000782AE                            ; ===========================================================================
000782AE                            
000782AE                            loc_72BC6:				; XREF: loc_72A64
000782AE 1D54 0002                  		move.b	(a4),2(a6)
000782B2 1D5C 0001                  		move.b	(a4)+,1(a6)
000782B6 4E75                       		rts	
000782B8                            ; ===========================================================================
000782B8                            
000782B8                            loc_72BD0:				; XREF: loc_72A64
000782B8 41EE 0040                  		lea	$40(a6),a0
000782BC 101C                       		move.b	(a4)+,d0
000782BE 7230                       		moveq	#$30,d1
000782C0 7409                       		moveq	#9,d2
000782C2                            
000782C2                            loc_72BDA:
000782C2 1140 0002                  		move.b	d0,2(a0)
000782C6 D0C1                       		adda.w	d1,a0
000782C8 51CA FFF8                  		dbf	d2,loc_72BDA
000782CC                            
000782CC 4E75                       		rts	
000782CE                            ; ===========================================================================
000782CE                            
000782CE                            loc_72BE6:				; XREF: loc_72A64
000782CE 101C                       		move.b	(a4)+,d0
000782D0 D12D 0009                  		add.b	d0,9(a5)
000782D4 4E75                       		rts	
000782D6                            ; ===========================================================================
000782D6                            
000782D6                            loc_72BEE:				; XREF: loc_72A64
000782D6 422E 002C                  		clr.b	$2C(a6)
000782DA 4E75                       		rts	
000782DC                            ; ===========================================================================
000782DC                            
000782DC                            loc_72BF4:				; XREF: loc_72A64
000782DC 0895 0007                  		bclr	#7,(a5)
000782E0 0895 0004                  		bclr	#4,(a5)
000782E4 4EBA FB00                  		jsr	sub_726FE(pc)
000782E8 4A2E 0250                  		tst.b	$250(a6)
000782EC 6B00                       		bmi.s	loc_72C22
000782EE 264D                       		movea.l	a5,a3
000782F0 4BEE 0100                  		lea	$100(a6),a5
000782F4 226E 0018                  		movea.l	$18(a6),a1
000782F8 0895 0002                  		bclr	#2,(a5)
000782FC 08D5 0001                  		bset	#1,(a5)
00078300 102D 000B                  		move.b	$B(a5),d0
00078304 4EBA 0000                  		jsr	sub_72C4E(pc)
00078308 2A4B                       		movea.l	a3,a5
0007830A                            
0007830A                            loc_72C22:
0007830A 504F                       		addq.w	#8,sp
0007830C 4E75                       		rts	
0007830E                            ; ===========================================================================
0007830E                            
0007830E                            loc_72C26:				; XREF: loc_72A64
0007830E 7000                       		moveq	#0,d0
00078310 101C                       		move.b	(a4)+,d0
00078312 1B40 000B                  		move.b	d0,$B(a5)
00078316 0815 0002                  		btst	#2,(a5)
0007831A 6600 0000                  		bne.w	locret_72CAA
0007831E 226E 0018                  		movea.l	$18(a6),a1
00078322 4A2E 000E                  		tst.b	$E(a6)
00078326 6700                       		beq.s	sub_72C4E
00078328 226D 0020                  		movea.l	$20(a5),a1
0007832C 4A2E 000E                  		tst.b	$E(a6)
00078330 6B00                       		bmi.s	sub_72C4E
00078332 226E 0020                  		movea.l	$20(a6),a1
00078336                            
00078336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00078336                            
00078336                            
00078336                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00078336 5340                       		subq.w	#1,d0
00078338 6B00                       		bmi.s	loc_72C5C
0007833A 323C 0019                  		move.w	#$19,d1
0007833E                            
0007833E                            loc_72C56:
0007833E D2C1                       		adda.w	d1,a1
00078340 51C8 FFFC                  		dbf	d0,loc_72C56
00078344                            
00078344                            loc_72C5C:
00078344 1219                       		move.b	(a1)+,d1
00078346 1B41 001F                  		move.b	d1,$1F(a5)
0007834A 1801                       		move.b	d1,d4
0007834C 103C 00B0                  		move.b	#$B0,d0
00078350 4EBA FAB8                  		jsr	sub_72722(pc)
00078354 45FA 0000                  		lea	byte_72D18(pc),a2
00078358 7613                       		moveq	#$13,d3
0007835A                            
0007835A                            loc_72C72:
0007835A 101A                       		move.b	(a2)+,d0
0007835C 1219                       		move.b	(a1)+,d1
0007835E 4EBA FAAA                  		jsr	sub_72722(pc)
00078362 51CB FFF6                  		dbf	d3,loc_72C72
00078366 7A03                       		moveq	#3,d5
00078368 0244 0007                  		andi.w	#7,d4
0007836C 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00078370 162D 0009                  		move.b	9(a5),d3
00078374                            
00078374                            loc_72C8C:
00078374 101A                       		move.b	(a2)+,d0
00078376 1219                       		move.b	(a1)+,d1
00078378 E20C                       		lsr.b	#1,d4
0007837A 6400                       		bcc.s	loc_72C96
0007837C D203                       		add.b	d3,d1
0007837E                            
0007837E                            loc_72C96:
0007837E 4EBA FA8A                  		jsr	sub_72722(pc)
00078382 51CD FFF0                  		dbf	d5,loc_72C8C
00078386 103C 00B4                  		move.b	#$B4,d0
0007838A 122D 000A                  		move.b	$A(a5),d1
0007838E 4EBA FA7A                  		jsr	sub_72722(pc)
00078392                            
00078392                            locret_72CAA:
00078392 4E75                       		rts	
00078394                            ; End of function sub_72C4E
00078394                            
00078394                            ; ===========================================================================
00078394 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007839C                            
0007839C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007839C                            
0007839C                            
0007839C                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007839C 0815 0002                  		btst	#2,(a5)
000783A0 6600                       		bne.s	locret_72D16
000783A2 7000                       		moveq	#0,d0
000783A4 102D 000B                  		move.b	$B(a5),d0
000783A8 226E 0018                  		movea.l	$18(a6),a1
000783AC 4A2E 000E                  		tst.b	$E(a6)
000783B0 6700                       		beq.s	loc_72CD8
000783B2 226E 0020                  		movea.l	$20(a6),a1
000783B6 4A2E 000E                  		tst.b	$E(a6)
000783BA 6B00                       		bmi.s	loc_72CD8
000783BC 226E 0020                  		movea.l	$20(a6),a1
000783C0                            
000783C0                            loc_72CD8:
000783C0 5340                       		subq.w	#1,d0
000783C2 6B00                       		bmi.s	loc_72CE6
000783C4 323C 0019                  		move.w	#$19,d1
000783C8                            
000783C8                            loc_72CE0:
000783C8 D2C1                       		adda.w	d1,a1
000783CA 51C8 FFFC                  		dbf	d0,loc_72CE0
000783CE                            
000783CE                            loc_72CE6:
000783CE D2FC 0015                  		adda.w	#$15,a1
000783D2 45FA 0000                  		lea	byte_72D2C(pc),a2
000783D6 102D 001F                  		move.b	$1F(a5),d0
000783DA 0240 0007                  		andi.w	#7,d0
000783DE 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000783E2 162D 0009                  		move.b	9(a5),d3
000783E6 6B00                       		bmi.s	locret_72D16
000783E8 7A03                       		moveq	#3,d5
000783EA                            
000783EA                            loc_72D02:
000783EA 101A                       		move.b	(a2)+,d0
000783EC 1219                       		move.b	(a1)+,d1
000783EE E20C                       		lsr.b	#1,d4
000783F0 6400                       		bcc.s	loc_72D12
000783F2 D203                       		add.b	d3,d1
000783F4 6500                       		bcs.s	loc_72D12
000783F6 4EBA FA12                  		jsr	sub_72722(pc)
000783FA                            
000783FA                            loc_72D12:
000783FA 51CD FFEE                  		dbf	d5,loc_72D02
000783FE                            
000783FE                            locret_72D16:
000783FE 4E75                       		rts	
00078400                            ; End of function sub_72CB4
00078400                            
00078400                            ; ===========================================================================
00078400 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007840A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00078414 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00078418                            ; ===========================================================================
00078418                            
00078418                            loc_72D30:				; XREF: loc_72A64
00078418 08D5 0003                  		bset	#3,(a5)
0007841C 2B4C 0014                  		move.l	a4,$14(a5)
00078420 1B5C 0018                  		move.b	(a4)+,$18(a5)
00078424 1B5C 0019                  		move.b	(a4)+,$19(a5)
00078428 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007842C 101C                       		move.b	(a4)+,d0
0007842E E208                       		lsr.b	#1,d0
00078430 1B40 001B                  		move.b	d0,$1B(a5)
00078434 426D 001C                  		clr.w	$1C(a5)
00078438 4E75                       		rts	
0007843A                            ; ===========================================================================
0007843A                            
0007843A                            loc_72D52:				; XREF: loc_72A64
0007843A 08D5 0003                  		bset	#3,(a5)
0007843E 4E75                       		rts	
00078440                            ; ===========================================================================
00078440                            
00078440                            loc_72D58:				; XREF: loc_72A64
00078440 0895 0007                  		bclr	#7,(a5)
00078444 0895 0004                  		bclr	#4,(a5)
00078448 4A2D 0001                  		tst.b	1(a5)
0007844C 6B00                       		bmi.s	loc_72D74
0007844E 4A2E 0008                  		tst.b	8(a6)
00078452 6B00 0000                  		bmi.w	loc_72E02
00078456 4EBA F98E                  		jsr	sub_726FE(pc)
0007845A 6000                       		bra.s	loc_72D78
0007845C                            ; ===========================================================================
0007845C                            
0007845C                            loc_72D74:
0007845C 4EBA FC2A                  		jsr	sub_729A0(pc)
00078460                            
00078460                            loc_72D78:
00078460 4A2E 000E                  		tst.b	$E(a6)
00078464 6A00 0000                  		bpl.w	loc_72E02
00078468 4216                       		clr.b	0(a6)
0007846A 7000                       		moveq	#0,d0
0007846C 102D 0001                  		move.b	1(a5),d0
00078470 6B00                       		bmi.s	loc_72DCC
00078472 41FA F546                  		lea	dword_722CC(pc),a0
00078476 264D                       		movea.l	a5,a3
00078478 0C00 0004                  		cmpi.b	#4,d0
0007847C 6600                       		bne.s	loc_72DA8
0007847E 4A2E 0340                  		tst.b	$340(a6)
00078482 6A00                       		bpl.s	loc_72DA8
00078484 4BEE 0340                  		lea	$340(a6),a5
00078488 226E 0020                  		movea.l	$20(a6),a1
0007848C 6000                       		bra.s	loc_72DB8
0007848E                            ; ===========================================================================
0007848E                            
0007848E                            loc_72DA8:
0007848E 5500                       		subq.b	#2,d0
00078490 E508                       		lsl.b	#2,d0
00078492 2A70 0000                  		movea.l	(a0,d0.w),a5
00078496 4A15                       		tst.b	(a5)
00078498 6A00                       		bpl.s	loc_72DC8
0007849A 226E 0018                  		movea.l	$18(a6),a1
0007849E                            
0007849E                            loc_72DB8:
0007849E 0895 0002                  		bclr	#2,(a5)
000784A2 08D5 0001                  		bset	#1,(a5)
000784A6 102D 000B                  		move.b	$B(a5),d0
000784AA 4EBA FE8A                  		jsr	sub_72C4E(pc)
000784AE                            
000784AE                            loc_72DC8:
000784AE 2A4B                       		movea.l	a3,a5
000784B0 6000                       		bra.s	loc_72E02
000784B2                            ; ===========================================================================
000784B2                            
000784B2                            loc_72DCC:
000784B2 41EE 0370                  		lea	$370(a6),a0
000784B6 4A10                       		tst.b	(a0)
000784B8 6A00                       		bpl.s	loc_72DE0
000784BA 0C00 00E0                  		cmpi.b	#$E0,d0
000784BE 6700                       		beq.s	loc_72DEA
000784C0 0C00 00C0                  		cmpi.b	#$C0,d0
000784C4 6700                       		beq.s	loc_72DEA
000784C6                            
000784C6                            loc_72DE0:
000784C6 41FA F4F2                  		lea	dword_722CC(pc),a0
000784CA E608                       		lsr.b	#3,d0
000784CC 2070 0000                  		movea.l	(a0,d0.w),a0
000784D0                            
000784D0                            loc_72DEA:
000784D0 0890 0002                  		bclr	#2,(a0)
000784D4 08D0 0001                  		bset	#1,(a0)
000784D8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000784DE 6600                       		bne.s	loc_72E02
000784E0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000784E8                            
000784E8                            loc_72E02:
000784E8 504F                       		addq.w	#8,sp
000784EA 4E75                       		rts	
000784EC                            ; ===========================================================================
000784EC                            
000784EC                            loc_72E06:				; XREF: loc_72A64
000784EC 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000784F2 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000784F6 0815 0002                  		btst	#2,(a5)
000784FA 6600                       		bne.s	locret_72E1E
000784FC 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00078504                            
00078504                            locret_72E1E:
00078504 4E75                       		rts	
00078506                            ; ===========================================================================
00078506                            
00078506                            loc_72E20:				; XREF: loc_72A64
00078506 0895 0003                  		bclr	#3,(a5)
0007850A 4E75                       		rts	
0007850C                            ; ===========================================================================
0007850C                            
0007850C                            loc_72E26:				; XREF: loc_72A64
0007850C 1B5C 000B                  		move.b	(a4)+,$B(a5)
00078510 4E75                       		rts	
00078512                            ; ===========================================================================
00078512                            
00078512                            loc_72E2C:				; XREF: loc_72A64
00078512 101C                       		move.b	(a4)+,d0
00078514 E148                       		lsl.w	#8,d0
00078516 101C                       		move.b	(a4)+,d0
00078518 D8C0                       		adda.w	d0,a4
0007851A 534C                       		subq.w	#1,a4
0007851C 4E75                       		rts	
0007851E                            ; ===========================================================================
0007851E                            
0007851E                            loc_72E38:				; XREF: loc_72A64
0007851E 7000                       		moveq	#0,d0
00078520 101C                       		move.b	(a4)+,d0
00078522 121C                       		move.b	(a4)+,d1
00078524 4A35 0024                  		tst.b	$24(a5,d0.w)
00078528 6600                       		bne.s	loc_72E48
0007852A 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007852E                            
0007852E                            loc_72E48:
0007852E 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00078532 66DE                       		bne.s	loc_72E2C
00078534 544C                       		addq.w	#2,a4
00078536 4E75                       		rts	
00078538                            ; ===========================================================================
00078538                            
00078538                            loc_72E52:				; XREF: loc_72A64
00078538 7000                       		moveq	#0,d0
0007853A 102D 000D                  		move.b	$D(a5),d0
0007853E 5900                       		subq.b	#4,d0
00078540 2B8C 0000                  		move.l	a4,(a5,d0.w)
00078544 1B40 000D                  		move.b	d0,$D(a5)
00078548 60C8                       		bra.s	loc_72E2C
0007854A                            ; ===========================================================================
0007854A                            
0007854A                            loc_72E64:				; XREF: loc_72A64
0007854A 103C 0088                  		move.b	#$88,d0
0007854E 123C 000F                  		move.b	#$F,d1
00078552 4EBA F8C2                  		jsr	sub_7272E(pc)
00078556 103C 008C                  		move.b	#$8C,d0
0007855A 123C 000F                  		move.b	#$F,d1
0007855E 6000 F8B6                  		bra.w	sub_7272E
00078562                            ; ===========================================================================
00078562                            Kos_Z80:	
00078562                            		incbin	sound\z80_1.bin
00078612 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00078614 21                         		dc.b $21
00078615 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00078617                            		incbin	sound\z80_2.bin
00079CC2                            		even
00079CC2                            Music81:	incbin	sound\music81.bin
0007A40A                            		even
0007A40A                            Music82:	incbin	sound\music82.bin
0007AB72                            		even
0007AB72                            Music83:	incbin	sound\music83.bin
0007B2DA                            		even
0007B2DA                            Music84:	incbin	sound\music84.bin
0007B72A                            		even
0007B72A                            Music85:	incbin	sound\music85.bin
0007BB7A                            		even
0007BB7A                            Music86:	incbin	sound\music86.bin
0007BFCA                            		even
0007BFCA                            Music87:	incbin	sound\music87.bin
0007C428                            		even
0007C428                            Music88:	incbin	sound\music88.bin
0007C886                            		even
0007C886                            Music89:	incbin	sound\music89.bin
0007CCE4                            		even
0007CCE4                            Music8A:	incbin	sound\music8A.bin
0007D152                            		even
0007D152                            Music8B:	incbin	sound\music8B.bin
0007D5C0                            		even
0007D5C0                            Music8C:	incbin	sound\music8C.bin
0007DA2E                            		even
0007DA2E                            Music8D:	incbin	sound\music8D.bin
0007DE7A                            		even
0007DE7A                            Music8E:	incbin	sound\music8E.bin
0007E2C6                            		even
0007E2C6                            Music8F:	incbin	sound\music8F.bin
0007E712                            		even
0007E712                            Music90:	incbin	sound\music90.bin
0007F1FE                            		even
0007F1FE                            Music91:	incbin	sound\music91.bin
0007F74E                            		even
0007F74E                            Music92:	incbin	sound\music92.bin
0007FC9E                            		even
0007FC9E                            Music93:	incbin	sound\music93.bin
0007FEBA                            		even
0007FEBA                            ; Vladikcomper:	Here goes extra music slots to fit 3 different songs per zone
0007FEBA                            Music94:	incbin	sound\music94.bin
0008013A                            		even
0008013A                            Music95:	incbin	sound\music95.bin
000806BC                            		even	
000806BC                            Music96:	incbin	sound\music96.bin
0008078A                            		even
0008078A                            Music97:	incbin	sound\music97.bin
00080A24                            		even	
00080A24                            Music98:	incbin	sound\music98.bin
00080CA4                            		even	
00080CA4                            Music99:	incbin	sound\music99.bin
00080DFA                            		even	
00080DFA                            Music9A:	incbin	sound\music9A.bin
00080F24                            		even	
00080F24                            Music9B:	incbin	sound\music9B.bin
00081C04 00                         		even	
00081C04                            Music9C:	incbin	sound\music9C.bin
00081E20                            		even	
00081E20                            Music9D:	incbin	sound\music9D.bin
000830EE                            		even	
000830EE                            Music9E:	incbin	sound\music9E.bin
0008323E                            		even		
0008323E                            Music9F:	incbin	sound\music9F.bin
0008332C                            		even		
0008332C                            
0008332C                            ; ---------------------------------------------------------------------------
0008332C                            ; Sound	effect pointers
0008332C                            ; ---------------------------------------------------------------------------
0008332C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00083338 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00083344 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00083350 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0008335C 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00083368 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00083374 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00083380 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0008338C 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00083398 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000833A4 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000833B0 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000833BC 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000833C8 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000833D4 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000833E0 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000833EC 0000 0000                  		dc.l SoundD1
000833F0 0000 0000                  SoundD0Index:	dc.l SoundD0
000833F4                            SoundA0:	incbin	sound\soundA0.bin
0008340A                            		even
0008340A                            SoundA1:	incbin	sound\soundA1.bin
00083434                            		even
00083434                            SoundA2:	incbin	sound\soundA2.bin
00083454                            		even
00083454                            SoundA3:	incbin	sound\soundA3.bin
00083486                            		even
00083486                            SoundA4:	incbin	sound\soundA4.bin
000834BC                            		even
000834BC                            SoundA5:	incbin	sound\soundA5.bin
000834E8                            		even
000834E8                            SoundA6:	incbin	sound\soundA6.bin
00083518                            		even
00083518                            SoundA7:	incbin	sound\soundA7.bin
00083548                            		even
00083548                            SoundA8:	incbin	sound\soundA8.bin
0008357C                            		even
0008357C                            SoundA9:	incbin	sound\soundA9.bin
0008358E                            		even
0008358E                            SoundAA:	incbin	sound\soundAA.bin
000835D0                            		even
000835D0                            SoundAB:	incbin	sound\soundAB.bin
000835F0                            		even
000835F0                            SoundAC:	incbin	sound\soundAC.bin
00083624                            		even
00083624                            SoundAD:	incbin	sound\soundAD.bin
0008365A                            		even
0008365A                            SoundAE:	incbin	sound\soundAE.bin
000836A4                            		even
000836A4                            SoundAF:	incbin	sound\soundAF.bin
000836D2                            		even
000836D2                            SoundB0:	incbin	sound\soundB0.bin
00083704                            		even
00083704                            SoundB1:	incbin	sound\soundB1.bin
00083730                            		even
00083730                            SoundB2:	incbin	sound\soundB2.bin
00083780                            		even
00083780                            SoundB3:	incbin	sound\soundB3.bin
000837CA                            		even
000837CA                            SoundB4:	incbin	sound\soundB4.bin
00083826                            		even
00083826                            SoundB5:	incbin	sound\soundB5.bin
00083854                            		even
00083854                            SoundB6:	incbin	sound\soundB6.bin
00083872                            		even
00083872                            SoundB7:	incbin	sound\soundB7.bin
000838AE                            		even
000838AE                            SoundB8:	incbin	sound\soundB8.bin
000838CC                            		even
000838CC                            SoundB9:	incbin	sound\soundB9.bin
00083930                            		even
00083930                            SoundBA:	incbin	sound\soundBA.bin
00083958                            		even
00083958                            SoundBB:	incbin	sound\soundBB.bin
00083984                            		even
00083984                            SoundBC:	incbin	sound\soundBC.bin
000839C6                            		even
000839C6                            SoundBD:	incbin	sound\soundBD.bin
00083A1A                            		even
00083A1A                            SoundBE:	incbin	sound\soundBE.bin
00083A54                            		even
00083A54                            SoundBF:	incbin	sound\soundBF.bin
00083AC6                            		even
00083AC6                            SoundC0:	incbin	sound\soundC0.bin
00083AF4                            		even
00083AF4                            SoundC1:	incbin	sound\soundC1.bin
00083B2E                            		even
00083B2E                            SoundC2:	incbin	sound\soundC2.bin
00083B58                            		even
00083B58                            SoundC3:	incbin	sound\soundC3.bin
00083BD2                            		even
00083BD2                            SoundC4:	incbin	sound\soundC4.bin
00083BFA                            		even
00083BFA                            SoundC5:	incbin	sound\soundC5.bin
00083C62                            		even
00083C62                            SoundC6:	incbin	sound\soundC6.bin
00083CA4                            		even
00083CA4                            SoundC7:	incbin	sound\soundC7.bin
00083CD2                            		even
00083CD2                            SoundC8:	incbin	sound\soundC8.bin
00083CE4                            		even
00083CE4                            SoundC9:	incbin	sound\soundC9.bin
00083D12                            		even
00083D12                            SoundCA:	incbin	sound\soundCA.bin
00083D40                            		even
00083D40                            SoundCB:	incbin	sound\soundCB.bin
00083D8C                            		even
00083D8C                            SoundCC:	incbin	sound\soundCC.bin
00083DC6                            		even
00083DC6                            SoundCD:	incbin	sound\soundCD.bin
00083DD4                            		even
00083DD4                            SoundCE:	incbin	sound\soundCE.bin
00083E02                            		even
00083E02                            SoundCF:	incbin	sound\soundCF.bin
00083E3A                            		even
00083E3A                            SoundD0:	incbin	sound\soundD0.bin
00083E74                            		even
00083E74                            SoundD1:	incbin	sound\soundD1.bin
00083EB0                            		even
00083EB0                            SegaPCM:	incbin	sound\segapcm.bin
000898DC                            SegaPCM_end:	even
000898DC                            Art_Dust	incbin	artunc\spindust.bin
0008B21C                            		even
0008B21C                            ART_SEGA: 	incbin "NEWSEGASCREEN/SEGAARTNEM.bin"
0008EE1C                            		even
0008EE1C                            MAPS_SEGA: 	incbin "NEWSEGASCREEN/SEGAMAPSE.bin"
0008EE58                            		even
0008EE58                            Pal_SEGANew: incbin "NEWSEGASCREEN/SEGAPAL.bin"
0008EED8                            		even
0008EED8                            ; end of 'ROM'
0008EED8                            EndOfRom:
0008EED8                            
0008EED8                            
